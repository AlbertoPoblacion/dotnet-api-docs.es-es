<Type Name="WebPartManager" FullName="System.Web.UI.WebControls.WebParts.WebPartManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6f5a41f1cc586a7365118c9cc1c24fdfb3cee6f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36386614" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebPartManager : System.Web.UI.Control, System.Web.UI.INamingContainer, System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebPartManager extends System.Web.UI.Control implements class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.WebParts.IPersonalizable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.WebPartManager" />
  <TypeSignature Language="VB.NET" Value="Public Class WebPartManager&#xA;Inherits Control&#xA;Implements INamingContainer, IPersonalizable" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebPartManager : System::Web::UI::Control, System::Web::UI::INamingContainer, System::Web::UI::WebControls::WebParts::IPersonalizable" />
  <TypeSignature Language="F#" Value="type WebPartManager = class&#xA;    inherit Control&#xA;    interface INamingContainer&#xA;    interface IPersonalizable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.WebParts.IPersonalizable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.WebParts.WebPartManagerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ViewStateModeById</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Serves as the central class of the Web Parts control set, managing all the Web Parts controls, functionality, and events that occur on a Web page.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control actúa como el concentrador o centro de control de una aplicación de elementos Web. Debe haber una y solo una--<xref:System.Web.UI.WebControls.WebParts.WebPartManager> instancia del control en cada página que utiliza controles de elementos Web. Al igual que con la mayoría de los aspectos de las aplicaciones de elementos Web, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control solo funciona con los usuarios autenticados. Además, su funcionalidad se basa casi por completo con controles de servidor que residen en zonas de elementos Web que heredan de la <xref:System.Web.UI.WebControls.WebParts.WebZone> clase. Los controles de servidor que residen en una página fuera de estas zonas pueden tener muy poca funcionalidad de elementos Web o la interacción con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 Como el concentrador para la funcionalidad de elementos Web en una página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control lleva a cabo los tipos de tareas que se describen en la tabla siguiente.  
  
|Categoría de tarea|Lo que hace el control|  
|-------------------|---------------------------|  
|Seguimiento de controles de elementos Web|Realiza un seguimiento de muchos tipos diferentes de controles en una página que proporcionan características de elementos Web, incluidos los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, conexiones, zonas y otros usuarios.|  
|Agregar y quitar controles de elementos Web|Proporciona los métodos para agregar, eliminar y cerrar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de una página.|  
|Administrar conexiones|Crea conexiones entre los controles y supervisa las conexiones, así como los procesos de adición y eliminación.|  
|Personalizar las páginas y controles|Permite a los usuarios mover controles a ubicaciones diferentes en una página e inicia las vistas en el que los usuarios pueden editar la apariencia, propiedades y comportamiento de los controles. Mantiene la configuración de personalización específicos del usuario en cada página.|  
|Alternar entre diferentes vistas de página|Se activa una página entre diferentes vistas especializadas de la página, para que los usuarios pueden realizar ciertas tareas, como cambiar el diseño o controles de edición.|  
|Generar eventos de ciclo de vida de elementos Web|Define, genera y permite a los desarrolladores controlar los eventos de ciclo de vida de los controles de elementos Web, como cuando los controles se agregan, movido, eliminado o conectados.|  
|Habilitar la importación y exportación de controles|Exporta secuencias XML que contienen el estado de las propiedades de <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y permite a los usuarios importar los archivos para su comodidad en personalizan controles complejos en otras páginas o sitios.|  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase tiene un gran conjunto de propiedades. Coherente con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> función de seguimiento de otros controles, tiene un número de propiedades que hacen referencia a colecciones de controles de elementos Web u otros objetos especiales de elementos Web. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedades son todas las colecciones utilizadas por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para sus dispositivos de seguimiento y otras tareas de administración.  
  
 Otro grupo de propiedades contiene advertencias personalizables que se aplican en determinados escenarios que se producen en una aplicación de elementos Web. Puede tratarse de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A>y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> propiedades.  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase invalida algunas de sus propiedades heredadas base, que se usan por muchos controles de servidor Web. Puede tratarse de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedades.  
  
 Por último, hay un grupo de propiedades útiles para tener acceso al estado actual de la aplicación. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad indica el modo de presentación actual que está en la página. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> propiedad indica si se permite un control para representar el script de cliente, que es pertinente en situaciones donde los usuarios pueden utilizar exploradores con distintas capacidades o tener secuencias de comandos está desactivada. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad es útil para hacer referencia a una clase de utilidad que contiene las llamadas a un número de métodos importantes de elementos Web que se usan en casos de extensibilidad. Ocultando las llamadas a estos métodos en una clase independiente (la <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> clase), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> se simplifica la API de la clase. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad proporciona acceso a los objetos de personalización que almacenar la configuración de personalización de los usuarios y conservan los datos en un almacenamiento permanente. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad indica que <xref:System.Web.UI.WebControls.WebParts.WebPart> control en una página está seleccionado actualmente por el usuario o la aplicación. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad indica si los datos de personalización personalizados en un <xref:System.Web.UI.WebControls.WebParts.WebPart> control ha cambiado.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control contiene cinco modos de presentación integrados o vistas de una página Web. Los desarrolladores pueden extender esta característica, crear modos de presentación personalizados mediante la extensión de tipos como el <xref:System.Web.UI.WebControls.WebParts.WebZone> clase o la <xref:System.Web.UI.WebControls.WebParts.ToolZone> clase. Los usuarios pueden cambiar una página en los distintos modos de presentación, siempre que el tipo adecuado de controles que corresponden a un modo de presentación determinado están presentes en una página.  
  
> [!NOTE]
>  Es posible extender esta característica para que los usuarios pueden cambiar en un modo de presentación personalizado sin necesidad de una zona correspondiente en la página. Sin embargo, el comportamiento predeterminado es que los modos de presentación se corresponden con zonas.  
  
 Los modos de presentación estándar se representan mediante campos públicos en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase. En la tabla siguiente se resume los campos y los modos de presentación hacen referencia. El modo de presentación actual de una página, tal y como se mencionó anteriormente, se siempre hace referencia en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad y el conjunto de modos de presentación que es posible en una página concreta, dada el tipo de las zonas que están presentes en la página, se encuentra en la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
|Campo|Mostrar detalles de modo|  
|-----------|--------------------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>|La vista de usuario normal de una página Web; el valor predeterminado y modo de presentación más comunes.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>|La vista en la que los usuarios pueden reorganizar o eliminar los controles para cambiar el diseño de página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>|La vista en el que una interfaz de usuario (UI) de edición se vuelve visible; los usuarios pueden editar la apariencia, propiedades y comportamiento de los controles que están visibles en el modo de exploración normal.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>|La vista en la que se hace visible; un catálogo de la interfaz de usuario los usuarios pueden agregar controles a una página de catálogos de controles disponibles.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>|La vista en el que una interfaz de usuario de la conexión se vuelve visible; los usuarios pueden conectar, administrar o desconectar las conexiones entre los controles.|  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control también contiene un número de eventos que son fundamentales en el ciclo de vida de las páginas de elementos Web y los controles. Estos eventos proporcionan un control preciso sobre el comportamiento de controles de elementos Web mediante programación. Mayoría de los métodos pertenecen directamente a <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (u otros controles de servidor o de usuario que se colocan en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas para que puedan comportarse como <xref:System.Web.UI.WebControls.WebParts.WebPart> controles). Sin embargo, algunos eventos pertenecen al estado de la página o las conexiones en la página. En la tabla siguiente se enumera los eventos disponibles y se resume sus propósitos.  
  
> [!NOTE]
>  En todos los casos en la tabla siguiente, la palabra "control" hace referencia a un <xref:System.Web.UI.WebControls.WebParts.WebPart> control o cualquier control de servidor que se encuentra en una zona y se ajusta con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto en tiempo de ejecución.  
  
|evento|Descripción|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>|Se produce justo antes de que se agrega un control a una página para comprobar que está autorizado.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>|Se produce después de que se han activado todas las conexiones en una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating>|Se produce justo antes del proceso de activación de todas las conexiones en una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged>|Se produce después de que ha cambiado el modo de presentación actual de una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging>|Se produce justo antes del proceso de cambiar el modo de presentación de una página.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged>|Se produce después de que se ha cancelado la selección de un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>|Se produce justo antes del proceso de cancelar la selección de un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded>|Se produce después de agregar un control a una zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding>|Se produce justo antes del proceso de agregar un control a una zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed>|Se produce después de que un control se ha cerrado (se quitan de una página).|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>|Se produce justo antes del proceso de cierre de un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted>|Se produce después de una instancia de un control dinámico (uno que se creó mediante programación o agregado desde un catálogo) se ha eliminado permanentemente.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting>|Se produce justo antes del proceso de la eliminación de un control dinámico.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>|Se produce después de mover un control dentro de su zona o a otra zona.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>|Se produce justo antes del proceso de mover un control.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected>|Se produce después de dos controles seleccionados para la participación en una conexión han establecido la conexión.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting>|Se produce justo antes del proceso de conectar dos controles.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected>|Se produce después de haberse desconectados dos controles conectados.|  
|<xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>|Se produce justo antes del proceso de desconectar dos controles.|  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene varios métodos para administrar páginas de elementos Web. Un conjunto grande de los métodos, no se muestran aquí son métodos cuyos nombres toman la forma on*EventName*. Estos métodos suelen generar su evento asociado y proporcionan el evento con un controlador de tipo <xref:System.Web.UI.WebControls.WebParts.WebPartEventHandler>. La mayoría de estos métodos puede reemplazarse por los desarrolladores que heredan de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase. Además, los desarrolladores de páginas pueden proporcionar controladores personalizados para los eventos asociados a estos métodos. Por ejemplo, en el caso de los <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> eventos, un desarrollador de páginas podría agregar un `OnWebPartAdded` atribuir a la `<asp:webpartmanager>` elemento en el marcado de una página Web y, a continuación, asigne el nombre de un método personalizado para el atributo para proporcionar un control personalizado para el evento. El atributo corresponde a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> método y este patrón básico de funciona para la mayoría de los eventos de elementos Web y sus métodos asociados de control de eventos.  
  
 Además, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene métodos concretos para la tarea de administrar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles (y los controles de servidor o de usuario usados como <xref:System.Web.UI.WebControls.WebParts.WebPart> controles). Estos métodos incluyen <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A>.  
  
 Está especializado en otro conjunto de métodos para las conexiones. Esto incluye los métodos como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.  
  
 Por último, algunas <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos centran en la funcionalidad de personalización. Puede tratarse de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A>.  
  
 Para obtener más información sobre otros <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos que son accesibles a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad, consulte la documentación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo y de programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El control de usuario tiene un control de lista desplegable que muestra los posibles modos de presentación en una página, dados los controles de elementos Web que están presentes en la página. En la página Web de este ejemplo de código, se declara este control de usuario justo debajo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> elemento del marcado de la página y no hay un `Register` directiva cerca de la parte superior de la página Web para registrar el control. Para obtener más información acerca de modos de presentación y una descripción del código fuente de este control, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/DisplayModeMenuVB.ascx#6)]  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. La página también contiene código en línea que controla los eventos relacionados con la conexión para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control; puede ver el efecto de este código como conectar y desconectar controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente de los controles. Tenga en cuenta que hay una interfaz denominada `IZipCode`, y esta interfaz se implementa en el `ZipCodeWebPart` clase. Esta clase tiene un método de devolución de llamada especial denominado `ProvideIZipCode` que actúa como un proveedor. El otro tipo, denominado `WeatherWebPart`, también se implementa con un método especial denominado `GetIZipCode`, lo que permite el control para que actúe como un consumidor del otro control.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código se supone que ha compilado el código fuente en un ensamblado y el `Register` (directiva) en la página Web hace referencia al nombre de ensamblado. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_SimpleConnection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_SimpleConnection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/ZipCodeComponent.vb#2)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **conectar** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre los controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **conectar**. Después de que aparezca la interfaz de usuario de conexión, haga clic en el **crear una conexión a un consumidor** vínculo. Aparece una celda que tiene un control de lista desplegable. Seleccione **Control de tiempo** en la lista desplegable y, a continuación, haga clic en **conectar** para completar la conexión de los dos controles. Haga clic en **cerrar**y, a continuación, use la **modo de presentación** la lista desplegable para devolver la página al modo de exploración normal. Puede escribir un código postal y el control de consumidor se actualizará con el valor que especifique. Dado que la `ZipCode` propiedad se marca con el `Personalizable` atributo en el código fuente, este valor de propiedad se conservará en las sesiones del explorador, evitando así el valor especificado por un usuario. Un control consumidor más sofisticado podría tomar la información de código postal, buscar información meteorológica según el código y mostrar a un usuario.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>El <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control está diseñado para ser extendidos. Porque es para un punto fundamental de las aplicaciones de elementos Web, si desea extender algún tipo específico o control en el conjunto de controles de elementos Web, en muchos casos también debe extender la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> de la clase, porque es probable que tenga alguna propiedad o método que es necesario para poder  el tipo personalizado funcionan en el contexto de una aplicación de elementos Web. Documentación de referencia de los elementos Web (vea <see cref="N:System.Web.UI.WebControls.WebParts" />), al hablar sobre cómo ampliar un elementos Web de tipo, con frecuencia menciones ¿qué debe hacerse para ampliar la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase también o muestra cómo extender en un ejemplo de código.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebPartManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebPartManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.%23ctor%2A> constructor inicializa varias variables importantes utilizadas por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Una asignación que afecta directamente a todas las páginas de elementos Web es el hecho de que el modo de presentación de página predeterminada se establece en modo de exploración (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateConnections">
      <MemberSignature Language="C#" Value="protected virtual void ActivateConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ActivateConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ActivateConnections ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ActivateConnections();" />
      <MemberSignature Language="F#" Value="abstract member ActivateConnections : unit -&gt; unit&#xA;override this.ActivateConnections : unit -&gt; unit" Usage="webPartManager.ActivateConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes active all connections on a Web page that are currently inactive.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> método se llama en cada solicitud a una página para activar las conexiones existentes entre <xref:System.Web.UI.WebControls.WebParts.WebPart> y otros controles de servidor que residen en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas. En algunos casos, para la instancia si se produce un conflicto en las conexiones que se active, este método a su vez llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método para finalizar la conexión problemática. Durante el proceso de desconexión del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento se desencadena. Normalmente los desarrolladores pueden cancelar este evento, pero en el caso donde éste es un conflicto entre las conexiones no se puede cancelar, porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control necesita resolver el conflicto con el fin de finalizar el proceso de activación de conexiones. Para obtener más información, vea <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart AddWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.WebPart AddWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int32 zoneIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::WebPart ^ AddWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Web::UI::WebControls::WebParts::WebPartZoneBase ^ zone, int zoneIndex);" />
      <MemberSignature Language="F#" Value="member this.AddWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.AddWebPart (webPart, zone, zoneIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="zone" Type="System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
        <Parameter Name="zoneIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (or server or user control) to be added to a Web page or opened on a page.</param>
        <param name="zone">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> that <c>webPart</c> is being added to.</param>
        <param name="zoneIndex">An integer that represents the ordinal position that <c>webPart</c> occupies in <c>zone</c>, relative to other controls in <c>zone</c>.</param>
        <summary>Provides the standard programmatic method for adding <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls to a Web page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that was added to the page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método se utiliza para agregar nuevos dinámicos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles a una página y para volver a abrir controles estáticos o dinámicos que anteriormente se han cerrado en una página. Cuando se llama al método para agregar un nuevo control, realmente crea una copia del control al que hace referencia en el `webPart` parámetro. Se genera un nuevo identificador para la copia del control, por lo que deben hacer referencia a los desarrolladores la <xref:System.Web.UI.WebControls.WebParts.WebPart> control devuelto desde el método para obtener el nuevo valor de identificador. Cuando se llama al método para volver a abrir un control previamente cerrado, devuelve una referencia directa al control al que hace referencia el `webPart` parámetro.  
  
> [!IMPORTANT]
>  Debe utilizar siempre el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método, en lugar de la <xref:System.Web.UI.ControlCollection.Add%2A> método de la colección de controles que se hace referencia a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A?displayProperty=nameWithType> propiedad para agregar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles mediante programación a la página, porque usando el <xref:System.Web.UI.ControlCollection.Add%2A> método produce una excepción. Para agregar un control que no es un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (en otras palabras, un control de servidor que se ajustará con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control en tiempo de ejecución), primero debe llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método para crear el control y, a continuación, llame a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método para agregar el control. Para ver una demostración de este enfoque, vea la sección ejemplo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método para agregar un control de servidor mediante programación a una página. El marcado de la página contiene vacío `<asp:webpartzone>` elemento y un `<asp:webpartmanager>` elemento. La primera vez el **Agregar calendario** se hace clic en botón, el código en caso de que crea el controlador de un <xref:System.Web.UI.WebControls.Calendar> controlar y lo agrega a una zona como un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto, llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.  \- or -  <paramref name="zone" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="zone" /> is not registered in the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control's collection of zones.  \- or -  <paramref name="webPart" /> is already in <paramref name="zone" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="zoneIndex" /> is less than zero.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AuthorizeWebPart">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler AuthorizeWebPart" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AuthorizeWebPart As WebPartAuthorizationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartAuthorizationEventHandler ^ AuthorizeWebPart;" />
      <MemberSignature Language="F#" Value="member this.AuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler " Usage="member this.AuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the <see cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" /> method is called to determine whether a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control can be added to a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento se produce cada vez que un <xref:System.Web.UI.WebControls.WebParts.WebPart> control se agrega a una página. Hay una serie de escenarios comunes que se puede agregar un control a una página. Para obtener una descripción completa de estos, vea la sección Comentarios para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método. Cuando se agrega un control, debe comprobarse para ver si su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> se ha establecido la propiedad y, si es así, si el control está autorizado para agregarse a la página.  
  
 Los desarrolladores pueden crear controladores de eventos para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos, para proporcionar filtrado para los controles. Si un control <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valor de propiedad no cumple los criterios en el código de controlador de eventos, el control no se agrega a la página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer un controlador de eventos personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento, que automáticamente reemplaza el valor predeterminado <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método.  
  
 El código en el `mgr1_AuthorizeWebPart` método comprueba si los controles de la página tienen sus respectivas <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades establecidas en `user` y, si es así, devuelve `true`, lo que significa que serán autorizados y se agrega a la página. Se supone que el valor predeterminado consiste en permitir a los usuarios ver los controles que tengan una página en el ámbito de personalización de usuario. Sin embargo, tenga en cuenta que en el ejemplo de uno de los controles tiene su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valor de la propiedad se establece en `admin`. Los desarrolladores podrían colocar este filtro en un control especializado que se diseñó para que solo los usuarios administrativos ver. Este control se producirá un error en la comprobación de autorización durante la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos y no se mostrará. Tenga en cuenta que los controles que no tienen establecida la propiedad también se muestran las; se supone que no son parte de un escenario de filtrado porque sus <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades no están establecidas.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/CS/AuthorizeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/VB/AuthorizeWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" />
      </Docs>
    </Member>
    <Member MemberName="AvailableTransformers">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.TransformerTypeCollection AvailableTransformers" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AvailableTransformers As TransformerTypeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ AvailableTransformers { System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AvailableTransformers : System.Web.UI.WebControls.WebParts.TransformerTypeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.TransformerTypeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> objects that are available for use in creating Web Parts connections between server controls.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection" /> que contiene un conjunto de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad utiliza la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers%2A> método para crear la colección. De forma predeterminada, los convertidores de él disponibles lee desde el archivo de configuración de aplicación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWebPartConnecting">
      <MemberSignature Language="C#" Value="public virtual void BeginWebPartConnecting (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginWebPartConnecting(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginWebPartConnecting(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member BeginWebPartConnecting : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.BeginWebPartConnecting : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.BeginWebPartConnecting webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The control for which the connection is being formed.</param>
        <summary>Starts the process of connecting two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A> método existe para que el proceso de formar conexiones entre los controles puede realizarse en fases distintas, lo que proporciona a los desarrolladores más control sobre el proceso de conexión. El método realiza un conjunto de comprobaciones iniciales para asegurarse de que `webPart` está en un estado donde legítimamente se puede formar una conexión. Si `webPart` pasa todas las comprobaciones, a continuación, se establece como el control seleccionado actualmente (vea la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad), y puede continuar el proceso de conexión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current display mode on the page is not <see cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is closed.  \- or -  <paramref name="webPart" /> is not part of the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.  -or -  <paramref name="webPart" /> is equal to the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> control.</exception>
        <block subset="none" type="overrides">
          <para>Los desarrolladores que necesitan para ampliar el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control podría desear invalidar este método en una clase derivada. Un enfoque sería llamar al método base y, a continuación, agregar un controlador personalizado adicional; También puede personalizar completamente el proceso de inicio de una conexión entre los controles. Por ejemplo, puede comprobar que ciertos datos están disponibles antes de crear la conexión.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting" />
      </Docs>
    </Member>
    <Member MemberName="BeginWebPartEditing">
      <MemberSignature Language="C#" Value="public virtual void BeginWebPartEditing (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginWebPartEditing(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginWebPartEditing(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member BeginWebPartEditing : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.BeginWebPartEditing : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.BeginWebPartEditing webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The control to be edited.</param>
        <summary>Starts the process of editing a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> método existe para que el proceso de controles de edición puede realizarse en fases distintas, lo que proporciona a los desarrolladores más control sobre el proceso. El método realiza un conjunto de comprobaciones iniciales para asegurarse de que `webPart` está en un estado en el que se puede editar. Si `webPart` pasa todas las comprobaciones, a continuación, se establece como el control seleccionado actualmente (vea la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad), y puede continuar el proceso de edición.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current display mode on the page is not <see cref="F:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is closed.  \- or -  <paramref name="webPart" /> is not part of the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.  -or -  <paramref name="webPart" /> is equal to the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> control.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing" />
      </Docs>
    </Member>
    <Member MemberName="BrowseDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode BrowseDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BrowseDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ BrowseDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable BrowseDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the default display mode for pages that contain Web Parts controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Dado que se trata de un objeto estático, puede hacer referencia a él directamente desde el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de crear una instancia del control.  
  
 Cuando una página que contiene los elementos Web controla la carga por primera vez, se encuentra en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modo de exploración) de forma predeterminada. Cuando los usuarios simplemente están explorando como lo harían en una página Web normal, la página permanece en modo de exploración. Si los usuarios desean personalizar el diseño, controles, apariencia o comportamiento de una página, debe cambiar la página en uno de los modos de presentación especializados disponibles a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos, que en este caso son exploración y diseño. Tenga en cuenta que, en la `Page_PreRender` /método siguiente, el código comprueba si la actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>. Si es así, `Label1` serán visibles y si no es así, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_BrowseDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_BrowseDisplayMode/CS/wpmgrBrowseDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_BrowseDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_BrowseDisplayMode/VB/wpmgrBrowseDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta la etiqueta en la página que indica que está en modo de exploración. Utilice el control de lista desplegable para cambiar la página al modo de diseño. Tenga en cuenta que, debido al código en el `Page_PreRender` método, la etiqueta ahora está oculto.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CanConnectWebParts">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Checks the <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls that will be participating in a connection to determine whether they are capable of being connected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método se utiliza para determinar si dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles se pueden conectar. El método se utiliza normalmente como una comprobación condicional antes de llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método comprueba una serie de criterios que deben cumplirse antes de que dos controles pueden formar una conexión. En la lista siguiente se resume los criterios primarios para establecer una conexión. Si se cumplen todos estos criterios (más algunas condiciones internas adicionales), el método devuelve `true`, lo que significa que se pueden conectar los controles:  
  
-   Los controles de proveedor y el consumidor no pueden ser `null`, y deben estar incluidos en la colección de controles que se hace referencia a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
-   El proveedor y el consumidor no pueden ser el mismo control. Dicho de otro modo un <xref:System.Web.UI.WebControls.WebParts.WebPart> control no se puede conectar a sí mismo.  
  
-   El <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objetos (puntos de conexión) para el proveedor y el consumidor no pueden ser `null`.  
  
-   No se puede cerrar el proveedor y el consumidor (ningún control <xref:System.Web.UI.WebControls.WebParts.WebPart.IsClosed%2A> propiedad puede ser `true`).  
  
-   El <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> propiedad del control de punto de conexión debe coincidir con el tipo del control del consumidor y proveedor.  
  
-   Los puntos de conexión deben estar activados (su <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A> métodos deben devolver `true`).  
  
-   No se debe intentar cada punto de conexión formar más conexiones que lo que se especifique en su propio <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> propiedad.  
  
-   Si un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto (la clase transformer) es necesario que conecte controles incompatibles, no puede ser `null`. Sin embargo, si los controles ya son compatibles, el transformador debe ser `null`.  
  
-   Debe hacer referencia a la clase transformer (si se utiliza) en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers%2A> colección.  
  
-   Transformer (si se utiliza) debe tener interfaces que son compatibles con el proveedor y el consumidor para que pueden transformar datos entre los dos controles. Las interfaces secundarias del consumidor y proveedor también deben ser compatibles.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
      </Docs>
    </MemberGroup>
    <Member MemberName="CanConnectWebParts">
      <MemberSignature Language="C#" Value="public bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint);" />
      <MemberSignature Language="F#" Value="member this.CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint -&gt; bool" Usage="webPartManager.CanConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="provider">The control that provides data to <c>consumer</c> when the controls are connected.</param>
        <param name="providerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that enables <c>provider</c> to participate in a connection.</param>
        <param name="consumer">The control that receives data from <c>provider</c> when the controls are connected.</param>
        <param name="consumerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that acts as a callback method so that <c>consumer</c> can participate in a connection.</param>
        <summary>Checks the <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls that will be participating in a connection to determine whether they are capable of being connected, when the consumer and provider controls have compatible interfaces and a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> object is not needed.</summary>
        <returns>A Boolean value that indicates whether <paramref name="provider" /> and <paramref name="consumer" /> can be connected.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza para conectar `provider` y `consumer` cuando ambos controles tienen conexión compatible punto tipos, por lo que un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto no es necesaria. Puede usar este método para comprobar que se pueden conectar dos controles antes de llamar a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> para crear una conexión mediante programación.  
  
 Esta sobrecarga utiliza la misma implementación que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> sobrecarga del método, con la única excepción de que esta sobrecarga no requiere un transformador.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar este método.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar un `<asp:webpartmanager>` elemento y un código de control de eventos que crea una conexión con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si la conexión puede realizarse y, si es así, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A>propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente de los controles. Contiene una interfaz y dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, uno que actúa como un proveedor y el otro como un consumidor. Dado que tienen puntos de conexión compatibles (ambos reconocen la `IZipCode` interfaz), un transformador no es necesaria para realizar la conexión. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_StaticConnections#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_StaticConnections#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/ZipCodeComponent.vb#2)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **conectar** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre los controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **conectar**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConnectWebParts">
      <MemberSignature Language="C#" Value="public virtual bool CanConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPartTransformer transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPartTransformer ^ transformer);" />
      <MemberSignature Language="F#" Value="abstract member CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; bool&#xA;override this.CanConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; bool" Usage="webPartManager.CanConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <Parameter Name="transformer" Type="System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Parameters>
      <Docs>
        <param name="provider">The control that provides data to <c>consumer</c> when the controls are connected.</param>
        <param name="providerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that acts as a callback method so that <c>provider</c> can participate in a connection.</param>
        <param name="consumer">The control that receives data from <c>provider</c> when the controls are connected.</param>
        <param name="consumerConnectionPoint">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> that acts as a callback method so that <c>consumer</c> can participate in a connection.</param>
        <param name="transformer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> that enables an incompatible <c>provider</c> and <c>consumer</c> to connect.</param>
        <summary>Checks the <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls that will be participating in a connection to determine whether they are capable of being connected, and uses a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> object to create the connection between an incompatible consumer and provider.</summary>
        <returns>A Boolean value that indicates whether <paramref name="provider" /> and <paramref name="consumer" /> can form a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza para conectar `provider` y `consumer` cuando ambos controles tienen conexión incompatibles punto tipos, por lo que un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto es necesario. Puede usar este método para comprobar que se pueden conectar dos controles antes de llamar a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> para crear una conexión mediante programación.  
  
 Esta sobrecarga utiliza la misma implementación que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29> sobrecarga del método, con la única excepción de que esta sobrecarga requiere un transformador.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode CatalogDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CatalogDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ CatalogDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable CatalogDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode used for adding server controls from a catalog of controls to a Web page. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Dado que se trata de un objeto estático, puede hacer referencia a él directamente desde el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de crear una instancia del control.  
  
 Cuando los usuarios desean agregar controles a una página, si hay disponible un catálogo de controles de servidor, estos equipos pueden cambiar la página a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> (modo de catálogo), y aparece la interfaz de usuario (UI) de catálogo. La interfaz de usuario para un catálogo de elementos Web proporcionan un <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase> control de la zona. Los programadores agregan esta zona a la página en tiempo de diseño y, a continuación, agregue controles de servidor a la zona, por lo que los usuarios podrán agregar estos controles a sus páginas en tiempo de ejecución. Después de que el desarrollador ha agregado estos controles, el modo de catálogo se convierte en un modo de presentación admitidos en la página porque existen los controles necesarios habilitar el modo de catálogo.  
  
 Cuando un usuario cambia una página de catálogo modo, la zona y todos los controles de servidor que se agregaron a la que se hacen visibles y el usuario puede seleccionar los controles desde el catálogo para agregar a la página o quitar controles de la página. Después de han agregado los controles a la página, que aparecen en el modo de exploración normal y se actualiza la página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos para la página, que en este caso son exploración, diseño y catálogo. El modo de catálogo está disponible porque el `<asp:CatalogZone>` elemento y sus elementos secundarios en la página Web. Tenga en cuenta que, en la `Page_PreRender` /método siguiente, el código comprueba si la actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>. Si es así, `Label1` serán visibles y si no es así, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CatalogDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CatalogDisplayMode/CS/wpmgrCatalogDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CatalogDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CatalogDisplayMode/VB/wpmgrCatalogDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta que la etiqueta en la página está oculta. Utilice el control de lista desplegable para cambiar la página al modo de catálogo. Tenga en cuenta que, debido al código en el `Page_PreRender` método ahora está visible la etiqueta. Puede seleccionar el control en el catálogo y agregarlo a cualquiera de las dos zonas en la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="CheckRenderClientScript">
      <MemberSignature Language="C#" Value="protected virtual bool CheckRenderClientScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckRenderClientScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CheckRenderClientScript" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CheckRenderClientScript () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckRenderClientScript();" />
      <MemberSignature Language="F#" Value="abstract member CheckRenderClientScript : unit -&gt; bool&#xA;override this.CheckRenderClientScript : unit -&gt; bool" Usage="webPartManager.CheckRenderClientScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks the capabilities of the browser making the request, and the value of the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" /> property, to determine whether to render client script.</summary>
        <returns>A Boolean value that indicates whether to render client script.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      </Docs>
    </Member>
    <Member MemberName="CloseProviderWarning">
      <MemberSignature Language="C#" Value="public virtual string CloseProviderWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseProviderWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CloseProviderWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CloseProviderWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CloseProviderWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a warning that is displayed when a user closes a control that is acting as a provider to other controls in a connection.</summary>
        <value>Una cadena que contiene el mensaje de advertencia. El valor predeterminado es un mensaje específico de la referencia cultural proporcionado por .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un usuario cierra un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, normalmente no se muestra ningún mensaje. Para obtener más información sobre lo que significa para cerrar un control, vea el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método.  
  
 Sin embargo, cuando un control está conectado a otro control y está actuando como un proveedor de datos para el otro control, se muestra un mensaje de advertencia predeterminado cuando un usuario intenta cerrar el control. El mensaje indica que los usuarios que un control de proveedor está a punto de cerrar, lo que significa que los controles se conecta a este proveedor como consumidores ya no tendrá ningún dato para consumir. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> propiedad permite a los desarrolladores personalizar el mensaje de advertencia que se muestra al usuario.  
  
 Si un desarrollador de páginas asigna un valor de cadena vacío ni ser nulo a esta propiedad, no se mostrará ningún cuadro de mensaje de advertencia cuando un usuario cierra un <xref:System.Web.UI.WebControls.WebParts.WebPart> control que es un proveedor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> propiedad que se va a mostrar una advertencia personalizada a los usuarios.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Una página Web que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar y un `<asp:webpartmanager>` elemento.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El siguiente código contiene solo la parte de la página Web del ejemplo. También necesitará el control de usuario personalizado y el código fuente de los controles personalizados mencionados anteriormente. Obtener estos dos elementos de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase.  
  
 El siguiente código de página Web muestra cómo asignar un mensaje de advertencia personalizado a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> propiedad en el marcado declarativo en la `<asp:webpartmanager>` elemento.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CloseProviderWarning#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseProviderWarning/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CloseProviderWarning#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseProviderWarning/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **conectar** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre los controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **conectar**. Después de que aparezca la interfaz de usuario (UI) de conexión, haga clic en el **crear una conexión a un consumidor** vínculo. Aparece una celda que tiene un control de lista desplegable. Seleccione **Control de tiempo** en la lista desplegable y haga clic en **conectar** para completar la conexión de los dos controles. Haga clic en **cerrar**y, a continuación, use la **modo de presentación** la lista desplegable para devolver la página al modo de exploración normal. Por último, haga clic en el menú de verbos para el **código postal** control (que es el control de proveedor en este caso) y seleccione **cerrar**. Un mensaje personalizado que se asigna a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseProviderWarning%2A> se muestra la propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseWebPart">
      <MemberSignature Language="C#" Value="public void CloseWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CloseWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CloseWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.CloseWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.CloseWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control that is being closed in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" />.</param>
        <summary>Closes a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control in such a way that it is not rendered on a Web page, but can be reopened.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método quita un <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de otro servidor para que no se representa en la página Web que se encontraba originalmente. El control cerrado se agrega a un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> objeto, que mantiene una referencia al control cerrado y permite que el control debe restaurarse en la página. Un cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> control sigue apareciendo en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
 Cerrar un control es diferente de eliminarlo. Los controles cerrados siguen estando disponibles para restaurarse a una página, pero una instancia del control eliminado se quita permanentemente y nunca se puede restaurar. Independientemente de si un <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor es estático (declarado en el marcado de una página) o dinámico (se agrega a la página mediante programación o por un usuario de un catálogo de elementos Web), puede cerrar y volver a abrir en una página.  
  
 Normalmente, los usuarios pueden cerrar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control haciendo clic en el menú de verbos y seleccionando el verbo cerrar. Un control también se puede cerrar llamando directamente el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método y pasar una referencia a `webPart`.  
  
 En una página donde <xref:System.Web.UI.WebControls.WebParts.WebPart> controles se han cerrado, si un desarrollador ha declarado un `<asp:catalogzone>` elemento y en él se agrega un `<asp:pagecatalogpart>` elemento, proporciona una interfaz de usuario simple (UI) para que los usuarios restauren los controles cerrados a la página en tiempo de ejecución. Los usuarios pueden cambiar la página en modo de presentación de catálogo y los controles cerrados aparecerán en el catálogo de la página. Los usuarios pueden seleccionar los controles cerrados y agregarlos a la página en cualquier posición deseen y, a continuación, los controles seleccionados se restaura en la página y se representan como normales.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> se llama al método, genera varios eventos: <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> (si hay varios controles), y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> (si hay controles conectados). Normalmente los desarrolladores pueden cancelar estos eventos, pero en algunos casos no es posible cancelarlos. Para obtener más información, consulte la documentación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing>, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging>, y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A>.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación de página.  
  
-   Un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
-   Una página Web.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo de código es personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo utiliza el enfoque de compilación dinámica; Por tanto, no hay ningún `Assembly` de atributo en el `Register` la directiva para este control en la parte superior de la página Web. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_CloseWebPart#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_WebPartManager_CloseWebPart#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/VB/textdisplaywebpart.vb#3)]  
  
 La tercera parte del ejemplo de código es la página Web. La página contiene un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, con un <`asp:pagecatalogpart>` elemento declarado dentro de ella. Esto es lo que va a contener la cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar y permitir a los usuarios agregarlo a la página. El `Button1_Click` método llama directamente el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método para cerrar personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar, aunque un usuario también puede cerrar el control a través del menú de verbos.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_CloseWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/CS/closeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_CloseWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CloseWebPart/VB/closeWebPartVB.aspx#1)]  
  
 Después de cargar la página en un explorador, cierre personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control haciendo clic en el menú de verbos (el símbolo de flecha) en el encabezado del control y, en **cerrar**. Ahora cambie la página al modo de catálogo seleccionando **catálogo** en el **modo de presentación** control de lista desplegable. Catálogo de la página aparece con el control cerrado. Active la casilla situada junto al control cerrado, haga clic en **agregar** para agregarlo a la página y, a continuación, haga clic en **cerrar** para devolver la página al modo de exploración. El control se restaura en la página. Ahora cerrarlo nuevo, esta vez haciendo clic en el **Cerrar elemento Web** botón.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.  \- or -  <paramref name="webPart" /> is a shared control and has already been closed by another user.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AllowClose" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsClosed" />
      </Docs>
    </Member>
    <Member MemberName="ConnectDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode ConnectDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ConnectDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ ConnectDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable ConnectDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode used for displaying a special user interface (UI) for users to manage connections between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Dado que se trata de un objeto estático, puede hacer referencia a él directamente desde el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de crear una instancia del control.  
  
 Cuando los usuarios desean administrar conexiones entre <xref:System.Web.UI.WebControls.WebParts.WebPart> a los controles de una página Web, si un <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> zona se ha declarado en la página, estos equipos pueden cambiar la página en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo. El modo de presentación de conexión muestra una interfaz de usuario especial para administrar las conexiones, lo que incluye la capacidad de conectar o desconectar controles y editar los detalles de las conexiones existentes.  
  
 Si desea proporcionar a los usuarios la capacidad para administrar las conexiones con la interfaz de usuario proporcionada por el conjunto de controles de elementos Web, debe declarar un `<asp:connectionszone>` elemento en el marcado de una página. A diferencia de los elementos para los demás tipos de <xref:System.Web.UI.WebControls.WebParts.WebZone> zonas, no es necesario agregar cualquier otra etiqueta dentro de este elemento; simplemente se declara el elemento por sí mismo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo.  
  
 El ejemplo de código consta de tres partes:  
  
-   Un archivo de código fuente que contiene una interfaz y personaliza <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que pueden formar una conexión.  
  
-   Una página Web que proporciona un interfaz de usuario de conexión y muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo.  
  
-   Explicación de cómo ejecutar el ejemplo.  
  
 La primera parte del ejemplo de código es un archivo de origen que contiene una interfaz y dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que están diseñados para que se pueden conectar. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza el enfoque de compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_ConnectDisplayMode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_ConnectDisplayMode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/VB/ZipCodeComponent.vb#2)]  
  
 La segunda parte del ejemplo es una página Web que hospeda los controles personalizados. En el servidor `<script>` etiquetas en la página son varios métodos que rellenan una lista desplegable con los modos de presentación disponibles en la página. Un usuario puede seleccionar desde la lista desplegable para cambiar el modo de presentación de la página. Uno de los modos de presentación disponibles es el modo de presentación, se conectan porque un `<asp:connectionszone>` elemento se declara en el marcado de la página. Tenga en cuenta que este elemento no contiene ningún otro elemento secundario; sólo existe para habilitar la interfaz de usuario de administración de conexiones para los usuarios.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode> modo aparece en este ejemplo en dos lugares. Primero, en la `Page_Init` método, el modo de presentación de conexión se agrega a la lista desplegable de modos de presentación, como el código recorre en bucle la colección que se hace referencia en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad. Segundo, el `Page_PreRender` método comprueba el modo de presentación actual en la página, y si el modo actual es <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>, se muestra un mensaje en una <xref:System.Web.UI.WebControls.Label> control.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ConnectDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/CS/ConnectDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ConnectDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectDisplayMode/VB/ConnectDisplayModeVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en la lista desplegable y seleccione **conectar** para cambiar la página al modo de conexión. Observe que aparece un mensaje que indica que la página está en modo de presentación de conectarse. Ahora haga clic en el menú de verbos (un símbolo de flecha) en la barra de título de uno de los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y, a continuación, haga clic en **conectar** en el menú de verbos. Después de la conexión se muestra la interfaz de usuario, haga clic en el vínculo para crear una conexión. Use la lista desplegable en la conexión de la interfaz de usuario que aparece, seleccione el otro control que participará en la conexión y haga clic en el **conectar** botón. Se establece la conexión. Haga clic en el **cerrar** botón y, a continuación, utilice la lista desplegable en la parte superior de la página para devolver la página para examinar el modo de presentación.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="Connections">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection Connections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ Connections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the collection of all current connections on a Web page.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> que contiene un conjunto de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> propiedad proporciona una manera de obtener acceso al conjunto actual de conexiones en una página. La propia colección es de solo lectura y los desarrolladores que deseen manipular una conexión específica de la colección deben usar <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar mediante declaración y mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El siguiente código contiene solo la parte de la página Web del ejemplo. También necesitará el control de usuario personalizado y el código fuente de los controles personalizados mencionados anteriormente. Obtener estos dos elementos de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase.  
  
 El siguiente código de página Web muestra cómo utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> propiedad mediante programación para conocer el número de conexiones actuales en una página. Tenga en cuenta que en el `<script>` sección de etiqueta, el código para controlar los dos eventos para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar tiene acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Connections%2A> propiedad que se va a obtener el recuento.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/CS/webpartmanagerConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SimpleConnection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SimpleConnection/VB/webpartmanagerConnectionVB.aspx#1)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **conectar** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre los controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **conectar**. Después, se muestra la interfaz de usuario (UI) de conexión, haga clic en el **crear una conexión a un consumidor** vínculo. Aparece una celda que tiene un control de lista desplegable. Seleccione **Control de tiempo** en la lista desplegable y haga clic en **conectar** para completar la conexión de los dos controles. Haga clic en **cerrar**y, a continuación, use la **modo de presentación** la lista desplegable para devolver la página al modo de exploración normal. Tenga en cuenta que una etiqueta ahora muestra el número de conexiones y el número de <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Si se devuelve para el modo de conectar y desconectar los dos controles, cuando vuelva a examinar el modo, se debe actualizar el contenido de la etiqueta y no debería haber ninguna conexión.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionsActivated">
      <MemberSignature Language="C#" Value="public event EventHandler ConnectionsActivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ConnectionsActivated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ConnectionsActivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ConnectionsActivated;" />
      <MemberSignature Language="F#" Value="member this.ConnectionsActivated : EventHandler " Usage="member this.ConnectionsActivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after all the current Web Parts connections on a page are not only connected, but have also begun actively sharing data between the consumer and provider controls involved in each connection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el ciclo de vida de las conexiones, este evento se produce después de una página completa su proceso de carga. También se produce después de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento, que solo indica que el <xref:System.Web.UI.WebControls.WebParts.WebPart> o controles de servidor implicados en una conexión concreta se han conectado correctamente. En un caso donde hay varias conexiones en una página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> método indica que todas las conexiones de elementos Web válidas en una página están activas y pueden compartir datos. Saber que todas las conexiones están activas, los desarrolladores pueden realizar cualquier número de tareas, como notificar a los usuarios del estado de todas las conexiones, notificar a los controles del consumidor para procesar y mostrar los datos de sus proveedores y así sucesivamente.  
  
 Este evento está asociado con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A> método, que genera el evento y permite a los desarrolladores crear controladores personalizados para el evento.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el evento agregando el `OnConnectionsActivated` atribuir a la `<asp:webpartmanager>` elemento en la página y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionsActivating">
      <MemberSignature Language="C#" Value="public event EventHandler ConnectionsActivating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ConnectionsActivating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ConnectionsActivating As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ConnectionsActivating;" />
      <MemberSignature Language="F#" Value="member this.ConnectionsActivating : EventHandler " Usage="member this.ConnectionsActivating : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of activating all the established Web Parts connections on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el ciclo de vida de las conexiones, este evento se produce cuando una página está finalizando su proceso de carga, justo antes del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> se llama al método. Es diferente de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> eventos, lo que implica una conexión determinada entre <xref:System.Web.UI.WebControls.WebParts.WebPart> u otros controles de servidor. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento tiene lugar cuando todas las conexiones posibles en una página se han conectado y están a punto de activarse.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento está asociado el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> método, que genera el evento. Los programadores de controles que desean extender el tipo de conexiones que se pueden agregar a una página pudieron invalidar la protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> método y activar tipos adicionales de conexiones.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el evento agregando el `OnConnectionsActivating` atribuir a la `<asp:webpartmanager>` elemento en la página y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectWebParts">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls (or other server controls capable of forming connections) that reside in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método constituye una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar. Antes de llamar a este método para crear una conexión, también puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método en una comprobación condicional para asegurarse de que los controles cumplen los requisitos para formar una conexión.  
  
> [!NOTE]
>  También es posible crear una conexión entre dos controles de servidor que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. En general, tendría dos controles como controles de servidor personalizados (por ejemplo, los controles que heredan de <xref:System.Web.UI.WebControls.WebControl> o controles de servidor ASP.NET existentes) para que puede agregar los miembros necesarios. Los controles también tendría que cumple los requisitos especificados aquí.  
  
 Cualquier tipo de escenario de conexión entre dos controles debe cumplir los requisitos siguientes para poder conectarse:  
  
-   Cada control reside en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona (no tiene que ser la misma zona).  
  
-   Tal y como se implementa en el conjunto de controles de elementos Web, el control de proveedor en una conexión implementa una interfaz como un método público que actúa como una devolución de llamada al proveedor y tiene un `ConnectionProvider` atributo de metadatos en el método que se identifique como una conexión de proveedor punto. Dado que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método que recupera puntos de conexión del proveedor es virtual, un derivado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control no tiene que utilizar necesariamente el mismo atributo de metadatos.  
  
-   Tal y como se implementa en el conjunto de controles de elementos Web, el control consumidor de una conexión también tiene un método especial que le permite obtener una referencia a la interfaz que se expone en el método de devolución de llamada del proveedor y el consumidor tiene un `ConnectionConsumer` atributo de metadatos en Seleccione el método que se identifique como una conexión del consumidor. Dado que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método que recupera puntos de conexión del consumidor es virtual, un derivado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control no tiene que utilizar necesariamente el mismo atributo de metadatos.  
  
-   Los métodos de devolución de llamada deben ser compatibles, en que el consumidor puede utilizar el tipo de interfaz proporcionado en el método de devolución de llamada del proveedor (lo que significa que el consumidor y el proveedor pueden compartir datos directamente), o con el desarrollador debe usar un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto transformar los datos del proveedor en un formulario que el consumidor puede utilizar.  
  
    > [!IMPORTANT]
    >  Si no necesita un transformador, utilice la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%29> sobrecarga del método. Si necesita un transformador, utilice la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29> sobrecarga del método.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectWebParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::WebPartConnection ^ ConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint);" />
      <MemberSignature Language="F#" Value="member this.ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection" Usage="webPartManager.ConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="provider">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that has the role of furnishing data to another connected control.</param>
        <param name="providerConnectionPoint">A method that serves as a callback method for the connection. As implemented in the Web Parts control set, this is a public method in <c>provider</c> that is marked with a <see langword="ConnectionProvider" /> metadata attribute.</param>
        <param name="consumer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that has the role of receiving data from <c>provider</c>, and then processing or displaying it.</param>
        <param name="consumerConnectionPoint">A method that connects with <c>providerConnectionPoint</c> to receive the data for the connection. As implemented in the Web Parts control set, this is a public method in <c>consumer</c> that is marked with a <see langword="ConnectionConsumer" /> metadata attribute.</param>
        <summary>Creates a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> controls using only the references to the controls and their specified <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> objects.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> that contains the various information about the provider and the consumer needed for a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga se utiliza para conectar controles cuando sus puntos de conexión son lo bastante compatibles para que puedan conectarse sin utilizar un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto. Cuando se llama a esta sobrecarga del método, simplemente pasa la llamada a la otra versión del método sobrecargada y pasa `null` para el parámetro que requiere un <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> objeto.  
  
 Cuando se intenta conectar dos controles mediante programación, puede utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método en una comprobación condicional para determinar si los controles se pueden conectar directamente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar este método para crear una conexión mediante programación. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. En ese ejemplo, necesitará el código fuente para el control de usuario que permite cambiar los modos de presentación en la página y el código fuente para dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
 El código de la página Web que hospeda los dos controles se indica a continuación. La página utiliza `Register` directivas en la parte superior para declarar el control de usuario y los controles personalizados. Los controles personalizados, a continuación, hace referencia mediante declaración dentro un `<asp:webpartzone>` elemento. El código que controla el `Button1_Click` método crea una conexión entre los controles mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ConnectWebParts1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectWebParts1/CS/wpmgrConnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ConnectWebParts1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ConnectWebParts1/VB/wpmgrConnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en el **conectar controles de elemento Web** botón para formar la conexión. A continuación, puede escribir algunos datos en el cuadro de texto y haga clic en el **introduzca el código postal de 5 dígitos** botón para mostrar que los controles están conectados y que los datos especificados en el primer control se actualizan en el segundo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control's collection of dynamic collections is read-only.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
      </Docs>
    </Member>
    <Member MemberName="ConnectWebParts">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts (System.Web.UI.WebControls.WebParts.WebPart provider, System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPart consumer, System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, System.Web.UI.WebControls.WebParts.WebPartTransformer transformer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartConnection ConnectWebParts(class System.Web.UI.WebControls.WebParts.WebPart provider, class System.Web.UI.WebControls.WebParts.ProviderConnectionPoint providerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPart consumer, class System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint consumerConnectionPoint, class System.Web.UI.WebControls.WebParts.WebPartTransformer transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ProviderConnectionPoint,System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint,System.Web.UI.WebControls.WebParts.WebPartTransformer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartConnection ^ ConnectWebParts(System::Web::UI::WebControls::WebParts::WebPart ^ provider, System::Web::UI::WebControls::WebParts::ProviderConnectionPoint ^ providerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPart ^ consumer, System::Web::UI::WebControls::WebParts::ConsumerConnectionPoint ^ consumerConnectionPoint, System::Web::UI::WebControls::WebParts::WebPartTransformer ^ transformer);" />
      <MemberSignature Language="F#" Value="abstract member ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection&#xA;override this.ConnectWebParts : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ProviderConnectionPoint * System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint * System.Web.UI.WebControls.WebParts.WebPartTransformer -&gt; System.Web.UI.WebControls.WebParts.WebPartConnection" Usage="webPartManager.ConnectWebParts (provider, providerConnectionPoint, consumer, consumerConnectionPoint, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="providerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <Parameter Name="consumer" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="consumerConnectionPoint" Type="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <Parameter Name="transformer" Type="System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Parameters>
      <Docs>
        <param name="provider">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> that has the role of furnishing data to another connected control.</param>
        <param name="providerConnectionPoint">A public method in <c>provider</c> that is marked with a <see langword="ConnectionProvider" /> metadata attribute, and serves as a callback method for the connection.</param>
        <param name="consumer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> that has the role of receiving data from <c>provider</c> or <c>transformer</c>, and then processing or displaying it.</param>
        <param name="consumerConnectionPoint">A public method in <c>consumer</c> that is marked with a <see langword="ConnectionConsumer" /> metadata attribute, and connects with <c>providerConnectionPoint</c> to receive the data for the connection.</param>
        <param name="transformer">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> that enables a connection between two controls by converting the data from <c>provider</c> to a format that <c>consumer</c> can process.</param>
        <summary>Creates a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> controls using the references to the controls, their specified <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionPoint" /> objects, and a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" /> object.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> that contains the information about the provider, consumer, and transformer needed for a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga se utiliza para conectar controles cuando sus puntos de conexión son incompatibles. Se produce la incompatibilidad cuando `consumer` implementa una interfaz diferente que `provider` como su punto de conexión. La clase transformer convierte los datos en un tipo que pueda entender `consumer`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Connections have already been activated in <see cref="E:System.Web.UI.Control.PreRender" />.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Connections" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Controls As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ControlCollection ^ Controls { System::Web::UI::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Web.UI.ControlCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of all <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />, server, or user controls that are contained in <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zones on a Web page and are managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.ControlCollection" /> que contiene todos los controles administrados por el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Controls%2A> propiedad no hace referencia a los demás controles que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, como los diversos controles, de zona <xref:System.Web.UI.WebControls.WebParts.EditorPart> o <xref:System.Web.UI.WebControls.WebParts.CatalogPart> controles y otros.  
  
 Esta propiedad se utiliza el conjunto de controles de elementos Web y en la mayoría de las situaciones de desarrollo que no está diseñado para ser llamado desde el código. Por esta razón, aunque la propiedad es pública, se oculta de IntelliSense. Los desarrolladores que desean tener acceso a la colección de <xref:System.Web.UI.WebControls.WebParts.WebPart> u otros controles de servidor administrados por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control debe usar su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      </Docs>
    </Member>
    <Member MemberName="CopyWebPart">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPart CopyWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPart CopyWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPart ^ CopyWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member CopyWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.WebPart&#xA;override this.CopyWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.CopyWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control to be copied.</param>
        <summary>Used by the Web Parts control set to create a copy of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control for the purpose of adding the control to a Web page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> to be added to a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede llamar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método directamente desde el código. Este método se llama internamente en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control como parte del proceso de agregar un nuevo dinámico <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor a una página. Un control dinámico se agrega a una página mediante programación o a través de la interfaz de usuario de elementos Web (UI), por ejemplo cuando un usuario agrega un control de un catálogo de controles, en lugar de un control estático, que se declara directamente en el marcado de una página.  
  
> [!NOTE]
>  El método se puede invalidar en una clase derivada si desean que los desarrolladores habilitar el método que controla un control adicional copiar escenarios. Para obtener más información, vea la sección Notas para los herederos.  
  
 Cuando se agrega un nuevo control dinámico, si es un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método devuelve una nueva instancia del control. Si el control que se agrega es algún otro tipo de control de servidor (por ejemplo, un control de usuario, un control personalizado o un control de ASP.NET), el control ya habrá están encapsulado con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto por el conjunto de controles de elementos Web. Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método encuentra un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> (control), devuelve una nueva instancia de la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control con una nueva instancia del control secundario ajustada dentro de él.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método crea una nueva copia de un control para devolver, también restablece los valores de todas las propiedades con sus valores predeterminados. Tenga en cuenta que, si desea conservar los valores de las propiedades personalizables y tienen ellos se copian en la nueva instancia del control, debe llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.CopyPersonalizationState%2A> método así. El último paso realizadas por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CopyWebPart%2A> método consiste en llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID%2A> método para obtener un nuevo identificador para el control.  
  
> [!NOTE]
>  Dado que el método obtiene un nuevo identificador para un control copiado, no debe confiar en que hacen referencia a un control dinámico que se agrega a una página por su identificador original. En su lugar, debe hacer referencia a la nueva instancia del control devuelta por el método.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>El método se declara como <see langword="virtual" /> para que los desarrolladores, pudieron heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase, invalide el método y proporcionar escenarios adicionales en el que pueda crear copias de los controles. Por ejemplo, el método podría recibir opcionalmente como entrada un control que se ha serializado en un archivo XML. El método podría deserializar el XML (si existe) y, a continuación, llame al método base para controlar los casos existentes y devolver una nueva instancia de un <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CreateAvailableTransformers">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.TransformerTypeCollection CreateAvailableTransformers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateAvailableTransformers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAvailableTransformers () As TransformerTypeCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::TransformerTypeCollection ^ CreateAvailableTransformers();" />
      <MemberSignature Language="F#" Value="abstract member CreateAvailableTransformers : unit -&gt; System.Web.UI.WebControls.WebParts.TransformerTypeCollection&#xA;override this.CreateAvailableTransformers : unit -&gt; System.Web.UI.WebControls.WebParts.TransformerTypeCollection" Usage="webPartManager.CreateAvailableTransformers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.TransformerTypeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a set of transformers specified in a Web site's configuration file and adds them to the collection of transformers referenced by the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" /> property.</summary>
        <returns>The collection of transformers specified in a Web site's configuration file.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Este método se puede invalidar para agregar convertidores adicionales que puede usarse en la aplicación de él. Por ejemplo, el método podría escribirse para recuperar una lista de convertidores de él disponibles de un servicio Web.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.AvailableTransformers" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override sealed System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberSignature Language="F#" Value="override this.CreateControlCollection : unit -&gt; System.Web.UI.ControlCollection" Usage="webPartManager.CreateControlCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the collection of all controls that are managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on a Web page. This class cannot be inherited.</summary>
        <returns>A <see cref="T:System.Web.UI.ControlCollection" /> consisting of all the various Web Parts controls managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Dado que este método está protegido y sellado, es visible para las clases que heredan de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase, pero no se puede invalidar.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateDisplayModes">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection CreateDisplayModes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDisplayModes () As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ CreateDisplayModes();" />
      <MemberSignature Language="F#" Value="abstract member CreateDisplayModes : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection&#xA;override this.CreateDisplayModes : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="webPartManager.CreateDisplayModes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the set of all possible display modes for a Web Parts application.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> that contains all the display modes that are supported.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método crea la lista de todos los posibles modos de presentación, no solo los modos de presentación admitidos en una página concreta. Para obtener más información acerca de los modos de presentación admitidos, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
 De forma predeterminada, el conjunto de controles de elementos Web crea el conjunto siguiente de modos de presentación que se usará en las páginas de elementos Web:  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CatalogDisplayMode>  
  
-   <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>  
  
 Los desarrolladores pueden crear modos de presentación personalizados, con o sin que acompaña a zonas personalizadas que derivan de la <xref:System.Web.UI.WebControls.WebParts.WebZone> o <xref:System.Web.UI.WebControls.WebParts.ToolZone> clases. Para crear un modo de presentación personalizado, debe heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> (clase), y para agregar el modo de presentación como un modo admitido en una página, debe heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase e invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A> método.  
  
 Al agregar modos de presentación mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection.Add%2A> método, debe agregarlos en el orden que desee que aparezcan en los controles de interfaz de usuario (como un <xref:System.Web.UI.WebControls.ListBox> control) que proporcionan a los usuarios los posibles modos de presentación en una página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A>.  
  
 El ejemplo de código tiene cinco partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que hospeda los demás controles.  
  
-   Un control de usuario que reside en un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona en la página Web y permite escribir y mostrar texto en una etiqueta.  
  
-   Un archivo de código fuente que contiene dos controles. Uno es un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control y el otro es un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> va a agregar a los modos de presentación de la página predeterminada.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo es la página Web. Contiene dos <xref:System.Web.UI.WebControls.WebParts.WebPartZone> controles, controles de usuario y personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Observe el `Register` directivas en la parte superior de la página para hacer referencia a los controles de usuario y el espacio de nombres para los controles compilados.  
  
 [!code-aspx-csharp[Webparts_WebPartManager_CreateDisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/createDisplayModeCS.aspx#1)]
 [!code-aspx-vb[Webparts_WebPartManager_CreateDisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/createDisplayModeVB.aspx#1)]  
  
 La tercera parte del ejemplo es el control de usuario para escribir y mostrar texto. Usa un <xref:System.Web.UI.WebControls.MultiView> control que desee crear varias vistas de la interfaz de usuario. Aparece una vista con el `Button1` botón, el otro sin. Observe que en el invalidado `OnPreRender` método, el código comprueba si la página está actualmente en el modo de presentación personalizado y, si es así, muestra la primera vista del control de usuario, que incluye el botón. Si la página no está en el modo de presentación personalizado, por ejemplo, si la página está en modo de exploración o de diseño, se oculta el botón.  
  
 [!code-aspx-csharp[Webparts_WebPartManager_CreateDisplayModes#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/TextDisplaycs.ascx#2)]
 [!code-aspx-vb[Webparts_WebPartManager_CreateDisplayModes#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/TextDisplayvb.ascx#2)]  
  
 La cuarta parte del ejemplo es el archivo de origen para las dos clases personalizadas. Tenga en cuenta que personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase invalida la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes%2A> método y que llama primero al método base para agregar todos los modos de presentación predeterminados y, a continuación, agrega el modo de presentación personalizado. La clase de modo de presentación personalizado, `InLineEditDisplayMode`, simplemente se hereda de <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode>, Establece el nombre del modo de presentación en el constructor y reemplaza una serie de propiedades base para establecer las características de la pantalla personalizada.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[Webparts_WebPartManager_CreateDisplayModes#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/CS/CustomDisplayMode.cs#3)]
 [!code-vb[Webparts_WebPartManager_CreateDisplayModes#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_CreateDisplayModes/VB/CustomDisplayMode.vb#3)]  
  
 Para ejecutar el ejemplo de código, cargue la página en un explorador. Observe que la página está actualmente en modo de exploración, y no hay ningún botón está visible. Mediante el **modo de presentación** lista desplegable lista de control, cambie la página para **presentación de edición en línea** modo y observe que ahora el `Button1` botón está visible en el control de usuario inferior. Agregar texto y haga clic en el botón para actualizar el control. Tenga en cuenta que la visualización de la página se devuelve al modo de exploración, ahora se muestra el texto que especificó, y el botón está oculto de nuevo porque la página ya no está en el modo de presentación personalizado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDynamicConnectionID">
      <MemberSignature Language="C#" Value="protected virtual string CreateDynamicConnectionID ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateDynamicConnectionID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDynamicConnectionID () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ CreateDynamicConnectionID();" />
      <MemberSignature Language="F#" Value="abstract member CreateDynamicConnectionID : unit -&gt; string&#xA;override this.CreateDynamicConnectionID : unit -&gt; string" Usage="webPartManager.CreateDynamicConnectionID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a unique value to serve as an ID for a dynamic connection.</summary>
        <returns>A string that contains a unique ID for a connection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> método genera un valor GUID y lo convierte en una cadena para que actúe como el identificador único para una conexión. Se llama al método cada vez que se crea una conexión dinámica.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los desarrolladores pueden reemplazar este método en un derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase para cambiar la implementación para generar un identificador único.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="CreateDynamicWebPartID">
      <MemberSignature Language="C#" Value="protected virtual string CreateDynamicWebPartID (Type webPartType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateDynamicWebPartID(class System.Type webPartType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicWebPartID(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateDynamicWebPartID (webPartType As Type) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ CreateDynamicWebPartID(Type ^ webPartType);" />
      <MemberSignature Language="F#" Value="abstract member CreateDynamicWebPartID : Type -&gt; string&#xA;override this.CreateDynamicWebPartID : Type -&gt; string" Usage="webPartManager.CreateDynamicWebPartID webPartType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPartType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="webPartType">The <see cref="T:System.Type" /> of the control for which an ID is being generated.</param>
        <summary>Generates a unique ID for a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <returns>A string that contains the unique ID for a control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Web.UI.WebControls.WebParts.WebPart> se agregan a una página Web, pueden ser estáticos (lo que significa que el control se declara en el marcado de la página) o dinámicos (lo que significa que se agregan mediante programación). En cualquier escenario donde el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control es crear nuevos controles dinámicos para agregar a la página, llama a este método para generar un identificador único.  
  
 El método es virtual para que los desarrolladores pueden reemplazar si desean proporcionar una implementación personalizada para generar el identificador.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPartType" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateErrorWebPart">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart (string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ErrorWebPart CreateErrorWebPart(string originalID, string originalTypeName, string originalPath, string genericWebPartID, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateErrorWebPart (originalID As String, originalTypeName As String, originalPath As String, genericWebPartID As String, errorMessage As String) As ErrorWebPart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::ErrorWebPart ^ CreateErrorWebPart(System::String ^ originalID, System::String ^ originalTypeName, System::String ^ originalPath, System::String ^ genericWebPartID, System::String ^ errorMessage);" />
      <MemberSignature Language="F#" Value="abstract member CreateErrorWebPart : string * string * string * string * string -&gt; System.Web.UI.WebControls.WebParts.ErrorWebPart&#xA;override this.CreateErrorWebPart : string * string * string * string * string -&gt; System.Web.UI.WebControls.WebParts.ErrorWebPart" Usage="webPartManager.CreateErrorWebPart (originalID, originalTypeName, originalPath, genericWebPartID, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ErrorWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalID" Type="System.String" />
        <Parameter Name="originalTypeName" Type="System.String" />
        <Parameter Name="originalPath" Type="System.String" />
        <Parameter Name="genericWebPartID" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="originalID">A string that is the ID of the failing control. If a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> is involved in the failure, the ID is the ID of its child server control.</param>
        <param name="originalTypeName">A string that is the name of the <see cref="T:System.Type" /> of the failed control. If a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> is involved in the failure, the type name is the type of its child server control.</param>
        <param name="originalPath">A string that contains the path to a user control, if a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> that contains a child user control is involved in the failure.</param>
        <param name="genericWebPartID">A string that returns the ID of a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />, if that type of control was involved in the failure to load or create a control.</param>
        <param name="errorMessage">A string that contains the error message to display on the page.</param>
        <summary>Creates a special control that is inserted into a page and displayed for end users, when an attempt to load or create a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control fails for some reason.</summary>
        <returns>An <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> that is inserted into a page in place of a control that failed to be loaded or created.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart%2A> método se llama cuando el control de elementos Web conjunto intenta cargar o crear una instancia de una dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor y se produce un error por algún motivo. El método crea un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> objeto, le asigna un mensaje de error y lo devuelve. El <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> control se inserta en lugar del control que no se pudo y su mensaje de error se muestra en la página.  
  
 No se puede llamar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart%2A> método directamente desde el código. Sin embargo, se puede heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase y extender el método. Para obtener más información, vea la sección Notas a los herederos.  
  
 Los usuarios finales pueden trabajar con un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> control en una página gran parte como lo harían normal <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para quitar el mensaje de error, puede cerrar el control haciendo clic en el verbo de cierre, momento en que se agregará el control a un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> objeto, al igual que cualquier otro control cerrado. Si un usuario final elimina un <xref:System.Web.UI.WebControls.WebParts.ErrorWebPart> control, el control de servidor que no se pudo cargar también se eliminará de la página.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si desea personalizar la información que se devuelve en el <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> control, puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateErrorWebPart(System.String,System.String,System.String,System.String,System.String)" /> método, llame al método base, asigne valores diferentes a los parámetros pasados al método base y, a continuación, devolver el resultante<see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" />control. Por ejemplo, si no desea que los usuarios finales vean la <paramref name="originalPath" /> valor (que se muestra la ruta de acceso del directorio virtual de un control de usuario), cuando se llama al método base podría pasar una cadena vacía ("") para ese parámetro.  También puede personalizar el comportamiento de la <see cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" /> controlar, herede de él. Por ejemplo, puede invalidar su <see cref="P:System.Web.UI.WebControls.WebParts.Part.Title" /> o <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.AllowMinimize" /> propiedad.</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ErrorWebPart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePersonalization">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPartPersonalization CreatePersonalization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreatePersonalization () As WebPartPersonalization" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ CreatePersonalization();" />
      <MemberSignature Language="F#" Value="abstract member CreatePersonalization : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartPersonalization&#xA;override this.CreatePersonalization : unit -&gt; System.Web.UI.WebControls.WebParts.WebPartPersonalization" Usage="webPartManager.CreatePersonalization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartPersonalization</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a personalization object to contain a user's personalization data for the current Web page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> to contain a user's personalization data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization%2A> método devuelve un objeto para contener y administrar la configuración de personalización del usuario para la página actual. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control administra este objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWebPart">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.GenericWebPart CreateWebPart(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::GenericWebPart ^ CreateWebPart(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member CreateWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart&#xA;override this.CreateWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart" Usage="webPartManager.CreateWebPart control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.GenericWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">A server control that is not a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</param>
        <summary>Wraps a server control that is not a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control with a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> object, so that the control can have Web Parts functionality.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> that wraps <paramref name="control" /> and enables it to function as a true <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método es el mecanismo principal para habilitar controles de servidor que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controles para realizar en la misma funcionalidad que un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control) y, por tanto, para participar totalmente en aplicaciones de elementos Web. Con este método, los desarrolladores ampliamente expandir el número de controles de servidor que pueden utilizar en una aplicación de elementos Web, porque casi todos los tipos de control de servidor: controles ASP.NET estándar, los controles de usuario y controles personalizados--pueden utilizarse.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control también utiliza este método en otros dos escenarios para ajustar los controles de servidor con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto. Cuando los usuarios agregar controles de servidor a una página mediante la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> el control, si el control importado no es un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> se llama al método. Además, cuando se declaran controles de servidor en formato de persistencia dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona en una página Web, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método se llama para todos los controles que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
 Cuando agregue un control de servidor a una zona mediante programación, un enfoque típico consiste en utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método para ajustar el control con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto y, a continuación, llame a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> método para agregar el control a la colección de todos los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de la página, que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método. En el `Button2_Click method`, <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateWebPart%2A> método se llama para ajustar un <xref:System.Web.UI.WebControls.Calendar> controlar con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto antes de agregarlo a la zona.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se puede invalidar este método para utilizar un derivado <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> clase en su lugar de la clase base que se proporcionan con los elementos Web de control conjunto.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteWarning">
      <MemberSignature Language="C#" Value="public virtual string DeleteWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DeleteWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DeleteWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a custom warning message displayed to end users when they delete a control.</summary>
        <value>Una cadena que contiene el texto del mensaje de advertencia. El valor predeterminado es un mensaje de advertencia traducido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un usuario elimina un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, normalmente se muestra un mensaje de advertencia predeterminado. Advierte al usuario que, cuando se elimina esta instancia de un control, la eliminación es permanente. El desarrollador de páginas puede proporcionar a los usuarios una manera de agregar una nueva instancia del control a la página (como a través de un catálogo de <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, o mediante programación), pero se quita la instancia actual de un control que se elimina de forma permanente. El cuadro de diálogo que muestra la advertencia incluye un botón para el usuario pueda cancelar la eliminación, si lo desea.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad permite a los desarrolladores establecer el mensaje de advertencia que se muestra al usuario.  
  
 Si un desarrollador de páginas asigna una cadena vacía ("") se mostrará el valor para esta propiedad, ningún cuadro de diálogo de mensaje de advertencia cuando un usuario elimina un <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad no se muestra en el caso de estático <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y controles de servidor. Los controles estáticos son controles de servidor que se declaran dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona en el marcado de una página Web. Dado que tales controles son estáticos, no pueden eliminarse, por lo que el mensaje de advertencia de eliminación nunca se muestra en ese caso. Un usuario pueden cerrar controles estáticos, pero un control cerrado se agrega al catálogo de la página, desde el que se puede agregar a la página por un usuario, mientras que un control eliminado no puede recuperarse.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad mediante declaración y mediante programación.  
  
 Hay cuatro partes en el ejemplo de código:  
  
-   Un control de usuario que permite cambiar los modos de presentación de página.  
  
-   Un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
-   Una página Web.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo de código es personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo utiliza el enfoque de compilación dinámica; Por tanto, no hay ningún `Assembly` de atributo en el `Register` la directiva para este control en la parte superior de la página Web. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_DeleteWarning#3](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/CS/textdisplaywebpart.cs#3)]
 [!code-vb[WebParts_WebPartManager_DeleteWarning#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/VB/textdisplaywebpart.vb#3)]  
  
 La tercera parte del ejemplo de código es la página Web. La página contiene un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, con la opción de instalación <xref:System.Web.UI.WebControls.WebParts.WebPart> control declarado en la zona, por lo que un usuario puede agregarlo a la página en tiempo de ejecución. Tenga en cuenta que se pueden eliminar controles solo dinámicos (aquellos que se agregan a una página mediante programación o desde un catálogo como este) desde una página. Controles estáticos (controles que se declaran dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona en el marcado de una página) se pueden cerrar, pero nunca se eliminan. El `<asp:webpartmanager>` elemento declara un valor personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad utilizando el `DeleteWarning` atributo. El `Button1_Click` método asigna otro valor personalizado a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWarning%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWarning#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/CS/deleteWarningCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWarning#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWarning/VB/deleteWarningVB.aspx#1)]  
  
 Después de cargar la página en un explorador, debe agregar el <xref:System.Web.UI.WebControls.WebParts.WebPart> control a la página. Mediante el **modo de presentación** control de lista desplegable, el modo de catálogo seleccione. Cuando aparezca el catálogo, active la casilla situada junto al control personalizado, haga clic en **agregar** para agregarlo a la página y, a continuación, haga clic en **cerrar** para devolver la página al modo de exploración. Ahora que el control es visible, puede eliminarla. Mediante el **modo de presentación** control nuevo, cambiar la página al modo de diseño (no se puede eliminar controles mientras la página está en modo de exploración). Haga clic en el menú de verbos (el símbolo de flecha) en el encabezado de la <xref:System.Web.UI.WebControls.WebParts.WebPart> control y seleccione **eliminar**. La advertencia que se establece en el `DeleteWarning` atributo aparece. Haga clic en **cancelar**. Ahora haga clic en el botón con la etiqueta **cambio Eliminar advertencia**, que cambia el valor de propiedad mediante programación. En el menú de verbos en el control, seleccione **eliminar** nuevo y observe que aparece otro mensaje de advertencia de este momento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteWebPart">
      <MemberSignature Language="C#" Value="public void DeleteWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.DeleteWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.DeleteWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The server control to be deleted.</param>
        <summary>Permanently removes a dynamic instance of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control from a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A> método quita permanentemente el control representado por la `webPart` parámetro desde una página. A diferencia de un control cerrado, que se agrega a la <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controlar y puede agregarse a la página, una instancia del control eliminado nunca puede agregarse a la página.  
  
> [!NOTE]
>  Como se implementa el control de elementos Web establecido, la posibilidad de que los usuarios puedan eliminar dinámico <xref:System.Web.UI.WebControls.WebParts.WebPart> control depende del usuario y el ámbito de personalización en el que el control se agregó a una página. Si el control se agrega cuando la página está en ámbito compartido (por un usuario que tenga permisos), a continuación, el control no se puede eliminar los usuarios individuales cuando la página está en ámbito de usuario.  
  
 Solo los controles dinámicos pueden eliminarse. Controles dinámicos se agregan a una página mediante programación o a los usuarios agregar controles de un catálogo. Controles estáticos se agregan a una página mediante declaración con el formato de persistencia o marcado. Dado que las etiquetas declarativas están permanentemente presentes en el marcado, nunca se pueden eliminar controles estáticos, pero se pueden cerrar y volver a abrir.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A>. La primera vez el **Agregar calendario** se hace clic en botón, el código en el evento controlador crea una <xref:System.Web.UI.WebControls.Calendar> controlar y lo agrega a una zona como un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto. Dado que el control se agrega mediante programación, es un control dinámico y, por lo tanto, se puede eliminar. Cuando un usuario hace clic en el **Eliminar calendario** botón, el código garantiza que el control existe y, a continuación, elimina mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart%2A> método.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/CS/wpmgDeleteWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DeleteWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DeleteWebPart/VB/wpmgDeleteWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsClosed" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsStatic" />
      </Docs>
    </Member>
    <Member MemberName="DesignDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode DesignDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DesignDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ DesignDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable DesignDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode used for changing the layout of Web pages that contain Web Parts controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Dado que se trata de un objeto estático, puede hacer referencia a él directamente desde el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de crear una instancia del control.  
  
 Cuando una página que contiene los elementos Web controla la carga por primera vez, se encuentra en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modo de exploración) de forma predeterminada. Cuando los usuarios desean cambiar el diseño de la página moviendo controles a zonas diferentes o en las zonas actuales, primero deben cambiar la página a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> (modo de diseño). En el modo de diseño, aparece la interfaz de usuario (UI) para las distintas zonas y los usuarios, a continuación, pueden arrastrar los controles para cambiar el diseño.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos para la página, que en este caso son exploración y diseño. Tenga en cuenta que, en la `Page_PreRender` /método siguiente, el código comprueba si la actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>. Si es así, `Label1` serán visibles y si no es así, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DesignDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DesignDisplayMode/CS/wpmgrDesignDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DesignDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DesignDisplayMode/VB/wpmgrDesignDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta que la etiqueta en la página está oculta. Utilice el control de lista desplegable para cambiar la página al modo de diseño. Tenga en cuenta que, debido al código en el `Page_PreRender` método ahora está visible la etiqueta.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="DisconnectWebPart">
      <MemberSignature Language="C#" Value="protected virtual void DisconnectWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DisconnectWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DisconnectWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member DisconnectWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit&#xA;override this.DisconnectWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.DisconnectWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control that is to be disconnected.</param>
        <summary>Removes a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control that is being closed or deleted from any connections it is participating in.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método se llama internamente a lo controles de elementos Web que se establece cuando un control se cierra en una página o se elimina de una página. En este escenario, se llama al método para quitar el control de cualquier conexión donde participe como consumidor o proveedor. Si el control se quita de las conexiones, este método también llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método para finalizar cualquier conexión en la que `webPart` implica.  
  
 Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> se llama al método, genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos. Normalmente este evento se puede cancelar, pero en dos casos no se puede cancelar. Un caso se produce durante las solicitudes a la página, cuando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> se llama al método. Si hay un conflicto entre las conexiones existentes, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método se debe invocar para cerrar una de las conexiones en conflicto y, en esta instancia la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos no se puede cancelar, porque se debe resolver el conflicto.  
  
 El otro caso se produce cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor que está conectado actualmente se cierra o se elimina. En este caso, debido al control se está quitando de la página, las necesidades de su conexión haya finalizado, por lo tanto, por diseño no es posible cancelar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento interrumpir el proceso de finalización de una conexión. Para obtener más información, vea el evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A>. Usar dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, la página Web permite crear una conexión entre los controles haciendo clic en un botón, mientras que otro botón permite desconectar los controles. Si cierra uno de los controles mientras la página está en modo de exploración y los controles están conectados, una invalidación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método desconecta el control cerrado, termina la conexión y muestra un mensaje.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario para cambiar los modos de presentación.  
  
-   Un archivo de código fuente que contiene personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
-   Una página Web para hospedar los controles.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte es el archivo que contiene el código fuente de dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se conectará y personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. En este ejemplo se utiliza la compilación dinámica, por lo que el `Register` directiva que hace referencia a estos componentes en la página Web se declara como corresponde en la parte superior de la página Web. Para ver un tutorial que muestra las opciones de compilación, consulte [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 En el código fuente, observe el control heredado `MyWebPartManager` que invalida el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método. Este método comprueba cada conexión de una página para ver si el control que se va a cerrar participa en la conexión y, si es así, llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método para finalizar la conexión. Esto es idéntico a la implementación base del método en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. El método invalidado personaliza, a continuación, la implementación base escribiendo un mensaje en la página.  
  
 [!code-csharp[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Observe que en la parte superior, contiene `Register` las directivas para registrar el control de usuario y el ensamblado compilado de forma dinámica con el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La página tiene dos métodos principales. El `Button1_Click` método crea una conexión entre los controles, mientras el `Button2_Click` método desconecta los controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/wpmgrDisconnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/wpmgrDisconnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página, haga clic en el **conectar** botón para conectar los controles. A continuación, haga clic en el menú de verbos de uno de los controles (la flecha hacia abajo en el encabezado del control) y seleccione **cerrar** en el menú de verbos. Al intentar cerrar el control, se llama al método reemplazado, se finaliza la conexión y el mensaje se escribe en la página. Si desea restablecer la página para restaurar el control cerrado y experimentar con otras opciones, haga clic en el **restablecer el estado de usuario** vínculo para quitar los datos de personalización y restaurar el estado original de la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      </Docs>
    </Member>
    <Member MemberName="DisconnectWebParts">
      <MemberSignature Language="C#" Value="public virtual void DisconnectWebParts (System.Web.UI.WebControls.WebParts.WebPartConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisconnectWebParts(class System.Web.UI.WebControls.WebParts.WebPartConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DisconnectWebParts (connection As WebPartConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DisconnectWebParts(System::Web::UI::WebControls::WebParts::WebPartConnection ^ connection);" />
      <MemberSignature Language="F#" Value="abstract member DisconnectWebParts : System.Web.UI.WebControls.WebParts.WebPartConnection -&gt; unit&#xA;override this.DisconnectWebParts : System.Web.UI.WebControls.WebParts.WebPartConnection -&gt; unit" Usage="webPartManager.DisconnectWebParts connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Web.UI.WebControls.WebParts.WebPartConnection" />
      </Parameters>
      <Docs>
        <param name="connection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> that represents the connection between server controls.</param>
        <summary>Carries out the process of disconnecting server controls that are connected on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método lleva a cabo el proceso completo de la finalización de una conexión entre <xref:System.Web.UI.WebControls.WebParts.WebPart> o controles de servidor, cuando se le pase los `connection` parámetro.  
  
 Este método se utiliza para desconectar controles cuando se coloca un `<asp:connectionszone>` elemento en una página Web, para proporcionar una interfaz de usuario (UI) para administrar las conexiones. Cuando una página está en modo de presentación de conectarse (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectDisplayMode>) y existe una conexión actual, los usuarios hacer clic en un botón que llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método para finalizar la conexión.  
  
 También puede llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método directamente desde el código, si desea desconectar controles mediante programación y sin tener que agregar un `<asp:connectionszone>` elemento a una página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>. Usar dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, la página Web permite crear una conexión entre los controles haciendo clic en un botón, mientras que otro botón permite desconectar los controles.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario para cambiar los modos de presentación.  
  
-   Un archivo de código fuente que contiene personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
-   Una página Web para hospedar los controles.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte es un archivo que contiene el código fuente de dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se conectará. Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. En este ejemplo se utiliza la compilación dinámica, por lo que el `Register` directiva que hace referencia a estos componentes en la página Web se declara como corresponde en la parte superior de la página Web. Para ver un tutorial que muestra las opciones de compilación, consulte [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_DisconnectWebParts#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Observe que en la parte superior, contiene `Register` las directivas para registrar el control de usuario y el ensamblado compilado de forma dinámica con el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. La página tiene dos métodos principales. El `Button1_Click` método crea una conexión entre los controles y el `Button2_Click` método desconecta los controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/CS/wpmgrDisconnectWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisconnectWebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisconnectWebParts/VB/wpmgrDisconnectWebPartsVB.aspx#1)]  
  
 Después de cargar la página, haga clic en el **conectar** botón para conectar los controles. Si escriba algún texto en el control de cuadro de texto y, a continuación, haga clic en el **ENTRAR** botón, el texto se mostrará en el control conectado (no se mostraría si los controles se han desconectado). Si hace clic en el **desconexión** botón, se desconectarán los controles. Puede comprobar el estado de conexión de los controles mediante el **modo de presentación** control de lista desplegable para cambiar la página en **conectar** modo. Después de esto, haga clic en el menú de verbos (representado por una flecha) en la barra de título de uno de los controles y seleccione el **conectar** elemento. Se muestra el interfaz de usuario de conexión; está disponible porque no hay un `<asp:connectionszone>` elemento declarado en la página. También puede conectar y desconectar los controles de esta interfaz de usuario.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connection" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connection" /> is not contained in either <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" /> or <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" /> is read-only.  \- or -  <paramref name="connection" /> has already been disconnected from <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />.  \- or -  <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" /> is read-only.  \- or -  <paramref name="connection" /> has already been disconnected from <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />.</exception>
        <block subset="none" type="overrides">
          <para>Puede invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" /> método si desea cambiar la implementación predeterminada para desconectar <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controles. Si se reemplaza el método y desea agregar alguna implementación al método existente, puede llamar al método base antes de ejecutar su propio código.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="DisplayMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayMode DisplayMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DisplayMode As WebPartDisplayMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ DisplayMode { System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ get(); void set(System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the active display mode for a Web page that contains Web Parts controls.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> que determina el modo de presentación de una página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una página que contiene controles de elementos Web siempre está en uno de varios modos de visualización posible. Para obtener más información acerca de los modos de presentación, consulte [Web Parts Page Display Modes](http://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4).  
  
 La <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase crea los modos de presentación para una página Web. Con la base de <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> (clase), el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control crea varios objetos de modo de presentación estándar que se pueden usar en páginas que contienen controles de elementos Web. Estos modos de presentación estándar se describen en la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> general sobre la clase.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control también administra los modos de presentación para las páginas que utilizan controles de elementos Web. Mediante el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control mantiene una referencia al modo de presentación actual en una página. También puede usar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad para cambiar una página en diferentes modos de presentación. Para obtener un ejemplo de cómo cambiar los modos de presentación en una página que utiliza controles de elementos Web, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Como parte de la administración del modo de presentación, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> también proporciona el control de eventos y controladores de eventos relacionada con modos de visualización, como el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> método y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> método. Estos métodos proporcionan un mecanismo para personalizar el comportamiento de una página e incluso para agregar un modo de presentación personalizado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar mediante programación la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad. Después de cargar la página en un explorador, puede usar los botones en la parte inferior de la página para cambiar los modos de presentación. La página está en modo de exploración de forma predeterminada cuando carga. Si cambia al modo de diseño, puede arrastrar los controles de servidor de una zona a otro u organizar dos controles dentro de una zona. Si cambia al modo de edición, haga clic en el menú de verbos en el encabezado de cualquiera de los controles de servidor, seleccionados **editar**y el control mediante la interfaz de usuario edición proporcionado (UI) de edición.  
  
> [!NOTE]
>  Cambiar entre modos de presentación en una aplicación de elementos Web es muy común y desea proporcionar una manera coherente y reutilizable para hacer esto en todas las páginas que contienen controles de elementos Web. Para un ejemplo de un control de usuario que cambios de modos de presentación y que se puede reutilizar en muchas páginas, vea [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayMode/CS/wpmgrDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayMode/VB/wpmgrDisplayModevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> object being assigned to the property is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> object being assigned to the property is not one of the supported display modes.  \- or -  The <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> object being assigned to the property is disabled.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChanged">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler DisplayModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayModeChanged As WebPartDisplayModeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartDisplayModeEventHandler ^ DisplayModeChanged;" />
      <MemberSignature Language="F#" Value="member this.DisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler " Usage="member this.DisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the current display mode on a Web Parts page has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modos de presentación son una parte integral de aplicaciones de elementos Web. Cuando los usuarios cambian a un modo de presentación diferente en una página Web, la página a menudo tendrá un aspecto muy diferentes, dependiendo del propósito del nuevo modo de presentación. Después de cambia un modo de presentación, podría desea realizar algunos cambios en la interfaz de usuario (IU), como ocultar o mostrar determinados controles, cambiar la apariencia de los elementos de interfaz de usuario seleccionados y así sucesivamente.  
  
> [!NOTE]
>  Para obtener más información acerca de los modos de presentación, consulte [Web Parts Page Display Modes](http://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4). Para obtener más información sobre el consumo de eventos, vea [Cómo: consumir eventos en una aplicación de formularios Web](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler DisplayModeChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DisplayModeChanging As WebPartDisplayModeCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartDisplayModeCancelEventHandler ^ DisplayModeChanging;" />
      <MemberSignature Language="F#" Value="member this.DisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler " Usage="member this.DisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a user clicks a verb on a Web page that begins the process of changing to a different display mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modos de presentación son una parte integral de aplicaciones de elementos Web. Cuando los usuarios cambian a un modo de presentación diferente en una página Web, la página a menudo tendrá un aspecto muy diferentes, dependiendo del propósito del nuevo modo de presentación. Después de que un usuario inicia el proceso de cambiar a un nuevo modo de presentación, haga clic en un verbo, debe realizar algunos cambios en la interfaz de usuario (UI) mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode%2A> propiedad para determinar cuál será el nuevo modo de presentación y, a continuación, cambiar distintos de la interfaz de usuario elementos en consecuencia. Una forma útil de hacer esto es reemplazar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> método para personalizar la interfaz de usuario.  
  
> [!NOTE]
>  Para obtener más información acerca de los modos de presentación, consulte [Web Parts Page Display Modes](http://msdn.microsoft.com/library/cc106284-82dc-4770-98cb-673dbc4ed4c4). Para obtener más información sobre el consumo de eventos, vea [Cómo: consumir eventos en una aplicación de formularios Web](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DisplayModes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection DisplayModes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayModes As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ DisplayModes { System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayModes : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a read-only collection of all display modes that are associated with a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> que contiene el conjunto de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> objetos asociados con el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> referencias de propiedad todos los asociados modos de visualización, diferencia de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad, que hace referencia a los modos de presentación que están disponibles (se admiten) en la página actual.  
  
 Dos de los modos de presentación proporcionados, exploración y diseño, siempre se admiten en una página. Los otros tres modos de presentación, edición, catálogo y las conexiones, se admiten solamente cuando una página tiene el tipo correspondiente de la zona necesaria para un modo de presentación determinado para que funcione. Por ejemplo, si la página no contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> zona, el modo de presentación de edición aparecería en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> propiedad, pero no aparecería en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> propiedad. El código utiliza esta propiedad para rellenar la lista con todos los modos de presentación disponibles en el conjunto de controles de elementos Web, incluidas aquellas que no se admiten en la página actual. En este caso, el catálogo y conectar pantalla no se admiten los modos, porque sus correspondientes necesarios zonas no están en la página.  
  
 Mostrar de los otros tres modos: exploración, diseño y edición: se admiten en la página. Editar modo se admite porque la página contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> siempre se admiten los modos de diseño y de la zona, al examinar.  
  
 Después de cargar la página en un explorador, puede utilizar el control de lista desplegable para cambiar la página de modo de exploración al modo de diseño y, a continuación, al modo de edición. En modo de edición, puede haga clic en el menú de verbos de lista desplegable en el encabezado de uno de los controles de servidor y seleccione **editar** para el control de edición. Tenga en cuenta que si selecciona **catálogo** o **conectar** en la lista desplegable, se genera una página de error.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_DisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayModes/CS/wpmgrDisplayModescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_DisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_DisplayModes/VB/wpmgrDisplayModesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDisplayModes" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      </Docs>
    </Member>
    <Member MemberName="DynamicConnections">
      <MemberSignature Language="C#" Value="protected internal System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection DynamicConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property DynamicConnections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ DynamicConnections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicConnections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of all dynamic connections that currently exist on a Web page.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> que contiene referencias a todas las conexiones dinámicas en una página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las conexiones dinámicas son conexiones que se crean mediante programación, en lugar de en estáticamente. Las conexiones estáticas se crean mediante la declaración de ellos en el marcado de una página de formularios Web Forms. Las conexiones dinámicas se forman mediante programación o cuando un usuario crea una conexión mediante la interfaz de usuario (UI) de conexión.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> colección, aunque es de solo lectura y no se puede cambiar su contenido, proporcionan acceso mediante programación a cada objeto de conexión dinámica.  
  
> [!NOTE]
>  Para realizar operaciones comunes como conectar o desconectar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, los programadores deben utilizar los métodos públicos en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de la clase, como <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>, en lugar de intentar modificar directamente la conexión objetos en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DynamicConnections%2A> colección.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID" />
      </Docs>
    </Member>
    <Member MemberName="EditDisplayMode">
      <MemberSignature Language="C#" Value="public static readonly System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Web.UI.WebControls.WebParts.WebPartDisplayMode EditDisplayMode" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EditDisplayMode As WebPartDisplayMode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Web::UI::WebControls::WebParts::WebPartDisplayMode ^ EditDisplayMode;" />
      <MemberSignature Language="F#" Value=" staticval mutable EditDisplayMode : System.Web.UI.WebControls.WebParts.WebPartDisplayMode" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the display mode in which end users can edit and modify server controls. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> campo hace referencia a una personalizada <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> objeto que se crea y contiene el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Dado que se trata de un objeto estático, puede hacer referencia a él directamente desde el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase sin necesidad de crear una instancia del control.  
  
 Cuando una página que contiene los elementos Web controla la carga por primera vez, se encuentra en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BrowseDisplayMode> (modo de exploración) de forma predeterminada. Cuando los usuarios desean editar o modificar un control de servidor, debe cambiar primero la página para <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> (modo de edición). En segundo lugar, debe seleccionar un control de servidor específico para editar, haciendo clic en el verbo de edición en el menú de verbos de encabezado de ese control. Después de que el control está en modo de edición, aparece la interfaz de usuario (UI) de edición para editar el control seleccionado.  
  
 Para habilitar el modo de edición en una página, la página debe contener al menos un <xref:System.Web.UI.WebControls.WebParts.EditorZone> controles de zona que incluye uno o varios de la edición proporcionado, como el <xref:System.Web.UI.WebControls.WebParts.LayoutEditorPart> control o controles de edición personalizados.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo trabajar con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode> campo mediante programación. El código rellena una lista desplegable con los modos de presentación admitidos para la página, que en este caso son exploración, diseño y edición. Para admitir la edición, un `<asp:EditorZone>` elemento está en la página. Tenga en cuenta que, en la `Page_PreRender` /método siguiente, el código comprueba si la actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayMode%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EditDisplayMode>. Si es así, `Label1` serán visibles y si no es así, `Label1` estará oculto.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_EditDisplayMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_EditDisplayMode/CS/wpmgrEditDisplayModecs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_EditDisplayMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_EditDisplayMode/VB/wpmgrEditDisplayModevb.aspx#1)]  
  
 Después de cargar la página en un explorador, está en modo de exploración de forma predeterminada. Tenga en cuenta que la etiqueta en la página está oculta. Utilice el control de lista desplegable para cambiar la página al modo de edición. Tenga en cuenta que, debido al código en el `Page_PreRender` método ahora está visible la etiqueta. Haga clic en el **editar** verbo en el menú de verbos en uno de los controles, para habilitar la edición de ese control concreto.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public virtual bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableClientScript As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableClientScript { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableClientScript : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that determines whether client-side scripting is enabled on the Web page that contains a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Un valor booleano que indica si el script de cliente puede ejecutarse en la página. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableClientScript%2A> propiedad proporciona una manera para que los desarrolladores deshabilitar scripts de cliente. Puede deshabilitar por motivos de seguridad de secuencias de comandos de cliente, o para asegurarse de que todos los usuarios de una página tendrán una experiencia de usuario similar, aunque usen distintos exploradores.  
  
 Puede deshabilitar mediante la adición de script de cliente un `EnableClientScript` atribuir a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> elemento en una página Web, como se muestra en la siguiente línea de código declarativo:  
  
 `<asp:webpartmanager id="manager" runat="server"`  
  
 `EnableClientScript="false" />`  
  
 Además, los desarrolladores podrían eliminar esta propiedad mediante la herencia de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> valor de clase y la configuración predeterminada en `false`.  
  
 El conjunto de controles de elementos Web usa para proporcionar algunos del cliente de interfaz de usuario (UI) y características de personalización de script de cliente. Si deshabilita el cliente de scripting, elementos Web controles seguirán funcionan, pero se deshabilitan algunas características. Se deshabilita la capacidad de arrastrar controles a distintas zonas, junto con la capacidad de representar los verbos en un menú de verbos de lista desplegable en la barra de título de un control (los verbos en su lugar, se muestran como vínculos en la barra de título del control).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EnableTheming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableTheming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableTheming : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating that the use of themes is enabled on a Web page.</summary>
        <value>Un valor booleano que indica si están habilitados los temas. <see langword="true" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control invalida la base de <xref:System.Web.UI.Control.EnableTheming%2A> propiedad para asegurarse de que siempre devuelve un valor de `true`. Esto se hace porque los elementos Web de conjunto de controles requiere el uso de temas para representar los elementos Web de los controles que son controles secundarios de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control y que forman la interfaz de usuario (UI) de una página Web. Por ejemplo, los temas se utilizan para representar las distintas zonas y parte de los controles que residen en las zonas, incluidos los distintos tipos de controles (controles que heredan de la <xref:System.Web.UI.WebControls.WebParts.Part> clase), controles de usuario, controles de servidor ASP.NET y servidor personalizado controles.  
  
 Aunque el invalidado <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EnableTheming%2A> propiedad se implementa como una propiedad de lectura/escritura según su propiedad base, no se puede establecer la propiedad porque por cuestiones de diseño siempre debe devolver un valor de `true`. Si se intenta establecer la propiedad, un <xref:System.NotSupportedException> se produce la excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the property value.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWebPartConnecting">
      <MemberSignature Language="C#" Value="public virtual void EndWebPartConnecting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWebPartConnecting() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWebPartConnecting ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWebPartConnecting();" />
      <MemberSignature Language="F#" Value="abstract member EndWebPartConnecting : unit -&gt; unit&#xA;override this.EndWebPartConnecting : unit -&gt; unit" Usage="webPartManager.EndWebPartConnecting " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes the process of connecting a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control to another control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A> método finaliza el proceso de conectar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control a otro control. Es el equivalente a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting%2A> método.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartConnecting%2A> método garantiza que el objeto de personalización al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad es modificable, que es necesario porque formar una conexión es en sí misma un tipo de personalización. A continuación, este método garantiza que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> objeto no es `null`y finalmente llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The control referenced by the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> property is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Los desarrolladores que necesitan para ampliar el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control podría desear invalidar este método en una clase derivada. Un enfoque sería llamar al método base y, a continuación, agregue un controlador personalizado adicional, también puede personalizar completamente todo el proceso de la realización de una conexión entre los controles.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartConnecting(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="EndWebPartEditing">
      <MemberSignature Language="C#" Value="public virtual void EndWebPartEditing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWebPartEditing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWebPartEditing ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWebPartEditing();" />
      <MemberSignature Language="F#" Value="abstract member EndWebPartEditing : unit -&gt; unit&#xA;override this.EndWebPartEditing : unit -&gt; unit" Usage="webPartManager.EndWebPartEditing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes the process of editing a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> método finaliza el proceso de la edición de un <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Es el equivalente a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> método.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> método garantiza que el objeto de personalización al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad es modificable, que es necesario porque la edición de un control es un proceso que requiere cambios de personalización. A continuación, este método garantiza que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> objeto no es `null`, de modo que actualmente seleccionado <xref:System.Web.UI.WebControls.WebParts.WebPart> puede cambiar el control y, por último, llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> (método).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The control referenced by the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> property is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Los desarrolladores que necesitan para ampliar el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control podría desear invalidar este método en una clase derivada. Un enfoque sería llamar al método base y, a continuación, agregue un controlador personalizado adicional, también puede personalizar completamente todo el proceso de finalización de la edición de un control. Por ejemplo, en el método de invalidación, podría llamar primero al método base y, a continuación, agregar código que determina qué cambios de edición se realizaron y muestra hacer copia de la lista de cambios para el usuario final como una confirmación.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ExportSensitiveDataWarning">
      <MemberSignature Language="C#" Value="public virtual string ExportSensitiveDataWarning { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExportSensitiveDataWarning" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ExportSensitiveDataWarning As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ExportSensitiveDataWarning { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExportSensitiveDataWarning : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text of a warning message that is displayed when a user attempts to export sensitive state data from a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <value>Una cadena que contiene el mensaje de advertencia. El mensaje predeterminado es un valor de referencia cultural suministrado por .NET Framework.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un usuario intenta exportar datos de estado confidenciales desde un <xref:System.Web.UI.WebControls.WebParts.WebPart> control, si alguno de los datos que se exportan proviene de un miembro que se ha marcado como confidencial en el código fuente, se muestra un mensaje de advertencia al usuario en un cuadro de mensaje que les indica que se está exportando los datos confidenciales y proporcionar una oportunidad para cancelar la exportación. Los programadores pueden marcar los datos de un miembro concreto como confidenciales estableciendo el `isSensitive` parámetro de la `[Personalizable]` atribuir a `true` en el miembro. Para obtener más información acerca de este atributo y los parámetros, vea la <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute> clase.  
  
> [!IMPORTANT]
>  Cuando se usa la característica de exportación de elementos Web, potencialmente se pudieron exportar datos confidenciales a usuarios no autorizados. Para obtener más información sobre cómo protegerse contra esta amenaza, consulte [Securing Web Parts Pages](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 Se muestra el mensaje de forma predeterminada cada vez que los usuarios a realizar la exportación. Sin embargo, al asignar un valor a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> propiedad, puede proporcionar un mensaje de advertencia personalizado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso declarativo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportSensitiveDataWarning%2A> propiedad.  
  
 El código de la siguiente página Web utiliza un estándar <xref:System.Web.UI.WebControls.BulletedList> y lo coloca en una zona. El control se ajustará con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control en tiempo de ejecución, lo que permite actuar como un verdadero <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Para que el control sea exportable, un `ExportMode` atributo se agrega a la `<asp:bulletedlist>` elemento y el valor del atributo se establece en <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.All>, lo que significa que los datos confidenciales y no confidenciales se puede exportar. Tenga en cuenta también que, en la `<asp:webpartmanager>` elemento, el `ExportSensitiveDataWarning` atributo se asigna un valor personalizado.  
  
 Tenga en cuenta que para que funcione el ejemplo de código, hay una configuración que se debe agregar en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. En el `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el siguiente código de marcado.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 [!code-aspx-csharp[WebParts_WebPartManager_ExportSensitiveData#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_ExportSensitiveData/CS/wpmgrExportSensitiveWarningCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_ExportSensitiveData#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_ExportSensitiveData/VB/wpmgrExportSensitiveWarningVB.aspx#1)]  
  
 Después de cargar la página en un explorador, haga clic en el menú de verbos (representado por una flecha hacia abajo) en la barra de título del control que contiene los vínculos. En el menú de verbos, seleccione **exportar**y observe que aparece un cuadro de mensaje con la advertencia personalizada. Si desea continuar con la exportación, haga clic en **Aceptar**, que le permitirá guardar una copia local de un archivo de descripción XML con todos los datos sobre el control.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ExportWebPart">
      <MemberSignature Language="C#" Value="public virtual void ExportWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ExportWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member ExportWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Xml.XmlWriter -&gt; unit&#xA;override this.ExportWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Xml.XmlWriter -&gt; unit" Usage="webPartManager.ExportWebPart (webPart, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="webPart">The control from which data will be exported.</param>
        <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> that writes the exported data from <c>webPart</c> to an XML description file.</param>
        <summary>Creates an XML description file that contains state and property data for a server control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> método ensambla distintos datos de estado y de propiedades de `webPart` en un archivo XML. Los datos incluyen información sobre el control, incluida su ensamblado, los datos de estado y los datos de la propiedad. El usuario que inicia la exportación puede guardar el archivo XML en el disco en el equipo local o la red. Otros usuarios, a continuación, pueden importar el archivo de descripción a otra página o sitio Web y los datos de estado y de propiedades se aplican a una instancia diferente de `webPart`. Esto proporciona un mecanismo rápido y cómodo para los usuarios a compartir y reutilizar la configuración en controles de servidor, y también proporciona a los desarrolladores un medio para controlar la apariencia y el comportamiento de los controles importados y exportados.  
  
 Propiedades de `webPart` no se exportan de forma predeterminada. Para habilitar la exportación de una propiedad, debe marcarse con el `[Personalizable]` atributo en el código fuente. Opcionalmente, también puede marcar una propiedad exportable como que contiene datos confidenciales, estableciendo el `isSensitive` parámetro de la `[Personalizable]` atribuir a `true`. De forma predeterminada, `isSensitive` es `false`. Los desarrolladores pueden establecer el parámetro `true` para indicar que los datos son confidenciales.  
  
 Para habilitar `webPart` para ser exportada, un desarrollador establece su <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> valor de propiedad como <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.All> (que incluye todas las propiedades personalizables y confidenciales), o a <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode.NonSensitiveData>, que exporta todo excepto las propiedades confidenciales .  
  
> [!IMPORTANT]
>  Permitir a los usuarios para exportar datos desde los controles y para importar datos en otros controles, conlleva algunos riesgos de seguridad. Los programadores deben utilizar el enfoque descrito anteriormente para proteger los datos confidenciales y, si desean evitar el riesgo de exponer los datos, no debe habilitar exportación en `webPart` en absoluto. Para obtener más información sobre cuestiones de seguridad de elementos Web, consulte [Securing Web Parts Pages](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.  \- or -  <paramref name="writer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not contained in the collection of controls referenced in <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" />.  \- or -  The <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" /> property of <paramref name="webPart" /> is set to a value of <see cref="F:System.Web.UI.WebControls.WebParts.WebPartExportMode.None" />, which means that export is disabled for <paramref name="webPart" />.</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.ExportMode" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberSignature Language="F#" Value="override this.Focus : unit -&gt; unit" Usage="webPartManager.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Overridden to prevent focus from ever being set on the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control, because it has no user interface (UI).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Focus%2A> método invalida la base de <xref:System.Web.UI.Control.Focus%2A?displayProperty=nameWithType> método y produce una excepción si un llamador invoca el método. Dado que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control no tiene ninguna interfaz de usuario y nunca está visible para los usuarios, nunca puede permitir que el foco hasta que se establezca en él.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">A caller tries to call the <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.Focus" /> method, which is not supported in a control that has no UI.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetConsumerConnectionPoints">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection GetConsumerConnectionPoints(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConsumerConnectionPointCollection ^ GetConsumerConnectionPoints(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetConsumerConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection&#xA;override this.GetConsumerConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection" Usage="webPartManager.GetConsumerConnectionPoints webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A server control that is acting as a consumer in a connection.</param>
        <summary>Retrieves the collection of <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" /> objects that can act as connection points from a server control that is acting as a consumer within a Web Parts connection.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection" /> that contains all connection points in the consumer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una conexión de elementos Web siempre implica exactamente dos controles: uno actúa como proveedor de datos, el otro actúa como consumidor de datos. Cada control debe tener uno o varios métodos que se definen como puntos de conexión. En el caso de un control consumidor, sus puntos de conexión son <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objetos. La recuperación de los puntos de conexión del consumidor es un paso necesario para formar una conexión de elementos Web.  
  
 Un consumidor siempre debe tener al menos un punto de conexión para poder establecer una conexión. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método comprueba un control consumidor y recupera una colección de todos sus puntos de conexión. Si un <xref:System.Web.UI.WebControls.WebParts.WebPart> control no tiene ningún punto de conexión, el método devuelve una colección vacía.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, vea el tema [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si una conexión ya existe y, si no es así, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad. Tenga en cuenta que la <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection> objeto que se recupera utilizando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> método, a continuación, se pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método para determinar si se puede crear una conexión entre los dos controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente de los controles. Puede obtener este código y las instrucciones para compilar, desde la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase.  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **conectar** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre los controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **conectar**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método. Si vuelve a esta página en una sesión de explorador posterior, esta conexión estática ya estará establecida y no tendrá que volver a crearse cada vez que se carga la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentWebPartManager">
      <MemberSignature Language="C#" Value="public static System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.WebControls.WebParts.WebPartManager GetCurrentWebPartManager(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::WebControls::WebParts::WebPartManager ^ GetCurrentWebPartManager(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="static member GetCurrentWebPartManager : System.Web.UI.Page -&gt; System.Web.UI.WebControls.WebParts.WebPartManager" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">The Web page that contains an instance of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" />.</param>
        <summary>Retrieves a reference to the current instance of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on a page.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> that references the current instance of the control on a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> método resulta útil en contextos donde van a recuperar una referencia a la actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Un escenario común donde esto podría ocurrir es si está escribiendo un control personalizado que no se conoce durante el desarrollo qué el identificador de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> será el control de su página.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> método es estático, por lo que puede llamar directamente, sin necesidad de crear una instancia de un <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 Algunos controles en los elementos Web de conjunto de controles, como <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, tienen un <xref:System.Web.UI.WebControls.WebParts.WebPart.WebPartManager%2A> propiedad que puede recuperar una referencia al actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Por lo tanto, cuando se trabaja con estos controles, debe utilizar esta propiedad para recuperar una referencia.  
  
 Si escribe código en un contexto donde se conoce el identificador de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de control, como la escritura de código alineado dentro de una página Web, resulta más sencillo y más eficaz para hacer referencia directamente a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control mediante su identificador.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A>. El ejemplo consta de dos partes: un control de servidor personalizado y una página Web que hospeda el control.  
  
 Personalizado <xref:System.Web.UI.WebControls.Label> control usa la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetCurrentWebPartManager%2A> método para recuperar el identificador de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control en la página actual y, a continuación, muestra el identificador.  
  
 [!code-csharp[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/CS/MyManagerIDLabel.cs#2)]
 [!code-vb[WebParts_WebPartManager_GetCurrentWebPartManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/VB/MyManagerIDLabel.vb#2)]  
  
 En el ejemplo de código siguiente se proporciona la página Web que hospeda el control en un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/CS/getCurrentWPManagerCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_GetCurrentWebPartManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetCurrentWebPartManager/VB/getcurrentWPManagervb.aspx#1)]  
  
 Después de cargar la página en un explorador, observe que el identificador del elemento actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control se muestra en la opción de instalación <xref:System.Web.UI.WebControls.Label> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDisplayTitle">
      <MemberSignature Language="C#" Value="protected internal virtual string GetDisplayTitle (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetDisplayTitle(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetDisplayTitle(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ GetDisplayTitle(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetDisplayTitle : System.Web.UI.WebControls.WebParts.WebPart -&gt; string&#xA;override this.GetDisplayTitle : System.Web.UI.WebControls.WebParts.WebPart -&gt; string" Usage="webPartManager.GetDisplayTitle webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The control for which the method returns the value of <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" />.</param>
        <summary>Gets a string containing the value for the <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" /> property of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <returns>A string that contains the calculated value of <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" /> for <paramref name="webPart" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtiene el valor calculado de la <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A> propiedad `webPart`. Cuando los desarrolladores asignan un valor a la <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> propiedad de un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control), este método genera el valor que se mostrará como título. El valor calculado para los controles sin título consta de un número a una cadena, con el número que indica la secuencia de un control dentro de la zona actual.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection.</exception>
        <block subset="none" type="overrides">
          <para>Este método se puede invalidar para cambiar cómo se calcula el título de presentación predeterminado.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle" />
      </Docs>
    </Member>
    <Member MemberName="GetExportUrl">
      <MemberSignature Language="C#" Value="public string GetExportUrl (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetExportUrl(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetExportUrl(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.GetExportUrl : System.Web.UI.WebControls.WebParts.WebPart -&gt; string" Usage="webPartManager.GetExportUrl webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> that is being exported.</param>
        <summary>Gets the relative virtual path and the query string that are part of the request when a user attempts to export a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control.</summary>
        <returns>A string that contains the relative virtual path and the query string that together form the request to export a control.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl%2A> método es una ruta de acceso virtual relativa a la ubicación del servidor de la página que contiene el control, más el valor de cadena de consulta anexada que forma la solicitud de exportación enviada al servidor. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetExportUrl%2A> método codifica la cadena antes de permitir que la solicitud que se envíen, para protegerse contra ataques de script malintencionado.  
  
> [!NOTE]
>  Para obtener más información acerca de cómo proteger las aplicaciones de elementos Web, consulte [Securing Web Parts Pages](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.WebControls.WebParts.GenericWebPart GetGenericWebPart(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::WebControls::WebParts::GenericWebPart ^ GetGenericWebPart(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetGenericWebPart : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.GenericWebPart" Usage="webPartManager.GetGenericWebPart control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.GenericWebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">A server control that exists in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> and is wrapped as a child control of a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> at run time.</param>
        <summary>Gets a reference to the instance of the <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> control that contains a server control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> that wraps <paramref name="control" /> as a child control. The method returns <see langword="null" /> if <paramref name="control" /> is not contained in a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En general, hay dos categorías de controles que los desarrolladores se coloque en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas para participar en aplicaciones de elementos Web: <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, que heredan de la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase base y otros controles de servidor, que pueden ser estándares Controles ASP.NET, controles personalizados o controles de usuario. Cuando cualquiera de estos controles se coloca en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, que se tarda en la funcionalidad de un <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Un <xref:System.Web.UI.WebControls.WebParts.WebPart> control tiene inherentemente esta funcionalidad, pero los otros tipos de controles de servidor no tienen que serlo. Para habilitar los otros controles de servidor para que actúe como <xref:System.Web.UI.WebControls.WebParts.WebPart> controla cuando se colocan en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona, ASP.NET encapsula con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control. Dado que la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control hereda directamente de la <xref:System.Web.UI.WebControls.WebParts.WebPart> (clase), proporciona sus controles secundarios con características de elementos Web es true.  
  
 A menudo en tiempo de ejecución, quizá desee obtener una referencia a los desarrolladores de páginas el <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control que contiene uno de los controles de servidor en una zona. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método permite que se puedan recuperar una referencia a la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método. El ejemplo de código contiene un <xref:System.Web.UI.WebControls.Calendar> control declarados dentro de un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona. El `Button1_Click` método primero imprime el Id. de la <xref:System.Web.UI.WebControls.Calendar> control a una etiqueta y, a continuación, usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método para recuperar una referencia a la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control que contiene el calendario. El identificador de la <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control y el identificador de su control secundario (que es el <xref:System.Web.UI.WebControls.Calendar> control), se imprimen en un segundo control label.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_GetGenericWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_GetGenericWebPart/CS/getGenericWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_GetGenericWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_GetGenericWebPart/VB/getGenericWebPartVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" />
      </Docs>
    </Member>
    <Member MemberName="GetProviderConnectionPoints">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection GetProviderConnectionPoints(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ProviderConnectionPointCollection ^ GetProviderConnectionPoints(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="abstract member GetProviderConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection&#xA;override this.GetProviderConnectionPoints : System.Web.UI.WebControls.WebParts.WebPart -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection" Usage="webPartManager.GetProviderConnectionPoints webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A server control that is acting as a provider in a connection.</param>
        <summary>Retrieves the collection of <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> objects that can act as connection points from a server control that is acting as a provider within a Web Parts connection.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection" /> that contains all connection points in the provider.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una conexión de elementos Web siempre implica exactamente dos controles: uno actúa como proveedor de datos, el otro actúa como consumidor de datos. Cada control debe tener uno o varios métodos que se definen como puntos de conexión. En el caso de un control de proveedor, sus puntos de conexión son <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> objetos.  
  
 Un proveedor siempre debe tener al menos un punto de conexión para poder establecer una conexión. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método comprueba un control proveedor y recupera una colección de todos sus puntos de conexión. La recuperación de los puntos de conexión del proveedor es un paso necesario para formar una conexión de elementos Web.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>.  
  
 El ejemplo consta de cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Una página Web que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 Contiene el marcado declarativo para la página Web `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si una conexión ya existe y, si no es así, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad. Tenga en cuenta que la <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection> objeto que se recupera utilizando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> método, a continuación, se pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CanConnectWebParts%2A> método para determinar si se puede crear una conexión entre los dos controles.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 La tercera parte del ejemplo es el código fuente de los controles. Puede obtener este código y las instrucciones para compilar, desde la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase.  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **conectar** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre los controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **conectar**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método. Si vuelve a esta página en una sesión de explorador posterior, esta conexión estática ya estará establecida y no tendrá que volver a crearse cada vez que se carga la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="ImportWebPart">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPart ImportWebPart (System.Xml.XmlReader reader, out string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.WebPart ImportWebPart(class System.Xml.XmlReader reader, [out] string&amp; errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart(System.Xml.XmlReader,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportWebPart (reader As XmlReader, ByRef errorMessage As String) As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::WebPart ^ ImportWebPart(System::Xml::XmlReader ^ reader, [Runtime::InteropServices::Out] System::String ^ % errorMessage);" />
      <MemberSignature Language="F#" Value="abstract member ImportWebPart : System.Xml.XmlReader *  -&gt; System.Web.UI.WebControls.WebParts.WebPart&#xA;override this.ImportWebPart : System.Xml.XmlReader *  -&gt; System.Web.UI.WebControls.WebParts.WebPart" Usage="webPartManager.ImportWebPart (reader, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="errorMessage" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="reader">An <see cref="T:System.Xml.XmlReader" /> that reads the state and property data from the XML description file that is being imported.</param>
        <param name="errorMessage">A <see cref="T:System.String" /> that is displayed to the user if an error is encountered during import.</param>
        <summary>Imports an XML description file that contains state and property data for a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control, and applies the data to the control.</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> (or a server control that is wrapped by a <see cref="T:System.Web.UI.WebControls.WebParts.GenericWebPart" /> and thus treated as a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" />) that is referenced in the imported XML description file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> método importa un archivo de descripción XML que se creó el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> método para un control de servidor. No es el control de servidor real que se importa, pero solo el archivo de descripción que contiene datos de estado y de propiedades sobre el control. El control y el ensamblado al que hace referencia en el archivo de descripción ya deben estar disponibles en el servidor donde un usuario intenta importar el archivo de descripción.  
  
 Para habilitar la importación de un control, un programador debe agregar una <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control en la página donde se habilitará la importación. Dentro de la zona, un <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> se debe agregar el control. Este control proporciona un cuadro de diálogo de archivo que permite a los usuarios examinar y busque el archivo de descripción para importar.  
  
 Después de que un usuario busca un archivo de descripción y comienza la importación, se lee el archivo de descripción por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> método. Si no hay errores y si no se encuentran el ensamblado y el control, el control de servidor se agrega al catálogo dentro de la <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control y los diversos datos de propiedad y el estado especificados en el archivo de descripción se aplican al control. El usuario puede, a continuación, seleccione el control y agregarlo a la página.  
  
> [!IMPORTANT]
>  Al igual que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart%2A> método, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ImportWebPart%2A> método tiene algunas posibles riesgos de seguridad. Ya que implica la importación de datos en un sitio Web, un usuario malintencionado podría intentar insertar datos incorrectos o un código de script incluso en el archivo de descripción que se importa. A continuación, los datos no válidos podrían aparecer en una página o en una base de datos, o podría ejecutar la secuencia de comandos insertada. Para obtener información general de los posibles riesgos asociados con la importación de archivos de descripción y formas de evitar los riesgos, consulte [Securing Web Parts Pages](http://msdn.microsoft.com/library/8ada6210-ed00-4157-b3e9-a7e87e77caa2).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> is <see langword="null" />.</exception>
        <exception cref="T:System.IO.EndOfStreamException">
          <paramref name="reader" /> could not read the file.  \- or -  <paramref name="reader" /> needed to display an import error message but did not find one in the file.  \- or -  <paramref name="reader" /> reached the end of the file without finding the XML element that contains the exported data.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.ImportCatalogPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.ExportWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Xml.XmlWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Internals">
      <MemberSignature Language="C#" Value="protected System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartManagerInternals Internals" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Internals" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Internals As WebPartManagerInternals" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::WebControls::WebParts::WebPartManagerInternals ^ Internals { System::Web::UI::WebControls::WebParts::WebPartManagerInternals ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Internals : System.Web.UI.WebControls.WebParts.WebPartManagerInternals" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Internals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartManagerInternals</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" /> class, which is used to combine and separate a set of methods that are actually implemented in the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> class, but are mostly useful for control developers.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />, a través del cual un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> puede hacer referencia a los distintos métodos que se han dividido en el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManagerInternals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad expone las API para llamar a un conjunto de <xref:System.Web.UI.WebControls.WebParts.WebPartManager> métodos que se utilizan principalmente en casos de extensibilidad.  
  
 La manera diseñada para utilizar estos métodos internos es tener acceso a ellos a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Internals%2A> propiedad. Dado que la propiedad está protegida, solo puede tener acceso a ella y llamar a los métodos dentro de una instancia de la <xref:System.Web.UI.WebControls.WebParts.WebPartManagerInternals> clase heredando de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase.  
  
> [!NOTE]
>  Esta propiedad se oculta de IntelliSense en [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]. Sin embargo, en un derivada <xref:System.Web.UI.WebControls.WebParts.WebPartManager> (clase), todavía se pueden tener acceso a la propiedad y sus distintos miembros.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAuthorized">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control can be added to a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parte de la flexibilidad de la característica de elementos Web es la capacidad para agregar controles de servidor a páginas Web en tiempo de ejecución. Hay una serie de escenarios comunes en los que un control de servidor (que puede ser un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control, un control de servidor personalizado, un control de usuario o un control de ASP.NET) se pueden agregar.  
  
 En los siguientes escenarios comunes, control conjunto si intenta agregar controles de servidor a una página de elementos Web y la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método se llama para autorizar a ellos:  
  
-   Cuando se agrega un control de servidor mediante la declaración en el marcado de una página Web en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona.  
  
-   Cuando se agrega mediante programación un control de servidor a una zona.  
  
-   Cuando un usuario importa un control de servidor en un catálogo de elementos Web de controles.  
  
-   Cuando una existente control de servidor se carga desde el almacén de datos de personalización.  
  
-   Cuando se agrega un control de servidor a un <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart> control para que esté disponible en un catálogo de controles de servidor.  
  
 En cada escenario donde se agregan los <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método se llama para asegurarse de que se cumplen todos los criterios de autorización para permitir que un control que se va a agregar. Cuando un control está autorizado, se agrega normalmente como sería si no había ningún escenario de filtrado. Cuando un control no está autorizado, el conjunto de controles de elementos Web puede responder de varias maneras, dependiendo del contexto. Puede producir un error en modo silencioso el conjunto de controles agregar un elemento no autorizado (si no es necesario para informar al usuario), puede mostrar un mensaje de error o puede agregar una instancia de la <xref:System.Web.UI.WebControls.WebParts.UnauthorizedWebPart> clase como un marcador de posición. Este objeto de marcador de posición no está visible en la página, pero está visible en el código de origen de la página para indicar que se ha excluido un control no autorizado.  
  
 El factor determinante de si un control tiene autorización es el filtro de autorización. Un filtro de autorización es una característica en el conjunto de controles de elementos Web que permite a los desarrolladores excluir de una página de todos los controles que no cumplen los criterios especificados.  
  
 Para crear un escenario de filtrado, los desarrolladores deben hacer dos cosas. En primer lugar, debe asignar un valor de cadena (el valor puede ser arbitrario) a la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad de cada <xref:System.Web.UI.WebControls.WebParts.WebPart> control van a usar en el escenario. También puede asignar un valor a esta propiedad para otros tipos de controles de servidor que no son <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, porque si se colocan en <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas, estos controles se ajustan con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> control en tiempo de ejecución y este control hereda el <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad.  
  
 El segundo paso es necesario para la creación de un escenario de filtrado es en invalidar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> método, o para crear un controlador de eventos para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos. En estos métodos, un desarrollador puede comprobar la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad, y si el valor indica que el control no debe estar autorizado, el programador garantiza que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método devuelve un valor de `false`.  
  
> [!NOTE]
>  Para obtener ejemplos de código y una descripción de cómo configurar un escenario de filtrado personalizado que mediante la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, vea los temas de las sobrecargas del método.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAuthorized">
      <MemberSignature Language="C#" Value="public bool IsAuthorized (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAuthorized(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAuthorized(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.IsAuthorized : System.Web.UI.WebControls.WebParts.WebPart -&gt; bool" Usage="webPartManager.IsAuthorized webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control being checked for authorization.</param>
        <summary>Carries out the initial steps in determining whether a control is authorized to be added to a page.</summary>
        <returns>A Boolean value that indicates whether <paramref name="webPart" /> can be added to a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> es el método inicial llamado por el control de elementos Web establecido para comprobar la autorización para un <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Acepta `webPart` como un parámetro y se iniciará un proceso que determina en última instancia si el control se agregará a una página. Llamar a este método desde el código directamente cuando se necesita determinar si un control determinado está autorizado.  
  
 Este método lleva a cabo las tareas iniciales de determinar si el control hereda de la <xref:System.Web.UI.WebControls.WebParts.WebPart> de clase o es una <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> de control y, si es así, qué tipo de control secundario contiene. Para finalizar la tarea de autorización, llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecargar el método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Web.UI.WebControls.WebParts.WebPart%29> método desde el código para determinar si un control está autorizado para agregarse a una página.  
  
 El ejemplo de código consta de tres partes:  
  
-   Un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control que reemplaza el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método.  
  
-   Una página Web que crea un filtro para un <xref:System.Web.UI.WebControls.WebParts.WebPart> control.  
  
-   Explicación de cómo ejecutar el ejemplo de código.  
  
 Este ejemplo de código utiliza un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control que reemplaza el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecargar el método para proporcionar control personalizado de la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad. Este control busca un valor de propiedad `admin` y, si el valor está presente, se autoriza el control. Si un control tiene un valor diferente, no está autorizado; controles sin el valor de propiedad están autorizados, ya que se supone no para formar parte del escenario de filtrado.  
  
 Para que poder ejecutar este ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código usa el método de compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/MyManagerAuthorize.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/MyManagerAuthorize.vb#2)]  
  
 La segunda parte del ejemplo de código crea un filtro que puede excluir potencialmente un control. La siguiente página Web contiene tres controles de servidor ASP.NET en un `<asp:webpartzone>` elemento. Tenga en cuenta que los controles primeros y segundo tienen sus <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades establecidas en valores diferentes y el tercero no asigna la propiedad. Este valor de autorización se puede comprobar en tiempo de ejecución y el control puede agregarse a la página si el filtro coincide con los criterios establecidos por el desarrollador. Observe también que en el `Page_Load` /método siguiente, el código llama el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Web.UI.WebControls.WebParts.WebPart%29> método para determinar si cada uno de los controles está autorizado, y si es así, establece cada control <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/IsAuthorizedCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/IsAuthorizedVB.aspx#1)]  
  
 Tenga en cuenta que para que funcione el ejemplo de código, debe agregar una configuración en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. En el `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el siguiente código de marcado.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Después de cargar la página en un explorador, tenga en cuenta que se muestra el primer control, dado que coincide con los criterios en el método invalidado. El segundo control no se agrega a la página, porque no se excluye el filtro. También se agrega el tercer control porque no tiene su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> conjunto de propiedades. Observe que si hace clic en el icono de menú de verbos en la barra de título de uno de los controles, pueden tanto puede exportar porque sus respectivas <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> se asignaron valores de propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Se llama a este método directamente desde el código. Si desea tener un mayor control mediante programación sobre el proceso de autorización, puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)" /> sobrecargar el método.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsAuthorized">
      <MemberSignature Language="C#" Value="public virtual bool IsAuthorized (Type type, string path, string authorizationFilter, bool isShared);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAuthorized(class System.Type type, string path, string authorizationFilter, bool isShared) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAuthorized(Type ^ type, System::String ^ path, System::String ^ authorizationFilter, bool isShared);" />
      <MemberSignature Language="F#" Value="abstract member IsAuthorized : Type * string * string * bool -&gt; bool&#xA;override this.IsAuthorized : Type * string * string * bool -&gt; bool" Usage="webPartManager.IsAuthorized (type, path, authorizationFilter, isShared)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="authorizationFilter" Type="System.String" />
        <Parameter Name="isShared" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> of the control being checked for authorization.</param>
        <param name="path">The relative application path to the source file for the control being authorized, if the control is a user control.</param>
        <param name="authorizationFilter">An arbitrary string value assigned to the <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" /> property of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control, used to authorize whether a control can be added to a page.</param>
        <param name="isShared">Indicates whether the control being checked for authorization is a shared control, meaning that it is visible to many or all users of the application, and its <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.IsShared" /> property value is set to <see langword="true" />.</param>
        <summary>Carries out the final steps in determining whether a control is authorized to be added to a page.</summary>
        <returns>A Boolean value that indicates whether a control is authorized to be added to a page.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga del método lleva a cabo los pasos finales para determinar si un control está autorizado para agregarse a una página. Este método garantiza que `type` es un tipo válido y que `path` tiene un valor sólo si el control que se está comprobando es un control de usuario. A continuación, llama críticos <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método, que genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método para determinar si un control está autorizado para agregarse a una página.  
  
 El primer paso es crear un filtro que puede excluir potencialmente un control. La siguiente página Web contiene tres controles de servidor ASP.NET en un `<asp:webpartzone>` elemento. Tenga en cuenta que los controles primeros y segundo tienen sus <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades establecidas en valores diferentes y el tercero no asigna la propiedad. Este valor de autorización se puede comprobar en tiempo de ejecución y el control puede agregarse a la página si el filtro coincide con los criterios establecidos por el desarrollador.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/IsAuthorizedCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsAuthorized#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/IsAuthorizedVB.aspx#1)]  
  
 El segundo paso consiste en reemplazar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> método y crear el control de los filtros de autorización personalizado. Tenga en cuenta que el código comprueba primero si la propiedad tiene un valor, por lo que cualquier control que no se asigna el <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad se agregarán automáticamente. Si un control tiene un filtro, el código devuelve `true` sólo si el valor de filtro es igual a `admin`. Esto muestra un mecanismo sencillo que se puede utilizar para presentar ciertos controles a ciertos usuarios según su función. Mientras un ejemplo completo usando roles queda fuera del ámbito de este tema, podría utilizar la misma lógica como el método invalidado en este ejemplo de código, salvo que se puede comprobar si el usuario actual está en un rol que coincida con el valor de filtro de autorización y, a continuación, agregue el control solo para ese usuario. Esto permitiría crear páginas donde algunos usuarios verían todos los controles y otros usuarios verían sólo controles seleccionados. Se trata cómo podría quedar la lógica que comprueba el filtro si usa roles:  
  
```vb  
If Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter) Then  
  return True  
Else  
  return False  
End If  
```  
  
```csharp  
if(Roles.IsUserInRole(Page.User.Identity.Name, authorizationFilter))  
    return true;  
else  
    return false;  
```  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código usa el método de compilación dinámica. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/CS/MyManagerAuthorize.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsAuthorized#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsAuthorized/VB/MyManagerAuthorize.vb#2)]  
  
 Después de cargar la página en un explorador, tenga en cuenta que se muestra el primer control, dado que coincide con los criterios en el método invalidado. El segundo control no se agrega a la página porque se excluye su valor de filtro. Se agrega el tercer control porque no tiene su <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> conjunto de propiedades. Si cambia el valor de propiedad en el segundo control para coincidir con el del primer control y, a continuación, ejecute de nuevo la página, se agrega también el segundo control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> is a user control, and <paramref name="path" /> is either <see langword="null" /> or an empty string ("").  \- or -  <paramref name="type" /> is not a user control, and <paramref name="path" /> has a value assigned to it.</exception>
        <block subset="none" type="overrides">
          <para>Este método puede reemplazarse heredando de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> de la clase, si desea proporcionar un control adicional al comprobar la autorización. Puede invalidar el método para comprobar determinados valores el <paramref name="authorizationFilter" /> parámetro y en función del valor, devuelven un valor booleano que determina si el control se agregará a una página.  Para los desarrolladores de páginas que también desee comprobar si hay filtros de autorización y proporcionar un control personalizado, hay una opción para hacerlo en línea en una página .aspx o en un archivo de código subyacente, sin tener que heredar de cualquier clase. Puede declarar un controlador de eventos alternativo en la página de la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" /> método de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control. Para obtener más información y un ejemplo, vea el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" /> método.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsCustomPersonalizationStateDirty">
      <MemberSignature Language="C#" Value="protected virtual bool IsCustomPersonalizationStateDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCustomPersonalizationStateDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsCustomPersonalizationStateDirty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsCustomPersonalizationStateDirty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCustomPersonalizationStateDirty : bool" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether personalization changes have been made that affect page-level personalization details controlled by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Un valor booleano que indica si se han realizado cambios de personalización. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control usa la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> ha cambiado la propiedad internamente para realizar el seguimiento de si alguno de los datos de personalización de nivel de página que administra. Los datos de personalización cambian cuando los usuarios realizarán diversas acciones de personalización en el nivel de página, como agregar o quitar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, conectar o desconectar controles, cambiar el diseño de la página moviendo controles y otras acciones.  
  
> [!NOTE]
>  Los usuarios también pueden realizar la personalización en el nivel de control, lo que significa realizan cambios en un control concreto, y los cambios afectan a solo ese control. Un ejemplo podría ser el control de edición y cambiar su color de fondo o su texto de título. Personalización de nivel de control no afecta a los datos de personalización de nivel de página cuyo seguimiento realizados el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> (control), lo cual la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> no se cambia el valor de propiedad para `true` cuando se produce la personalización de nivel de control.  
  
 Aunque el método está protegido y no se puede obtener acceso directamente un autor de llamada, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> puede tener acceso a la propiedad directamente por los llamadores y devuelve el valor de esta propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.PersonalizationState.IsDirty" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.PersonalizationState.SetDirty" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected internal override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub LoadControlState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void LoadControlState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadControlState : obj -&gt; unit" Usage="webPartManager.LoadControlState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Contains the persisted state data to be loaded.</param>
        <summary>Loads control state data that was saved from a previous page request, and needs to be restored on a subsequent request.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadControlState%2A> método es útil para restaurar los datos de propiedad que deben conservarse entre devoluciones de datos de una página, incluso cuando la <xref:System.Web.UI.Control.EnableViewState%2A> propiedad está establecida en `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="savedState" /> is not a valid <see cref="P:System.Web.UI.PageStatePersister.ControlState" />.</exception>
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LoadCustomPersonalizationState">
      <MemberSignature Language="C#" Value="protected virtual void LoadCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadCustomPersonalizationState(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadCustomPersonalizationState (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadCustomPersonalizationState(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit&#xA;override this.LoadCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="webPartManager.LoadCustomPersonalizationState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be loaded.</param>
        <summary>Stores the custom personalization data that has been passed to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control by the personalization objects to be used later during the initialization process.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A> método proporciona los datos de estado guardados en forma de un <xref:System.Web.UI.WebControls.WebParts.PersonalizationDictionary> objeto. Finalmente, estos datos se usan para cargar los datos de personalización en los controles de elementos Web y realizar otras tareas de inicialización.  
  
> [!NOTE]
>  Se llama a este método mediante una secuencia de métodos que comienza cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState%2A> método inicialmente solicita asociado <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> objeto para proporcionar datos de personalización que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 No se puede llamar a este método directamente desde el código. Sin embargo, se puede llamar directamente el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Load%2A> método, que a su vez llama a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A> método y devuelve los datos de personalización.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los desarrolladores pueden reemplazar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> método en un derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="MediumPermissionSet">
      <MemberSignature Language="C#" Value="protected virtual System.Security.PermissionSet MediumPermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet MediumPermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MediumPermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::PermissionSet ^ MediumPermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MediumPermissionSet : System.Security.PermissionSet" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.MediumPermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Security.PermissionSet" /> object that allows only <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> permission and <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> permission.</summary>
        <value>A <see cref="T:System.Security.PermissionSet" /> objeto que solo permite <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> permiso y <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> permiso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.PermissionSet> objeto devuelto por esta propiedad se usa durante la importación para la deserialización de tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimalPermissionSet">
      <MemberSignature Language="C#" Value="protected virtual System.Security.PermissionSet MinimalPermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet MinimalPermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MinimalPermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Security::PermissionSet ^ MinimalPermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MinimalPermissionSet : System.Security.PermissionSet" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.MinimalPermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Security.PermissionSet" /> object that allows only <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> permission and <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> permission.</summary>
        <value>Obtiene un <see cref="T:System.Security.PermissionSet" /> objeto que solo permite <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> permiso y <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> permiso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.PermissionSet> objeto devuelto por esta propiedad se utiliza durante la importación para todo excepto la deserialización de tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveWebPart">
      <MemberSignature Language="C#" Value="public virtual void MoveWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart, System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int zoneIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart, class System.Web.UI.WebControls.WebParts.WebPartZoneBase zone, int32 zoneIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MoveWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart, System::Web::UI::WebControls::WebParts::WebPartZoneBase ^ zone, int zoneIndex);" />
      <MemberSignature Language="F#" Value="abstract member MoveWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; unit&#xA;override this.MoveWebPart : System.Web.UI.WebControls.WebParts.WebPart * System.Web.UI.WebControls.WebParts.WebPartZoneBase * int -&gt; unit" Usage="webPartManager.MoveWebPart (webPart, zone, zoneIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
        <Parameter Name="zone" Type="System.Web.UI.WebControls.WebParts.WebPartZoneBase" />
        <Parameter Name="zoneIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="webPart">The <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control being moved.</param>
        <param name="zone">The target <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> to which <c>webPart</c> is being moved.</param>
        <param name="zoneIndex">An integer that indicates the index of <c>webPart</c> relative to other controls within <c>zone</c>.</param>
        <summary>Moves a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control from one <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone to another, or to a new position within the same zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control usa la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método para mover `webPart` a una nueva ubicación en la misma zona o en una zona diferente. Puede llamar a este método directamente desde el código y también se invoca cuando un usuario mueve un control a una nueva posición mediante diversas opciones de la interfaz de usuario (UI) de elementos Web.  
  
 Una serie de condiciones que debe cumplirse antes de `webPart` se pueden mover, y la mayoría de ellos se indica mediante elementos que aparecen en la sección excepciones de este tema. Si `webPart` no estaban incluidos en un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona para comenzar con, no se puede mover a una zona.  
  
 Después de que se cumplen las condiciones, se produce la siguiente secuencia de acciones para mover `webPart`:  
  
1.  El método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> genera el evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving>.  
  
2.  `webPart` se quita de su zona actual (si es necesario) y se agrega a la nueva zona o nueva posición dentro de su zona actual.  
  
3.  El método <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> genera el evento <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved>.  
  
4.  El `zoneIndex` de cada <xref:System.Web.UI.WebControls.WebParts.WebPart> control en el origen y el destino de las zonas se restablece para reflejar el control ha movido.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método directamente desde el código para mover un <xref:System.Web.UI.WebControls.WebParts.WebPart> control de una zona a otro.  
  
 El ejemplo de código consta de tres partes:  
  
-   Un control de usuario para cambiar los modos de presentación.  
  
-   Una página Web para hospedar los controles.  
  
-   Explicación de cómo ejecutar el ejemplo de código.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener más información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo es una página Web que contiene dos zonas, cada uno de los cuales contiene dos controles de servidor. Cuando un usuario hace clic en el **Mover elemento Web** botón en la página, el código en el `Button1_Click` método mueve un control de la primera zona a una nueva posición en la segunda zona. Tenga en cuenta que el código debe llamar primero la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetGenericWebPart%2A> método para recuperar el <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto que encapsula el `list1` control. Esto es necesario porque el primer parámetro de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método requiere un <xref:System.Web.UI.WebControls.WebParts.WebPart> controlar, mientras que `list1` es un control de servidor ASP.NET.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_MoveWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_MoveWebPart/CS/MoveWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_MoveWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_MoveWebPart/VB/MoveWebPartVB.aspx#1)]  
  
 Una vez cargada la página, haga clic en el **Mover elemento Web** botón y tenga en cuenta que el control que contiene los vínculos se mueve a la posición central en la segunda zona. Este movimiento del control se logra mediante programación llamando a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método. También puede usar el **modo de presentación** control de lista desplegable para cambiar la página al modo de diseño y en modo de diseño, puede arrastrar los controles a zonas diferentes o distintas posiciones dentro de sus respectivas zonas. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> también llama al método el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para controlar este tipo iniciada por el usuario se mueve.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="webPart" /> is not contained in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Controls" /> collection of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.  \- or -  <paramref name="zone" /> is not contained in the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.Zones" /> collection of the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.  \- or -  The zone referenced by the <paramref name="webPart" /> control's <see cref="P:System.Web.UI.WebControls.WebParts.WebPart.Zone" /> property is <see langword="null" />, which means that <paramref name="webPart" /> is not currently contained in a zone.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webPart" /> or <paramref name="zone" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="zoneIndex" /> is less than zero.</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnAuthorizeWebPart">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthorizeWebPart (System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthorizeWebPart(class System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart(System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAuthorizeWebPart (e As WebPartAuthorizationEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAuthorizeWebPart(System::Web::UI::WebControls::WebParts::WebPartAuthorizationEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs -&gt; unit&#xA;override this.OnAuthorizeWebPart : System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs -&gt; unit" Usage="webPartManager.OnAuthorizeWebPart e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs" /> that contains event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" /> event and invokes a handler for the event, if one exists.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> llama al método el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> control se comprueba la autorización para agregarse a una página. Cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> se llama al método, genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento, y si hay un método de controlador para el evento, invoca el controlador.  
  
 El proceso de autorizar <xref:System.Web.UI.WebControls.WebParts.WebPart> controles es una característica importante de elementos Web. Cada <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor que se agrega a una zona mediante la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control pasa por un proceso de autorización para determinar si se puede agregar el control. De forma predeterminada, el conjunto de controles de elementos Web no proporciona ningún criterio de filtrado para impedir que los controles que se agregue a una zona. Pero el conjunto de controles proporcionan los mecanismos necesarios para los desarrolladores crear sus propios criterios de filtrado. Mediante el uso de estos mecanismos, puede crear escenarios de filtrado personalizados. Por ejemplo, podría crear un filtro de modo que, si un usuario pertenece a un rol de administrador, se debe agregar algunos controles a una zona cuando se representa la página, y si el usuario pertenece a un rol de usuario, no se debe agregar estos controles.  
  
 Los mecanismos para controles de filtrado durante el proceso de autorización son la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> y <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> métodos y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento en el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  
  
 Para crear un escenario de filtrado, hay esencialmente dos tareas. En primer lugar, asigne cadenas a la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad de cada <xref:System.Web.UI.WebControls.WebParts.WebPart> control que desea filtrar. Estos valores de cadena pueden ser arbitrarios, pero deberían contener los criterios que desea filtrar. Por ejemplo, si desea que un control determinado para agregarse a un solo si zona administradora de usuario está viendo la página, a continuación, podría asignar un valor de cadena de `admin` a la propiedad. A continuación, podría utilizar la característica de roles ASP.NET y agregar todos los usuarios de su sitio a las distintas funciones como administrador, administrador y usuario. Cuando se carga una página, el código de filtrado podría comprobar qué rol de un usuario está en, compárelo con el valor de filtro de autorización en un control que se está comprobando y si (por ejemplo) en la que el usuario está en un rol de administrador y ha establecido el control <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valor a `admin`, se pudo agregar el control.  
  
 El segundo paso en la creación de un escenario de filtrado es escribir código para comprobar la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> valores de propiedad en <xref:System.Web.UI.WebControls.WebParts.WebPart> controla y determinar si cada control tiene autorización antes de agregarlo a su zona. Hay dos opciones de dónde colocar este código de filtrado. La primera opción es la opción preferida para los desarrolladores de páginas. Puede crear un método para controlar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> evento directamente en el código de script de servidor de página Web o en un archivo de separación de código. Asociar el método con el evento agregando el `OnAuthorizeWebPart` atributo a la etiqueta para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar en la página, tal como se muestra en el siguiente código de marcado de muestra.  
  
```  
<asp:webpartmanager id="manager1" runat="server"   
   OnAuthorizeWebPart="manager1_AuthorizeWebPart" />  
```  
  
 Todo el método personalizado tiene que hacer es comprobación cada <xref:System.Web.UI.WebControls.WebParts.WebPart> control para los criterios de filtrado y, a continuación, en función de los resultados, asigne un valor booleano que el <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs.IsAuthorized%2A> propiedad de la <xref:System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs> objeto para indicar si el <xref:System.Web.UI.WebControls.WebParts.WebPart> control puede ser Agregar. El código en la sección ejemplo muestra cómo hacerlo.  
  
 La segunda opción para colocar el código de filtrado es heredar de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase e invalidar un método para comprobar los criterios de filtro. Los dos métodos que se pueden invalidar para hacer esto son la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> método o la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método. Aunque funcionaría cualquier método, en la mayoría de los casos es preferible para invalidar la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, ya que le proporciona mayor control mediante programación sobre el proceso de autorización completo, mientras que la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método realiza una tarea específica , que consiste en generar el evento y busque un controlador. Para obtener un ejemplo de código personalizado <xref:System.Web.UI.WebControls.WebParts.WebPartManager> clase que invalide la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%2A> método, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized%28System.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga del método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer un controlador de eventos personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart> eventos, para que el controlador pueda proporcionar código de filtrado personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnAuthorizeWebPart%2A> método. En este ejemplo sería una forma habitual de un desarrollador de páginas proporcionar un escenario de filtrado y la autorización de <xref:System.Web.UI.WebControls.WebParts.WebPart> controles va a agregar a una página.  
  
 En la página Web, tenga en cuenta que la `<asp:webpartmanager>` elemento tiene el `OnAuthorizeWebPart` atributo con el nombre del controlador de eventos asignado a él. El método comprueba si los controles de la página tienen sus respectivas <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedades establecidas en `admin` y, si es así, devuelve `true`, lo que significa que serán autorizados y se agrega a la página.  
  
> [!NOTE]
>  Tenga en cuenta que los controles que no tiene ningún valor asignado a la <xref:System.Web.UI.WebControls.WebParts.WebPart.AuthorizationFilter%2A> propiedad se agregan, porque se supone que no son parte de un escenario de filtrado. Esto sería un enfoque común en un escenario de filtrado: se pueden filtrar algunos controles, y otros no sería, porque se supone que esté disponible para todos los usuarios.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/CS/AuthorizeWebPartCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_AuthorizeWebPart#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_AuthorizeWebPart/VB/AuthorizeWebPartVB.aspx#1)]  
  
 Porque la configuración de los usuarios en roles está fuera del ámbito de este tema, en este ejemplo de código no comprueba los roles de usuario en el filtrado. Sin embargo, el escenario de filtrado controles según los roles de usuario suele ser uno de los usos más comunes de esta característica de filtrado. Si tiene roles en el sitio y desea comprobar las funciones de usuario de este método para filtrar los controles, el método parecería al siguiente bloque de código (frente al enfoque más sencillo en el ejemplo de código anterior, que no utiliza funciones).  
  
```vb  
Protected Sub WebPartManager1_AuthorizeWebPart(ByVal sender _  
  As Object, ByVal e As WebPartAuthorizationEventArgs)  
  
  If String.IsNullOrEmpty(e.AuthorizationFilter) Then  
    If Roles.IsUserInRole(Page.User.Identity.Name, _  
      e.AuthorizationFilter) Then  
  
      e.IsAuthorized = True  
    Else  
      e.IsAuthorized = False  
    End If  
  End If  
  
End Sub  
```  
  
```csharp  
protected void mgr1_AuthorizeWebPart(object sender,   
  WebPartAuthorizationEventArgs e)  
{  
  if (!String.IsNullOrEmpty(e.AuthorizationFilter))  
  {  
    if(Roles.IsUserInRole(Page.User.Identity.Name, e.authorizationFilter))  
      e.IsAuthorized = true;  
    else  
      e.IsAuthorized = false;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.AuthorizeWebPart" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.IsAuthorized" />
      </Docs>
    </Member>
    <Member MemberName="OnConnectionsActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnConnectionsActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConnectionsActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnConnectionsActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnConnectionsActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionsActivated : EventArgs -&gt; unit&#xA;override this.OnConnectionsActivated : EventArgs -&gt; unit" Usage="webPartManager.OnConnectionsActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" /> event to indicate that a page and its controls are loaded, and connections on the page have been activated to begin sharing data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> evento después de que una página ha finalizado el proceso de carga. El método proporciona una manera de agregar un controlador para el evento.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnConnectionsActivated` atribuir a la `<asp:webpartmanager>` elemento en una página y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los desarrolladores pueden reemplazar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivated(System.EventArgs)" /> método en un derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated" />
      </Docs>
    </Member>
    <Member MemberName="OnConnectionsActivating">
      <MemberSignature Language="C#" Value="protected virtual void OnConnectionsActivating (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConnectionsActivating(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnConnectionsActivating (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnConnectionsActivating(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionsActivating : EventArgs -&gt; unit&#xA;override this.OnConnectionsActivating : EventArgs -&gt; unit" Usage="webPartManager.OnConnectionsActivating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" /> event to indicate that a page and its controls have loaded, and the process of activating connections can begin.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating> evento, que proporciona a los desarrolladores un mecanismo para personalizar mediante programación el proceso de activación de conexiones.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnConnectionsActivating` atribuir a la `<asp:webpartmanager>` elemento en una página y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los desarrolladores pueden reemplazar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnConnectionsActivating(System.EventArgs)" /> método en un derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivating" />
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayModeChanged (System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayModeChanged(class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDisplayModeChanged (e As WebPartDisplayModeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDisplayModeChanged(System::Web::UI::WebControls::WebParts::WebPartDisplayModeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs -&gt; unit&#xA;override this.OnDisplayModeChanged : System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs -&gt; unit" Usage="webPartManager.OnDisplayModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" /> that contains event data associated with a changed display mode.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" /> event to indicate that the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control has completed the process of switching from one display mode to another on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged%2A> formar de método en su base simplemente genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> eventos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanged(System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" /> método. Por ejemplo, después de un cambio de modo de presentación, puede realizar un cambio en la apariencia de la interfaz de usuario (UI), dependiendo de la pantalla que se encuentra el modo en el <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs.OldDisplayMode" /> propiedad. También puede ocultar cierto contenido o mostrar un control determinado.  Cuando se reemplaza el método, normalmente se debe llamar al método base como último paso del método reemplazado, para que el código personalizado se ejecuta primero y el evento se provoca en último lugar, que indica que el cambio de modo es completando.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayModeChanging (System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayModeChanging(class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDisplayModeChanging (e As WebPartDisplayModeCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDisplayModeChanging(System::Web::UI::WebControls::WebParts::WebPartDisplayModeCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs -&gt; unit&#xA;override this.OnDisplayModeChanging : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs -&gt; unit" Usage="webPartManager.OnDisplayModeChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains event data associated with a changing display mode.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging" /> event to indicate that the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control is in the process of switching from one display mode to another on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging%2A> formar de método en su base simplemente genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanging> eventos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Puede invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnDisplayModeChanging(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs)" /> método. Por ejemplo, como un modo de presentación está cambiando, puede comprobar cuál será el nuevo modo de presentación (mediante el uso de la <see cref="P:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs.NewDisplayMode" /> propiedad) y realizar un cambio en la interfaz de usuario (UI) en función de cuál será el nuevo modo de presentación. Si tuviera un modo de presentación personalizado, puede hacer que ciertos controles visibles si el modo personalizado se va a ser el nuevo modo de presentación.  Cuando se reemplaza este método, normalmente se debe llamar al método base como primer paso del método reemplazado, por lo que se genera el evento para indicar que un modo de presentación está empezando a cambiar. A continuación, el código personalizado puede realizar cambios en la interfaz de usuario (UI) antes de que realmente se muestre el nuevo modo de presentación.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="webPartManager.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.Init" /> event, which is the first event in the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control life cycle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnInit%2A> método llama al método base, que genera el <xref:System.Web.UI.Control.Init> evento para el control y, a continuación, realiza varios pasos de preparación, como asegurarse de que hay solo una instancia de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de control en una página y cargar datos de personalización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">There is another <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on the page</exception>
        <altmember cref="E:System.Web.UI.Control.Init" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="webPartManager.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender" /> event, which occurs just before a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control is rendered on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnPreRender%2A> método llama al método base, que genera el <xref:System.Web.UI.Control.PreRender> controla el evento para el control y, a continuación, registra varios scripts de cliente que se necesitan en las páginas que contienen elementos Web.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedWebPartChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedWebPartChanged (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedWebPartChanged(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedWebPartChanged (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedWebPartChanged(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnSelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnSelectedWebPartChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has either been newly selected or had its selection cleared.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> eventos, que normalmente es un punto en el tiempo en un desarrollador tal vez desee cambiar la apariencia de la interfaz de usuario (UI). Por ejemplo, cuando un nuevo <xref:System.Web.UI.WebControls.WebParts.WebPart> control está seleccionado, el control de elementos Web conjunto cambia la representación del control recientemente seleccionado. Una vez borrada la selección de un control, se devuelve la representación a su estado normal.  
  
 Cuando un usuario selecciona un determinado <xref:System.Web.UI.WebControls.WebParts.WebPart> control para la edición, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> se llama al método. Cuando el usuario finaliza la edición del control y lo cierra, con lo que se borra la selección del control, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> se vuelve a llamar al método.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Hay varias opciones relacionadas con la <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" /> evento, para permitir a los desarrolladores personalizar la representación que se produce después de que ha cambiado el control seleccionado. En código declarativo, dentro de la <see langword="&lt;asp:webpartmanager&gt;" /> elemento podría establecer el <see langword="OnSelectedWebPartChanged" /> atributo y asígnele el nombre de un método personalizado. En el método personalizado, puede modificar la representación de los controles seleccionados cuando se produce el evento. Otra opción es heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase e invalidar el método. Una tercera opción es personalizar la representación en el nivel de zona; Por ejemplo, puede heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> clase e invalidar sus <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)" /> método para personalizar la representación de controles activados o desactivados durante el proceso de edición.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSelectedWebPartChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedWebPartChanging (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedWebPartChanging(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedWebPartChanging (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedWebPartChanging(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnSelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnSelectedWebPartChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" /> event, which occurs during the process of changing which <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control is currently selected.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> eventos, que se produce durante el proceso de cambio que <xref:System.Web.UI.WebControls.WebParts.WebPart> control está seleccionado actualmente.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control utiliza este método y el evento asociado, para proporcionar una oportunidad de cancelar un proceso en el que se va a cambiar el control seleccionado. Por ejemplo, se llama al método dentro de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.BeginWebPartEditing%2A> método y también dentro del <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> método para proporcionar una manera de cancelar el proceso. Si un usuario hace clic en el verbo de cancelación en un control que se está editando, ya no se selecciona el control y no se guardan los cambios de edición, porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método permite cancelar los cambios de edición.  
  
> [!NOTE]
>  De igual forma se llama al método durante los métodos que inician y finalizan el proceso de conectar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control a otro control, para habilitar la cancelación de ese proceso.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento agregando el `OnSelectedWebPartChanging` atribuir a la `<asp:webpartmanager>` los elementos de marcado de página declarativo y asignar al atributo el nombre de un método personalizado.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="webPartManager.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Event data associated with the removal of the control.</param>
        <summary>Raises the base <see cref="E:System.Web.UI.Control.Unload" /> event and removes the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> instance from a Web page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWebPartAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartAdded (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartAdded(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartAdded (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartAdded(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has been added to a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> método se llama durante el proceso de agregar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (u otro control de servidor que se agrega a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona) a una página.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento agregando el `OnWebPartAdded` atribuir a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartAdding">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartAdding (System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartAdding(class System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartAdding (e As WebPartAddingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartAdding(System::Web::UI::WebControls::WebParts::WebPartAddingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs -&gt; unit&#xA;override this.OnWebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs -&gt; unit" Usage="webPartManager.OnWebPartAdding e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" /> event, which occurs during the process of adding a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or a server or user control) to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> evento para indicar que es un control en el proceso que se va a agregar. El método también proporciona la opción de cancelar el proceso de adición. Si el control se agregó correctamente, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado mediante la adición de la `OnWebPartAdding` atribuir a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los programadores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" /> método para personalizar el control de eventos.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartClosed (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartClosed(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartClosed (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartClosed(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" /> event to signal that a control has been removed from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento para indicar que un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (u otro control de usuario o servidor) se ha cerrado correctamente en una página.  
  
 Para cerrar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control significa para quitarlo de una página para que no se representa, y también para colocarlo en una clase especial que contiene el objeto llama a un catálogo de página. Un catálogo de página, que corresponde a la <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controlar, mantiene las referencias a cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de cada página. Si un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control se declara en una página en un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, los usuarios pueden cambiar la página al modo de presentación de catálogo y agregar a la página todos los controles que se hayan cerrado anteriormente.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> método proporciona una oportunidad para que los desarrolladores crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> eventos. Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnWebPartClosed` atribuir a la `<asp:webpartmanager>` elemento en una página y, a continuación, asignar un nombre de método personalizado al atributo. Es una tarea útil que un desarrollador puede llevar a cabo en este método mostrar un marcador de posición en lugar del control cerrado, completado con información sobre herramientas que indique a los usuarios cómo volver a agregar el control a la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartClosing (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartClosing(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartClosing (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartClosing(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnWebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" /> event, which occurs during the process of a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control being removed from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento para indicar que es un control en el proceso se cerró o se quita de una página. El método también proporciona la opción de cancelar el proceso de cierre. Si el control se quita correctamente de la página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado mediante la adición de la `OnWebPartClosinging` atribuir a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los programadores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" /> método para personalizar el control de eventos.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartDeleted (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartDeleted(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartDeleted (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartDeleted(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartDeleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has been permanently deleted from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A> método se llama durante el proceso de eliminación de un <xref:System.Web.UI.WebControls.WebParts.WebPart> control (u otro control de servidor que se agrega a un <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zona) desde una página.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento agregando el `OnWebPartDeleted` atribuir a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartDeleting (System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartDeleting(class System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartDeleting (e As WebPartCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartDeleting(System::Web::UI::WebControls::WebParts::WebPartCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit&#xA;override this.OnWebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartDeleting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" /> event, which indicates that a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or server or user control that is contained in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone) is in the process of being deleted.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> se pueden eliminar controles, y cuando se elimina un control, la instancia del control se quita permanentemente de una página y no se puede restaurar. Dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> controles son aquellos que se agregan mediante programación o desde un catálogo de elementos Web, en lugar de controles estáticos que se declaran en el marcado de una página Web.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> evento para indicar que un control se eliminará permanentemente de su zona. El método también proporciona la oportunidad de cancelar el proceso de eliminación. Si el control se eliminó correctamente de la página, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado mediante la adición de la `OnWebPartDeleting` atribuir a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los programadores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" /> método para personalizar el control de eventos.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartMoved">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartMoved (System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartMoved(class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartMoved (e As WebPartEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartMoved(System::Web::UI::WebControls::WebParts::WebPartEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit&#xA;override this.OnWebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventArgs -&gt; unit" Usage="webPartManager.OnWebPartMoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" /> event, which occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has been moved to a different location on a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> eventos al final de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart%2A> método, que garantiza que el proceso de mover un control completo antes de que cualquier código en el evento se ejecuta el controlador.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento se desencadena cuando se mueve un control dentro de su zona actual o a otra zona y no importa si el movimiento se realiza mediante programación o por el usuario arrastra el control.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento agregando el `OnWebPartMoved` atribuir a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartMoving">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartMoving (System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartMoving(class System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartMoving (e As WebPartMovingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartMoving(System::Web::UI::WebControls::WebParts::WebPartMovingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs -&gt; unit&#xA;override this.OnWebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs -&gt; unit" Usage="webPartManager.OnWebPartMoving e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" /> event, which indicates that a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server or user control in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone is in the process of being moved.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento, que se produce cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o de otro control de servidor se mueve dentro de su zona o a otra zona. El método también proporciona la oportunidad de cancelar el proceso de mover. Si el movimiento se haya completado correctamente, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado mediante la adición de la `OnWebPartMoving` atribuir a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los programadores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" /> método para personalizar el control de eventos.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsConnected">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsConnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsConnected(class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsConnected (e As WebPartConnectionsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsConnected(System::Web::UI::WebControls::WebParts::WebPartConnectionsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit&#xA;override this.OnWebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsConnected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" /> event, which occurs after a connection has been established between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> método provoca el evento correspondiente al final de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> método, que garantiza que los pasos necesarios para conectar dos controles se completan antes de que se ejecute cualquier código del controlador de eventos.  
  
 El método proporciona control mediante programación sobre el proceso de creación de conexiones, y el evento asociado es un punto adecuado en el que se va a actualizar la interfaz de usuario (UI) o para notificar a un usuario que se ha establecido una conexión.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento agregando el `OnWebPartsConnected` atribuir a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsConnecting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsConnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsConnecting(class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsConnecting (e As WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsConnecting(System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit&#xA;override this.OnWebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsConnecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" /> event, which occurs during the process of establishing a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server or user controls contained in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> evento, que se produce cuando dos controles intentan establecer una conexión. El método proporciona la oportunidad de cancelar el intento de conexión. Si la conexión es correcta, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado mediante la adición de la `OnWebPartsConnecting` atribuir a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los programadores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" /> método para personalizar el control de eventos.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsDisconnected">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsDisconnected (System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsDisconnected(class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsDisconnected (e As WebPartConnectionsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsDisconnected(System::Web::UI::WebControls::WebParts::WebPartConnectionsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit&#xA;override this.OnWebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsDisconnected e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" /> event, which occurs after a connection between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls has ended.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> método provoca el evento correspondiente al final de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> método, que lleva a cabo el proceso de finalización de una conexión entre dos controles.  
  
 El método proporciona control mediante programación sobre el proceso de finalización de una conexión, para que los desarrolladores puedan informar al usuario, realizar cambios en la interfaz de usuario (UI), o realizar otros cambios en la aplicación.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento agregando el `OnWebPartsDisconnected` atribuir a la <`asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
      </Docs>
    </Member>
    <Member MemberName="OnWebPartsDisconnecting">
      <MemberSignature Language="C#" Value="protected virtual void OnWebPartsDisconnecting (System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWebPartsDisconnecting(class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWebPartsDisconnecting (e As WebPartConnectionsCancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWebPartsDisconnecting(System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnWebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit&#xA;override this.OnWebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs -&gt; unit" Usage="webPartManager.OnWebPartsDisconnecting e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" /> event, which indicates that two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server or user controls in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone are in the process of ending a connection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> método genera el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> eventos, que se produce cuando dos controles están finalizando una conexión. El método proporciona la oportunidad de cancelar el proceso de desconexión. Si la conexión se quita correctamente, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento sigue.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento asociado mediante la adición de la `OnWebPartsDisconnecting` atribuir a la `<asp:webpartmanager>` elemento en una página Web y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los programadores que crean derivados <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> las clases pueden invalidar la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" /> método para personalizar el control de eventos.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      </Docs>
    </Member>
    <Member MemberName="Personalization">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartPersonalization Personalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Personalization As WebPartPersonalization" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ Personalization { System::Web::UI::WebControls::WebParts::WebPartPersonalization ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Personalization : System.Web.UI.WebControls.WebParts.WebPartPersonalization" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Personalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartPersonalization</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to an object that contains personalization data for a Web page.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> que contiene los datos de personalización.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad proporciona una manera de tener acceso a la <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization> objeto que está asociado a una página a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Con esta propiedad, puede tener acceso a los diversos miembros del objeto de personalización. Por ejemplo, puede usar el <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> para cambiar el ámbito de personalización de la página de compartido para el ámbito de usuario, o viceversa. También puede averiguar el ámbito de personalización actual de la página, si la personalización está habilitada en la página, qué proveedor es que se usa para los datos de personalización y mucho más.  
  
 Tenga en cuenta que los datos al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad es únicamente los datos de personalización de nivel de página que se realiza un seguimiento por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. Datos de personalización específicos del control, como los valores de propiedades personalizables <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, es no forman parte de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad.  
  
> [!NOTE]
>  Para obtener más información sobre la personalización de elementos Web, consulte [Web Parts Personalization Overview](http://msdn.microsoft.com/library/7dc34f74-52aa-4082-b98d-2bcf9e07e320).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad mediante programación.  
  
 La siguiente página Web permite al usuario especificar el modo de edición para editar ciertos aspectos de la <xref:System.Web.UI.WebControls.Calendar> control. El **Alternar ámbito** botón cambia la página al usuario o en el ámbito de personalización compartido. El **del modo de edición** y **Browse Mode** botones cambian la página en el modo de presentación adecuada. Tenga en cuenta que en el `<script>` etiqueta sección del archivo, dos de los métodos que controlan los eventos utilizan la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad para tener acceso a miembros útiles del objeto subyacente. En concreto, estos métodos utilizan el <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.ToggleScope%2A> método y <xref:System.Web.UI.WebControls.WebParts.WebPartPersonalization.Scope%2A> propiedad del objeto que se obtiene acceso a través de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Personalization%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_Personalization#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_Personalization/CS/wpmgrPersonalizationCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_Personalization#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_Personalization/VB/wpmgrPersonalizationVB.aspx#1)]  
  
 Para que ejecutar el ejemplo de código, también debe habilitar uno o varios usuarios personalizar páginas en el ámbito compartido. Agregue una entrada al archivo Web.config, en la `<system.web>` sección, que parece que el siguiente marcado.  
  
```  
<webParts>  
  <personalization>  
    <authorization>  
      <allow  
        users="[Replace the text and brackets with a user name or   
           group.]"  
        roles="admin"   
        verbs="enterSharedScope"  />  
    </authorization>  
  </personalization>  
</webParts>   
```  
  
 Después de cargar la página en un explorador, haga clic en el **Alternar ámbito** botón y observe que la página ahora indica el ámbito está compartido. Haga clic en **del modo de edición** para cambiar el modo de presentación, haga clic en el menú de verbos en el control visible y seleccione **editar** en el menú. Observe que aparece la interfaz de usuario (UI) para ambos controles de edición. Ahora haga clic en **el modo de exploración** para volver a examinar normal. Si la página indica que está en el ámbito compartido, haga clic en **Alternar ámbito** para asegurarse de que la página está en ámbito de usuario. A continuación, siga los mismos pasos para editar el control de nuevo, pero tenga en cuenta que ahora en la interfaz de usuario de edición, el <xref:System.Web.UI.WebControls.WebParts.BehaviorEditorPart> control no aparece. Eso es porque este control solo funciona cuando la página está en ámbito de personalización compartido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScript">
      <MemberSignature Language="C#" Value="protected virtual void RegisterClientScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterClientScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.RegisterClientScript" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RegisterClientScript ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RegisterClientScript();" />
      <MemberSignature Language="F#" Value="abstract member RegisterClientScript : unit -&gt; unit&#xA;override this.RegisterClientScript : unit -&gt; unit" Usage="webPartManager.RegisterClientScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control to emit client-side script that is used for various personalization features, such as dragging <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls in a Web page.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterClientScriptBlock(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="webPartManager.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">An <see cref="T:System.Web.UI.HtmlTextWriter" /> that receives the content of the control to write to the page.</param>
        <summary>Overridden to prevent the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control from rendering any content.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected internal override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function SaveControlState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Object ^ SaveControlState();" />
      <MemberSignature Language="F#" Value="override this.SaveControlState : unit -&gt; obj" Usage="webPartManager.SaveControlState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves state data for the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control so the data can be restored on future request to the Web page that contains the control.</summary>
        <returns>An <see cref="T:System.Object" /> to contain the control's saved state data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveControlState%2A> método guarda los datos de estado para las propiedades que deben conservarse postback de página, incluso cuando la <xref:System.Web.UI.Control.EnableViewState%2A> propiedad está establecida en `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCustomPersonalizationState">
      <MemberSignature Language="C#" Value="protected virtual void SaveCustomPersonalizationState (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SaveCustomPersonalizationState(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SaveCustomPersonalizationState (state As PersonalizationDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SaveCustomPersonalizationState(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state);" />
      <MemberSignature Language="F#" Value="abstract member SaveCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit&#xA;override this.SaveCustomPersonalizationState : System.Web.UI.WebControls.WebParts.PersonalizationDictionary -&gt; unit" Usage="webPartManager.SaveCustomPersonalizationState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be loaded.</param>
        <summary>Saves custom personalization state data maintained by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control, so that this data can be reloaded whenever the page is reloaded.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A> método es fundamental en el proceso de personalización, ya que permite la configuración de usuario personalizado que se almacenará para futuras sesiones del explorador y visitas a una página. El método guarda los datos de estado de personalización personalizados, que incluye elementos como los siguientes: dinámica <xref:System.Web.UI.WebControls.WebParts.WebPart> o controles de servidor que se han agregado a una página o eliminar de una página; los controles que se han movido en una página; y las conexiones dinámicas que tienen ha creado o eliminado.  
  
 No se puede llamar a este método directamente desde el código. Sin embargo, puede llamar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A> método, que a su vez llama a este método para guardar los datos de personalización.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Los desarrolladores pueden reemplazar este método en un derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase para personalizar el proceso de guardar los datos de personalización.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPart">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart SelectedWebPart" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedWebPart As WebPart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPart ^ SelectedWebPart { System::Web::UI::WebControls::WebParts::WebPart ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPart : System.Web.UI.WebControls.WebParts.WebPart" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control that is currently selected for editing or for creating a connection with another control.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control que está seleccionado actualmente para edición o para formar una conexión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propiedad devuelve una referencia a un <xref:System.Web.UI.WebControls.WebParts.WebPart> u otro control de servidor que está seleccionado actualmente para edición o para crear una conexión con otro control.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control proporciona varios métodos y eventos útiles para controlar el proceso de selección de un control. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento se produce justo después de selecciona un control, pero antes de que se realice ningún cambio. Para llevar a cabo algunas acciones en el control después de seleccionarlo, invalide el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método. Por ejemplo, puede cambiar la apariencia de un control que está seleccionado, pero no ha cambiado, para resaltar visualmente qué control está seleccionado.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged> justo después de que el control seleccionado se ha modificado, se produce el evento. Para llevar a cabo algunas acciones en el control después de haya cambiado, invalide el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" />
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPartChanged">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler SelectedWebPartChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedWebPartChanged As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ SelectedWebPartChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.SelectedWebPartChanged : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after the selection of one <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control has changed and moved to another control on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento puede utilizarse junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged%2A> método para cambiar la interfaz de usuario (UI) de un control seleccionado. Por ejemplo, si el usuario cambia la página al modo de diseño (<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DesignDisplayMode>) y, a continuación, selecciona un <xref:System.Web.UI.WebControls.WebParts.WebPart> control con la intención de ello, arrástrelo a una nueva posición, es común para cambiar la representación del control seleccionado, por ejemplo cambiando el color de su borde o un fondo mientras está seleccionada.  
  
> [!NOTE]
>  Para obtener más información sobre el consumo de eventos, vea [Cómo: consumir eventos en una aplicación de formularios Web](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SelectedWebPartChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler SelectedWebPartChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedWebPartChanging As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ SelectedWebPartChanging;" />
      <MemberSignature Language="F#" Value="member this.SelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.SelectedWebPartChanging : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of changing which <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control is currently selected on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento puede utilizarse junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método. Los desarrolladores de páginas pueden crear un controlador de eventos en su código mediante la adición de la `OnSelectedWebPartChanging` atribuir a la `<asp:webpartmanager>` elemento en una página y establecer el valor del atributo en el nombre de un método personalizado que controlará el evento.  
  
 Este evento se produce durante el proceso de iniciar o finalizar una conexión entre controles y el momento de apertura y cierre de una edición de un control. Para obtener más información, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging%2A> método.  
  
 Normalmente, cuando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> evento se desencadena como consecuencia directa de una acción del usuario que cambia el control seleccionado, se puede cancelar el evento. Sin embargo, hay un escenario en el que no se puede cancelar el evento. Si un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control se elimina, el <xref:System.Web.UI.WebControls.WebParts.WebPart> todos los controles contiene deben estar cerrados, en caso contrario se queda huérfano. En este caso el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar se cierra el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, no el usuario y deben determinar qué control está seleccionado actualmente y cuándo se debe cambiar la selección sin que exista ninguna posibilidad de interrupción, por lo que puede completar el proceso de limpieza todos los controles. Por lo tanto, por diseño el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanging> método no se puede cancelar en este escenario. Para un evento relacionado que pueda cancelarse, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> eventos.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SetPersonalizationDirty">
      <MemberSignature Language="C#" Value="protected void SetPersonalizationDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetPersonalizationDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetPersonalizationDirty ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetPersonalizationDirty();" />
      <MemberSignature Language="F#" Value="member this.SetPersonalizationDirty : unit -&gt; unit" Usage="webPartManager.SetPersonalizationDirty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets a flag indicating that custom personalization data for the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control has changed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A> método establece una marca que finalmente hace que los componentes de personalización en el control de elementos Web configurado para guardar los datos de personalización actualizados. Para obtener más información sobre los escenarios que pueden producir cambios en los datos de personalización que se hace un seguimiento mediante el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, vea el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetPersonalizationDirty%2A> método no se puede llamar directamente desde el código y no se puede invalidar, porque se utiliza internamente por el control de elementos Web que se establece como parte de la característica de personalización de elementos Web.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se puede llamar al método mediante un derivada <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase. Esto resultaría útil si desea personalizar la personalización de componentes del control de elementos Web establecido y, por tanto, necesitan controlar el proceso de establecimiento de marcadores para los datos de personalización.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="SetSelectedWebPart">
      <MemberSignature Language="C#" Value="protected void SetSelectedWebPart (System.Web.UI.WebControls.WebParts.WebPart webPart);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetSelectedWebPart(class System.Web.UI.WebControls.WebParts.WebPart webPart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetSelectedWebPart(System::Web::UI::WebControls::WebParts::WebPart ^ webPart);" />
      <MemberSignature Language="F#" Value="member this.SetSelectedWebPart : System.Web.UI.WebControls.WebParts.WebPart -&gt; unit" Usage="webPartManager.SetSelectedWebPart webPart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webPart" Type="System.Web.UI.WebControls.WebParts.WebPart" />
      </Parameters>
      <Docs>
        <param name="webPart">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control that has been selected.</param>
        <summary>Sets the <see cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" /> property value equal to the currently selected <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart%2A> método se llama durante los procesos que inician o finalizan la edición del control especificado por la `webPart` parámetro y aquellos que inician o finalizan una conexión que incluye `webPart`.  
  
 Al principio de los procesos de edición y conexión, `webPart` es el control que se ha seleccionado para editar o especificar una conexión.  
  
 Al final de los procesos de edición y conexión, `null` se pasa a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SetSelectedWebPart%2A> método, que da como resultado el control actualmente seleccionado ya no está seleccionado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanged(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnSelectedWebPartChanging(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart" />
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SkinID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SkinID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SkinID : string with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an empty string ("") so that no skin can be applied to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <value>Una cadena vacía que evita que el <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control de tener una máscara asignada a él.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SkinID%2A> propiedad invalida la heredados <xref:System.Web.UI.Control.SkinID%2A?displayProperty=nameWithType> propiedad para evitar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, que es un control invisible, utilice máscaras. La implementación de la propiedad evita que una máscara asignado por siempre devuelve una cadena vacía desde el `get` descriptor de acceso y siempre produce una excepción si hay un intento para establecer un valor el `set` descriptor de acceso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to set the property value.</exception>
        <altmember cref="P:System.Web.UI.Control.SkinID" />
      </Docs>
    </Member>
    <Member MemberName="StaticConnections">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartConnectionCollection StaticConnections" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticConnections As WebPartConnectionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ StaticConnections { System::Web::UI::WebControls::WebParts::WebPartConnectionCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StaticConnections : System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the collection of all <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" /> objects on a Web page that are defined as static connections.</summary>
        <value>Un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection" /> que contiene todas las conexiones estáticas en la página.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad la usan el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para realizar un seguimiento y administrar todas las conexiones estáticas en una página. Una conexión estática, a diferencia de una conexión dinámica, no deben agregarse a una página cada vez que se representa la página.  
  
 La colección al que hace referencia esta propiedad contiene todas las conexiones estáticas que existen en la página, si se crea mediante programación o se especificó con un `<asp:webpartconnection>` elemento de formato de la página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar mediante programación la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página de elementos Web.  
  
-   Un archivo de código fuente que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles y una interfaz personalizada.  
  
-   Una página Web que contiene dos custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar, y un `<asp:webpartmanager>` elemento.  
  
-   Explicación de cómo funciona el ejemplo en un explorador.  
  
 El siguiente código contiene solo la parte de la página Web del ejemplo. También necesitará obtener las dos primeras partes del ejemplo: control de usuario personalizado y el código fuente de los controles personalizados y la interfaz, en la sección de ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Este tema también explica las opciones para compilar el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
 La tercera parte del ejemplo de código es la página Web. Contiene el marcado declarativo para la página `Register` directivas para el control de usuario y los controles personalizados. Hay un `<asp:webpartmanager>` elemento, un `<asp:webpartzone>` elemento que se va a contener los controles personalizados y un `<asp:connectionszone>` elemento. Tenga en cuenta que en el `Page_Load` método, el código comprueba si una conexión ya existe y, si no es así, define un proveedor, un consumidor y sus respectivos puntos de conexión y, a continuación, agrega una nueva conexión al conjunto de conexiones estáticas al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.StaticConnections%2A> propiedad.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/CS/wpmgrStaticConnectionCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_StaticConnections#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_StaticConnections/VB/wpmgrStaticConnectionVB.aspx#1)]  
  
 Después de haber cargado la página Web en un explorador, haga clic en el **modo de presentación** control de lista desplegable y seleccione **conectar** para cambiar la página modo de conexión. Modo de conexión utiliza la `<asp:connectionszone>` elemento que le permite crear conexiones entre los controles. En el modo de conexión, haga clic en la flecha hacia abajo en la barra de título de la **código postal** para activar el menú de verbos de control y, a continuación, haga clic en **conectar**. Después de que aparezca la interfaz de usuario (UI) de conexión, tenga en cuenta que una conexión ya se ha creado por el código incluido en el `Page_Load` método. Si vuelve a esta página en una sesión de explorador posterior, esta conexión estática ya estará establecida y no tendrá que volver a crearse cada vez que se carga la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
      </Docs>
    </Member>
    <Member MemberName="SupportedDisplayModes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection SupportedDisplayModes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportedDisplayModes As WebPartDisplayModeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ SupportedDisplayModes { System::Web::UI::WebControls::WebParts::WebPartDisplayModeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportedDisplayModes : System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a read-only collection of all display modes that are available on a particular Web page.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection" /> que contiene el conjunto de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode" /> objetos disponibles en una determinada página Web.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad contiene sólo los modos de presentación que están disponibles actualmente en una página, dados los tipos de controles de zona presentes en la página.  
  
> [!NOTE]
>  Modos de presentación se pueden deshabilitar y, cuando se deshabilita un modo de presentación, no se agrega a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> colección, incluso cuando el tipo de zona que admita ese modo de presentación correspondiente está presente en la página.  
  
 Modo de exploración y el modo de diseño siempre se admiten. Los modos de presentación que pueden variar son edición, catálogo y modos de conexión. Cada uno de estos modos de presentación está asociado a un tipo determinado de <xref:System.Web.UI.WebControls.WebParts.ToolZone> control. Es la presencia de esa zona con tipos especiales en una página Web que hace que un modo de presentación determinado va a agregar a la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad. Por ejemplo, si una página Web contiene una <xref:System.Web.UI.WebControls.WebParts.EditorZone> zona pero no un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> de la zona, a continuación, el modo de presentación de edición es uno de los modos compatibles en la página, pero no se admite el modo de presentación de catálogo.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad difiere de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes%2A> propiedad, que hace referencia a una colección que contiene todos los modos de presentación que están disponibles para el actual <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar, incluso aquellos que no se admiten en una página concreta.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso mediante programación de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SupportedDisplayModes%2A> propiedad. El código utiliza esta propiedad para rellenar la lista con sólo los modos de presentación disponibles en la página Web actual.  
  
 Hay tres admite los modos de presentación en esta página: exploración, diseño y edición. Los dos primeros siempre están disponibles y el modo de edición está disponible en este ejemplo de código, porque la página contiene un <xref:System.Web.UI.WebControls.WebParts.EditorZone> control. El catálogo y conectar pantalla no se muestran los modos, porque sus zonas correspondientes no están en esta página.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_SupportedDisplayModes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_SupportedDisplayModes/CS/wpmgrSuppDisplayModescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_SupportedDisplayModes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_SupportedDisplayModes/VB/wpmgrSuppDisplayModesvb.aspx#1)]  
  
 Después de cargar la página en un explorador, puede utilizar el control de lista desplegable para cambiar la página de modo de exploración al modo de diseño y, a continuación, al modo de edición. En modo de edición, puede haga clic en el menú de verbos de lista desplegable en el encabezado de uno de los controles de servidor y seleccione **editar** para el control de edición.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModes" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsDirty As Boolean Implements IPersonalizable.IsDirty" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether custom personalization state data managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control has changed on a Web page.</summary>
        <value>Un valor booleano que indica si ha cambiado los datos de estado de personalización.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad proporciona una manera para que los llamadores determinar si personalización estado datos que se administran mediante el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control ha cambiado. Cuando los usuarios personalizan detalles de nivel de página, por ejemplo, cambiar el diseño de página, crear o eliminar conexiones, y agregar o eliminar controles, los datos de personalización administran por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar los cambios. Se trata de un método de acceso directo que se devuelve a los llamadores el valor de la protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty%2A> propiedad, que no se puede tener acceso directamente a los llamadores.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad no indica si los valores de propiedad personalizable o las propiedades individuales que afectan a la apariencia de persona <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, han cambiado. Personalización de nivel de control se realiza el seguimiento de cada control individualmente. El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad sólo indica si los datos de personalización que se encuentra en el nivel de página y esté administrado por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control ha cambiado.  
  
 En la lista siguiente describe algunos casos comunes de personalización que provocaría la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> propiedad para devolver un valor de `true`, lo que indica que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control tiene algunos datos de personalización modificados:  
  
-   Cerrar una variable static <xref:System.Web.UI.WebControls.WebParts.WebPart> control (o control de usuario o servidor) en una página.  
  
-   Restaurar un estático cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> control de un catálogo de página a una página.  
  
-   Mover un control dentro de su zona o a otra zona.  
  
-   Agregar un control de un catálogo de <xref:System.Web.UI.WebControls.WebParts.WebPart> o controles de servidor, o agregar un control mediante programación.  
  
-   Crear una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, ya sea mediante programación o mediante la interfaz de usuario (UI) de conexión.  
  
-   Al eliminar una conexión entre dos <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, ya sea mediante programación o mediante la interfaz de usuario de conexión.  
  
 Para obtener acceso a este valor de propiedad, primero debe convertir el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> instancia del control a la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable> interfaz, se puede leer, a continuación, la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty%2A> valor de propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un uso simple de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23IsDirty%2A> instancias de propiedad para indicar alguna personalización de página comunes que causan un <xref:System.Web.UI.WebControls.WebParts.WebPartManager> los datos de personalización del control para cambiar.  
  
 El ejemplo de código tiene cuatro partes:  
  
-   Un control de usuario que permite cambiar los modos de presentación en una página que contiene controles de elementos Web.  
  
-   Un archivo de código fuente que contiene el código de dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que se pueden conectar y una interfaz.  
  
-   Una página Web que hospeda todos los controles.  
  
-   Obtener una explicación de cómo funciona el ejemplo de código.  
  
 La primera parte del ejemplo de código es el control de usuario para cambiar los modos de presentación. Puede obtener el código fuente para el control de usuario de la sección ejemplo de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> Introducción a la clase. Para obtener información sobre los modos de presentación y cómo funciona el control de usuario, consulte [Tutorial: cambiar modos de mostrar en una página de elementos Web](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 La segunda parte del ejemplo es el archivo de código fuente con los controles personalizados y la interfaz. Tenga en cuenta que la `IZipCode` interfaz expone un método y que este método tal como se implementa en personalizado `ZipCodeWebPart` control actúa como un método de devolución de llamada para habilitar `ZipCodeWebPart` para que actúe como un proveedor en un escenario de conexión. El otro control, `WeatherWebPart`, el control actúa como consumidor en una conexión; puede utilizar la interfaz determinada proporcionada por `ZipCodeWebPart`. En una aplicación real, `WeatherWebPart` podría consumir un valor de código postal personalizado del proveedor y, a continuación, proporcionar información meteorológica gráfica a los usuarios.  
  
 Para que ejecutar el ejemplo de código, debe compilar este código fuente. Puede compilar de manera explícita y colocar el ensamblado resultante en la carpeta Bin de su sitio Web o la caché global de ensamblados. Como alternativa, puede colocar el código fuente en la carpeta App_Code de su sitio, donde se compilará dinámicamente en tiempo de ejecución. Este ejemplo de código utiliza la compilación dinámica; por lo tanto, tenga en cuenta que la `Register` directiva para este componente en la parte superior de la página Web contiene sólo `TagPrefix` y `Namespace` atributos, sin un `Assembly` atributo. Para ver un tutorial que muestra cómo se compila, vea [Tutorial: desarrollar y usar un Control de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_WebPartManager_IsDirty#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_WebPartManager_IsDirty#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/VB/ZipCodeComponent.vb#2)]  
  
 La tercera parte del ejemplo de código es la página Web. Tenga en cuenta que contiene dos <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zonas, con la primera de ellas que contiene dos personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. También hay un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, que contiene un estándar <xref:System.Web.UI.WebControls.Calendar> control que los usuarios pueden agregar a la página. El `<asp:connectionszone>` elemento proporciona una interfaz de usuario para los usuarios crear conexiones entre los controles de la conexión. En el `Page_PreRender` método, tenga en cuenta que comprueba para ver si ha cambiado los datos de personalización y, si es así, actualiza el texto de `Label1`.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_IsDirty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/CS/wpmgrIsDirtyCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_IsDirty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_IsDirty/VB/wpmgrIsDirtyVB.aspx#1)]  
  
 Después de cargar la página en un explorador, intente crear algunos de los escenarios que se enumeran en la sección Comentarios de este tema que cambiará los datos de personalización. Medida que se realizan varios cambios, cuando un cambio implica uno de los escenarios de personalización cuyo seguimiento realizado el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> de control, el texto de la `Label1` control se muestra para indicar que ha cambiado los datos de personalización. Por ejemplo, se puede:  
  
-   Crear una conexión entre los controles, haga clic en el **conectar controles de elemento Web** botón.  
  
-   Use la **modo de presentación** control de lista desplegable para cambiar la página al modo de catálogo y agregar el **mi calendario** control al segundo <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona.  
  
-   Cambio de la página nuevo para examinar el modo, haga clic en el menú de verbos (que se muestran con un símbolo de flecha en la barra de título) para la **mi calendario** control y seleccione **cerrar** para cerrarlo y agregarlo al catálogo de la página.  
  
-   Devolver la página al modo de catálogo y agregue el **mi calendario** control a la página.  
  
-   Use la **modo de presentación** de control para cambiar la página al modo de diseño y reorganizar el diseño de los controles arrastrando uno o varios de ellos a otra zona, o a una posición diferente en la misma zona.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WebParts.IPersonalizable" />
        <altmember cref="T:System.Web.UI.WebControls.WebParts.PersonalizationState" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.IsCustomPersonalizationStateDirty" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.Load">
      <MemberSignature Language="C#" Value="void IPersonalizable.Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub Load (state As PersonalizationDictionary) Implements IPersonalizable.Load" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state) = System::Web::UI::WebControls::WebParts::IPersonalizable::Load;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.WebParts.IPersonalizable.Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be loaded.</param>
        <summary>Returns previously saved custom personalization state data that needs to be loaded to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es una implementación de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Load%2A?displayProperty=nameWithType> método, que proporciona una manera para establece el control de elementos Web que tengan acceso directo protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState%2A?displayProperty=nameWithType> método. Cuando se llama a este método, almacena los datos personalizados que administrarán el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control y que se guardó previamente en el almacén de datos permanente para usarlas posteriormente en el proceso de inicialización.  
  
> [!NOTE]
>  En la mayoría de los casos, código del desarrollador de páginas y controles no es necesario llamar a este método, porque se utiliza principalmente por lo controles de elementos Web que se establezca como mecanismo para recuperar los datos de personalización.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Un escenario en el que los desarrolladores utilizarían este método es cuando están desarrollando su propia estructura de personalización para utilizarla en lugar de la que proporciona el conjunto de controles de elementos Web. En tales casos, los programadores pueden heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase e invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" /> método para devolver una implementación personalizada de un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto. Personalizado <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto llamaría a la implementación de la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Load(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> método en el momento adecuado para cargar datos de personalización.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.LoadCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.WebParts.IPersonalizable.Save">
      <MemberSignature Language="C#" Value="void IPersonalizable.Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(class System.Web.UI.WebControls.WebParts.PersonalizationDictionary state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub Save (state As PersonalizationDictionary) Implements IPersonalizable.Save" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System::Web::UI::WebControls::WebParts::PersonalizationDictionary ^ state) = System::Web::UI::WebControls::WebParts::IPersonalizable::Save;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.WebControls.WebParts.IPersonalizable.Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Web.UI.WebControls.WebParts.PersonalizationDictionary" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationDictionary" /> that contains the state data to be saved.</param>
        <summary>Saves custom personalization state data that is managed by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.System%23Web%23UI%23WebControls%23WebParts%23IPersonalizable%23Save%2A> método es una implementación de la <xref:System.Web.UI.WebControls.WebParts.IPersonalizable.Save%2A?displayProperty=nameWithType> método, que proporciona una manera para establece el control de elementos Web que tengan acceso directo protegido <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState%2A?displayProperty=nameWithType> método. Cuando se llama a este método, guarda personalizados todos los datos que se administran mediante el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control al almacén de datos permanente configurado para una aplicación de elementos Web.  
  
> [!NOTE]
>  En la mayoría de los casos, código del desarrollador de páginas y controles no es necesario llamar a este método, porque se utiliza principalmente por lo controles de elementos Web que se establezca como mecanismo para guardar los datos de personalización.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Un escenario en el que los desarrolladores funcionará con este método es cuando están desarrollando su propia estructura de personalización para utilizarla en lugar de la que proporciona el conjunto de controles de elementos Web. En tales casos, los programadores pueden heredar de la <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> clase e invalidar el <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CreatePersonalization" /> método para devolver una implementación personalizada de un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto. Personalizado <see cref="T:System.Web.UI.WebControls.WebParts.WebPartPersonalization" /> objeto llamaría a la implementación de la <see cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#Save(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" /> método en el momento adecuado para guardar los datos de personalización.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.SaveCustomPersonalizationState(System.Web.UI.WebControls.WebParts.PersonalizationDictionary)" />
        <altmember cref="P:System.Web.UI.WebControls.WebParts.WebPartManager.System#Web#UI#WebControls#WebParts#IPersonalizable#IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.WebPartManager.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="webPartManager.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Applies personalization state data to the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control, and calls the base method to enable tracking changes to the view-state data for the control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los cambios a los datos de estado de vista se almacenan en un <xref:System.Web.UI.StateBag> de objetos y son accesibles a través del control <xref:System.Web.UI.Control.ViewState%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that enables child controls to be visible.</summary>
        <value>Un valor booleano que indica si un <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control y sus controles secundarios son visibles. <see langword="true" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control invalida la base de <xref:System.Web.UI.Control.Visible%2A?displayProperty=nameWithType> propiedad para devolver siempre un valor de `true` para el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedad. Aunque la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> propio control no está visible, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedad debe establecerse en `true` para que todos sus controles secundarios están visibles de forma predeterminada.  
  
 Si se intenta establecer el valor de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Visible%2A> propiedad, siempre genera un error porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control invalide el comportamiento de la propiedad base e impide que asignar cualquier valor a la propiedad.  
  
 Esta propiedad no es enlazable en diseñadores visuales, pero es enlazable en tiempo de ejecución. Para obtener más información, consulta <xref:System.ComponentModel.BindableAttribute>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">An attempt was made to assign a value to the property.</exception>
      </Docs>
    </Member>
    <Member MemberName="WebPartAdded">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartAdded" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartAdded As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartAdded;" />
      <MemberSignature Language="F#" Value="member this.WebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartAdded : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control has been added to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone, to indicate that the control was added successfully.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> evento es útil para indicar que un control dinámico (un control agregado mediante programación, a diferencia de que se declara en el marcado de la página) se agregó correctamente a una zona. Junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded%2A> método, el evento proporciona a los desarrolladores una manera de actualizar la interfaz de usuario (UI) o en caso contrario, notifique a los usuarios que un control se agregó correctamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdded(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
      </Docs>
    </Member>
    <Member MemberName="WebPartAdding">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler WebPartAdding" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartAdding As WebPartAddingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartAddingEventHandler ^ WebPartAdding;" />
      <MemberSignature Language="F#" Value="member this.WebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler " Usage="member this.WebPartAdding : System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of adding a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control to a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdding> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding%2A> método una vez ha empezado el proceso de agregar un control a una zona. Este evento proporciona una oportunidad para cancelar el proceso antes de que se completa. Si el proceso de adición se realiza correctamente, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded> eventos.  
  
 Los desarrolladores de páginas pueden proporcionar controladores personalizados para el evento agregando el `OnWebPartAdding` atribuir a la `<asp:webpartmanager>` elemento en una página y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartAdding(System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartAdded" />
      </Docs>
    </Member>
    <Member MemberName="WebPartClosed">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartClosed" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartClosed As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartClosed;" />
      <MemberSignature Language="F#" Value="member this.WebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartClosed : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or server or user control) is removed from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento indica que un control se ha cerrado correctamente, un usuario o mediante programación. Para cerrar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control significa para quitarlo de una página para que no se representa, y también para colocarlo en una clase especial que contiene el objeto llama a un catálogo de página. Un catálogo de página, que corresponde a la <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> controlar, mantiene las referencias a cerrado <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de cada página. Si un <xref:System.Web.UI.WebControls.WebParts.PageCatalogPart> control se declara en una página en un <xref:System.Web.UI.WebControls.WebParts.CatalogZone> zona, los usuarios pueden cambiar de una página en modo de presentación de catálogo y volver a agregar una página de todos los controles que se hayan cerrado anteriormente.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> evento está asociado el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed%2A> método, que genera el evento y proporciona un controlador para él.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando un `OnWebPartClosed` atribuir a la `<asp:webpartmanager>` elemento en una página y, a continuación, asignar un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosed(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartClosing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartClosing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartClosing As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ WebPartClosing;" />
      <MemberSignature Language="F#" Value="member this.WebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.WebPartClosing : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of removing a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> control (or server or user control) from a page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing%2A> método cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control está en proceso de cierre de un control. Si la eliminación del control se realiza correctamente, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed> eventos.  
  
 Los desarrolladores de páginas pueden proporcionar un controlador personalizado para el evento agregando el `OnWebPartClosed` atribuir a la <`asp:webpartmanager>` elemento en una página y asignarle un nombre de método personalizado al atributo.  
  
 Normalmente, cuando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento se produce como consecuencia directa de un cierre de usuario un <xref:System.Web.UI.WebControls.WebParts.WebPart> (control), se puede cancelar el evento. Sin embargo, hay un escenario en el que no se puede cancelar el evento. Si un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control se elimina, el <xref:System.Web.UI.WebControls.WebParts.WebPart> todos los controles contiene deben estar cerrados, en caso contrario se queda huérfano. En este caso el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar se cierra el <xref:System.Web.UI.WebControls.WebParts.WebPart> controla, no el usuario. Y cuando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control está en proceso que realiza la llamada la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart%2A> método para cerrar cada control y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> evento se desencadena, no se puede cancelar el evento (por diseño) porque el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> es necesario completar la tarea de limpieza de controles de la de la zona.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartClosing(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosed" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.CloseWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartDeleted As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartDeleted;" />
      <MemberSignature Language="F#" Value="member this.WebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartDeleted : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control has been deleted from a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> evento es útil para indicar que un control dinámico (un control agregado mediante programación, a diferencia de que se declara en el marcado de la página) se eliminó correctamente de una zona. Junto con el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted%2A> método, el evento proporciona a los desarrolladores una manera de actualizar la interfaz de usuario (UI) o en caso contrario, notifique a los usuarios que un control se eliminó correctamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleted(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler WebPartDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartDeleting As WebPartCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartCancelEventHandler ^ WebPartDeleting;" />
      <MemberSignature Language="F#" Value="member this.WebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " Usage="member this.WebPartDeleting : System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of permanently deleting an instance of a dynamic <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control from a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleting> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting%2A> método durante el proceso de eliminación de un control dinámico (uno que se ha agregado mediante programación o por un usuario a través de la interfaz de usuario de elementos Web). El evento proporciona una oportunidad para cancelar el proceso antes de que finalice. Si se ha completado correctamente el proceso de eliminación, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted> eventos.  
  
 Los desarrolladores de páginas pueden proporcionar controladores personalizados para el evento agregando el `OnWebPartDeleting` atribuir a la `<asp:webpartmanager>` elemento en una página y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartDeleting(System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartDeleted" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DeleteWebPart(System.Web.UI.WebControls.WebParts.WebPart)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartMoved">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartEventHandler WebPartMoved" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartMoved As WebPartEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartEventHandler ^ WebPartMoved;" />
      <MemberSignature Language="F#" Value="member this.WebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventHandler " Usage="member this.WebPartMoved : System.Web.UI.WebControls.WebParts.WebPartEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server control has been moved to a different location on a Web page.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se aplica a estático (declarado en el marcado de una página Web) y los controles dinámicos. Que está asociado el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved%2A> método. Dado que el evento se desencadena una vez completado un movimiento, los desarrolladores pueden incluir un controlador de eventos para proporcionar alguna notificación a los usuarios, alguna validación u otras acciones. Para agregar un controlador de eventos, puede agregar un `OnWebPartMoved` atribuir a la `<asp:webpartmanager>` elemento en una página y asigne el nombre de un método personalizado para el atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoved(System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartMoving">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler WebPartMoving" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartMoving As WebPartMovingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartMovingEventHandler ^ WebPartMoving;" />
      <MemberSignature Language="F#" Value="member this.WebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler " Usage="member this.WebPartMoving : System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of moving a <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or other server control that is contained in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento se desencadena cuando una <xref:System.Web.UI.WebControls.WebParts.WebPart> o de otro control de servidor se mueve dentro de su propia zona o a otra zona. Esto puede ocurrir cuando un usuario arrastra un control y cuando se produce un movimiento mediante programación.  
  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoving> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving%2A> (método) y proporciona una oportunidad de cancelar el proceso de mover antes de que se completa. Si se ha completado el movimiento y el control que se coloca en una nueva posición, este evento va seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved> eventos.  
  
 Los desarrolladores de páginas pueden crear un controlador personalizado para el evento agregando el `OnWebPartMoving` atribuir a la `<asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartMoving(System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartMoved" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.MoveWebPart(System.Web.UI.WebControls.WebParts.WebPart,System.Web.UI.WebControls.WebParts.WebPartZoneBase,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WebParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartCollection WebParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartCollection WebParts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WebParts As WebPartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartCollection ^ WebParts { System::Web::UI::WebControls::WebParts::WebPartCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WebParts : System.Web.UI.WebControls.WebParts.WebPartCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.WebParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to all <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls tracked by the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartManager" /> control on a Web page.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection" /> que contiene referencias a un conjunto de <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad se usa en la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para realizar el seguimiento de todos los <xref:System.Web.UI.WebControls.WebParts.WebPart> controles que están dentro de <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas en la página. Aunque la colección es de solo lectura, puede tener acceso a individuales <xref:System.Web.UI.WebControls.WebParts.WebPart> controles mediante programación a través de la colección y realizar cambios en ellos.  
  
> [!NOTE]
>  Es posible tener un <xref:System.Web.UI.WebControls.WebParts.WebPart> control se coloca en una página fuera de un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona, lo que resulta en el control no sometido a seguimiento por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar o se hace referencia en su <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> colección. Sin embargo, hay pocas razones para usar un <xref:System.Web.UI.WebControls.WebParts.WebPart> control fuera de una zona, ya que, a continuación, pierde su funcionalidad de elementos Web y actúa como un control de servidor normal.  
  
 Cualquier tipo de control que se pueden colocar en una zona, si un personalizado <xref:System.Web.UI.WebControls.WebParts.WebPart> control, un control ASP.NET estándar, un control de usuario o un control de servidor personalizado, puede tratarse como un <xref:System.Web.UI.WebControls.WebParts.WebPart> control en tiempo de ejecución. Cuando un control que no es un <xref:System.Web.UI.WebControls.WebParts.WebPart> control esté colocado en un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zona en tiempo de ejecución ASP.NET ajusta el control con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> objeto, por lo que el control puede comportarse como una auténtica <xref:System.Web.UI.WebControls.WebParts.WebPart> control. Por lo tanto, mediante el uso de la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad, el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control puede realizar un seguimiento de cualquier tipo de control de servidor, independientemente de si se deriva la <xref:System.Web.UI.WebControls.WebParts.WebPart> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad mediante programación a acceso individual <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Tenga en cuenta que en el marcado declarativo para la página Web, en la `<asp:webpartzone>` elemento son dos controles de servidor ASP.NET estándares. Aunque estos no heredan de la <xref:System.Web.UI.WebControls.WebParts.WebPart> de la clase, porque están en una zona se ajustará con un <xref:System.Web.UI.WebControls.WebParts.GenericWebPart> de objetos en tiempo de ejecución y, por tanto, se incluirán en la colección al que hace referencia el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad. También podría agregar personalizada <xref:System.Web.UI.WebControls.WebParts.WebPart> controles de servidor personalizado, controles de usuario o controles de esta zona y se controla de igual modo.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_WebParts#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_WebParts/CS/wpmgrWebPartsCS.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_WebParts#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_WebParts/VB/wpmgrWebPartsVB.aspx#1)]  
  
 Tenga en cuenta que para que funcione el ejemplo de código, debe agregar una configuración en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. En el `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el siguiente código de marcado.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Después de cargar la página en un explorador, si hace clic en el **recuento de elemento Web** botón, el código usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebParts%2A> propiedad que se va a devolver el recuento de controles en la colección. Si hace clic en el **ocultar el título del calendario** botón, el código cambia el calendario para que se represente con sólo un borde y no un título.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebPartsConnected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsConnected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsConnected As WebPartConnectionsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsEventHandler ^ WebPartsConnected;" />
      <MemberSignature Language="F#" Value="member this.WebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " Usage="member this.WebPartsConnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a specific connection has been established between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls (or server or user controls).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> evento está asociado el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected%2A> método. El evento es útil porque cuando se sabe que una conexión está completa, puede ser conveniente informar al usuario del hecho o incluso cambiar la interfaz de usuario (UI) de la página. Por ejemplo, desea mostrar una imagen gráfica que le sugiere una conexión correcta entre los dos controles, o mostrar un mensaje breve y, a continuación, cambie el modo de presentación de página atrás para modo de exploración.  
  
 Los desarrolladores de páginas pueden asociar un controlador de eventos personalizado con este evento agregando el `OnWebPartsConnected` atribuir a la `<asp:webpartmanager>` elemento en la página y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartsConnecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsConnecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsConnecting As WebPartConnectionsCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventHandler ^ WebPartsConnecting;" />
      <MemberSignature Language="F#" Value="member this.WebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " Usage="member this.WebPartsConnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of creating a connection between <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controls (or server or user controls placed in a <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zone).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnecting> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting%2A> método, e indica que ha comenzado el proceso de conexión (por ejemplo, un usuario ha seleccionado un control y hace clic en un verbo conectar), pero aún no se ha completado. El evento proporciona una oportunidad para cancelar una conexión antes de que se completa. Si la conexión se ha completado correctamente, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected> eventos.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando el `OnWebPartsConnecting` atribuir a la `<asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsConnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsConnected" />
        <altmember cref="Overload:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts" />
      </Docs>
    </Member>
    <Member MemberName="WebPartsDisconnected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler WebPartsDisconnected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsDisconnected As WebPartConnectionsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsEventHandler ^ WebPartsDisconnected;" />
      <MemberSignature Language="F#" Value="member this.WebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " Usage="member this.WebPartsDisconnected : System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs after a connection between two <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server controls has been terminated.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> evento está asociado el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected%2A> método. El evento es útil porque cuando se sabe que una conexión se termina, puede ser conveniente informar al usuario, realizar algunas acciones de limpieza en el código o realizar otros cambios en la interfaz de usuario (UI).  
  
 Los desarrolladores de páginas pueden asociar un controlador de eventos personalizado con este evento agregando el `OnWebPartsDisConnected` atribuir a la `<asp:webpartmanager>` elemento en la página y asignarle un nombre de método personalizado al atributo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnected(System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="WebPartsDisconnecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler WebPartsDisconnecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WebPartsDisconnecting As WebPartConnectionsCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::WebParts::WebPartConnectionsCancelEventHandler ^ WebPartsDisconnecting;" />
      <MemberSignature Language="F#" Value="member this.WebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " Usage="member this.WebPartsDisconnecting : System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs during the process of ending the connection between previously connected <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> or server controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento es desencadenado por la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting%2A> método y señala el hecho de que un usuario hace clic en un verbo de desconexión o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A> en caso contrario, ha llamado al método. El evento proporciona una oportunidad para cancelar el proceso de finalización de una conexión antes de que se completa. Si la conexión se ha finalizado correctamente, este evento es seguido por el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected> eventos.  
  
 Los desarrolladores de páginas pueden agregar un controlador personalizado para el evento agregando el `OnWebPartsDisconnecting` atribuir a la `<asp:webpartmanager>` elemento y asignarle un nombre de método personalizado al atributo.  
  
 Normalmente, cuando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> evento se desencadena como consecuencia directa de una acción del usuario que termina una conexión, se puede cancelar el evento. Sin embargo, hay varios escenarios en los que no se puede cancelar el evento. Es el primer escenario, si un <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control se elimina, el <xref:System.Web.UI.WebControls.WebParts.WebPart> todos los controles contiene deben estar cerrados, en caso contrario se queda huérfano. En este caso el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controlar se cierra el <xref:System.Web.UI.WebControls.WebParts.WebPart> controles, no el usuario y también debe tener terminar las conexiones de todos los controles conectados sin que exista ninguna posibilidad de interrupción, para que pueda completar el proceso de limpiar y cerrar todos los controles. Por lo tanto, por diseño el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> método no se puede cancelar en este escenario. Para un evento relacionado que pueda cancelarse, consulte el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartClosing> eventos.  
  
 El segundo escenario en el que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> no se puede cancelar el evento es cuando el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ActivateConnections%2A> se llama al método (Esto llama durante cada solicitud a una página, por ejemplo), y no hay algún tipo de conflicto en las conexiones existentes en una página. Por ejemplo, quizás un usuario conecta el control x al control y, pero un usuario compartido conecta el control x al control z, y aún control x no está permitido para formar varias conexiones. En este caso, configuración del usuario individual para la conexión tiene prioridad y el <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control resuelve el conflicto mediante una llamada a la <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método y la finalización de la conexión entre x y z para un usuario concreto. Puesto que esta desconexión es esencial para solucionar el conflicto, por diseño el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> no se puede cancelar el evento en este escenario.  
  
 El tercer escenario en el que el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> no se puede cancelar el método es cuando un <xref:System.Web.UI.WebControls.WebParts.WebPart> o control de servidor que está conectado actualmente se eliminó o se cierra. Dado que el control definitivamente se va a quitarse de la página, es una necesidad lógica para quitar la conexión. Por lo tanto, cuando la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, se invoca el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebPart%2A> método, que a su vez desencadena el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnecting> no es de evento, por diseño no existe ninguna posibilidad de cancelar el evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.OnWebPartsDisconnecting(System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.WebPartsDisconnected" />
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts(System.Web.UI.WebControls.WebParts.WebPartConnection)" />
      </Docs>
    </Member>
    <Member MemberName="Zones">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartZoneCollection Zones" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.WebPartManager.Zones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Zones As WebPartZoneCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WebParts::WebPartZoneCollection ^ Zones { System::Web::UI::WebControls::WebParts::WebPartZoneCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Zones : System.Web.UI.WebControls.WebParts.WebPartZoneCollection" Usage="System.Web.UI.WebControls.WebParts.WebPartManager.Zones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartZoneCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to a collection of all the <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zones on a Web page.</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection" /> que hace referencia a un conjunto de <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase" /> zonas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad se usa en la <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control para realizar un seguimiento del <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> zonas en una página Web. Tenga en cuenta que la propiedad no hace referencia a todos los tipos de zonas; hace referencia a solo las zonas que se derivan de la <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> de la clase, incluidos los <xref:System.Web.UI.WebControls.WebParts.WebPartZone> zonas.  
  
 Aunque la colección al que hace referencia la propiedad es de solo lectura, se puede utilizar para tener acceso a los objetos individuales de la colección y trabajar con ellos mediante programación.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad mediante programación a acceso individual <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> controles de zona. Tenga en cuenta que en el marcado declarativo para la página Web, hay dos `<asp:webpartzone>` elementos, que contiene un control de servidor. En el `<script>` sección de la página, el código utiliza el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad para tener acceso a las zonas individuales, muestra todos los identificadores de zona y, a continuación, cambiar el color de fondo en la segunda zona.  
  
 [!code-aspx-csharp[WebParts_WebPartManager_Zones#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_WebPartManager_Zones/CS/wpmgrzonescs.aspx#1)]
 [!code-aspx-vb[WebParts_WebPartManager_Zones#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_WebPartManager_Zones/VB/wpmgrzonesvb.aspx#1)]  
  
 Tenga en cuenta que para que funcione el ejemplo de código, debe agregar una configuración en el archivo Web.config para habilitar la exportación de archivos de descripción de elementos Web. Asegúrese de que tiene un archivo Web.config en el mismo directorio que la página Web para este ejemplo de código. En el `<system.web>` sección, asegúrese de que hay un `<webParts>` elemento con un `enableExport` atributo establecido en `true`, como en el siguiente código de marcado.  
  
 `<webParts enableExport="true">`  
  
 `...`  
  
 `</webParts>`  
  
 Después de cargar la página en un explorador, si hace clic en el **lista de identificadores de zona** botón, el código usa el <xref:System.Web.UI.WebControls.WebParts.WebPartManager.Zones%2A> propiedad para mostrar los identificadores de todas las zonas de la colección. Si hace clic en el **el color de fondo de cambio de zona** botón, el código cambia el color de fondo de la segunda zona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>