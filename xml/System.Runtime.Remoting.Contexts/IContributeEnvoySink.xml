<Type Name="IContributeEnvoySink" FullName="System.Runtime.Remoting.Contexts.IContributeEnvoySink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b8f71ff53fedc527634712b3d8caa649a0a6e85c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37628207" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContributeEnvoySink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContributeEnvoySink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Contexts.IContributeEnvoySink" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContributeEnvoySink" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContributeEnvoySink" />
  <TypeSignature Language="F#" Value="type IContributeEnvoySink = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="32a2e-101">Aporta un receptor de envío de mensajes en el cliente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="32a2e-101">Contributes an envoy message sink on the client end.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32a2e-102">El <xref:System.Runtime.Remoting.Contexts.IContributeEnvoySink> interfaz se implementa mediante las propiedades de contexto en el servidor <xref:System.Runtime.Remoting.Contexts.Context> clase que desea aportar un receptor de mensaje de envío en el cliente.</span><span class="sxs-lookup"><span data-stu-id="32a2e-102">The <xref:System.Runtime.Remoting.Contexts.IContributeEnvoySink> interface is implemented by context properties in the server <xref:System.Runtime.Remoting.Contexts.Context> class that want to contribute an envoy message sink on the client end.</span></span> <span data-ttu-id="32a2e-103">La cadena de envoy de servidor se compone de las propiedades de contexto que implementan <xref:System.Runtime.Remoting.Contexts.IContributeEnvoySink>.</span><span class="sxs-lookup"><span data-stu-id="32a2e-103">The server envoy chain is composed from those context properties that implement <xref:System.Runtime.Remoting.Contexts.IContributeEnvoySink>.</span></span> <span data-ttu-id="32a2e-104">La cadena de envoy reside en el cliente y actúa como un representante del mensaje correspondiente receptores desde las propiedades de contexto de servidor.</span><span class="sxs-lookup"><span data-stu-id="32a2e-104">The envoy chain resides on the client end and acts as a representative of the corresponding message sinks from the server context properties.</span></span>  
  
 ]]></format>
    </remarks>
    <forInternalUseOnly />
    <altmember cref="T:System.Runtime.Remoting.Contexts.Context" />
  </Docs>
  <Members>
    <Member MemberName="GetEnvoySink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink (MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink(class System.MarshalByRefObject obj, class System.Runtime.Remoting.Messaging.IMessageSink nextSink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Contexts.IContributeEnvoySink.GetEnvoySink(System.MarshalByRefObject,System.Runtime.Remoting.Messaging.IMessageSink)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnvoySink (obj As MarshalByRefObject, nextSink As IMessageSink) As IMessageSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::Messaging::IMessageSink ^ GetEnvoySink(MarshalByRefObject ^ obj, System::Runtime::Remoting::Messaging::IMessageSink ^ nextSink);" />
      <MemberSignature Language="F#" Value="abstract member GetEnvoySink : MarshalByRefObject * System.Runtime.Remoting.Messaging.IMessageSink -&gt; System.Runtime.Remoting.Messaging.IMessageSink" Usage="iContributeEnvoySink.GetEnvoySink (obj, nextSink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.MarshalByRefObject" />
        <Parameter Name="nextSink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="32a2e-105">El objeto de servidor para el que se crea la cadena.</span>
          <span class="sxs-lookup">
            <span data-stu-id="32a2e-105">The server object for which the chain is being created.</span>
          </span>
        </param>
        <param name="nextSink">
          <span data-ttu-id="32a2e-106">Cadena de receptores formada hasta este momento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="32a2e-106">The chain of sinks composed so far.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="32a2e-107">Toma el primer receptor de la cadena de receptores formada hasta este momento y, a continuación, encadena el receptor de mensajes delante de la cadena ya formada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="32a2e-107">Takes the first sink in the chain of sinks composed so far, and then chains its message sink in front of the chain already formed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="32a2e-108">La cadena de receptores formada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="32a2e-108">The composite sink chain.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="32a2e-109">El <xref:System.Runtime.Remoting.Contexts.IContributeEnvoySink.GetEnvoySink%2A> método se usa como optimización para crear un receptor de envío cuando el destino es un contexto diferente en el mismo dominio de aplicación y se usa por la operación de ajuste.</span><span class="sxs-lookup"><span data-stu-id="32a2e-109">The <xref:System.Runtime.Remoting.Contexts.IContributeEnvoySink.GetEnvoySink%2A> method is used as an optimization to create an envoy sink when the destination is a different context in the same application domain and is used by the Wrap operation.</span></span>  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>