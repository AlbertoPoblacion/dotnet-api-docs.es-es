<Type Name="InertiaProcessor2D" FullName="System.Windows.Input.Manipulations.InertiaProcessor2D">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="03482f289859d5b233593730521b5b5d7a0f5938" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48636673" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InertiaProcessor2D" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InertiaProcessor2D extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />
  <TypeSignature Language="VB.NET" Value="Public Class InertiaProcessor2D" />
  <TypeSignature Language="C++ CLI" Value="public ref class InertiaProcessor2D" />
  <TypeSignature Language="F#" Value="type InertiaProcessor2D = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implementa la extrapolación de la posición, la orientación y el radio medio de una manipulación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> objeto permite que la aplicación extrapolar la ubicación de un elemento, la orientación y otras propiedades simulando el comportamiento real.  
  
 Por ejemplo, cuando un usuario mueve un elemento y, a continuación, lo libera, el elemento puede continuar el movimiento, reducir la velocidad y, a continuación, se irá deteniendo lentamente. Un procesador de inercia implementa este comportamiento haciendo que los valores de 2D afines (origen, escala, traducción y rotación) cambien durante un tiempo especificado a una velocidad de desaceleración especificada.  
  
 Un procesador de inercia por sí mismo no hace que un elemento mover y reducir la velocidad. La aplicación recibe información de un procesador de inercia y aplica los valores según sea necesario para un elemento específico de la aplicación. Normalmente, una aplicación usa la información recibida de un procesador de inercia para cambiar la ubicación, el tamaño o la orientación de un elemento.  
  
 Procesamiento de inercia se usa normalmente junto con el procesamiento de la manipulación. Para obtener más información, vea la clase <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InertiaProcessor2D ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InertiaProcessor2D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete (timestamp As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Complete : int64 -&gt; unit" Usage="inertiaProcessor2D.Complete timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">Marca de tiempo para completar la extrapolación, en pasos de 100 nanosegundos.</param>
        <summary>Completa la extrapolación final mediante la marca de tiempo especificada y genera el evento <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las marcas de tiempo están en unidades de 100 nanosegundos.  
  
   
  
## Examples  
 En el ejemplo siguiente, un controlador de eventos para el <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> evento comprueba si el procesamiento de inercia se está ejecutando y si es así, lo detiene llamando el <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> método.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro de marca de tiempo es menor que la marca de tiempo inicial o anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Event Completed As EventHandler(Of Manipulation2DCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DCompletedEventArgs ^&gt; ^ Completed;" />
      <MemberSignature Language="F#" Value="member this.Completed : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " Usage="member this.Completed : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se ha completado la extrapolación.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" />
      <MemberSignature Language="VB.NET" Value="Public Event Delta As EventHandler(Of Manipulation2DDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DDeltaEventArgs ^&gt; ^ Delta;" />
      <MemberSignature Language="F#" Value="member this.Delta : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " Usage="member this.Delta : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia el origen de extrapolación o cuando se produce una traslación, un ajuste de escala o una rotación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType> eventos y el <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType> eventos son del mismo tipo. Normalmente, puede usar el mismo controlador de eventos para ambos eventos.  
  
   
  
## Examples  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpansionBehavior As InertiaExpansionBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ ExpansionBehavior { System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpansionBehavior : System.Windows.Input.Manipulations.InertiaExpansionBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaExpansionBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el comportamiento de expansión del procesador de inercia.</summary>
        <value>Comportamiento de expansión del procesador de inercia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginX">
      <MemberSignature Language="C#" Value="public float InitialOriginX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginX { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginX : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la coordenada x del origen inicial, en unidades de coordenadas.</summary>
        <value>Coordenada x del origen inicial, en unidades de coordenadas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El punto de origen representado por la <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> y <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> propiedades es la posición media de todos los manipuladores asociado con un elemento.  
  
 Un valor válido para <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> es un número finito. El valor predeterminado es 0.0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginY">
      <MemberSignature Language="C#" Value="public float InitialOriginY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginY { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginY : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la coordenada y del origen inicial, en unidades de coordenadas.</summary>
        <value>Coordenada y del origen inicial, en unidades de coordenadas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El punto de origen representado por la <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> y <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> propiedades es la posición media de todos los manipuladores asociado con un elemento.  
  
 Un valor válido para <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> es un número finito. El valor predeterminado es 0.0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la inercia está actualmente en curso.</summary>
        <value>Valor booleano que indica si la inercia está actualmente en curso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente, un controlador de eventos para el <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> evento comprueba si el procesamiento de inercia se está ejecutando y, si es así, detiene mediante una llamada a la <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> método.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public bool Process (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Process(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Process (timestamp As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Process(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Process : int64 -&gt; bool" Usage="inertiaProcessor2D.Process timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">Marca de tiempo para realizar la extrapolación, en pasos de 100 nanosegundos.</param>
        <summary>Extrapola la posición, orientación y radio medio de la manipulación en el momento especificado.</summary>
        <returns>Posición, orientación y radio medio de la manipulación en el momento especificado. Es <see langword="true" /> si la extrapolación está en curso; es <see langword="false" /> si la extrapolación se ha completado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las marcas de tiempo están en unidades de 100 nanosegundos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro de marca de tiempo es menor que la marca de tiempo inicial o anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationBehavior As InertiaRotationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ RotationBehavior { System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RotationBehavior : System.Windows.Input.Manipulations.InertiaRotationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaRotationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el comportamiento de rotación del procesador de inercia.</summary>
        <value>Comportamiento de rotación del procesador de inercia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente, la <xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> propiedad está establecida para habilitar el procesamiento de inercia girar un objeto tres-y-veces y Media desde su orientación inicial.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_SetDesiredRotation](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_setdesiredrotation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (System.Windows.Input.Manipulations.InertiaParameters2D parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Windows.Input.Manipulations.InertiaParameters2D parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (parameters As InertiaParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(System::Windows::Input::Manipulations::InertiaParameters2D ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SetParameters : System.Windows.Input.Manipulations.InertiaParameters2D -&gt; unit" Usage="inertiaProcessor2D.SetParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameters">Parámetros que se van a establecer.</param>
        <summary>Establece los parámetros en el procesador de inercia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property TranslationBehavior As InertiaTranslationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ TranslationBehavior { System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TranslationBehavior : System.Windows.Input.Manipulations.InertiaTranslationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaTranslationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el comportamiento de traslación del procesador de inercia.</summary>
        <value>Comportamiento de traslación del procesador de inercia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>