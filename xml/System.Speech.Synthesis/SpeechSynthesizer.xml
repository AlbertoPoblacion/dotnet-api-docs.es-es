<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd0e6eb123f9b6aae2230f80156e89d3042cb7ee" /><Meta Name="ms.sourcegitcommit" Value="0b4deef443af9fe6334aa34b8a17190223bf0486" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/14/2019" /><Meta Name="ms.locfileid" Value="65609713" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpeechSynthesizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechSynthesizer sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechSynthesizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona acceso a la funcionalidad de un motor de síntesis de voz instalado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se crea un nuevo <xref:System.Speech.Synthesis.SpeechSynthesizer> de objeto, usa la voz del sistema de forma predeterminada. Para configurar el <xref:System.Speech.Synthesis.SpeechSynthesizer> para usar una de las voces de síntesis (texto a voz) de voz instalado, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> método. Para obtener información sobre la que se instalan las voces, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y el <xref:System.Speech.Synthesis.VoiceInfo> clase.  
  
 Esta clase también proporciona control sobre los siguientes aspectos de síntesis de voz:  
  
-   Para configurar la salida de la <xref:System.Speech.Synthesis.SpeechSynthesizer> de objeto, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, y <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> métodos.  
  
-   Para generar voz, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> método. El <xref:System.Speech.Synthesis.SpeechSynthesizer> puede generar voz a partir de texto, un <xref:System.Speech.Synthesis.Prompt> o <xref:System.Speech.Synthesis.PromptBuilder> objeto, o desde [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://go.microsoft.com/fwlink/?LinkId=201763).  
  
-   Para pausar y reanudar la síntesis de voz, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> y <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> métodos.  
  
-   Para agregar o quitar léxicos, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> y <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> métodos. El <xref:System.Speech.Synthesis.SpeechSynthesizer> puede usar uno o varios tipos de léxico para guiar su pronunciación de palabras.  
  
-   Para modificar la entrega de la salida de voz, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> y <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> propiedades.  
  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> provoca eventos cuando encuentra determinadas características en los mensajes: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, y <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>). También provoca eventos que informan sobre el inicio (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) y final (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) de hablar de las operaciones y en el cambio de la voz (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.Speech.Synthesis.SpeechSynthesizer>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Speech.Synthesis.SpeechSynthesizer> del objeto <xref:System.Object.Finalize%2A>.  
  
   
  
## Examples  
 El ejemplo siguiente es parte de una aplicación de consola que inicializa un <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto y es orador una cadena.  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361644(v%3doffice.14)">Síntesis de voz.</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechSynthesizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al inicializar un nuevo <xref:System.Speech.Synthesis.SpeechSynthesizer> instancia, utiliza la voz del sistema de forma predeterminada. Para configurar el <xref:System.Speech.Synthesis.SpeechSynthesizer> para usar una de las voces de síntesis (texto a voz) de voz instalado, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> método. Para obtener información sobre la que se instalan las voces, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y el <xref:System.Speech.Synthesis.VoiceInfo> clase.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLexicon(Uri ^ uri, System::String ^ mediaType);" />
      <MemberSignature Language="F#" Value="member this.AddLexicon : Uri * string -&gt; unit" Usage="speechSynthesizer.AddLexicon (uri, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">La ubicación de la información de léxico.</param>
        <param name="mediaType">El tipo de medio del léxico. Los valores de tipo de medio no distinguen mayúsculas de minúsculas.</param>
        <summary>Agrega un léxico a la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un léxico pronunciación es una colección de palabras o frases junto con su pronunciación, que constan de letras y caracteres de un alfabeto fonético admitido. Puede usar un léxico para especificar pronunciaciones personalizadas para el vocabulario especializado en la aplicación.  
  
 Las pronunciaciones especificadas en un archivo de léxico externos tienen prioridad sobre las pronunciaciones del léxico interno el sintetizador de voz o de diccionario. Sin embargo, las pronunciaciones especifican insertado en mensajes que haya creado con cualquiera de los <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, o <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> métodos tienen prioridad sobre las pronunciaciones especificadas en cualquier biblioteca de objetos. Las pronunciaciones en línea solo se aplican a una sola aparición de una palabra. Consulte [léxicos y alfabetos fonéticos](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh378335(v%3doffice.14)) para obtener más información.  
  
 Puede agregar varios léxicos para un <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto. Actualmente se admiten dos valores para el `mediaType` parámetro:  
  
-   El valor `application/pls+xml` indica que la biblioteca de objetos se ajusta a la [pronunciación léxico especificación (PLS) versión 1.0](https://go.microsoft.com/fwlink/?LinkId=201766). Este es el formato preferido para usar.  
  
-   El valor `application/vdn.ms-sapi-lex` indica que el formato de léxico es léxico sin comprimir, que es un formato de la propiedad de Microsoft. Se trata de un formato heredado y se recomienda que utilice el formato PLS descrito anteriormente.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el efecto de agregar y quitar un léxico que contiene una pronunciación personalizada para la palabra "blue". La biblioteca de objetos define la pronunciación de "blue" suene como "bleep". Mientras se carga la biblioteca de objetos, el sintetizador de voz usa la pronunciación definida en la biblioteca de objetos.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 Estos son el contenido del archivo de léxico Blue.pls:  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BookmarkReached As EventHandler(Of BookmarkReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::BookmarkReachedEventArgs ^&gt; ^ BookmarkReached;" />
      <MemberSignature Language="F#" Value="member this.BookmarkReached : EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " Usage="member this.BookmarkReached : System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> encuentra un marcador en un símbolo del sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> provoca este evento al procesar cualquiera de los <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos. Para obtener información acerca de los datos asociados al evento, vea <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.  
  
 Puede agregar marcadores mediante la <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un símbolo del sistema que incluye dos marcadores y envía el resultado a un archivo WAV para su reproducción. El controlador para el <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> eventos escribe el nombre del marcador y su posición en la secuencia de audio cuando se generó el evento en la consola.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nighttime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechSynthesizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Desecha el objeto <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> y libera los recursos utilizados durante la sesión.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SpeechSynthesizer ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="speechSynthesizer.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actúa como medida de seguridad para limpiar los recursos en caso de que el <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> no se llama al método.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentlySpokenPrompt () As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ GetCurrentlySpokenPrompt();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentlySpokenPrompt : unit -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.GetCurrentlySpokenPrompt " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el símbolo del sistema que la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> está hablando.</summary>
        <returns>Devuelve el objeto de mensaje que se habla actualmente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve la colección de voz (texto a voz) voces síntesis que están instaladas actualmente en el sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces (motores de texto a voz) encuentra en el registro de cumple determinados criterios mínimos. Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`. Una aplicación no puede seleccionar una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`. Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices () As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices();" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve todo el contenido de voz instalado voces de síntesis (texto a voz).</summary>
        <returns>Devuelve una colección de solo lectura de las voces instaladas actualmente en el sistema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una voz es un motor de síntesis de voz (texto a voz o TTS) que está instalado en el sistema.  
  
   
  
## Examples  
 El ejemplo siguiente es parte de una aplicación de consola que inicializa un <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto y envía a la consola una lista de las voces instaladas (motores de síntesis de voz) y se muestra la información que está disponible para cada voz.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInstalledVoices (culture As CultureInfo) As ReadOnlyCollection(Of InstalledVoice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Synthesis::InstalledVoice ^&gt; ^ GetInstalledVoices(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetInstalledVoices : System.Globalization.CultureInfo -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;" Usage="speechSynthesizer.GetInstalledVoices culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">La configuración regional que debe ser compatible con la voz.</param>
        <summary>Devuelve todas las voces de síntesis de voz (texto a voz) instaladas que admiten una configuración regional específica.</summary>
        <returns>Devuelve una colección de solo lectura de las voces instaladas actualmente en el sistema que admiten la configuración regional especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si ninguna de la compatibilidad de las voces instaladas con la configuración regional especificada, este método devuelve una colección vacía.  
  
 Microsoft Windows y la API System.Speech aceptan todos los códigos de idioma de país válidos. Para llevar a cabo mediante el idioma especificado en la propiedad de la referencia cultural de texto a voz, debe instalarse un motor de síntesis de voz que admita ese código de idioma de país. Los motores de síntesis de voz que se incluye con Microsoft Windows 7 funcionan con los siguientes códigos de idioma de país:  
  
-   en-US. Inglés (Estados Unidos)  
  
-   zh-CN. Chino (China)  
  
-   zh-TW. Chino (Taiwán)  
  
 También se permiten códigos de idioma de dos letras como "es-es".  
  
   
  
## Examples  
 El ejemplo siguiente es parte de una aplicación de consola que inicializa un <xref:System.Speech.Synthesis.SpeechSynthesizer> de objetos y los envía a la consola una lista de las voces instaladas que admiten la configuración regional en-US.  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="speechSynthesizer.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pausa el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PhonemeReached As EventHandler(Of PhonemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::PhonemeReachedEventArgs ^&gt; ^ PhonemeReached;" />
      <MemberSignature Language="F#" Value="member this.PhonemeReached : EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " Usage="member this.PhonemeReached : System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se genera cuando se alcanza un fonema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un fonema es un componente básico del lenguaje escrito, que suele ser una letra de un alfabeto (o la combinación de dos letras) que representa uno o varios sonidos distintos. Por ejemplo, la letra "c" es un fonema que suene como "s" en "fuera" o como "k" en "catch". La palabra escrita es un ensamblado a partir de los fonemas. Cambiar un fonema en una palabra, modificará la ortografía.  
  
 Un <xref:System.Speech.Synthesis.SpeechSynthesizer> instancia genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> eventos para cada parte de una palabra que constituye un fonema. Por ejemplo, para la palabra "tema" generaría tres <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> eventos; uno para el sonido "th", uno para el sonido "e" y otro para el sonido "m" (me).  
  
 Para un ejemplo y obtener información acerca de los datos asociados al evento, vea <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberSignature Language="VB.NET" Value="Public Property Rate As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Rate { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Rate : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la velocidad de habla de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</summary>
        <value>Devuelve la velocidad de habla de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto, de -10 a 10.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente, se habla de una cadena con la velocidad de habla que se establece en -2.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveLexicon(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="member this.RemoveLexicon : Uri -&gt; unit" Usage="speechSynthesizer.RemoveLexicon uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">La ubicación del documento de léxico.</param>
        <summary>Quita un léxico de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vea <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> para obtener un ejemplo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="speechSynthesizer.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reanuda la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto después de haberla pausado.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoice (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoice(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.SelectVoice : string -&gt; unit" Usage="speechSynthesizer.SelectVoice name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">El nombre de la voz para seleccionar.</param>
        <summary>Selecciona una voz concreta por nombre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres de las voces de texto a voz (TTS) que se pueden seleccionar. Para seleccionar una voz, pasar todo el contenido de la <xref:System.Speech.Synthesis.VoiceInfo.Name%2A> propiedad como argumento para el <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> método. El <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto selecciona el primer voz instalada que contiene `name` en la voz <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=nameWithType> propiedad. El <xref:System.Speech.Synthesis.SpeechSynthesizer> realiza una comparación entre mayúsculas y minúsculas, de subcadena para determinar si coincide con la voz del `name`.  
  
 Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces busca en el registro cumple determinados criterios mínimos. Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`. Una aplicación no puede seleccionar una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`. Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.  
  
 Para seleccionar una voz por sexo, edad o configuración regional, use uno de los <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> métodos.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Selecciona una voz con características específicas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres de las voces de texto a voz (TTS) que se pueden seleccionar. La <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto selecciona el primer voz instalada que coincida con las características especificadas.  
  
 Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces busca en el registro cumple determinados criterios mínimos. Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`. Una aplicación no puede seleccionar una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`. Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.  
  
 Para seleccionar una voz por su nombre, use la <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> (método)  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints gender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">El sexo de la voz para seleccionar.</param>
        <summary>Selecciona una voz con un género concreto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres de las voces de texto a voz (TTS) que se pueden seleccionar. El <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto selecciona el primer voz instalada cuyo <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> coincidencias de propiedad el `gender` parámetro.  
  
 Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces busca en el registro cumple determinados criterios mínimos. Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`. Una aplicación no puede seleccionar una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`. Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.  
  
 Para seleccionar una voz en función de otras características, vea el otro <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> métodos.  
  
 Para seleccionar una voz por su nombre, use la <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">El sexo de la voz para seleccionar.</param>
        <param name="age">La antigüedad de la voz para seleccionar.</param>
        <summary>Selecciona una voz con un género y edad específicos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres de las voces de texto a voz (TTS) que se pueden seleccionar. El <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto selecciona el primer voz instalada cuyo <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> y <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> coincidencia de propiedades el `gender` y `age` parámetros.  
  
 Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces busca en el registro cumple determinados criterios mínimos. Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`. Una aplicación no puede seleccionar una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`. Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.  
  
 Para seleccionar una voz en función de otras características, vea el otro <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> métodos.  
  
 Para seleccionar una voz por su nombre, use la <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">El sexo de la voz para seleccionar.</param>
        <param name="age">La antigüedad de la voz para seleccionar.</param>
        <param name="voiceAlternate">La posición de la voz para seleccionar.</param>
        <summary>Selecciona una voz con un género y edad específicos, según la posición en la que se ordenan las voces.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y <xref:System.Speech.Synthesis.VoiceInfo> instalado de clase para obtener los nombres de las voces de texto a voz (TTS) que se pueden seleccionar. El <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto busca instalado voces cuya <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> y <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> coincidencia de propiedades el `gender` y `age` parámetros. El <xref:System.Speech.Synthesis.SpeechSynthesizer> cuenta las coincidencias que busca y devuelve la voz cuando el recuento es igual a la `voiceAlternate` parámetro.  
  
 Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces busca en el registro cumple determinados criterios mínimos. Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`. Una aplicación no puede seleccionar una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`. Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.  
  
 Para seleccionar una voz en función de otras características, vea el otro <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> sobrecargas.  
  
 Para seleccionar una voz por su nombre, use la <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SelectVoiceByHints (gender As VoiceGender, age As VoiceAge, voiceAlternate As Integer, culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SelectVoiceByHints(System::Speech::Synthesis::VoiceGender gender, System::Speech::Synthesis::VoiceAge age, int voiceAlternate, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.SelectVoiceByHints : System.Speech.Synthesis.VoiceGender * System.Speech.Synthesis.VoiceAge * int * System.Globalization.CultureInfo -&gt; unit" Usage="speechSynthesizer.SelectVoiceByHints (gender, age, voiceAlternate, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender">El sexo de la voz para seleccionar.</param>
        <param name="age">La antigüedad de la voz para seleccionar.</param>
        <param name="voiceAlternate">La posición de la voz para seleccionar.</param>
        <param name="culture">La configuración regional de la voz para seleccionar.</param>
        <summary>Selecciona una voz con un género concreto, la edad y la configuración regional, basándose en la posición en la que se ordenan las voces.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto busca voces cuya <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, y <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> coincidencia de propiedades el `gender`, `age`, y `culture` parámetros. El <xref:System.Speech.Synthesis.SpeechSynthesizer> cuenta las coincidencias que busca y devuelve la voz cuando el recuento es igual a la `voiceAlternate` parámetro.  
  
 Microsoft Windows y la API System.Speech aceptan todos los códigos de idioma de país válidos. Para realizar el texto a voz con el idioma especificado en el `culture` parámetro, un motor de síntesis de voz que admite que se debe instalar el código de país de lenguaje. Los motores de síntesis de voz que se incluye con Microsoft Windows 7 funcionan con los siguientes códigos de idioma de país:  
  
-   en-US. Inglés (Estados Unidos)  
  
-   zh-CN. Chino (China)  
  
-   zh-TW. Chino (Taiwán)  
  
 También se permiten códigos de idioma de dos letras como "es-es".  
  
 Cuando una aplicación llama <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, el método comprueba que cada una de las voces busca en el registro cumple determinados criterios mínimos. Para cualquier voz que se produce un error de comprobación, <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> establece su <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad `False`. Una aplicación no puede seleccionar una voz cuyo <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad es `False`. Normalmente, las aplicaciones no establecerá una voz <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> propiedad.  
  
 Para seleccionar una voz en función de otras características, vea el otro <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> sobrecargas.  
  
 Para seleccionar una voz por su nombre, use la <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToAudioStream (audioDestination As Stream, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToAudioStream(System::IO::Stream ^ audioDestination, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToAudioStream (audioDestination, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination">La secuencia que se va a anexar la salida de síntesis.</param>
        <param name="formatInfo">El formato que se usará para la salida de síntesis.</param>
        <summary>Configura el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto que se va a anexar la salida a una secuencia de audio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> para liberar el <xref:System.Speech.Synthesis.SpeechSynthesizer>de referencia a la secuencia.  
  
 Para ver otras opciones de configuración de salida, vea el <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, y <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToDefaultAudioDevice : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Configura el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto para enviar la salida en el dispositivo de audio predeterminado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el **sonido** ventana en el Windows **Panel de Control** para configurar el dispositivo de audio predeterminado para el equipo.  
  
 Para ver otras opciones de configuración de salida, vea el <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, y <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> métodos.  
  
   
  
## Examples  
 El ejemplo siguiente utiliza el sintetizador hablar de una frase a la salida de audio predeterminada.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetOutputToNull : unit -&gt; unit" Usage="speechSynthesizer.SetOutputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Configura el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto para no enviar los resultados de las operaciones de síntesis para un dispositivo, el archivo o la secuencia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para liberar el <xref:System.Speech.Synthesis.SpeechSynthesizer>de referencia a un archivo o secuencia. Vea <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> para obtener un ejemplo.  
  
 Para ver otras opciones de configuración de salida, vea el <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, y <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Configura el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto para anexar la salida a un archivo de formato de audio de forma de onda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para liberar el <xref:System.Speech.Synthesis.SpeechSynthesizer>referencia en el archivo, volver a configurar el <xref:System.Speech.Synthesis.SpeechSynthesizer>de salida de, por ejemplo, mediante una llamada a <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Para ver otras opciones de configuración de salida, vea el <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, y <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso al archivo.</param>
        <summary>Configura el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto para anexar la salida a un archivo que contiene audio de formato de la forma de onda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para configurar la salida y especificar el formato de audio, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa una instancia de <xref:System.Media.SoundPlayer> para reproducir un símbolo del sistema que ha sido de salida a un archivo .wav. Porque el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> llamada es asincrónica, el <xref:System.Media.SoundPlayer> se crea la instancia (y el <xref:System.Media.SoundPlayer.Play%2A> método invocado) en el controlador para el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> eventos.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveFile (path As String, formatInfo As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveFile(System::String ^ path, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ formatInfo);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveFile : string * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveFile (path, formatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso al archivo.</param>
        <param name="formatInfo">La información de formato de audio.</param>
        <summary>Configura el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto para anexar la salida a un archivo de formato de audio de forma de onda en un formato especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente especifica el formato de la salida de síntesis de voz y lo envía a un archivo WAV.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutputToWaveStream (audioDestination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOutputToWaveStream(System::IO::Stream ^ audioDestination);" />
      <MemberSignature Language="F#" Value="member this.SetOutputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechSynthesizer.SetOutputToWaveStream audioDestination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination">La secuencia que se va a anexar la salida de síntesis.</param>
        <summary>Configura el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto para anexar la salida en una secuencia que contiene audio de formato de la forma de onda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para liberar el <xref:System.Speech.Synthesis.SpeechSynthesizer>referencia en el flujo, reconfigure el sintetizador de salida de, por ejemplo, mediante una llamada a <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.  
  
 Para ver otras opciones de configuración de salida, vea el <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, y <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> métodos.  
  
   
  
## Examples  
 El ejemplo siguiente genera una frase en una secuencia WAV.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream streamAudio = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Genera voz emitida de forma sincrónica desde una cadena, un <see cref="T:System.Speech.Synthesis.Prompt" /> objeto, o un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> métodos generan voz de forma sincrónica. Los métodos no vuelve hasta que el contenido de la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> instancia ha se ha expuesto por completo. Se trata de la manera más sencilla para generar voz. Sin embargo, si la aplicación necesita realizar tareas mientras habla, por ejemplo texto resaltado, paint animación, controles de monitor u otras tareas, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> métodos o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> método para generar voz de forma asincrónica.  
  
 Durante una llamada a este método, el <xref:System.Speech.Synthesis.SpeechSynthesizer> puede provocar los eventos siguientes:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Se genera cuando cambia el estado de habla del sintetizador.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Se genera cuando el sintetizador comience a generar la voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Se genera cada vez que el sintetizador alcanza una letra o una combinación de letras que constituyen un sonido discreto de voz en un idioma.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Se genera cada vez que el sintetizador completa hablando de una palabra.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Genera cada vez salida de voz requiere un cambio en la posición de la boca o los músculos faciales utilizados para generar voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Se genera cuando el sintetizador encuentra un marcador en un símbolo del sistema.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Se genera cuando cambia el tono de voz para el sintetizador.  
  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> no provoca la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> eventos durante el procesamiento de cualquiera de los <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.Speak prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">El contenido para hablar.</param>
        <summary>Forma sincrónica habla el contenido de un <see cref="T:System.Speech.Synthesis.Prompt" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para comunicar de forma asincrónica el contenido de un <xref:System.Speech.Synthesis.Prompt> de objeto, utilice <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.Prompt> cadena en un objeto y el objeto se pasa como argumento a la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.Speak : System.Speech.Synthesis.PromptBuilder -&gt; unit" Usage="speechSynthesizer.Speak promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">El contenido para hablar.</param>
        <summary>Forma sincrónica habla el contenido de un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para comunicar de forma asincrónica el contenido de un <xref:System.Speech.Synthesis.PromptBuilder> de objeto, utilice <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> cadena en un objeto y el objeto se pasa como argumento a la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Speak(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.Speak : string -&gt; unit" Usage="speechSynthesizer.Speak textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">El texto para hablar.</param>
        <summary>Forma sincrónica habla el contenido de una cadena.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para hablar de forma sincrónica una cadena que contiene el marcado SSML, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> método. Para hablar de forma asincrónica el contenido de una cadena, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> método.  
  
   
  
## Examples  
 Como se muestra en el ejemplo siguiente, la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método proporciona los medios más sencillos para generar voz de salida de forma sincrónica.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Genera voz emitida de forma asincrónica desde una cadena, un <see cref="T:System.Speech.Synthesis.Prompt" /> objeto, o un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> métodos generan voz de forma asincrónica. Los métodos devuelven inmediatamente sin esperar a que el contenido de la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> objeto termine de hablar. Use <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> si la aplicación necesita realizar tareas mientras habla, por ejemplo, resaltar texto, pintar la animación, controles de supervisión u otras tareas.  
  
 Durante una llamada a este método, el <xref:System.Speech.Synthesis.SpeechSynthesizer> puede provocar los eventos siguientes:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Se genera cuando cambia el estado de habla del sintetizador.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Se genera cuando el sintetizador comience a generar la voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Se genera cada vez que el sintetizador alcanza una letra o una combinación de letras que constituyen un sonido discreto de voz en un idioma.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Se genera cada vez que el sintetizador completa hablando de una palabra.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Genera cada vez salida de voz requiere un cambio en la posición de la boca o los músculos faciales utilizados para generar voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Se genera cuando el sintetizador encuentra un marcador en un símbolo del sistema.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Se genera cuando cambia el tono de voz para el sintetizador.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Se genera cuando termina el sintetizador un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operación.  
  
 Si la aplicación no necesita realizar tareas mientras habla, puede usar el <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> métodos o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> método para generar voz de forma sincrónica.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsync(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsync prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">El contenido para hablar.</param>
        <summary>Forma asincrónica habla el contenido de un <see cref="T:System.Speech.Synthesis.Prompt" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede cancelar la lectura asincrónica de un símbolo del sistema con el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> método.  
  
 Para comunicar de forma sincrónica el contenido de un <xref:System.Speech.Synthesis.Prompt> de objeto, utilice <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.Prompt> cadena en un objeto y el objeto se pasa como argumento a la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> método.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync promptBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">El contenido para hablar.</param>
        <summary>Forma asincrónica habla el contenido de un <see cref="T:System.Speech.Synthesis.PromptBuilder" /> objeto.</summary>
        <returns>Devuelve el objeto que contiene el contenido para hablar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para comunicar de forma sincrónica el contenido de un <xref:System.Speech.Synthesis.PromptBuilder> de objeto, utilice <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> cadena en un objeto y el objeto se pasa como argumento a la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> método.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">El texto para hablar.</param>
        <summary>Forma asincrónica habla el contenido de una cadena.</summary>
        <returns>Devuelve el objeto que contiene el contenido para hablar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para hablar de forma asincrónica una cadena que contiene el marcado SSML, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> método. Para comunicar sincrónicamente el contenido de una cadena, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método. Puede cancelar la lectura asincrónica de un símbolo del sistema con el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> método.  
  
   
  
## Examples  
 Como se muestra en el ejemplo siguiente, la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> método proporciona los medios más sencillos para generar voz de salida de forma asincrónica.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancel(System::Speech::Synthesis::Prompt ^ prompt);" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancel : System.Speech.Synthesis.Prompt -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancel prompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">El contenido que se va a cancelar una operación de habla.</param>
        <summary>Cancela la operación asincrónica de síntesis para un mensaje en cola.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede usar este método para cancelar una asincrónica habla de la operación para lo siguiente:  
  
-   El contenido de un <xref:System.String> especificado por un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> método.  
  
-   El contenido de un <xref:System.Speech.Synthesis.PromptBuilder> especificado por un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType> método.  
  
-   El contenido de un <xref:System.String> que contiene SSML especificado por un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> método.  
  
 Cuando se llama a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=nameWithType>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, System.Speech crea un <xref:System.Speech.Synthesis.Prompt> objeto y lo rellena con el contenido del parámetro del método y devuelve el <xref:System.Speech.Synthesis.Prompt> objeto. Si mantiene una copia de devuelto <xref:System.Speech.Synthesis.Prompt>, puede pasar en <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> Cancelar habla el contenido especificado en un <xref:System.String> o un <xref:System.Speech.Synthesis.PromptBuilder> objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakAsyncCancelAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakAsyncCancelAll();" />
      <MemberSignature Language="F#" Value="member this.SpeakAsyncCancelAll : unit -&gt; unit" Usage="speechSynthesizer.SpeakAsyncCancelAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancela las operaciones de síntesis de voz asincrónico, todo en cola.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra un uso de <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> para cancelar la lectura asincrónica de un símbolo del sistema, por lo que se puede hablar un nuevo símbolo del sistema. Tenga en cuenta que el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> evento desencadena cuando una <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> se ha cancelado la operación.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakCompleted As EventHandler(Of SpeakCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakCompletedEventArgs ^&gt; ^ SpeakCompleted;" />
      <MemberSignature Language="F#" Value="member this.SpeakCompleted : EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " Usage="member this.SpeakCompleted : System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> se complete la lectura de un símbolo del sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> provoca la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> eventos en la finalización de cualquiera de los <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos.  
  
 El <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> clase no tiene ninguna propiedad y no devuelve datos desde el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> eventos. Se proporciona para habilitar los autores de aplicaciones escribir controladores de eventos para el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> eventos.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakProgress As EventHandler(Of SpeakProgressEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakProgressEventArgs ^&gt; ^ SpeakProgress;" />
      <MemberSignature Language="F#" Value="member this.SpeakProgress : EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " Usage="member this.SpeakProgress : System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se genera después el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> hable cada palabra concreta de un símbolo del sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> genera este evento para cada palabra nueva que habla en un símbolo del sistema mediante cualquiera de los <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos. Para un ejemplo y obtener más información acerca de los datos asociados al evento, vea <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SpeakSsml (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SpeakSsml(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsml : string -&gt; unit" Usage="speechSynthesizer.SpeakSsml textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">La cadena SSML para hablar.</param>
        <summary>Forma sincrónica habla un <see cref="T:System.String" /> que contiene el marcado SSML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El contenido de la `textToSpeak` parámetro debe incluir un `speak` elemento y debe ajustarse a la [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://go.microsoft.com/fwlink/?LinkId=201763). Para obtener más información, consulte [referencia del lenguaje de marcado de síntesis de voz](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 Para hablar de forma asincrónica una cadena que contiene el marcado SSML, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> método. Puede usar <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> para iniciar la lectura sincrónica de una cadena que no contiene el marcado SSML.  
  
 Durante una llamada a este método, el <xref:System.Speech.Synthesis.SpeechSynthesizer> puede provocar los eventos siguientes:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Se genera cuando cambia el estado de habla del sintetizador.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Se genera cuando el sintetizador comience a generar la voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Se genera cada vez que el sintetizador alcanza una letra o una combinación de letras que constituyen un sonido discreto de voz en un idioma.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Se genera cada vez que el sintetizador completa hablando de una palabra.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Genera cada vez salida de voz requiere un cambio en la posición de la boca o los músculos faciales utilizados para generar voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Se genera cuando el sintetizador encuentra un marcador en un símbolo del sistema.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Se genera cuando cambia el tono de voz para el sintetizador.  
  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> no provoca la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> eventos mientras se procesaba la <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se representa la fecha 1/29/2009, como una fecha, mes, día, orden de año.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt synchronously.
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpeakSsmlAsync (textToSpeak As String) As Prompt" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Synthesis::Prompt ^ SpeakSsmlAsync(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="member this.SpeakSsmlAsync : string -&gt; System.Speech.Synthesis.Prompt" Usage="speechSynthesizer.SpeakSsmlAsync textToSpeak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">El marcado de SMML para hablar.</param>
        <summary>Forma asincrónica habla un <see cref="T:System.String" /> que contiene el marcado SSML.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El contenido de la `textToSpeak` parámetro debe incluir un `speak` elemento y debe ajustarse a la [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://go.microsoft.com/fwlink/?LinkId=201763). Para obtener más información, consulte [referencia del lenguaje de marcado de síntesis de voz](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
 Para hablar de forma sincrónica una cadena que contiene el marcado SSML, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> método. Puede usar <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> para iniciar la lectura asincrónica de una cadena que no contiene el marcado SSML.  
  
 Durante una llamada a este método, el <xref:System.Speech.Synthesis.SpeechSynthesizer> puede provocar los eventos siguientes:  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>. Se genera cuando cambia el estado de habla del sintetizador.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>. Se genera cuando el sintetizador comience a generar la voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>. Se genera cada vez que el sintetizador alcanza una letra o una combinación de letras que constituyen un sonido discreto de voz en un idioma.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>. Se genera cada vez que el sintetizador completa hablando de una palabra.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>. Genera cada vez salida de voz requiere un cambio en la posición de la boca o los músculos faciales utilizados para generar voz.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>. Se genera cuando el sintetizador encuentra un marcador en un símbolo del sistema.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>. Se genera cuando cambia el tono de voz para el sintetizador.  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>. Se genera cuando el sintetizador termina el procesamiento de un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> operación.  
  
 Si la denegación de servicio de aplicación no necesita realizar tareas mientras habla, puede usar el <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> método para generar voz de forma sincrónica.  
  
   
  
## Examples  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeakStarted As EventHandler(Of SpeakStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::SpeakStartedEventArgs ^&gt; ^ SpeakStarted;" />
      <MemberSignature Language="F#" Value="member this.SpeakStarted : EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " Usage="member this.SpeakStarted : System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> comienza a leer de un símbolo del sistema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> provoca este evento cuando comienza a procesar un mensaje con cualquiera de los <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos.  
  
 El <xref:System.Speech.Synthesis.SpeakStartedEventArgs> clase no tiene ninguna propiedad y no devuelve datos desde el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> eventos. Se proporciona para habilitar los autores de aplicaciones escribir controladores de eventos para el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As SynthesizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::SynthesizerState State { System::Speech::Synthesis::SynthesizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.SynthesizerState" Usage="System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el actual estado de habla del <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</summary>
        <value>Devuelve el estado actual de habla de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener el estado nueva de la <xref:System.Speech.Synthesis.SpeechSynthesizer> después del cambio, use el <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> propiedad de la <xref:System.Speech.Synthesis.StateChangedEventArgs> clase.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el estado de la <xref:System.Speech.Synthesis.SpeechSynthesizer> antes, durante y después de hablar de un símbolo del sistema.  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el estado de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> cambios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> provoca este evento cuando su hablando <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> cambios. Para un ejemplo y obtener más información acerca de los datos asociados al evento, vea <xref:System.Speech.Synthesis.StateChangedEventArgs>.  
  
 Para pausar y reanudar la síntesis de voz, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> y <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisemeReached As EventHandler(Of VisemeReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VisemeReachedEventArgs ^&gt; ^ VisemeReached;" />
      <MemberSignature Language="F#" Value="member this.VisemeReached : EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " Usage="member this.VisemeReached : System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se genera cuando se alcanza un visema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un visema es la posición básica de la boca y de cara al pronunciar un fonema. Visemes son representaciones visuales de los fonemas.  
  
 System.Speech admite 21 visemes para inglés de Estados Unidos, cada uno de los cuales corresponde a uno o varios fonemas.  <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> los eventos se producen cuando un fonema nuevo alcanzado tiene un visema correspondiente diferente que el fonema anterior alcanzado. Puesto que algunos visemes representan más de un fonema, un <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> evento no se genera si el fonema siguiente alcanzado corresponde al mismo visema como fonema anterior. Por ejemplo, para las palabras habladas "esta zona," un <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> evento se genera para la "s" en "this" y "z" en "zone". Sin embargo, un <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> eventos no se generan para la "z" en "zone" porque se corresponde con el mismo visema como la "s" en "this".  
  
 La siguiente es una lista de los 21 fonemas SAPI fonema grupos y que corresponden a un visema en inglés de Estados Unidos.  
  
|Visema|Phoneme(s)|  
|------------|------------------|  
|0|Silencio|  
|1|AE, ax, ah|  
|2|aa|  
|3|ao|  
|4|EY, eh, eh|  
|5|ER|  
|6|y, b o z, ih, ix|  
|7|w, uw|  
|8|ow|  
|9|aw|  
|10|oy|  
|11|Ay|  
|12|h|  
|13|r|  
|14|l|  
|15|s, z|  
|16|sh, ch, jh, zh|  
|17|th, dh|  
|18|f, v|  
|19|d, t, n|  
|20|k, g, ng|  
|21|p, b, m|  
  
 Para obtener información acerca de los datos asociados con el `VisemeReached` eventos, consulte <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Voice As VoiceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::VoiceInfo ^ Voice { System::Speech::Synthesis::VoiceInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Voice : System.Speech.Synthesis.VoiceInfo" Usage="System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene información acerca de la voz actual del <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</summary>
        <value>Devuelve información acerca de la voz actual del <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al inicializar un nuevo <xref:System.Speech.Synthesis.SpeechSynthesizer>, usa la voz del sistema de forma predeterminada. Para configurar el <xref:System.Speech.Synthesis.SpeechSynthesizer> objetos para usar una de las voces de síntesis de voz instalado, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> método. Para obtener información sobre la que se instalan las voces, use el <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> método y el <xref:System.Speech.Synthesis.VoiceInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se inicializa una instancia de <xref:System.Speech.Synthesis.SpeechSynthesizer> y obtiene información acerca de la voz actual.  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VoiceChange As EventHandler(Of VoiceChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Synthesis::VoiceChangeEventArgs ^&gt; ^ VoiceChange;" />
      <MemberSignature Language="F#" Value="member this.VoiceChange : EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " Usage="member this.VoiceChange : System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la voz de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> cambios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para un ejemplo y obtener información acerca de los datos asociados al evento, vea <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.  
  
 Puede cambiar la voz que el <xref:System.Speech.Synthesis.SpeechSynthesizer> usa con cualquiera de los <xref:System.Speech.Synthesis.PromptBuilder>del <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> métodos o <xref:System.Speech.Synthesis.SpeechSynthesizer>del <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> o <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> métodos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberSignature Language="VB.NET" Value="Public Property Volume As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Volume { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Volume : int with get, set" Usage="System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el volumen de salida de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> objeto.</summary>
        <value>Devuelve el volumen de la <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />, comprendido entre 0 y 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se establece el volumen de la <xref:System.Speech.Synthesis.SpeechSynthesizer>audio de salida para la voz sintetizada y el archivo WAV.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>