<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f5a146867d4dbd7adf493e2df44878f559c9c62" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39928845" /></Metadata><TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Devuelve datos del evento <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de <xref:System.Speech.Synthesis.SpeakProgressEventArgs> se crea cuando el <xref:System.Speech.Synthesis.SpeechSynthesizer> objeto genera el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> eventos. El <xref:System.Speech.Synthesis.SpeechSynthesizer> genera este evento para cada palabra nueva que habla en un símbolo del sistema mediante cualquiera de los <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> métodos.  
  
 Los datos devueltos se basan en el lenguaje de marcado de síntesis del voz (SSML) que genera el código. Los valores devueltos para <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> incluir espacios y los caracteres y el contenido de las etiquetas SSML generadas por el código.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la información que está disponible en <xref:System.Speech.Synthesis.SpeakProgressEventArgs>. Tenga en cuenta cómo el <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, y <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> métodos afectan a la <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> mediante la adición de ** \<p >**, ** \</p >**, ** \<s >**, y ** \</s >** etiquetas para el SSML generado. Además, hay dos entradas en la salida de "30%", uno para cada palabra hablar de esta cadena numérica (treinta por ciento). El <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> y <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> son los mismos para cada entrada y representar los caracteres "30%. Sin embargo, el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> cambia para reflejar el habla de las palabras "treinta" y "porcentaje" por el <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la posición del sonido del evento.</summary>
        <value>Devuelve la posición del evento en el flujo de salida de audio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza los números de las palabras que corresponden a cómo se proporcionarán el número. Por ejemplo, el sintetizador habla el número "4003" como "tres de mil cuatro". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento para cada una de las palabras habladas y devuelve el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> para cada palabra.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de caracteres de la palabra que se acaba de pronunciar justo antes de que el evento se haya generado.</summary>
        <value>Devuelve el número de caracteres de la palabra que se pronunció justo antes de que se generase el evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza los números de las palabras que corresponden a cómo se proporcionarán el número. Por ejemplo, el sintetizador habla el número "4003" como "tres de mil cuatro". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> eventos para cada una de las palabras habladas. Sin embargo, el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> propiedad para cada una de las tres palabras principales es la misma. En este caso, es el recuento de los caracteres en el número "4003" en el texto del mensaje, cuatro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de caracteres y espacios desde el inicio del indicador hasta la posición delante de la primera letra de la palabra que acaba de pronunciarse.</summary>
        <value>Devuelve el número de caracteres y espacios desde el inicio del mensaje hasta la posición anterior a la primera letra de la palabra que acaba de pronunciarse.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> incluye el recuento de caracteres de las etiquetas XML, incluidos los corchetes envolventes. Al utilizar cualquiera de los <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, o <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> métodos, el contenido se agrega a un mensaje de SSML que incluye la apertura y cierre `speak` elementos. La apertura `speak` elemento agrega un desplazamiento de 82 caracteres y los espacios en el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> de todas las palabras y letras en el símbolo del sistema. Por ejemplo, en el siguiente fragmento, el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> de la primera palabra, "this" es el 82.  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 En el ejemplo anterior el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> de la palabra "test" es 92. En el siguiente fragmento de código la <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> de la palabra "test" es mayor de 23 caracteres (115) porque la apertura ** \<pitch prosody = "high" >** etiqueta que precede contiene 23 caracteres y espacios (el escape de dos caracteres "\\" no se cuentan).  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 Si usas el <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> métodos para agregar contenido a un símbolo del sistema mediante la especificación de un archivo, la apertura `xml` declaración y `speak` elementos en el archivo no se usa o se cuentan. El primer carácter en el archivo después de la apertura `speak` etiqueta será en posición 82 si es el primer contenido en el símbolo del sistema.  
  
 Por el contrario, el parámetro de cadena de un <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método no se agregan a un mensaje de SSML antes de que se pronuncia. Por lo tanto, el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> de la primera palabra, "", en el siguiente fragmento de código es cero.  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza los números de las palabras que corresponden a cómo se proporcionarán el número. Por ejemplo, el sintetizador habla el número "4003" como "tres de mil cuatro". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> eventos para cada una de las tres palabras habladas. Sin embargo, el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> propiedad para cada una de las tres palabras principales es la misma. Es la posición delante del primer carácter del número "4003" en el texto del mensaje.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.PromptBuilder> y anexa el contenido SSML de un archivo XML con <xref:System.Xml.XmlReader>. El ejemplo genera un archivo WAV para la reproducción de voz. El contenido del archivo XML que contiene el SSML aparece a continuación el ejemplo de código.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>El texto que acaba de pronunciarse cuando se generó el evento.</summary>
        <value>Devuelve el texto que acaba de pronunciarse cuando se generó el evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Synthesis.SpeechSynthesizer> normaliza los números de las palabras que corresponden a cómo se proporcionarán el número. Por ejemplo, el sintetizador habla el número "4003" como "tres de mil cuatro". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> eventos para cada una de las palabras habladas. Sin embargo, el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> propiedad para cada una de las tres palabras principales es la misma. Es el texto "4003" desde el símbolo del sistema.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo el <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> informes de eventos el <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> y <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> las propiedades de cadenas que contienen números.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>