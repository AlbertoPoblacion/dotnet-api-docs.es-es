<Type Name="Prompt" FullName="System.Speech.Synthesis.Prompt">
  <Metadata><Meta Name="ms.openlocfilehash" Value="79e5beb9b02ad23e84a7c6227a3aea44dc2d9ddf" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51885372" /></Metadata><TypeSignature Language="C#" Value="public class Prompt" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Prompt extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.Prompt" />
  <TypeSignature Language="VB.NET" Value="Public Class Prompt" />
  <TypeSignature Language="C++ CLI" Value="public ref class Prompt" />
  <TypeSignature Language="F#" Value="type Prompt = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa información sobre lo que se puede representar, texto o archivo de audio, por el <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Speech.Synthesis.Prompt> objeto puede contener texto sin formato, texto con formato de lenguaje de marcado o los archivos de audio.  
  
 Un valor vacío <xref:System.Speech.Synthesis.Prompt> objeto se crea con cada nueva instancia de <xref:System.Speech.Synthesis.PromptBuilder>.  El <xref:System.Speech.Synthesis.PromptBuilder> clase proporciona métodos para agregar contenidos, incluidos texto, marcado SSML, marcadores y los archivos de audio grabados (como archivos .wav), como la empty <xref:System.Speech.Synthesis.Prompt> objeto que contiene. Normalmente, las aplicaciones usarán <xref:System.Speech.Synthesis.PromptBuilder>, en lugar de un <xref:System.Speech.Synthesis.Prompt> objeto, para crear mensajes y rellenarlos con contenido.  
  
 Para generar voz a partir del contenido de un <xref:System.Speech.Synthesis.Prompt> de objeto, utilice el <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.Prompt" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.Speech.Synthesis.PromptBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::Speech::Synthesis::PromptBuilder ^ promptBuilder);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.Prompt : System.Speech.Synthesis.PromptBuilder -&gt; System.Speech.Synthesis.Prompt" Usage="new System.Speech.Synthesis.Prompt promptBuilder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">Contenido que se va a hablar.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.Prompt" /> a partir de un objeto <see cref="T:System.Speech.Synthesis.PromptBuilder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (textToSpeak As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::String ^ textToSpeak);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.Prompt : string -&gt; System.Speech.Synthesis.Prompt" Usage="new System.Speech.Synthesis.Prompt textToSpeak" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">El texto se va a hablar.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.Prompt" /> y especifica el texto que se va a hablar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Synthesis.Prompt> cadena en un objeto y el objeto se pasa como argumento a la <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> método.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Prompt (string textToSpeak, System.Speech.Synthesis.SynthesisTextFormat media);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string textToSpeak, valuetype System.Speech.Synthesis.SynthesisTextFormat media) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.Prompt.#ctor(System.String,System.Speech.Synthesis.SynthesisTextFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (textToSpeak As String, media As SynthesisTextFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Prompt(System::String ^ textToSpeak, System::Speech::Synthesis::SynthesisTextFormat media);" />
      <MemberSignature Language="F#" Value="new System.Speech.Synthesis.Prompt : string * System.Speech.Synthesis.SynthesisTextFormat -&gt; System.Speech.Synthesis.Prompt" Usage="new System.Speech.Synthesis.Prompt (textToSpeak, media)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="media" Type="System.Speech.Synthesis.SynthesisTextFormat" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">El texto se va a hablar.</param>
        <param name="media">Valor que especifica el formato del texto.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Speech.Synthesis.Prompt" /> y especifica el texto que se debe pronunciar y si su formato es texto sin formato o lenguaje de marcado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El contenido de la `textToSpeak` parámetro debe incluir un `speak` elemento y debe ajustarse a la [lenguaje de marcado de síntesis de voz (SSML) versión 1.0](https://go.microsoft.com/fwlink/?LinkId=201763). Para obtener más información, consulte [referencia del lenguaje de marcado de síntesis de voz](https://msdn.microsoft.com/library/0c51279e-84d2-4f73-a924-8832039abf94).  
  
   
  
## Examples  
 El ejemplo siguiente genera una cadena que contiene el marcado SSML, crea un <xref:System.Speech.Synthesis.Prompt> de objetos de la cadena y habla el símbolo del sistema.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build an SSML prompt in a string.  
        string fileName = "<speak version=\"1.0\" ";  
        fileName += "xmlns=\"http://www.w3.org/2001/10/synthesis\" ";  
        fileName += "xml:lang=\"en-US\">";  
        fileName += "Say a name for the new file <mark name=\"fileName\" />.";  
        fileName += "</speak>";  
  
        // Create a Prompt object from the string.  
        Prompt ssmlFile = new Prompt(fileName, SynthesisTextFormat.Ssml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.Prompt.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Speech.Synthesis.Prompt.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene si <see cref="T:System.Speech.Synthesis.Prompt" /> ha terminado de reproducirse.</summary>
        <value>Devuelve <see langword="true" /> si el símbolo del sistema se ha completado; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>