<Type Name="SecureConversationServiceCredential" FullName="System.ServiceModel.Security.SecureConversationServiceCredential">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b507ff86d3d28a0198880442d73a284a2a76dd60" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39810640" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureConversationServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecureConversationServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.SecureConversationServiceCredential" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureConversationServiceCredential" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureConversationServiceCredential sealed" />
  <TypeSignature Language="F#" Value="type SecureConversationServiceCredential = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la configuración de credencial para un servicio de conversación seguro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las conversaciones seguras implican el intercambio de varios mensajes y utilizan un token de contexto de seguridad (SCT) para garantizar la seguridad. Las partes de la comunicación comparten el SCT a lo largo de una sesión de comunicación. Un servicio puede emitir dos tipos diferentes de SCT:  
  
-   El primero es un SCT basado en sesión que contiene un identificador único. Los mensajes llevan sólo el identificador, y el servicio mantiene una caché de asignación de estado que realiza asignaciones entre los identificadores de SCT y el contenido (como notificaciones, claves de seguridad, etc.). Un cliente con buen comportamiento debe enviar una cancelación de SCT que ayude al servicio a optimizar los recursos de la caché. Si crea instancias de esta clase llamando a <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> con el parámetro `requireCancellation` igual a `true`, el SCT se emite de esta manera.  
  
-   El segundo es un SCT autónomo que reside en una cookie del cliente. El SCT contiene la información de estado completa, por lo que no requiere la administración de estados por parte del servicio ni la cancelación de SCT por parte del cliente. Esto se denomina a veces un SCT de "modo de cookie". Dado que el SCT contiene la información de estado completa, su tamaño es mayor que en el caso basado en sesión. Con los SCT basados en sesión, el servicio almacena gran parte de la información de estado. Sin embargo, dado que es autónomo, se puede utilizar durante toda la duración del servicio y se conserva tras el apagado y reinicio del servicio.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SecurityContextClaimTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Type&gt; SecurityContextClaimTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Type&gt; SecurityContextClaimTypes" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityContextClaimTypes As Collection(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ SecurityContextClaimTypes { System::Collections::ObjectModel::Collection&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContextClaimTypes : System.Collections.ObjectModel.Collection&lt;Type&gt;" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de notificaciones <see cref="T:System.Type" /> para la serialización de cookies.</summary>
        <value>Colección de notificaciones <see cref="T:System.Type" /> para la serialización de cookies.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para serializar las notificaciones en cookies de SCT, usa Windows Communication Foundation (WCF) <xref:System.Runtime.Serialization.DataContractSerializer> como el valor predeterminado. Dado que el recurso de notificación es extensible, WCF le permite proporcionar una lista de tipos de recursos conocidos. Esto ayuda a <xref:System.Runtime.Serialization.DataContractSerializer> durante la deserialización de las notificaciones en la cookie para que pueda devolver los objetos originales fuertemente tipados.  
  
   
  
## Examples  
 El código siguiente muestra cómo obtener esta propiedad.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityStateEncoder">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityStateEncoder As SecurityStateEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::Security::SecurityStateEncoder ^ SecurityStateEncoder { System::ServiceModel::Security::SecurityStateEncoder ^ get(); void set(System::ServiceModel::Security::SecurityStateEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityStateEncoder : System.ServiceModel.Security.SecurityStateEncoder with get, set" Usage="System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.SecurityStateEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" /> personalizado para codificar y descodificar la serialización de cookies.</summary>
        <value>Objeto <see cref="T:System.ServiceModel.Security.SecurityStateEncoder" />, que es una personalización de <see cref="T:System.ServiceModel.Security.DataProtectionSecurityStateEncoder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En "modo de cookie", un servicio emite un token de contexto de seguridad (SCT) en forma de cookie para el cliente, para que no tenga que mantener cualquier estado de seguridad. El cliente devuelve la cookie en el mensaje de solicitud para que el servicio sepa cómo desproteger y comprobar el mensaje de solicitud. Dado que el SCT se transmite a menudo a través de una red no segura, se debe proteger.  
  
 De forma predeterminada, Windows Communication Foundation (WCF) utiliza el <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> clase para proteger la cookie mediante la API de protección de datos (DPAPI). Para que DPAPI funcione en un entorno de granja de servidores web, todos los servicios back-end se deben ejecutar como la misma cuenta de usuario de dominio para DPAPI. En otras palabras, si el servicio está hospedado en web, el proceso de trabajo de Internet Information Services (IIS) se debe configurar para ejecutarse como usuario del dominio.  
  
 Esta propiedad le permite utilizar un <xref:System.ServiceModel.Security.SecurityStateEncoder> personalizado para cifrar y descifrar la cookie, y no depender de DPAPI.  
  
   
  
## Examples  
 El código siguiente muestra cómo establecer esta propiedad.  
  
 [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>