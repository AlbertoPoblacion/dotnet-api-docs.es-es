<Type Name="IRequestChannel" FullName="System.ServiceModel.Channels.IRequestChannel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a4e6a2224ffe9e4cd8609106c22c7b15cfb71f2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37460979" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRequestChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRequestChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IRequestChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRequestChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRequestChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IRequestChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define el contrato que un canal debe implementar para estar en el lado que realiza la solicitud de una comunicación de solicitud-respuesta entre los extremos de la mensajería.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Channels.IRequestChannel> define variantes sincrónicas y asincrónicas de un método <xref:System.ServiceModel.ClientBase%601.ChannelBase%601.System%23ServiceModel%23Channels%23IRequestChannel%23Request%2A> que devuelve un mensaje de respuesta. También proporciona propiedades <xref:System.ServiceModel.Channels.IRequestChannel.RemoteAddress%2A> y <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A> para recuperar la dirección del extremo y URI a los que se envía el mensaje de solicitud.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia una operación asincrónica para transmitir un mensaje de solicitud al lado correspondiente a la respuesta de un intercambio de mensajes de solicitud y respuesta.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRequest (System.ServiceModel.Channels.Message message, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRequest(class System.ServiceModel.Channels.Message message, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginRequest(System::ServiceModel::Channels::Message ^ message, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRequest : System.ServiceModel.Channels.Message * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRequestChannel.BeginRequest (message, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">La solicitud <see cref="T:System.ServiceModel.Channels.Message" /> que se va a transmitir.</param>
        <param name="callback">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la realización de la operación asincrónica que transmite un mensaje de solicitud.</param>
        <param name="state">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica que transmite un mensaje de solicitud.</param>
        <summary>Inicia una operación asincrónica para transmitir un mensaje de solicitud al lado correspondiente a la respuesta de un intercambio de mensajes de solicitud y respuesta.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> que hace referencia a la transmisión asincrónica de un mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el mensaje de solicitud es mayor que el tamaño de mensaje máximo permitido por el enlace utilizado, se inicia <xref:System.ServiceModel.QuotaExceededException>. La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo. El valor predeterminado es 65536 bytes.  
  
   
  
## Examples  
 En el código siguiente se muestra cómo implementar este método.  
  
 [!code-csharp[S_UE_HttpCookieSession#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRequest (System.ServiceModel.Channels.Message message, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRequest(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginRequest(System::ServiceModel::Channels::Message ^ message, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRequest : System.ServiceModel.Channels.Message * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iRequestChannel.BeginRequest (message, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">La solicitud <see cref="T:System.ServiceModel.Channels.Message" /> que se va a transmitir.</param>
        <param name="timeout">
          <see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo dentro del cual se debe recibir una respuesta.</param>
        <param name="callback">El delegado <see cref="T:System.AsyncCallback" /> que recibe la notificación de la realización de la operación asincrónica que transmite un mensaje de solicitud.</param>
        <param name="state">Un objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica que transmite un mensaje de solicitud.</param>
        <summary>Comienza una operación asincrónica para transmitir un mensaje de solicitud al lado de la respuesta intercambio de mensajes solicitud-respuesta dentro de un intervalo de tiempo especificado.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> que hace referencia a la transmisión asincrónica de un mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el mensaje de solicitud es mayor que el tamaño de mensaje máximo permitido por el enlace utilizado, se debería iniciar <xref:System.ServiceModel.QuotaExceededException>. La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo. El valor predeterminado es 65536 bytes.  
  
 Si se pasa `timeout` mientras se llama a la función, se utiliza ese valor. Si <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A> se establece en el enlace, se utiliza el valor en el enlace si no se especifica `timeout` mientras se llama a la función.  
  
 <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A> se utiliza si no se especifica el tiempo de espera en el enlace o mientras se llama a la función. Este valor predeterminado es 1 minuto.  
  
   
  
## Examples  
 En el código siguiente se muestra cómo implementar este método:  
  
 [!code-csharp[S_UE_HttpCookieSession#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La operación debería iniciar un <see cref="T:System.TimeoutException" /> si especificado <paramref name="timeout" /> se supera antes de que finalice la operación.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndRequest (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndRequest : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.EndRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">El <see cref="T:System.IAsyncResult" /> devuelto por una llamada al método <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />.</param>
        <summary>Completa una operación asincrónica para devolver una respuesta basada en mensaje a una solicitud transmitida.</summary>
        <returns>
          <see cref="T:System.ServiceModel.Channels.Message" /> recibido en respuesta a la solicitud.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el mensaje de solicitud es mayor que el tamaño de mensaje máximo permitido por el enlace utilizado, se inicia <xref:System.ServiceModel.QuotaExceededException>. La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo. El valor predeterminado es 65536 bytes.  
  
   
  
## Examples  
 En el código siguiente se muestra cómo implementar este método.  
  
 [!code-csharp[S_UE_HttpCookieSession#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress RemoteAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress RemoteAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ RemoteAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IRequestChannel.RemoteAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la dirección remota a la que el canal de solicitudes envía los mensajes.</summary>
        <value>
          <see cref="T:System.ServiceModel.EndpointAddress" /> al que el canal de solicitudes envía los mensajes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceModel.EndpointAddress> actúa como el destino último y la dirección física si no se especifica <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>. Si se especifica <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>, después ésa será la dirección física real a la que se envía el mensaje y a través de la cual debe ir el mensaje para llegar a su destino.  
  
   
  
## Examples  
 El código siguiente muestra cómo implementar esta propiedad.  
  
 [!code-csharp[S_UE_HttpCookieSession#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Request">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía una solicitud basada en mensaje y devuelve la respuesta basada en mensaje correlacionada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Request (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Request(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Request(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Request : System.ServiceModel.Channels.Message -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.Request message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">La solicitud <see cref="T:System.ServiceModel.Channels.Message" /> que se va a transmitir.</param>
        <summary>Envía una solicitud basada en mensaje y devuelve la respuesta basada en mensaje correlacionada.</summary>
        <returns>
          <see cref="T:System.ServiceModel.Channels.Message" /> recibido en respuesta a la solicitud.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las implementaciones de <xref:System.ServiceModel.Channels.IRequestChannel> garantizan que el mensaje de respuesta está correlacionado con el mensaje de solicitud.  
  
 Generalmente, si una implementación de <xref:System.ServiceModel.Channels.IRequestChannel> recibe un mensaje que no está correlacionado con una solicitud pendiente, se elimina.  
  
 Se puede llamar al método <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> concurrentemente mediante varios subprocesos.  
  
 Pasar el mensaje al canal de solicitud hace que se tenga acceso al mensaje. Después de llamar a <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>, ya no podrá inspeccionar el mensaje ni llamar a <xref:System.ServiceModel.Channels.Message.Close%2A> en el mensaje.  
  
 Si el mensaje de solicitud es mayor que el tamaño de mensaje máximo permitido por el enlace utilizado, se inicia <xref:System.ServiceModel.QuotaExceededException>. La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo. El valor predeterminado es 65536 bytes.  
  
   
  
## Examples  
 En el código siguiente se muestra cómo implementar este método:  
  
 [!code-csharp[S_UE_HttpCookieSession#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Request (System.ServiceModel.Channels.Message message, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Request(class System.ServiceModel.Channels.Message message, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Request(System::ServiceModel::Channels::Message ^ message, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Request : System.ServiceModel.Channels.Message * TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iRequestChannel.Request (message, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="message">La solicitud <see cref="T:System.ServiceModel.Channels.Message" /> que se va a transmitir.</param>
        <param name="timeout">
          <see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo dentro del cual se debe recibir una respuesta.</param>
        <summary>Envía una solicitud basada en mensaje y devuelve la respuesta basada en mensaje correlacionada dentro de un intervalo de tiempo especificado.</summary>
        <returns>
          <see cref="T:System.ServiceModel.Channels.Message" /> recibido en respuesta a la solicitud.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las implementaciones de <xref:System.ServiceModel.Channels.IRequestChannel> garantizan que el mensaje de respuesta está correlacionado con el mensaje de solicitud.  
  
 Generalmente, si una implementación de <xref:System.ServiceModel.Channels.IRequestChannel> recibe un mensaje que no está correlacionado con una solicitud pendiente, se elimina.  
  
 Se puede llamar al método <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A> concurrentemente mediante varios subprocesos.  
  
 Pasar el mensaje al canal de solicitud hace que se tenga acceso al mensaje. Después de llamar a <xref:System.ServiceModel.Channels.IRequestChannel.Request%2A>, ya no podrá inspeccionar el mensaje ni llamar a <xref:System.ServiceModel.Channels.Message.Close%2A> en el mensaje.  
  
 Si el mensaje de solicitud es mayor que el tamaño de mensaje máximo permitido por el enlace utilizado, se inicia <xref:System.ServiceModel.QuotaExceededException>. La propiedad <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> establece el tamaño del mensaje máximo. El valor predeterminado es 65536 bytes.  
  
 Si se pasa `timeout` mientras se llama a la función, se utiliza ese valor. Si <xref:System.ServiceModel.Channels.Binding.SendTimeout%2A> se establece en el enlace, se utiliza el valor en el enlace si no se especifica `timeout` mientras se llama a la función.  
  
 <xref:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout%2A> se utiliza si no se especifica el tiempo de espera en el enlace o mientras se llama a la función. Este valor predeterminado es 1 minuto.  
  
   
  
## Examples  
 En el código siguiente se muestra cómo implementar este método.  
  
 [!code-csharp[S_UE_HttpCookieSession#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La operación debería iniciar un <see cref="T:System.TimeoutException" /> si especificado <paramref name="timeout" /> se supera antes de que finalice la operación.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Via">
      <MemberSignature Language="C#" Value="public Uri Via { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Via" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IRequestChannel.Via" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Via As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Via { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Via : Uri" Usage="System.ServiceModel.Channels.IRequestChannel.Via" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la dirección de transporte a la se envía la solicitud.</summary>
        <value>
          <see cref="T:System.Uri" /> que contiene la dirección de transporte a la que se envía un mensaje.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceModel.EndpointAddress> actúa como el destino último y la dirección física si no se especifica <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>. Si se especifica <xref:System.ServiceModel.Channels.IRequestChannel.Via%2A>, después ésa será la dirección física real a la que se envía el mensaje y a través de la cual debe ir el mensaje para llegar a su destino.  
  
   
  
## Examples  
 El código siguiente muestra cómo implementar esta propiedad.  
  
 [!code-csharp[S_UE_HttpCookieSession#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpcookiesession/cs/httpcookierequestsessionchannel.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>