<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInputChannel.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c1491efafc1411697f4583e7dbfb438a0f2d5afc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1491efafc1411697f4583e7dbfb438a0f2d5afc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Defines the interface that a channel must implement to receive a message.</source>
          <target state="translated">Define la interfaz que un canal debe implementar para recibir un mensaje.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</source>
          <target state="translated">El contrato <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> incluye variantes sincrónicas y asincrónicas de la funcionalidad de recepción, de intento de recepción y de espera por un mensaje.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The pull model is used typically with an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> to receive messages: you call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> (to "pull" a message out of the channel) and then wait for a message to arrive.</source>
          <target state="translated">El modelo de extracción se utiliza normalmente con <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> para recibir los mensajes: llama a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> (para "extraer" un mensaje del canal) y, a continuación, espera a que llegue un mensaje.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>An alternative usage pattern is to call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>, and then call <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29&gt;</ph>.</source>
          <target state="translated">Un modelo del uso alternativo es llamar a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> o a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>y, a continuación, llamar a <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>This approach is common for transactional usages where you start the transaction between the calls to <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</source>
          <target state="translated">Este enfoque es común para los usos transaccionales donde se inicia la transacción entre las llamadas a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> y a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>An <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> is not necessarily bound to a single sender.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> no está necesariamente enlazado a un remitente único.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Other channels and channel interfaces can provide a correlation between particular senders and an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>, but the base contract makes no such restriction.</source>
          <target state="translated">Otros canales e interfaces de canal pueden proporcionar una correlación entre los remitentes determinados y <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph>, pero el contrato base no hace ninguna restricción así.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>An implementation can create a new <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> for each message or reuse the same <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> for multiple messages and senders.</source>
          <target state="translated">Una implementación puede crear un <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> nuevo para cada mensaje o reutilizar el mismo <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel&gt;</ph> para varios mensajes y remitentes.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Begins an asynchronous receive operation.</source>
          <target state="translated">Comienza una operación de recepción asincrónica.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que se reciba el mensaje de solicitud o se haya superado el intervalo de tiempo especificado por <ph id="ph2">`timeout`</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
          <target state="translated">La operación asincrónica está disponible con o sin un tiempo de espera explícito.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">El delegado <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a message that has a state object associated with it.</source>
          <target state="translated">Comienza una operación asincrónica para recibir un mensaje que tiene un objeto de estados asociado a él.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous message reception.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que hace referencia a la recepción asincrónica de un mensaje.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que se reciba el mensaje de solicitud o se haya superado el intervalo de tiempo especificado por <ph id="ph2">`timeout`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
          <target state="translated">La operación asincrónica está disponible con o sin un tiempo de espera explícito.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">Este método recibe una notificación, mediante una devolución de llamada, de la identidad del controlador de eventos de la operación.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The operation is not complete until a message becomes available in the channel.</source>
          <target state="translated">La operación no se completa hasta que haya un mensaje disponible en el canal.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica el intervalo de tiempo que hay que esperar a que haya un mensaje disponible.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">El delegado <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</source>
          <target state="translated">Comienza una operación asincrónica para recibir un mensaje que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous receive operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que hace referencia a la operación de recepción asincrónica.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the <ph id="ph2">`timeout`</ph> has been exceeded.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que se reciba el mensaje de solicitud o se haya superado el intervalo de tiempo especificado por <ph id="ph2">`timeout`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The asynchronous operation is available with or without an explicit timeout.</source>
          <target state="translated">La operación asincrónica está disponible con o sin un tiempo de espera explícito.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
          <target state="translated">La operación no se completa hasta que haya un mensaje disponible en el canal o se agote el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">Se supera el <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> especificado antes de que se complete la operación.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">El tiempo de espera especificado es menor que cero.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation throws a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded before it completes.</source>
          <target state="translated">La operación inicia <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> si se supera el <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> especificado antes de que se complete.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica el intervalo de tiempo que hay que esperar a que haya un mensaje disponible.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">El delegado <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</source>
          <target state="translated">Comienza una operación asincrónica para recibir un mensaje que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous receive operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que hace referencia a la operación de recepción asincrónica.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method when you want the application processing to continue without waiting.</source>
          <target state="translated">Si desea que la aplicación siga realizando sus procesos sin esperar, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> sincrónico cuando sea aceptable bloquear el subproceso actual mientras este responde al mensaje de solicitud o hasta que se supere el intervalo del tiempo de espera.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the timeout occurs.</source>
          <target state="translated">La operación no se completa hasta que haya un mensaje disponible en el canal o se agote el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If you are going to handle timeouts and not just re-throw or wrap the <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, then you should call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> instead of <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</source>
          <target state="translated">Si va a administrar los tiempos de espera y no sólo reiniciar o encapsular <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, debería llamar a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> en lugar de <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If you are not going to treat timeouts specially then just call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>, otherwise you lose error information.</source>
          <target state="translated">Si no va a tratar especialmente los tiempos de espera, llame a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>, de lo contrario perderá información de error.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">Se supera el <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> especificado antes de que se complete la operación.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">El tiempo de espera especificado es menor que cero.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> from <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /&gt;</ph> if the specified <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph> is exceeded.</source>
          <target state="translated">La operación devuelve <ph id="ph1">&lt;see langword="false" /&gt;</ph> de <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /&gt;</ph> si se supera el <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies the interval of time to wait for a message to become available.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica el intervalo de tiempo que hay que esperar a que haya un mensaje disponible.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that receives the notification of the asynchronous operation completion.</source>
          <target state="translated">El delegado <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que recibe la notificación de la finalización de la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object, specified by the application, that contains state information associated with the asynchronous operation.</source>
          <target state="translated">Objeto, especificado por la aplicación, que contiene información de estado asociada a la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</source>
          <target state="translated">Comienza una operación asincrónica para esperar a que llegue un mensaje que tiene un tiempo de espera especificado y un objeto de estados asociados a él.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous operation to wait for a message to arrive.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que hace referencia a la operación asincrónica de espera a que llegue un mensaje.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method if you need the application processing to continue without waiting for the message to arrive.</source>
          <target state="translated">Si es necesario que la aplicación siga realizando sus procesos sin esperar a que llegue el mensaje, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
          <target state="translated">Utilice el método sincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> cuando sea aceptable bloquear el subproceso actual mientras espera a que llegue un mensaje de solicitud a la cola.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">El subproceso está bloqueado hasta el <ph id="ph1">`timeout`</ph>especificado.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method receives notification, through a callback, of the identity of the event handler for the operation.</source>
          <target state="translated">Este método recibe una notificación, mediante una devolución de llamada, de la identidad del controlador de eventos de la operación.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation is not complete until either a message becomes available in the channel or the time out occurs.</source>
          <target state="translated">La operación no se completa hasta que haya un mensaje disponible en el canal o se agote el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">Se supera el <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> especificado antes de que se complete la operación.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">El tiempo de espera especificado es menor que cero.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded, not a timeout exception.</source>
          <target state="translated">La operación devuelve <ph id="ph1">&lt;see langword="false" /&gt;</ph> si se supera el <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> especificado, no una excepción de tiempo de espera.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to one of the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> devuelto por una llamada a uno de los métodos <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>Completes an asynchronous operation to receive a message.</source>
          <target state="translated">Completa una operación asincrónica para recibir un mensaje.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> recibido.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> devuelto por una llamada al método <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> recibido.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>Completes the specified asynchronous operation to receive a message.</source>
          <target state="translated">Completa la operación asincrónica especificada para recibir un mensaje.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message is received before the specified interval of time elapses; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se recibe un mensaje antes de que transcurra un intervalo de tiempo especificado; de lo contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that identifies the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> operation to finish, and from which to retrieve an end result.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que identifica la operación <ph id="ph2">&lt;see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /&gt;</ph> que va a terminar y de la que se va a recuperar un resultado final.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source>Completes the specified asynchronous wait-for-a-message operation.</source>
          <target state="translated">Completa la operación asincrónica especificada de espera por un mensaje.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message has arrived before the <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has been exceeded; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si llega un mensaje antes de que se haya superado <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>; de lo contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>Gets the address on which the input channel receives messages.</source>
          <target state="translated">Obtiene la dirección en la que este canal de entrada recibe los mensajes.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph> on which the input channel receives messages.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.EndpointAddress" /&gt;</ph> en el que el canal de entrada recibe los mensajes.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Si este canal de entrada no tiene una dirección independiente (por ejemplo, es el lado de entrada de un canal TCP iniciado por cliente), esta propiedad es <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>This property can be used by higher-level channels for correlation purposes.</source>
          <target state="translated">Canales del nivel más alto pueden utilizar esta propiedad a efectos de la correlación.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>For example, if a higher-level channel implements request-reply on top of a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexChannel&gt;</ph>, it can use the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A&gt;</ph> property in the WS-Addressing ReplyTo header.</source>
          <target state="translated">Por ejemplo, si un canal de nivel más alto implementa la solicitud-respuesta sobre <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IDuplexChannel&gt;</ph>, puede utilizar la propiedad <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A&gt;</ph> en el encabezado de WS-Addressing ReplyTo.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
          <source>The following code illustrates how to implement this property:</source>
          <target state="translated">El código siguiente muestra cómo implementar esta propiedad:</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The operation did not complete with the timeout interval.</source>
          <target state="translated">La operación no se completó en el intervalo de tiempo de espera.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The input channel failed.</source>
          <target state="translated">Se ha producido un error en el canal de entrada.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The input channel has been aborted.</source>
          <target state="translated">Se ha anulado el canal de entrada.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The input channel faulted.</source>
          <target state="translated">Se ha generado un error en el canal de entrada.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</source>
          <target state="translated">Devuelve un mensaje recibido por el canal de entrada si está disponible con un intervalo de tiempo definido de forma explícita o implícita.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que reciba el mensaje de solicitud o supere el intervalo de tiempo especificado por <ph id="ph2">`timeout`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you need the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">Si es necesario que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
          <target state="translated">La operación <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónica está disponible con o sin un tiempo de espera explícito.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Channels.IInputChannel">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
          <target state="translated">Si no hay un mensaje disponible, se bloquea hasta que uno esté disponible o hasta que se supere el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Returns the message received, if one is available.</source>
          <target state="translated">Devuelve el mensaje recibido si está disponible.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>If a message is not available, blocks for a default interval of time.</source>
          <target state="translated">Si no hay un mensaje disponible, se bloquea durante un intervalo de tiempo predeterminado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> recibido.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que reciba el mensaje de solicitud o supere el intervalo de tiempo especificado por <ph id="ph2">`timeout`</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
          <target state="translated">La operación <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónica está disponible con o sin un tiempo de espera explícito.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
          <target state="translated">Si no hay un mensaje disponible, se bloquea hasta que uno esté disponible o hasta que se supere el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated">Se puede llamar <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> varias veces o simultáneamente.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> call can complete for each message received.</source>
          <target state="translated">Sólo se puede completar una llamada <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> por cada mensaje recibido.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> that specifies how long the receive operation has to complete before timing out and throwing a <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que especifica cuánto tiempo tiene una operación de recepción antes de expirar e iniciar <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Returns the message received, if one is available.</source>
          <target state="translated">Devuelve el mensaje recibido si está disponible.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>If a message is not available, blocks for a specified interval of time.</source>
          <target state="translated">Si no hay un mensaje disponible, se bloquea durante un intervalo de tiempo especificado.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> recibido.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Use the synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by <ph id="ph2">`timeout`</ph>.</source>
          <target state="translated">Utilice el método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónico cuando sea aceptable bloquear el subproceso actual hasta que reciba el mensaje de solicitud o supere el intervalo de tiempo especificado por <ph id="ph2">`timeout`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph> method when you want the application processing to continue without waiting for the request to be received.</source>
          <target state="translated">Si desea que la aplicación siga realizando sus procesos sin esperar a recibir la solicitud, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> operation is available with or without an explicit timeout.</source>
          <target state="translated">La operación <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> sincrónica está disponible con o sin un tiempo de espera explícito.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>If a message is not available, it blocks until one is available or until the timeout is exceeded.</source>
          <target state="translated">Si no hay un mensaje disponible, se bloquea hasta que uno esté disponible o hasta que se supere el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> can be called multiple times or concurrently.</source>
          <target state="translated">Se puede llamar <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> varias veces o simultáneamente.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>Only one <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> call can complete for each message received.</source>
          <target state="translated">Sólo se puede completar una llamada <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> por cada mensaje recibido.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">Se supera el <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> especificado antes de que se complete la operación.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">El tiempo de espera especificado es menor que cero.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to one of the <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> devuelto por una llamada a uno de los métodos <ph id="ph2">&lt;see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> received.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.Channels.Message" /&gt;</ph> recibido.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>Tries to receive a message within a specified interval of time.</source>
          <target state="translated">Intenta recibir un mensaje dentro de un intervalo de tiempo especificado.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message is received before the <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has been exceeded; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se recibe un mensaje antes de que se haya superado <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>; de lo contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>If you are going to handle timeouts and not just re-throw or wrap the <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, then you should call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> instead of <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</source>
          <target state="translated">Si va a administrar los tiempos de espera y no sólo reiniciar o encapsular <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>, debería llamar a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29&gt;</ph> en lugar de <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>If you are not going to treat timeouts specially then just call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>, otherwise you will lose error information.</source>
          <target state="translated">Si no va a tratar especialmente los tiempos de espera, llame a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph>, de lo contrario perderá información de error.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">Se supera el <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> especificado antes de que se complete la operación.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">El tiempo de espera especificado es menor que cero.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> specifies the maximum interval of time to wait for a message to arrive before timing out.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> especifica el intervalo de tiempo máximo para esperar a que llegue un mensaje antes de expirar.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Returns a value that indicates whether a message has arrived within a specified interval of time.</source>
          <target state="translated">Devuelve un valor que indica si un mensaje ha llegado dentro de un intervalo especificado de hora.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a message has arrived before the <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> has been exceeded; otherwise <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si llega un mensaje antes de que se haya superado <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph>; de lo contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> does not result in a message being received or processed in any other way.</source>
          <target state="translated">Llamar a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> no resulta en un mensaje recibido o procesado de otra forma.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</source>
          <target state="translated">El método <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> existe principalmente para los escenarios con transacción donde donde el usuario desea recibir el mensaje mediante una transacción.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>When using just <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> normally for this, the user must create the transaction and then call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> and hope the message arrives before the transaction times out, which may not be possible.</source>
          <target state="translated">Al utilizar normalmente sólo <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> para esto, el usuario debe crear la transacción y, a continuación, llamar a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> y esperar que el mensaje llegue antes de que expire la transacción, lo que puede no ser posible.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Instead, the user can call <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> and be confident that they can get the message back before the transaction expires.</source>
          <target state="translated">Si no, el usuario puede llamar a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> y especificar el tiempo de espera deseado (incluso infinito); a continuación, cuando llega un mensaje, puede abrir la transacción, llamar a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IInputChannel.Receive%2A&gt;</ph> y estar seguro que pueden recibir el mensaje antes de que la transacción expire.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</source>
          <target state="translated">Este método es sincrónico, por lo que se bloquea el subproceso actual hasta que haya un mensaje disponible o hasta que finalice el tiempo de espera especificado.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>Use <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</source>
          <target state="translated">Utilice <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29&gt;</ph> cuando se acepte bloquear el subproceso actual mientras se espera a que llegue un mensaje a la cola.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The thread is blocked up to the specified <ph id="ph1">`timeout`</ph>.</source>
          <target state="translated">El subproceso está bloqueado hasta el <ph id="ph1">`timeout`</ph>especificado.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>If you need the application processing to continue without waiting, use the asynchronous <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">Si es necesario que la aplicación siga realizando sus procesos sin esperar, hay que utilizar el método asincrónico <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The following code illustrates how to implement this method:</source>
          <target state="translated">El código siguiente muestra cómo implementar este método:</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The specified <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> is exceeded before the operation is completed.</source>
          <target state="translated">Se supera el <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> especificado antes de que se complete la operación.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The timeout specified is less than zero.</source>
          <target state="translated">El tiempo de espera especificado es menor que cero.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
          <source>The operation returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> is exceeded, not a timeout exception.</source>
          <target state="translated">La operación devuelve <ph id="ph1">&lt;see langword="false" /&gt;</ph> si se supera el <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> especificado, no una excepción de tiempo de espera.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>