<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4df14089e9a33087bf1b3c97c7710cbb5c1bdc7" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48739516" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define una interfaz que le permite obtener y establecer el contexto en el canal.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para canales que utilizan <xref:System.ServiceModel.WSHttpContextBinding> con el valor <xref:System.ServiceModel.SessionMode.NotAllowed> establecido, no es posible recuperar el contexto en el cliente mediante <xref:System.ServiceModel.Channels.IContextManager>, porque se crea un nuevo canal que establece una sesión cada vez que se llama a <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> para exigir la semántica <xref:System.ServiceModel.SessionMode.NotAllowed> en un canal. Esto significa que aunque el contexto vuelve a propagarse correctamente, en este caso, hacia el cliente, no puede recuperarse utilizando <xref:System.ServiceModel.Channels.IContextManager>. Todavía puede recuperarlo mediante <xref:System.ServiceModel.Channels.ContextMessageProperty>, como se muestra en el siguiente código.  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se ha habilitado la administración del contexto.</summary>
        <value><see langword="true" /> si el contexto está habilitado; en caso contrario, devuelve el valor <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando la administración de contexto está habilitada, el canal del contexto almacena en memoria caché el contexto a lo largo de su duración. El contexto se puede recuperar desde el canal mediante la propiedad de canal `IContextManager` llamando al método <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A>. El canal también se puede preinicializar con contexto antes de abrirse llamando al método <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> en la propiedad de canal. Una vez inicializado el canal con contexto no se puede restablecer.  
  
 A continuación, se muestra una lista de invariables en este modo:  
  
-   Cualquier llamada a <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> después de que el canal se ha abierto inicia una `InvalidOperationException`.  
  
-   Cualquier intento de enviar el contexto a través de la `ContextMessageProperty` en un mensaje saliente inicia una `InvalidOperationException`.  
  
-   Si un mensaje se recibe del servidor con contexto, cuando el canal ya se ha inicializado con un contexto, se produce una `ProtocolException`. Observe que puede recibir el contexto inicial de un servidor si el canal se abre sin establecer el contexto explícitamente.  
  
-   `ContextMessageProperty` en un mensaje entrante siempre es `null`.  
  
 Cuando la administración del contexto no está habilitada, el canal del contexto no administra el contexto. Es responsabilidad de la aplicación el recuperar, administrar y aplicar el contexto mediante la `ContextMessageProperty`. Cualquier intento para llamar a <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> o <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> a través de los resultados de la propiedad de canal `IContextManager` tiene como resultado `InvalidOperationException`.  
  
 Todas las cookies HTTP, salvo las cookies HTTP de contexto, se controlan en el nivel de canal. Las cookies HTTP del contexto se administran en el nivel de aplicación. Esto puede tener consecuencias inesperadas cuando se comparten los canales para hablar con distintas instancias de destino de <xref:System.ServiceModel.Channels.ContextMessageProperty>. La siguiente tabla muestra cómo se ven afectadas las cookies HTTP cuando <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> está establecido en `true` o `false`.  
  
|Enlaces|Valor IContextManager.Enabled|Ámbito de cookie HTTP de contexto|Otro ámbito de cookies HTTP|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|BasicHttpBinding|no disponible|ChannelFactory|ChannelFactory|  
|BasicHttpContextBinding|true|Canal|Canal|  
|BasicHttpContextBinding|false|Para cada mensaje (explícitamente administrado por la aplicación)|Canal|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el contexto.</summary>
        <returns><see cref="T:System.Collections.Generic.IDictionary`2" /> de pares clave-valor con el espacio de nombres y el nombre del contexto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente código muestra cómo obtener el contexto de una instancia de proxy con tipo en el cliente.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">La interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> de pares clave-valor con el espacio de nombres y el nombre del contexto que se establece.</param>
        <summary>Establece el contexto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente código muestra cómo puede establecerse el contexto en el cliente.  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>