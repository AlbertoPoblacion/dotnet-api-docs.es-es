<Type Name="ActionBlock&lt;TInput&gt;" FullName="System.Threading.Tasks.Dataflow.ActionBlock&lt;TInput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="704b8294cab7368ca30be9734751b2f735b9a776" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36606883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ActionBlock&lt;TInput&gt; : System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ActionBlock`1&lt;TInput&gt; extends System.Object implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TInput&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ActionBlock(Of TInput)&#xA;Implements ITargetBlock(Of TInput)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput&gt;&#xA;public ref class ActionBlock sealed : System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt;" />
  <TypeSignature Language="F#" Value="type ActionBlock&lt;'Input&gt; = class&#xA;    interface IDataflowBlock&#xA;    interface ITargetBlock&lt;'Input&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TInput">El tipo de datos en el que este <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> funciona.</typeparam>
    <summary>Proporciona un bloque de flujo de datos que invoca un delegado proporcionado de <see cref="T:System.Action`1" /> para cada elemento de datos recibido.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> clase para llevar a cabo varios cálculos mediante bloques de flujo de datos y devuelve el tiempo necesario para realizar los cálculos. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el [Cómo: especificar el grado de paralelismo en un Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) tema.  
  
 [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]
 [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActionBlock (Action&lt;TInput&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;!TInput&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of TInput))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActionBlock(Action&lt;TInput&gt; ^ action);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; : Action&lt;'Input&gt; -&gt; System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt;" Usage="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; action" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;TInput&gt;" />
      </Parameters>
      <Docs>
        <param name="action">Acción que se va a invocar con cada elemento de datos recibido.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con la acción especificada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActionBlock (Func&lt;TInput,System.Threading.Tasks.Task&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Func(Of TInput, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActionBlock(Func&lt;TInput, System::Threading::Tasks::Task ^&gt; ^ action);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; : Func&lt;'Input, System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt;" Usage="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; action" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="action">Acción que se va a invocar con cada elemento de datos recibido.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con la acción especificada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActionBlock (Action&lt;TInput&gt; action, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;!TInput&gt; action, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of TInput), dataflowBlockOptions As ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActionBlock(Action&lt;TInput&gt; ^ action, System::Threading::Tasks::Dataflow::ExecutionDataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; : Action&lt;'Input&gt; * System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions -&gt; System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt;" Usage="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; (action, dataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;TInput&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="action">Acción que se va a invocar con cada elemento de datos recibido.</param>
        <param name="dataflowBlockOptions">Las opciones con las que se va a configurar este <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con la acción y opciones de configuración especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.%23ctor%28System.Action%7B%600%7D%2CSystem.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions%29> constructor para crear un nuevo <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> objeto. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el [Cómo: especificar el grado de paralelismo en un Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) tema.  
  
 [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]
 [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> es <see langword="null" />.  -o bien- <paramref name="dataflowBlockOptions" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActionBlock (Func&lt;TInput,System.Threading.Tasks.Task&gt; action, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task&gt; action, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Func(Of TInput, Task), dataflowBlockOptions As ExecutionDataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActionBlock(Func&lt;TInput, System::Threading::Tasks::Task ^&gt; ^ action, System::Threading::Tasks::Dataflow::ExecutionDataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; : Func&lt;'Input, System.Threading.Tasks.Task&gt; * System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions -&gt; System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt;" Usage="new System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt; (action, dataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="action">Acción que se va a invocar con cada elemento de datos recibido.</param>
        <param name="dataflowBlockOptions">Las opciones con las que se va a configurar este <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con la acción y opciones de configuración especificadas.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> es <see langword="null" />.  -o bien- <paramref name="dataflowBlockOptions" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Complete();" />
      <MemberSignature Language="F#" Value="abstract member Complete : unit -&gt; unit&#xA;override this.Complete : unit -&gt; unit" Usage="actionBlock.Complete " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica al bloque de flujo de datos que no debe aceptar o generar más mensajes ni usar más mensajes pospuestos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Complete%2A> ha sido llama en un bloque de flujo de datos, ese bloque se completará (para que su <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> tarea pasará a un estado final) una vez procesado todos los datos disponibles anteriormente. Este método, no se bloqueará esperando finalización se produzca, pero se iniciará la solicitud. Para esperar la finalización se produzca, use la <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Complete%2A> método para indicar a los bloques de flujo de datos que no debe aceptar o generar más mensajes ni consumir los mensajes más pospuestos. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el [Cómo: especificar el grado de paralelismo en un Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) tema.  
  
 [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]
 [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Completion As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::Task ^ Completion { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Completion : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt;.Completion" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Threading.Tasks.Task" /> que representa la operación asincrónica y la finalización del bloque de flujo de datos.</summary>
        <value>Tarea completada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un bloque de flujo de datos se considera completada cuando no está procesando actualmente un mensaje y cuando se garantiza que no se procesará más mensajes. El valor devuelto <xref:System.Threading.Tasks.Task> le transición a un estado completado cuando se haya completado el bloque asociado. Realizará la transición a la <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> semántica definido por el estado cuando el bloque termine de procesarse correctamente según el bloque de flujo de datos. Realizará la transición a la <xref:System.Threading.Tasks.TaskStatus.Faulted> cuando el bloque de flujo de datos ha completado el procesamiento antes de tiempo debido a una excepción no controlada y realizará la transición a la <xref:System.Threading.Tasks.TaskStatus.Canceled> estado cuando el bloque de flujo de datos se completó el procesamiento de forma prematura tras recibir una solicitud de cancelación. Si la tarea se completa con el <xref:System.Threading.Tasks.TaskStatus.Faulted> estado, su `Exception` propiedad devuelve un <xref:System.AggregateException> la excepción que contiene una o más excepciones que ha causado el bloqueo de un error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> propiedad que se va a esperar para que todos los mensajes se propaguen a través de la red. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el [Cómo: especificar el grado de paralelismo en un Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) tema.  
  
 [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]
 [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputCount">
      <MemberSignature Language="C#" Value="public int InputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int InputCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.InputCount : int" Usage="System.Threading.Tasks.Dataflow.ActionBlock&lt;'Input&gt;.InputCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos de entrada en espera de ser procesados por este bloque.</summary>
        <value>El número de elementos de entrada en espera de ser procesados por este bloque.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.InputCount%2A> no incluye todos los elementos que se están procesando actualmente por el bloque o los elementos que ya se ha procesado por el bloque.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public bool Post (TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Post(!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Post (item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Post(TInput item);" />
      <MemberSignature Language="F#" Value="member this.Post : 'Input -&gt; bool" Usage="actionBlock.Post item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <param name="item">Elemento que se va a ofrecer al destino.</param>
        <summary>Publica un elemento en el bloque de flujo de datos de destino.</summary>
        <returns>
          <see langword="true" /> si el elemento se envía al bloque de flujo de datos; si no, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Post%2A> método para exponer un elemento en el bloque de flujo de datos de destino. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el [Cómo: especificar el grado de paralelismo en un Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) tema.  
  
 [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]
 [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IDataflowBlock.Fault">
      <MemberSignature Language="C#" Value="void IDataflowBlock.Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception ^ exception) = System::Threading::Tasks::Dataflow::IDataflowBlock::Fault;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Excepción que provocó el error.</param>
        <summary>Hace que el bloque de flujo de datos se completar con errores.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> ha sido llamado en un bloque de flujo de datos, ese bloque se completará y su <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> tarea pasará a un estado final. Un error en un bloque, como con cancelar un bloque, hace que los mensajes almacenados en búfer (mensajes de entrada sin procesar así como mensajes de salida unoffered) se perderán.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exception" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Dataflow.DataflowMessageStatus ITargetBlock&lt;TInput&gt;.OfferMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, TInput messageValue, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt; source, bool consumeToAccept);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Threading.Tasks.Dataflow.DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, !TInput messageValue, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TInput&gt; source, bool consumeToAccept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&lt;TInput&gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function OfferMessage (messageHeader As DataflowMessageHeader, messageValue As TInput, source As ISourceBlock(Of TInput), consumeToAccept As Boolean) As DataflowMessageStatus Implements ITargetBlock(Of TInput).OfferMessage" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Threading::Tasks::Dataflow::DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage(System::Threading::Tasks::Dataflow::DataflowMessageHeader messageHeader, TInput messageValue, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TInput&gt; ^ source, bool consumeToAccept) = System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt;::OfferMessage;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.DataflowMessageStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="messageValue" Type="TInput" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt;" />
        <Parameter Name="consumeToAccept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="messageHeader">Encabezado del mensaje que se va a ofrecer.</param>
        <param name="messageValue">Valor del mensaje que se va a ofrecer.</param>
        <param name="source">Bloque de flujo de datos que ofrece el mensaje. Puede ser <see langword="null" />.</param>
        <param name="consumeToAccept">
          <see langword="true" /> para indicar al destino que llama a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de manera sincrónica durante la llamada a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de devolver <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir el mensaje; en caso contrario, <see langword="false" />.</param>
        <summary>Proporciona un mensaje para el bloque de flujo de datos y le ofrece la posibilidad de utilizarlo o posponerlo.</summary>
        <returns>Estado del mensaje ofrecido.  Si el destino aceptó el mensaje, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> y el origen ya no debe usar más el mensaje ofrecido, ya que ahora es propiedad del destino. Si el destino pospuso el mensaje, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> como notificación de que el destino puede intentar más adelante consumir o reservar el mensaje; mientras tanto, el origen todavía posee el mensaje y puede ofrecerlo a otros bloques.  Si el destino hubiera pospuesto de otra forma el mensaje, pero el origen fuera <see langword="null" />, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  Si el destino intentó aceptar el mensaje pero no pudo hacerlo porque el origen entrega el mensaje a otro destino o lo descarta simplemente, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  Si el destino eligió no aceptar el mensaje, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Si el destino eligió no aceptar el mensaje y nunca aceptará otro mensaje de este origen, se devuelve <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="messageHeader" /> no es válido.  O bien <paramref name="consumeToAccept" /> puede ser <see langword="true" /> solo si se proporciona un valor <paramref name="source" /> que no es NULL.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="actionBlock.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa el nombre con formato de esta instancia de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
        <returns>Cadena que representa el nombre con formato de esta instancia de <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se hereda de <xref:System.Object>. Usa el <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> opción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>