<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1681b37f6256a345cba5980d6dd8e36899a63b3" />
    <Meta Name="ms.sourcegitcommit" Value="44933aff38db926168781f50300446344189a04d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/16/2018" />
    <Meta Name="ms.locfileid" Value="39064915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Module DataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataflowBlock abstract sealed" />
  <TypeSignature Language="F#" Value="type DataflowBlock = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4893b-101">Proporciona un conjunto de métodos estáticos (Shared en Visual Basic) para que funcionen con bloques de flujo de datos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4893b-101">Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObservable(Of TOutput) (source As ISourceBlock(Of TOutput)) As IObservable(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObservable&lt;TOutput&gt; ^ AsObservable(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsObservable : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; IObservable&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-102">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-102">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-103">El origen para ajustar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-103">The source to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-104">Crea una nueva abstracción de la interfaz <see cref="T:System.IObservable`1" /> sobre la interfaz <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-104">Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-105">
            <see cref="T:System.IObservable`1" /> que permite a los observadores que se suscriban al origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-105">An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-106">El valor de <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-106">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObserver(Of TInput) (target As ITargetBlock(Of TInput)) As IObserver(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObserver&lt;TInput&gt; ^ AsObserver(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member AsObserver : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; -&gt; IObserver&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="4893b-107">Especifica el tipo de entrada aceptado por el bloque de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-107">Specifies the type of input accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="4893b-108">Destino que se va a incluir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-108">The target to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-109">Crea una abstracción de <see cref="T:System.IObserver`1" /> sobre <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-109">Creates a new <see cref="T:System.IObserver`1" /> abstraction over the  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-110">Un observador que contiene el bloque de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-110">An observer that wraps the target block.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="4893b-111">Especifica el tipo de datos contenidos en el primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-111">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="4893b-112">Especifica el tipo de datos contenidos en el segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-112">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="4893b-113">El primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-113">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="4893b-114">Controlador que se va a ejecutar en datos del primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-114">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="4893b-115">El segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-115">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="4893b-116">Controlador que se va a ejecutar en datos del segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-116">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-117">Supervisa dos orígenes de flujo de datos, invocando el controlador proporcionado para cualquier origen que haga que los datos se encuentren disponibles en primer lugar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-117">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-118">
            <see cref="T:System.Threading.Tasks.Task`1" /> que representa la elección asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-118">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="4893b-119">Si ambos orígenes se completan antes de completar la selección, la tarea resultante se cancelará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-119">If both sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="4893b-120">Cuando uno de los orígenes tiene datos disponibles y los propaga correctamente a la opción, la tarea resultante se completará cuando se complete el controlador; si el controlador produce una excepción, la tarea finalizará en el estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y contendrá la excepción no controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-120">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="4893b-121">En caso contrario, la tarea finalizará con la propiedad <see cref="P:System.Threading.Tasks.Task`1.Result" /> establecida en 0 o 1 para representar el primer o el segundo origen, respectivamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-121">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
          <span data-ttu-id="4893b-122">Este método solo consumirá un elemento de uno de los dos orígenes de datos, nunca de ambos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-122">This method will only consume an element from one of the two data sources, never both.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-123">El valor de <paramref name="source1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-123">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-124">-o bien- <paramref name="action1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-124">-or-  The  <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-125">-o bien- <paramref name="source2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-125">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-126">-o bien- <paramref name="action2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-126">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="4893b-127">Especifica el tipo de datos contenidos en el primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-127">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="4893b-128">Especifica el tipo de datos contenidos en el segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-128">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="4893b-129">El primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-129">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="4893b-130">Controlador que se va a ejecutar en datos del primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-130">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="4893b-131">El segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-131">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="4893b-132">Controlador que se va a ejecutar en datos del segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-132">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="4893b-133">Las opciones con las que se van a configurar esta opción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-133">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-134">Supervisa dos orígenes de flujo de datos, invocando el controlador proporcionado para cualquier origen que haga que los datos se encuentren disponibles en primer lugar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-134">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-135">
            <see cref="T:System.Threading.Tasks.Task`1" /> que representa la elección asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-135">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="4893b-136">Si ambos orígenes se completan antes de completar la selección o si el <see cref="T:System.Threading.CancellationToken" /> proporcionado como parte de <paramref name="dataflowBlockOptions" /> se cancela antes de completar la selección, la tarea resultante se cancelará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-136">If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="4893b-137">Cuando uno de los orígenes tiene datos disponibles y los propaga correctamente a la opción, la tarea resultante se completará cuando se complete el controlador; si el controlador produce una excepción, la tarea finalizará en el estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y contendrá la excepción no controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-137">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="4893b-138">En caso contrario, la tarea finalizará con la propiedad <see cref="P:System.Threading.Tasks.Task`1.Result" /> establecida en 0 o 1 para representar el primer o el segundo origen, respectivamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-138">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-139">El valor de <paramref name="source1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-139">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-140">-o bien- <paramref name="action1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-140">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-141">-o bien- <paramref name="source2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-141">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-142">-o bien- <paramref name="action2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-142">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-143">-o bien- <paramref name="dataflowBlockOptions" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-143">-or-  The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2, T3) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2), source3 As ISourceBlock(Of T3), action3 As Action(Of T3)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="4893b-144">Especifica el tipo de datos contenidos en el primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-144">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="4893b-145">Especifica el tipo de datos contenidos en el segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-145">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="4893b-146">Especifica el tipo de datos contenidos en el tercer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-146">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="4893b-147">El primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-147">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="4893b-148">Controlador que se va a ejecutar en datos del primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-148">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="4893b-149">El segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-149">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="4893b-150">Controlador que se va a ejecutar en datos del segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-150">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="4893b-151">El tercer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-151">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="4893b-152">Controlador que se va a ejecutar en datos del tercer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-152">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-153">Supervisa tres orígenes de flujo de datos, invocando el controlador proporcionado para cualquier origen que haga que los datos se encuentren disponibles en primer lugar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-153">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-154">
            <see cref="T:System.Threading.Tasks.Task`1" /> que representa la elección asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-154">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="4893b-155">Si todos los orígenes se completan antes de completar la selección, la tarea resultante se cancelará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-155">If all sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="4893b-156">Cuando uno de los orígenes tiene datos disponibles y los propaga correctamente a la opción, la tarea resultante se completará cuando se complete el controlador; si el controlador produce una excepción, la tarea finalizará en el estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y contendrá la excepción no controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-156">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="4893b-157">En caso contrario, la tarea finalizará con la propiedad <see cref="P:System.Threading.Tasks.Task`1.Result" /> establecida en el índice de base 0 del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-157">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="4893b-158">Este método solo consumirá un elemento de uno de los orígenes de datos, nunca de más de uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-158">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-159">El valor de <paramref name="source1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-159">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-160">-o bien- <paramref name="action1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-160">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-161">-o bien- <paramref name="source2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-161">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-162">-o bien- <paramref name="action2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-162">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-163">-o bien- <paramref name="source3" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-163">-or-  The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-164">-o bien- <paramref name="action3" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-164">-or-  The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="4893b-165">Especifica el tipo de datos contenidos en el primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-165">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="4893b-166">Especifica el tipo de datos contenidos en el segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-166">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="4893b-167">Especifica el tipo de datos contenidos en el tercer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-167">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="4893b-168">El primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-168">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="4893b-169">Controlador que se va a ejecutar en datos del primer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-169">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="4893b-170">El segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-170">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="4893b-171">Controlador que se va a ejecutar en datos del segundo origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-171">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="4893b-172">El tercer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-172">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="4893b-173">Controlador que se va a ejecutar en datos del tercer origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-173">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="4893b-174">Las opciones con las que se van a configurar esta opción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-174">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-175">Supervisa tres orígenes de flujo de datos, invocando el controlador proporcionado para cualquier origen que haga que los datos se encuentren disponibles en primer lugar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-175">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-176">
            <see cref="T:System.Threading.Tasks.Task`1" /> que representa la elección asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-176">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="4893b-177">Si todos los orígenes se completan antes de completar la selección o si el <see cref="T:System.Threading.CancellationToken" /> proporcionado como parte de <paramref name="dataflowBlockOptions" /> se cancela antes de completar la selección, la tarea resultante se cancelará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-177">If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="4893b-178">Cuando uno de los orígenes tiene datos disponibles y los propaga correctamente a la opción, la tarea resultante se completará cuando se complete el controlador; si el controlador produce una excepción, la tarea finalizará en el estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y contendrá la excepción no controlada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-178">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="4893b-179">En caso contrario, la tarea finalizará con la propiedad <see cref="P:System.Threading.Tasks.Task`1.Result" /> establecida en el índice de base 0 del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-179">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="4893b-180">Este método solo consumirá un elemento de uno de los orígenes de datos, nunca de más de uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-180">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
          <span data-ttu-id="4893b-181">Si se solicita la cancelación una vez recibido un elemento, la solicitud de cancelación se omitirá y se permitirá que el controlador pertinente se ejecute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-181">If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-182">El valor de <paramref name="source1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-182">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-183">-o bien- <paramref name="action1" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-183">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-184">-o bien- <paramref name="source2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-184">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-185">-o bien- <paramref name="action2" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-185">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-186">-o bien- <paramref name="source3" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-186">-or-  The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-187">-o bien- <paramref name="action3" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-187">-or-  The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-188">-o bien- <paramref name="dataflowBlockOptions" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-188">-or-  The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encapsulate(Of TInput, TOutput) (target As ITargetBlock(Of TInput), source As ISourceBlock(Of TOutput)) As IPropagatorBlock(Of TInput, TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt; ^ Encapsulate(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Encapsulate : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;'Input, 'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate (target, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="4893b-189">Especifica el tipo de entrada que se espera en el destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-189">Specifies the type of input expected by the target.</span>
          </span>
        </typeparam>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-190">Especifica el tipo de salida generado por el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-190">Specifies the type of output produced by the source.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="4893b-191">Destino que se va a encapsular.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-191">The target to encapsulate.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="4893b-192">Origen que se va a encapsular.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-192">The source to encapsulate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-193">Encapsula un destino y un origen en un único propagador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-193">Encapsulates a target and a source into a single propagator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-194">Destino y origen encapsulados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-194">The encapsulated target and source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4893b-195">El <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> método requiere dos bloques existentes: un bloque de destino (una instancia de una clase que implementa <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) y un bloque de origen (una instancia de una clase que implementa <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span><span class="sxs-lookup"><span data-stu-id="4893b-195">The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span></span> <span data-ttu-id="4893b-196"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> crea una nueva instancia de una clase interna que se conecta el <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> los miembros de la interfaz del `target` parámetro y el <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> los miembros de la interfaz el `source` parámetro.</span><span class="sxs-lookup"><span data-stu-id="4893b-196"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.</span></span>  <span data-ttu-id="4893b-197">Ambos <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> y <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derivan <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span><span class="sxs-lookup"><span data-stu-id="4893b-197">Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span></span> <span data-ttu-id="4893b-198">Finalización del bloque se pasa explícitamente desde orígenes a destinos.</span><span class="sxs-lookup"><span data-stu-id="4893b-198">Block completion is explicitly passed from sources to targets.</span></span> <span data-ttu-id="4893b-199">Por lo tanto, el <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> y <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> métodos están conectados al destino mientras la <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> propiedad está conectada al origen.</span><span class="sxs-lookup"><span data-stu-id="4893b-199">Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.</span></span>  <span data-ttu-id="4893b-200">Debe asegurarse de que, cuando el destino de la mitad se completa, el origen se completa la mitad de la manera más adecuada; Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="4893b-200">You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:</span></span>  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 <span data-ttu-id="4893b-201">O bien, si desea propagar el tipo de finalización, puede usar este código más sofisticada:</span><span class="sxs-lookup"><span data-stu-id="4893b-201">Or, if you want to propagate the completion type, you can use this more sophisticated code:</span></span>  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted)    
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 <span data-ttu-id="4893b-202">Debe proporcionar también explícitamente la propagación de mensaje de destino al origen.</span><span class="sxs-lookup"><span data-stu-id="4893b-202">You must also explicitly provide the message propagation from target to source.</span></span> <span data-ttu-id="4893b-203">La ventaja de esta conexión explícita es que ofrece la libertad de realizar cualquier procesamiento sin restricciones entre los dos bloques encapsulados.</span><span class="sxs-lookup"><span data-stu-id="4893b-203">The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks.</span></span> <span data-ttu-id="4893b-204">Esto puede hacer al codificar el procesamiento necesario en los delegados de los bloques (si los bloques toman a delegados), o mediante la incorporación de una subred de bloques entre ellos.</span><span class="sxs-lookup"><span data-stu-id="4893b-204">You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them.</span></span> <span data-ttu-id="4893b-205">La manera más fácil es usar un bloque que toma a los delegados; Por ejemplo, usar <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (si procede), o un bloque personalizado.</span><span class="sxs-lookup"><span data-stu-id="4893b-205">The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-206">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-206">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-207">El origen desde el que se va a vincular.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-207">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="4893b-208">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> con la que conectar el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-208">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-209">Vincula el <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-209">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-210">
            <see cref="T:System.IDisposable" /> que, tras llamar a <see langword="Dispose" />, desvinculará el origen del destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-210">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-211">El valor de <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-211">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-212">-o bien- <paramref name="target" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-212">-or-  The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-213">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-213">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-214">El origen desde el que se va a vincular.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-214">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="4893b-215">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> al que conectar el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-215">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="4893b-216">Filtro que un mensaje debe pasar para que se propague del origen al destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-216">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-217">Vincula el <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado con el filtro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-217">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-218">
            <see cref="T:System.IDisposable" /> que, tras llamar a <see langword="Dispose" />, desvinculará el origen del destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-218">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-219">El valor de <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-219">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-220">-o bien- <paramref name="target" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-220">-or-  The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="4893b-221">-o bien- <paramref name="predicate" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-221">-or-  The <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions, predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, linkOptions, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-222">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-222">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-223">El origen desde el que se va a vincular.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-223">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="4893b-224">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> al que conectar el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-224">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="linkOptions">
          <span data-ttu-id="4893b-225">Uno de los valores de enumeración que especifica cómo configurar un vínculo entre bloques de flujo de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-225">One of the enumeration values that specifies how to configure a link between dataflow blocks.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="4893b-226">Filtro que un mensaje debe pasar para que se propague del origen al destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-226">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-227">Vincula el <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado con el filtro especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-227">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-228">
            <see cref="T:System.IDisposable" /> que, tras llamar a <see langword="Dispose" />, desvinculará el origen del destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-228">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-229">
            <paramref name="source" /> es NULL (Nothing en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-229">The  <paramref name="source" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="4893b-230">-o bien- <paramref name="target" /> es NULL (Nothing en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-230">-or-  The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="4893b-231">-o bien- <paramref name="linkOptions" /> es NULL (Nothing en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-231">-or-  The  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="4893b-232">-o bien- <paramref name="predicate" /> es NULL (Nothing en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-232">-or-  The  <paramref name="predicate" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NullTarget(Of TInput) () As ITargetBlock(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA; static System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ NullTarget();" />
      <MemberSignature Language="F#" Value="static member NullTarget : unit -&gt; System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="4893b-233">El tipo de mensajes que este bloque puede aceptar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-233">The type of the messages this block can accept.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="4893b-234">Obtiene un bloque de destino que acepta sincrónicamente todos los mensajes que se le proporcionan y los coloca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-234">Gets a target block that synchronously accepts all messages offered to it and drops them.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-235">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que acepta y quita posteriormente todos los mensajes proporcionados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-235">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OutputAvailableAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-236">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-236">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-237">El origen para supervisar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-237">The source to monitor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-238">Proporciona un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que supervisa de forma asincrónica el origen de salida disponible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-238">Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-239">
            <see cref="T:System.Threading.Tasks.Task`1" /> que informa si la salida está disponible y cuándo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-239">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="4893b-240">Si, cuando la tarea se completa, el <see cref="P:System.Threading.Tasks.Task`1.Result" /> es <see langword="true" />, hay más salida disponible en el origen (aunque otro consumidor del origen puede recuperar los datos).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-240">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="4893b-241">Si devuelve <see langword="false" />, no hay más resultados y nunca estarán disponibles, debido a que el origen se completa antes de que los resultados estén disponibles.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-241">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-242">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-242">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-243">El origen para supervisar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-243">The source to monitor.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="4893b-244">El token de cancelación con el que cancelar la operación asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-244">The cancellation token with which to cancel the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-245">Proporciona una <see cref="T:System.Threading.Tasks.Task`1" /> que supervisa de manera asincrónica la salida disponible en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-245">Provides a  <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-246">
            <see cref="T:System.Threading.Tasks.Task`1" /> que informa si la salida está disponible y cuándo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-246">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="4893b-247">Si, cuando la tarea se completa, el <see cref="P:System.Threading.Tasks.Task`1.Result" /> es <see langword="true" />, hay más salida disponible en el origen (aunque otro consumidor del origen puede recuperar los datos).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-247">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="4893b-248">Si devuelve <see langword="false" />, no hay más resultados y nunca estarán disponibles, debido a que el origen se completa antes de que los resultados estén disponibles.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-248">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Post(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member Post : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Post (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="4893b-249">Especifica el tipo de datos aceptados por el bloque de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-249">Specifies the type of data accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="4893b-250">Bloque de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-250">The target block.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="4893b-251">Elemento que se va a ofrecer al destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-251">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-252">Publica un elemento a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-252">Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-253">
            <see langword="true" /> si el bloque de destino aceptó el elemento; si no, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-253">
              <see langword="true" /> if the item was accepted by the target block; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4893b-254">Este método devolverá una vez que el bloque de destino ha decidido aceptar o rechazar el elemento, pero a menos que lo contrario dictada por semántica especial del bloque de destino, no espera a que el elemento que se ha procesado.</span><span class="sxs-lookup"><span data-stu-id="4893b-254">This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed.</span></span> <span data-ttu-id="4893b-255">Por ejemplo, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> devolverá de <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> tan pronto como ha almacenado el elemento expuesto en su cola de entrada).</span><span class="sxs-lookup"><span data-stu-id="4893b-255">For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue).</span></span> <span data-ttu-id="4893b-256">Desde la perspectiva del procesamiento del bloque, `Post` es asincrónica.</span><span class="sxs-lookup"><span data-stu-id="4893b-256">From the perspective of the block's processing, `Post` is asynchronous.</span></span> <span data-ttu-id="4893b-257">Bloques de destino que soporte técnico para posponer mensajes ofrecidos, o bien, para los bloques que pueden hacer más procesamiento en sus `Post` implementación, considere el uso de <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, que se devolverá inmediatamente y se habilitará el destino posponer el mensaje expuesto y utilizar más adelante después `SendAsync` devuelve.</span><span class="sxs-lookup"><span data-stu-id="4893b-257">For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput)) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-258">El tipo de los datos contenido del origen de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-258">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-259">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-259">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-260">Recibe de forma sincrónica un valor de un origen especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-260">Synchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-261">El valor recibido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-261">The received value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-262">
            <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-262">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4893b-263">No se pudo recibir ningún elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-263">No item could be received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-264">El tipo de los datos contenido del origen de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-264">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-265">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-265">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="4893b-266">El token que se va a utilizar para cancelar la selección la operación de recepción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-266">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-267">De forma sincrónica recibe un valor de un origen especificado y proporciona un token para cancelar la operación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-267">Synchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-268">El valor recibido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-268">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4893b-269">Si el origen ofrece correctamente un elemento que ha sido recibido por esta operación, se devuelve ese elemento incluso si se produce una solicitud de cancelación simultáneas.</span><span class="sxs-lookup"><span data-stu-id="4893b-269">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-270">
            <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-270">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4893b-271">No se pudo recibir ningún elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-271">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="4893b-272">Se canceló la operación antes de que se recibiera un elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-272">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-273">El tipo de los datos contenido del origen de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-273">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-274">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-274">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="4893b-275">El intervalo de tiempo máximo, en milisegundos, para esperar la operación síncrona para completar, o un intervalo que representa -1 milisegundos para esperar indefinidamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-275">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-276">De forma sincrónica recibe un valor de un origen especificado, observando un tiempo de espera opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-276">Synchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-277">El valor recibido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-277">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4893b-278">Si el origen ofrece correctamente un elemento que ha sido recibido por esta operación, se devuelve ese elemento incluso si se produce un tiempo de espera simultánea.</span><span class="sxs-lookup"><span data-stu-id="4893b-278">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4893b-279">
            <paramref name="timeout" /> es un número negativo distinto de -1 milisegundo que representa un período de espera infinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-279">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="4893b-280">-o bien- <paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-280">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-281">
            <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-281">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4893b-282">No se pudo recibir ningún elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-282">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="4893b-283">El tiempo de espera especificado expiró antes de que se recibiera un elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-283">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-284">El tipo de los datos contenido del origen de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-284">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-285">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-285">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="4893b-286">El intervalo de tiempo máximo, en milisegundos, para esperar la operación síncrona para completar, o un intervalo que representa -1 milisegundos para esperar indefinidamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-286">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="4893b-287">El token que se va a utilizar para cancelar la selección la operación de recepción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-287">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-288">De forma sincrónica recibe un valor de un origen especificado, proporcionando un token para cancelar la operación y observando un intervalo de tiempo de espera opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-288">Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-289">El valor recibido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-289">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4893b-290">Si el origen ofrece correctamente un valor del elemento que ha sido recibido por esta operación, se devuelve ese valor incluso si se produce una solicitud de tiempo de espera o cancelación simultánea.</span><span class="sxs-lookup"><span data-stu-id="4893b-290">If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-291">El valor de <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-291">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4893b-292">
            <paramref name="timeout" /> es un número negativo distinto de -1 milisegundo que representa un período de espera infinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-292">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="4893b-293">-o bien- <paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-293">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="4893b-294">No se pudo recibir ningún elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-294">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="4893b-295">El tiempo de espera especificado expiró antes de que se recibiera un elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-295">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="4893b-296">Se canceló la operación antes de que se recibiera un elemento del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-296">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-297">El tipo de los datos contenido del origen de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-297">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-298">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-298">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-299">Recibe de forma asincrónica un valor de un origen especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-299">Asynchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-300">Tarea que representa la operación de recepción asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-300">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="4893b-301">Cuando un valor del elemento se recibe correctamente del origen, la tarea devuelta se completa y su <see cref="P:System.Threading.Tasks.Task`1.Result" /> devuelve el valor del elemento recibido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-301">When an item value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the received value.</span>
          </span>
          <span data-ttu-id="4893b-302">Si el valor de un elemento no se puede recuperar porque el origen está vacío y completo, se inicia una excepción <see cref="T:System.InvalidOperationException" /> en la tarea devuelta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-302">If an item value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-303">
            <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-303">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-304">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-304">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-305">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-305">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="4893b-306">El token que se va a utilizar para cancelar la selección la operación de recepción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-306">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-307">De forma asincrónica recibe un valor de un origen especificado y proporciona un token para cancelar la operación.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-307">Asynchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-308">Tarea que representa la operación de recepción asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-308">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="4893b-309">Cuando un valor se recibe correctamente desde el origen, la tarea devuelta se completa y su <see cref="P:System.Threading.Tasks.Task`1.Result" /> devuelve el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-309">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="4893b-310">Si un valor no se puede recuperar porque se solicitó la cancelación, la tarea devuelta se cancelará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-310">If a value cannot be retrieved because cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="4893b-311">Si el valor del elemento no se puede recuperar porque el origen está vacío y completo, se inicia una excepción <see cref="T:System.InvalidOperationException" /> en la tarea devuelta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-311">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-312">
            <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-312">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-313">El tipo de los datos contenido del origen de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-313">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-314">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-314">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="4893b-315">El intervalo de tiempo máximo, en milisegundos, para esperar la operación síncrona para completar, o un intervalo que representa -1 milisegundos para esperar indefinidamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-315">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-316">De forma asincrónica recibe un valor de un origen especificado, observando un tiempo de espera opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-316">Asynchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-317">Tarea que representa la operación de recepción asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-317">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="4893b-318">Cuando un valor se recibe correctamente desde el origen, la tarea devuelta se completa y su <see cref="P:System.Threading.Tasks.Task`1.Result" /> devuelve el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-318">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="4893b-319">Si un valor no se puede recuperar porque el tiempo de espera ha expirado, la tarea devuelta se cancelará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-319">If a value cannot be retrieved because the time-out expired, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="4893b-320">Si el valor del elemento no se puede recuperar porque el origen está vacío y completo, se inicia una excepción <see cref="T:System.InvalidOperationException" /> en la tarea devuelta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-320">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-321">
            <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-321">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4893b-322">
            <paramref name="timeout" /> es un número negativo distinto de -1 milisegundo que representa un período de espera infinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-322">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="4893b-323">-o bien- <paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-323">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-324">El tipo de los datos contenido del origen de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-324">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-325">Origen del que se va a recibir el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-325">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="4893b-326">El intervalo de tiempo máximo, en milisegundos, para esperar la operación síncrona para completar, o un intervalo que representa -1 milisegundos para esperar indefinidamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-326">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="4893b-327">El token que se puede usar para cancelar la operación de recepción.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-327">The token which may be used to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-328">De forma asincrónica recibe un valor de un origen especificado, proporcionando un símbolo para anular la operación y observando un intervalo de tiempo de espera opcional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-328">Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-329">Tarea que representa la operación de recepción asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-329">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="4893b-330">Cuando un valor se recibe correctamente desde el origen, la tarea devuelta se completa y su <see cref="P:System.Threading.Tasks.Task`1.Result" /> devuelve el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-330">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="4893b-331">Si un valor no se puede recuperar porque el tiempo de espera expirado o se solicitó cancelación, la tarea devuelta se cancelará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-331">If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="4893b-332">Si el valor del elemento no se puede recuperar porque el origen está vacío y completo, se inicia una excepción <see cref="T:System.InvalidOperationException" /> en la tarea devuelta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-332">If the value cannot be retrieved because the source is empty and completed, an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-333">
            <paramref name="source" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-333">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="4893b-334">
            <paramref name="timeout" /> es un número negativo distinto de -1 milisegundo que representa un período de espera infinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-334">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="4893b-335">-o bien- <paramref name="timeout" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-335">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendAsync(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="4893b-336">Especifica el tipo de los datos que se van a enviar al destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-336">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="4893b-337">El destino en el que se van a exponer los datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-337">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="4893b-338">Elemento que se va a ofrecer al destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-338">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-339">De forma asincrónica proporciona un mensaje al bloque de mensajes de destino, teniendo en cuenta el aplazamiento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-339">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-340">
            <see cref="T:System.Threading.Tasks.Task`1" /> que representa el envío asincrónico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-340">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="4893b-341">Si el destino acepta y usa el elemento proporcionado durante la llamada a <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, al volver de la llamada se completará el <see cref="T:System.Threading.Tasks.Task`1" /> resultante y su propiedad <see cref="P:System.Threading.Tasks.Task`1.Result" /> devolverá <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-341">If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="true" />.</span>
          </span>
          <span data-ttu-id="4893b-342">Si el destino rechaza el elemento proporcionado durante la llamada, al volver de la llamada se completará el <see cref="T:System.Threading.Tasks.Task`1" /> resultante y su propiedad <see cref="P:System.Threading.Tasks.Task`1.Result" /> devolverá <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-342">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="false" />.</span>
          </span>
          <span data-ttu-id="4893b-343">Si el destino pospone el elemento proporcionado, el elemento se almacenará en búfer hasta el momento en que el destino lo utilice o lo lance, momento en el que la tarea se completará, con el <see cref="P:System.Threading.Tasks.Task`1.Result" /> que indica si el mensaje se ha utilizado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-343">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="4893b-344">Si el destino nunca intenta utilizar o lanzar el mensaje, la tarea devuelta nunca se completará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-344">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-345">El valor de <paramref name="target" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-345">The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="4893b-346">Especifica el tipo de los datos que se van a enviar al destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-346">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="4893b-347">El destino en el que se van a exponer los datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-347">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="4893b-348">Elemento que se va a ofrecer al destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-348">The item being offered to the target.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="4893b-349">El token de cancelación con el que solicitar la cancelación de la operación de envío.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-349">The cancellation token with which to request cancellation of the send operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-350">De forma asincrónica proporciona un mensaje al bloque de mensajes de destino, teniendo en cuenta el aplazamiento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-350">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-351">
            <see cref="T:System.Threading.Tasks.Task`1" /> que representa el envío asincrónico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-351">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="4893b-352">Si el destino acepta y usa el elemento proporcionado durante la llamada a SendAsync, al volver de la llamada se completará el <see cref="T:System.Threading.Tasks.Task`1" /> resultante y su propiedad <c>Result</c> devolverá true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-352">If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return true.</span>
          </span>
          <span data-ttu-id="4893b-353">Si el destino rechaza el elemento proporcionado durante la llamada, al volver de la llamada se completará el <see cref="T:System.Threading.Tasks.Task`1" /> resultante y su propiedad <c>Result</c> devolverá false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-353">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return false.</span>
          </span>
          <span data-ttu-id="4893b-354">Si el destino pospone el elemento proporcionado, el elemento se almacenará en búfer hasta que el destino lo consuma o lo libere, momento en el que la tarea se completará, y <c>Result</c> indicará si el mensaje se ha consumido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-354">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <c>Result</c> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="4893b-355">Si el destino nunca intenta utilizar o lanzar el mensaje, la tarea devuelta nunca se completará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-355">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
          <span data-ttu-id="4893b-356">Si se solicita la cancelación antes de que el destino haya consumido correctamente los datos enviados, la tarea devuelta completará al estado cancelado y datos dejarán de estar disponibles para el destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-356">If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="4893b-357">
            <paramref name="target" /> es NULL (Nothing en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-357">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReceive(Of TOutput) (source As IReceivableSourceBlock(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryReceive(System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt; ^ source, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="static member TryReceive : System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;'Output&gt; *  -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="4893b-358">Especifica el tipo de datos contenidos en el origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-358">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="4893b-359">Origen del que se va a recibir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-359">The source from which to receive.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="4893b-360">Elemento recibido del origen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-360">The item received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4893b-361">Se intenta recibir sincrónicamente un elemento de <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-361">Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4893b-362">Es <see langword="true" /> si se pudo recibir un elemento; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4893b-362">
              <see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4893b-363">Este método no espera hasta que el origen tiene un elemento para proporcionar.</span><span class="sxs-lookup"><span data-stu-id="4893b-363">This method does not wait until the source has an item to provide.</span></span>  
  
 <span data-ttu-id="4893b-364">Devolverá un elemento estaba disponible o no.</span><span class="sxs-lookup"><span data-stu-id="4893b-364">It will return whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>