<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BroadcastBlock`1.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bbb0eb05550196c8558520248ef40be651f35b70.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbb0eb05550196c8558520248ef40be651f35b70</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
          <source>Specifies the type of the data buffered by this dataflow block.</source>
          <target state="translated">Especifica el tipo de los datos almacenados en el búfer por este bloque de flujo de datos.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
          <source>Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.</source>
          <target state="translated">Proporciona un búfer para almacenar a lo sumo un elemento cada vez, sobrescribiendo cada mensaje con el siguiente a medida que llegan.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601&gt;</ph> exposes at most one element at a time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601&gt;</ph> expone a lo sumo un elemento a la vez.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
          <source>However, unlike <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph>, that element will be overwritten as new elements are provided to the block.</source>
          <target state="translated">Sin embargo, a diferencia de <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601&gt;</ph>, ese elemento se sobrescribirá como nuevos elementos se proporcionan para el bloque.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601&gt;</ph> ensures that the current element is broadcast to any linked targets before allowing the element to be overwritten.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601&gt;</ph> se asegura de que el elemento actual se difunde a todos los destinos vinculados antes de permitir que el elemento que se va a sobrescribir.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
          <source>The function to use to clone the data when offered to other blocks.</source>
          <target state="translated">Función que se va a usar para clonar los datos cuando se ofrezcan a otros bloques.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /&gt;</ph> with the specified cloning function.</source>
          <target state="translated">Inicializa la instancia <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /&gt;</ph> con la función de clonación especificada.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
          <source>The function to use to clone the data when offered to other blocks.</source>
          <target state="translated">Función que se va a usar para clonar los datos cuando se ofrezcan a otros bloques.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
          <source>The options with which to configure this  <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /&gt;</ph>.</source>
          <target state="translated">Las opciones con las que se va a configurar este <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
          <source>Initializes the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /&gt;</ph> with the specified cloning function and  <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /&gt;</ph>.</source>
          <target state="translated">Inicializa <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /&gt;</ph> con la función de clonación y <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /&gt;</ph> especificados.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
          <source>The <ph id="ph1">&lt;paramref name="dataflowBlockOptions" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="dataflowBlockOptions" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
          <source>Signals to the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph> that it should not accept nor produce any more messages nor consume any more postponed messages.</source>
          <target state="translated">Señala a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph> que no debe aceptar ni mostrar más mensajes ni usar más mensajes pospuestos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
          <source>After <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A&gt;</ph> has been called on a dataflow block, that block will complete, and its  <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A&gt;</ph> task will enter a final state after it has processed all previously available data.</source>
          <target state="translated">Después de <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A&gt;</ph> ha sido llamado en un bloque de flujo de datos, se completará dicho bloque y su <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A&gt;</ph> tarea pasará un estado final ha procesado todos los datos disponibles anteriormente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A&gt;</ph> will not block waiting for completion to occur, but rather will initiate the request; to wait for completion to occur, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A&gt;</ph> task may be used.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Complete%2A&gt;</ph> Will no bloque esperar la finalización se produzca, pero en su lugar, se iniciará la solicitud; para esperar la finalización se produzca, el <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A&gt;</ph> puede utilizarse la tarea.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> that represents the asynchronous operation and completion of the dataflow block.</source>
          <target state="translated">Obtiene un objeto <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph> que representa la operación asincrónica y la finalización del bloque de flujo de datos.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
          <source>The task.</source>
          <target state="translated">Tarea.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
          <source>A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process any more messages.</source>
          <target state="translated">Un bloque de flujo de datos se considera completada cuando no está procesando actualmente un mensaje y cuando se garantiza que no se procesará más mensajes.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will transition to a completed state when the associated block has completed.</source>
          <target state="translated">El valor devuelto <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> le transición a un estado completado cuando se haya completado el bloque asociado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
          <source>It will transition to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph><ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> state when the block completes its processing successfully according to the dataflow block’s defined semantics.</source>
          <target state="translated">Realizará la transición a la <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph> semántica definido por el estado cuando el bloque termine de procesarse correctamente según el bloque de flujo de datos.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
          <source>It will transition to the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph><ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> state when the dataflow block has completed processing prematurely due to an unhandled exception, and it will transition to the <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph><ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state when the dataflow block has completed processing prematurely due to receiving a cancellation request.</source>
          <target state="translated">Realizará la transición a la <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> cuando el bloque de flujo de datos ha completado el procesamiento antes de tiempo debido a una excepción no controlada y realizará la transición a la <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> estado cuando el bloque de flujo de datos finaliza el procesamiento antes de tiempo debido a la recepción de una solicitud de cancelación.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
          <source>If the task completes in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> state, its <ph id="ph2">`Exception`</ph> property will return an <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph> containing the one or more exceptions that caused the block to fail.</source>
          <target state="translated">Si la tarea se completa con el <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph> estado, su <ph id="ph2">`Exception`</ph> propiedad devolverá una <ph id="ph3">&lt;xref:System.AggregateException&gt;</ph> que contiene una o más excepciones que ha causado el bloqueo de un error.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> to which to connect this source.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> con la que conectar este origen.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /&gt;</ph> instance that configures the link.</source>
          <target state="translated">Instancia de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /&gt;</ph> que configura el vínculo.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
          <source>Links the  <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph> to the specified  <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph>.</source>
          <target state="translated">Vincula el <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph> al <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
          <source>An IDisposable that, upon calling Dispose, will unlink the source from the target.</source>
          <target state="translated">IDisposable que, al llamar a Dispose, desvinculará el origen del destino.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is null (Nothing in Visual Basic) or  <ph id="ph2">&lt;paramref name="linkOptions" /&gt;</ph> is null (Nothing in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> es NULL (Nothing en Visual Basic) o <ph id="ph2">&lt;paramref name="linkOptions" /&gt;</ph> es NULL (Nothing en Visual Basic).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
          <source>The  <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that caused the faulting.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> que causó el error.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
          <source>Causes the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph> to complete in a <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> state.</source>
          <target state="translated">Hace que la interfaz <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph> se complete en un estado <ph id="ph2">&lt;see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /&gt;</ph> .</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
          <source>After <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A&gt;</ph> has been called on a dataflow block, that block will complete, and its <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A&gt;</ph> task will enter a final state.</source>
          <target state="translated">Después de <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A&gt;</ph> ha sido llamado en un bloque de flujo de datos, se completará dicho bloque y su <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.BroadcastBlock%601.Completion%2A&gt;</ph> tarea pasará a un estado final.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
          <source>Faulting a block, as with canceling a block, causes buffered messages (unprocessed input messages as well as unoffered output messages) to be lost.</source>
          <target state="translated">Un error en un bloque, como con cancelar un bloque, hace que los mensajes almacenados en búfer (mensajes de entrada sin procesar así como mensajes de salida unoffered) se perderán.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
          <source>The <ph id="ph1">&lt;paramref name="exception" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="exception" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock&amp;lt;T&amp;gt;#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
          <source>The items received from the source.</source>
          <target state="translated">Elementos recibidos del origen.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock&amp;lt;T&amp;gt;#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
          <source>Attempts to synchronously receive all available items from the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /&gt;</ph>.</source>
          <target state="translated">Intentos de recibir sincrónicamente todos los elementos disponibles de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock&amp;lt;T&amp;gt;#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if one or more items could be received; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si se podían recibir uno o más elementos; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock&amp;lt;T&amp;gt;#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
          <source>This method does not block waiting for the source to provide an item.</source>
          <target state="translated">Este método no bloquear la espera para el origen proporcionar un elemento.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock&amp;lt;T&amp;gt;#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
          <source>It will return after checking for elements, whether or not an element was available.</source>
          <target state="translated">Devolverá después de comprobar los elementos, si no estaba disponible un elemento.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> of the message being consumed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> del mensaje que se está usando.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> consuming the message.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> que consume el mensaje.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was successfully consumed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se ha consumido correctamente el mensaje; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>Called by a linked <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> to accept and consume a <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> previously offered by this <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph>.</source>
          <target state="translated">Lo llama una interfaz <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> vinculada para aceptar y usar una estructura <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> ofrecida previamente por esta interfaz <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>The value of the consumed message.</source>
          <target state="translated">Valor del mensaje consumido.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>This may correspond to a different  <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> instance than was previously reserved and passed as the <ph id="ph2">&lt;paramref name="messageHeader" /&gt;</ph> to <ph id="ph3">&lt;see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /&gt;</ph>.</source>
          <target state="translated">Esto puede corresponder a una instancia diferente de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> que se ha reservado y pasado previamente como <ph id="ph2">&lt;paramref name="messageHeader" /&gt;</ph> a <ph id="ph3">&lt;see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>The consuming <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> must use the returned value instead of the value passed as <ph id="ph2">&lt;paramref name="messageValue" /&gt;</ph> through <ph id="ph3">&lt;see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">La interfaz <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> de consumo debe usar el valor devuelto en lugar del valor pasado como <ph id="ph2">&lt;paramref name="messageValue" /&gt;</ph> mediante <ph id="ph3">&lt;see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>If the message requested is not available, the return value will be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si el mensaje solicitado no está disponible, el valor devuelto será <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>Only <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> instances linked to this <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> instance may use <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A&gt;</ph>, and it must only be used to consume <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader&gt;</ph> instances previously offered by this source to the target.</source>
          <target state="translated">Solo <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> instancias vinculadas a este <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> instancia puede utilizar <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A&gt;</ph>, y solo debe usarse para consumir <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader&gt;</ph> instancias proporcionado anteriormente por este origen al destino.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="target" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> of the reserved message being released.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> del mensaje reservado que se va a liberar.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> releasing the message it previously reserved.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> que libera el mensaje que reservó previamente.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>Called by a linked <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> to release a previously reserved <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> by this <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph>.</source>
          <target state="translated">Lo llama una interfaz <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> vinculada para liberar una estructura <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> reservada previamente por esta interfaz <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>Only <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> instances linked to this <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> instance may use <ph id="ph3">`ReleaseReservation`</ph>, and it must only be used to release <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader&gt;</ph> instances previously and successfully reserved by the target.</source>
          <target state="translated">Solo <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> instancias vinculadas a este <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> instancia puede utilizar <ph id="ph3">`ReleaseReservation`</ph>, y solo debe usarse para liberar <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader&gt;</ph> instancias previamente y correctamente reservados por el destino.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="target" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> did not have the message reserved.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> no tiene el mensaje reservado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> of the message being reserved.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> del mensaje que se está reservando.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> reserving the message.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> que reserva el mensaje.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>Called by a linked <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> to reserve a previously offered <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> by this <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph>.</source>
          <target state="translated">Lo llama una interfaz <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph> vinculada para reservar una estructura <ph id="ph2">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> ofrecida previamente por esta interfaz <ph id="ph3">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was successfully reserved; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se ha procesado correctamente el mensaje; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>Only <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> instances linked to this <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> instance may use <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A&gt;</ph>, and it must only be used to reserve <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader&gt;</ph> instances previously offered by this source to the target.</source>
          <target state="translated">Solo <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> instancias vinculadas a este <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601&gt;</ph> instancia puede utilizar <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A&gt;</ph>, y solo debe usarse para reservar <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader&gt;</ph> instancias proporcionado anteriormente por este origen al destino.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>If <ph id="ph1">`true`</ph> is returned, the  <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> must subsequently call either  <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A&gt;</ph> or  <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A&gt;</ph> for this message.</source>
          <target state="translated">Si <ph id="ph1">`true`</ph> se devuelve, el <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ITargetBlock%601&gt;</ph> posteriormente debe llamar a <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A&gt;</ph> para este mensaje.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>Failure to do so may result in the source being unable to propagate any further messages to this or other targets.</source>
          <target state="translated">Si no lo hace puede producir en el origen de su incapacidad para propagar los mensajes adicionales a este u otros destinos.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A&gt;</ph> must not be called while the target is holding any internal locks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A&gt;</ph> no debe llamarse mientras mantiene los bloqueos internos en el destino.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>Doing so will violate the lock hierarchy necessary to avoid deadlocks in a dataflow network.</source>
          <target state="translated">Si lo hace, infringirán la jerarquía de bloqueos necesaria para evitar los interbloqueos en una red de flujo de datos.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&amp;lt;T&amp;gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="target" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> instance that represents the header of the message being offered.</source>
          <target state="translated">Instancia de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /&gt;</ph> que representa el encabezado del mensaje que se va a ofrecer.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>The value of the message being offered.</source>
          <target state="translated">Valor del mensaje que se va a ofrecer.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph> offering the message.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /&gt;</ph> que ofrece el mensaje.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>This may be null.</source>
          <target state="translated">Puede ser null.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to instruct the target to call <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /&gt;</ph> synchronously during the call to <ph id="ph3">&lt;see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /&gt;</ph>, prior to returning <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /&gt;</ph>, in order to consume the message.</source>
          <target state="translated">Establézcalo en <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar al destino para llamar a <ph id="ph2">&lt;see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /&gt;</ph> sincrónicamente durante la llamada a <ph id="ph3">&lt;see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /&gt;</ph>, antes de devolver <ph id="ph4">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /&gt;</ph>, para usar el mensaje.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>Offers a message to the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph>, giving the target the opportunity to consume or postpone the message.</source>
          <target state="translated">Ofrece un mensaje a <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /&gt;</ph>, dando al destino la oportunidad de usar o de posponer el mensaje.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>The status of the offered message.</source>
          <target state="translated">Estado del mensaje ofrecido.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>If the message was accepted by the target, <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /&gt;</ph> is returned, and the source should no longer use the offered message, because it is now owned by the target.</source>
          <target state="translated">Si el destino aceptó el mensaje, se devuelve <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /&gt;</ph> y el origen ya no debe usar más el mensaje ofrecido, ya que ahora es propiedad del destino.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>If the message was postponed by the target, <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /&gt;</ph> is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.</source>
          <target state="translated">Si el destino pospuso el mensaje, se devuelve <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /&gt;</ph> como notificación de que el destino puede intentar más adelante consumir o reservar el mensaje; mientras tanto, el origen todavía posee el mensaje y puede ofrecerlo a otros bloques.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>If the target would have otherwise postponed message, but <ph id="ph1">&lt;paramref name="source" /&gt;</ph> was <ph id="ph2">&lt;see langword="null" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /&gt;</ph> is instead returned.</source>
          <target state="translated">Si el destino habría pospuesto de otra forma el mensaje, pero <ph id="ph1">&lt;paramref name="source" /&gt;</ph> era <ph id="ph2">&lt;see langword="null" /&gt;</ph>, se devuelve <ph id="ph3">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /&gt;</ph> en su lugar.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /&gt;</ph> is returned.</source>
          <target state="translated">Si el destino intentó aceptar el mensaje pero no pudo hacerlo porque el origen entrega el mensaje a otro destino o lo descarta simplemente, se devuelve <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>If the target chose not to accept the message, <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /&gt;</ph> is returned.</source>
          <target state="translated">Si el destino eligió no aceptar el mensaje, se devuelve <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>If the target chose not to accept the message and will never accept another message from this source, <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /&gt;</ph> is returned.</source>
          <target state="translated">Si el destino eligió no aceptar el mensaje y nunca aceptará otro mensaje de este origen, se devuelve <ph id="ph1">&lt;see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>The  <ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="messageHeader" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&amp;lt;T&amp;gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
          <source>-or- <ph id="ph1">&lt;paramref name="consumeToAccept" /&gt;</ph> may only be true if provided with a non-null <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">O bien, <ph id="ph1">&lt;paramref name="consumeToAccept" /&gt;</ph> solo puede ser true si se le proporciona un valor <ph id="ph2">&lt;paramref name="source" /&gt;</ph> distinto de NULL.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
          <source>Returns a string that represents the formatted name of this  <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph> instance.</source>
          <target state="translated">Devuelve una cadena que representa el nombre con formato de esta instancia de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
          <source>A string that represents the formatted name of this <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph> instance.</source>
          <target state="translated">Cadena que representa el nombre con formato de esta instancia de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
          <source>Inherited from  <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Se hereda de <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
          <source>Uses the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A&gt;</ph> option.</source>
          <target state="translated">Usa el <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A&gt;</ph> opción.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
          <source>The predicate a value must successfully pass in order for it to be received.</source>
          <target state="translated">Predicado que un valor debe pasar correctamente para que se reciba.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
          <source><bpt id="p1">&lt;c&gt;</bpt>filter<ept id="p1">&lt;/c&gt;</ept> may be <ph id="ph1">&lt;see langword="null" /&gt;</ph>, in which case all items will pass.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>filter<ept id="p1">&lt;/c&gt;</ept> puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>, en cuyo caso se pasarán todos los elementos.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
          <source>The item received from the source.</source>
          <target state="translated">Elemento recibido del origen.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
          <source>Attempts to synchronously receive an available output item from the <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /&gt;</ph>.</source>
          <target state="translated">Intentos de recibir sincrónicamente un elemento de salida disponible de <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an item could be received; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si se pudo recibir un elemento; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
          <source>This method does not block waiting for the source to provide an item.</source>
          <target state="translated">Este método no bloquear la espera para el origen proporcionar un elemento.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
          <source>It will return after checking for an element, whether or not an element was available.</source>
          <target state="translated">Devolverá después de comprobar si un elemento, si no estaba disponible un elemento.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>