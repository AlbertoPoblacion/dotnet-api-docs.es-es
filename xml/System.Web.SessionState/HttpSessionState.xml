<Type Name="HttpSessionState" FullName="System.Web.SessionState.HttpSessionState">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="434a60c7910e0f787849d79335655973e6df3862" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36394882" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpSessionState : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpSessionState extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.SessionState.HttpSessionState" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpSessionState&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSessionState sealed : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type HttpSessionState = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides access to session-state values as well as session-level settings and lifetime management methods.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET proporciona administración de estado de sesión para que pueda almacenar información asociada a una sesión de explorador única en varias solicitudes. Puede almacenar una colección de valores que se hace referencia a un nombre de clave o por índice numérico. Acceso a los valores de la sesión y la funcionalidad está disponible mediante la <xref:System.Web.SessionState.HttpSessionState> (clase), que es accesible a través de la <xref:System.Web.HttpContext.Session%2A> propiedad del elemento actual <xref:System.Web.HttpContext>, o la <xref:System.Web.UI.Page.Session%2A> propiedad de la <xref:System.Web.UI.Page>.  
  
 Datos de la sesión están asociados a una sesión de explorador específico con un identificador único. De forma predeterminada, este identificador se almacena en una cookie de sesión expiran en el explorador, pero también puede configurar la aplicación para almacenar el identificador de sesión en la dirección URL estableciendo la `cookieless` atribuir a `true` o <xref:System.Web.HttpCookieMode.UseUri> en el elemento de la configuración de la aplicación. Puede hacer que ASP.NET determine si el explorador admite cookies mediante la especificación de un valor de <xref:System.Web.HttpCookieMode.UseDeviceProfile> para el `cookieless` atributo. También puede hacer que ASP.NET determine si las cookies están habilitadas para el explorador especificando un valor de <xref:System.Web.HttpCookieMode.AutoDetect> para el `cookieless` atributo. Si se admiten cookies cuando <xref:System.Web.HttpCookieMode.UseDeviceProfile> se ha especificado, o habilita al <xref:System.Web.HttpCookieMode.AutoDetect> se especifica, la sesión de identificador será almacenado en una cookie; de lo contrario el identificador de sesión se almacenará en la dirección URL.  
  
 Las sesiones se inician durante la primera solicitud y valores de la sesión se conservarán siempre y cuando se realiza una nueva solicitud mediante el explorador antes del número de minutos especificado en el <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> pasado de la propiedad. Cuando se inicie una nueva sesión, la sesión <xref:System.Web.SessionState.SessionStateModule.Start> evento se desencadena. Puede usar este evento para realizar ningún trabajo adicional en el inicio de una sesión, como establecer los valores de la sesión de forma predeterminada. Cuando una sesión expira, el <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> se llama al método o la aplicación ASP.NET se cierra, la sesión <xref:System.Web.SessionState.SessionStateModule.End> evento se desencadena. Puede usar este evento para realizar cualquier limpieza necesaria. El <xref:System.Web.SessionState.SessionStateModule.End> evento se produce solamente cuando el estado de sesión `mode` está establecido en <xref:System.Web.SessionState.SessionStateMode.InProc>.  
  
 Para mejorar el rendimiento, las sesiones que utilizan cookies no asignan almacenamiento de la sesión hasta que los datos se almacenan en la <xref:System.Web.UI.Page.Session%2A> objeto. Para obtener más información, vea la propiedad <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
 Estado de sesión no se conserva en los límites de la aplicación de ASP.NET. Si un explorador se desplaza a otra aplicación, la información de sesión no está disponible para la nueva aplicación.  
  
 Valores de la sesión se almacenan en memoria en el servidor Web, de forma predeterminada. También puede almacenar valores de sesión en una base de datos de SQL Server, un servidor de estado ASP.NET o un servidor personalizado. Esto le permite mantener los valores de sesión en casos donde el proceso de ASP.NET o IIS o la aplicación ASP.NET se reinicia y hacer que los valores de sesión estén disponibles en todos los servidores en una granja de servidores Web. Este comportamiento se configura al establecer el `mode` atributo válido <xref:System.Web.SessionState.SessionStateMode> valor en el elemento de la configuración de la aplicación. Para obtener más información, consulte [Session-State Modes](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4).  
  
 Las alternativas al estado de sesión incluyen el estado de la aplicación (consulte la <xref:System.Web.HttpApplication.Application%2A> propiedad) y la caché de ASP.NET (vea el <xref:System.Web.Caching> espacio de nombres), las variables de almacén que pueden tener acceso a todos los usuarios de una aplicación de ASP.NET; el perfil de ASP.NET (vea el <xref:System.Web.Profile> espacio de nombres), que conserva los valores de usuario en un almacén de datos sin que expiren ellos con un tiempo de espera; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=nameWithType>, que se conservan los valores de control en el <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; el <xref:System.Web.HttpRequest.QueryString%2A> propiedad; y campos en un formulario HTML que están disponibles en un elemento HTTP `POST` mediante el <xref:System.Web.HttpRequest.Form%2A> colección. Para obtener más detalles sobre las diferencias entre el estado de sesión y otras alternativas de administración de Estados, vea [ASP.NET State Management Recommendations](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se establece y recupera los valores de estado de sesión.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpSessionState#30](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/session2cs.aspx#30)]
 [!code-aspx-vb[HttpSessionState#30](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/session2vb.aspx#30)]  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Web.Profile" />
    <altmember cref="N:System.Web.Caching" />
  </Docs>
  <Members>
    <Member MemberName="Abandon">
      <MemberSignature Language="C#" Value="public void Abandon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abandon() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Abandon" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abandon ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abandon();" />
      <MemberSignature Language="F#" Value="member this.Abandon : unit -&gt; unit" Usage="httpSessionState.Abandon " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the current session.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una vez el <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> se llama al método, la sesión actual ya no es válida y se puede iniciar una nueva sesión. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> hace que el <xref:System.Web.SessionState.SessionStateModule.End> evento. Un nuevo <xref:System.Web.SessionState.SessionStateModule.Start> se generará el evento en la siguiente solicitud.  
  
 Identificadores de sesión de las sesiones abandonadas o expiradas se reciclan de forma predeterminada. Es decir, si se realiza una solicitud que incluye el identificador de sesión para una sesión expirada o abandonada, se inicia una nueva sesión con el mismo identificador de sesión. Se puede deshabilitar estableciendo `regenerateExpiredSessionId` atributo del elemento de configuración para `true`. Para obtener más información, consulte [identificadores de sesión](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb).  
  
 El <xref:System.Web.SessionState.SessionStateModule.End> se admite el evento solo cuando la <xref:System.Web.SessionState.HttpSessionState.Mode%2A> propiedad está establecida en <xref:System.Web.SessionState.SessionStateMode.InProc>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj -&gt; unit" Usage="httpSessionState.Add (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The name of the item to add to the session-state collection.</param>
        <param name="value">The value of the item to add to the session-state collection.</param>
        <summary>Adds a new item to the session-state collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `name` parámetro hace referencia a un elemento de estado de sesión existente, el elemento existente se sobrescribe con el parámetro `value`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo almacenar valores en el estado de sesión mediante el uso de la <xref:System.Web.SessionState.HttpSessionState.Add%2A> método. También muestra cómo quitar valores de estado de sesión mediante el uso de la <xref:System.Web.SessionState.HttpSessionState.Remove%2A> método. Un <xref:System.Web.UI.WebControls.Repeater> control se usa para mostrar el estado de sesión contenido en la página Web. El <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> método se utiliza para recorrer en iteración la colección de Estados de sesión y rellenar el <xref:System.Web.UI.WebControls.Repeater> control.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="httpSessionState.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all keys and values from the session-state collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public int CodePage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CodePage { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CodePage : int with get, set" Usage="System.Web.SessionState.HttpSessionState.CodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the character-set identifier for the current session.</summary>
        <value>Identificador de juego de caracteres de la sesión actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un juego de caracteres (página de códigos) se usa para interpretar los datos de caracteres multibyte, determinando el valor de carácter y, por tanto, el criterio de ordenación. Configuración de página de códigos se aplica únicamente a los datos de caracteres multibyte, no a los datos de caracteres Unicode.  
  
 Esto <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> propiedad se proporciona por compatibilidad con versiones anteriores de ASP únicamente. Si no necesita mantener la compatibilidad con las páginas ASP, utilice la <xref:System.Web.HttpResponse.ContentEncoding%2A> propiedad en su lugar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Contents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Contents As HttpSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::HttpSessionState ^ Contents { System::Web::SessionState::HttpSessionState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Contents : System.Web.SessionState.HttpSessionState" Usage="System.Web.SessionState.HttpSessionState.Contents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a reference to the current session-state object.</summary>
        <value>Objeto <see cref="T:System.Web.SessionState.HttpSessionState" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.SessionState.HttpSessionState.Contents%2A> propiedad se proporciona por compatibilidad con versiones anteriores de ASP.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestran los nombres de elemento y los valores de la <xref:System.Web.SessionState.HttpSessionState.Contents%2A> propiedad.  
  
 [!code-csharp[HttpSessionState#9](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#9)]
 [!code-vb[HttpSessionState#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieMode : System.Web.HttpCookieMode" Usage="System.Web.SessionState.HttpSessionState.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the application is configured for cookieless sessions.</summary>
        <value>Uno de los <see cref="T:System.Web.HttpCookieMode" /> valores que indican si la aplicación está configurada para sesiones sin cookies. De manera predeterminada, es <see cref="F:System.Web.HttpCookieMode.UseCookies" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> es `true`, <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> propiedad devuelve <xref:System.Web.HttpCookieMode.UseUri>; de lo contrario el <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> propiedad devuelve <xref:System.Web.HttpCookieMode.UseCookies>.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `cookieless` atributo sesión `true` en el archivo Web.config. Para esta configuración de la aplicación de ejemplo, el <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> propiedad devolvería <xref:System.Web.HttpCookieMode.UseUri>.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="httpSessionState.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The <see cref="T:System.Array" /> that receives the session values.</param>
        <param name="index">The zero-based index in <c>array</c> from which copying starts.</param>
        <summary>Copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.SessionState.HttpSessionState.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of items in the session-state collection.</summary>
        <value>Número de elementos de la colección.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="httpSessionState.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that can be used to read all the session-state variable names in the current session.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the variable names in the session-state collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo almacenar valores en el estado de sesión mediante el uso de la <xref:System.Web.SessionState.HttpSessionState.Add%2A> método. También muestra cómo quitar valores de estado de sesión mediante el uso de la <xref:System.Web.SessionState.HttpSessionState.Remove%2A> método. Un <xref:System.Web.UI.WebControls.Repeater> control se utiliza para mostrar el contenido del estado de sesión en la página Web. El <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> método se utiliza para recorrer en iteración la colección de Estados de sesión y rellenar el <xref:System.Web.UI.WebControls.Repeater> control.  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCookieless">
      <MemberSignature Language="C#" Value="public bool IsCookieless { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCookieless" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsCookieless" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCookieless As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCookieless { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCookieless : bool" Usage="System.Web.SessionState.HttpSessionState.IsCookieless" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the session ID is embedded in the URL or stored in an HTTP cookie.</summary>
        <value>
          <see langword="true" /> Si la sesión está incrustada en la dirección URL; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET identifica las sesiones de manera única con cada explorador. De forma predeterminada, el identificador único para una sesión se almacena en una cookie de sesión expiran en el explorador. Puede especificar que los identificadores de sesión no se almacenan en una cookie estableciendo la `cookieless` atribuir a `true` en el elemento de configuración.  
  
> [!NOTE]
>  Para mejorar la seguridad de la aplicación, la aplicación debe permitir a los usuarios inicien sesión, momento en que debe llamar a la <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> método. Esto reduce la posibilidad de un origen no deseado mediante el identificador único en la dirección URL para recuperar los datos privados almacenados en la sesión de un usuario.  
  
 ASP.NET mantiene el estado de sesión sin cookies insertando automáticamente un identificador de sesión único en la dirección URL de la página. Por ejemplo, la siguiente dirección URL se ha modificado por ASP.NET para incluir la lit3py55t21z5v55vlm25s55 de Id. de sesión único:  
  
```  
http://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx  
```  
  
 ASP.NET modifica los vínculos contenidos en todas las páginas solicitadas incrustando un valor de identificador de sesión en los vínculos justo antes de enviar cada página en el explorador. Estado de sesión se mantiene siempre y cuando el usuario siga la ruta de acceso de los vínculos que proporciona el sitio. Sin embargo, si el agente de usuario vuelve a escribir una dirección URL, la instancia de estado de sesión se perderán.  
  
 El identificador de sesión se incrusta en la dirección URL después de la barra diagonal que sigue al nombre de la aplicación y antes de cualquier identificador de archivo o directorio virtual restante. Esto permite que ASP.NET resolver el nombre de la aplicación antes de que implican la <xref:System.Web.SessionState.SessionStateModule> en la solicitud.  
  
 De forma predeterminada, los identificadores de sesión utilizados en sesiones sin cookies se reciclan. Es decir, si se realiza una solicitud con un identificador de sesión que ha expirado, se inicia una nueva sesión con el identificador de sesión proporcionado con la solicitud. Puede dar lugar a este comportamiento no deseado compartir los datos de la sesión cuando un vínculo que contiene un identificador de sesión sin cookies se comparte con varios exploradores, quizás a través de un motor de búsqueda u otro programa. Puede reducir la posibilidad de que los datos de sesión está compartidas por varios clientes deshabilitando el reciclaje de los identificadores de sesión. Para ello, establezca la `regenerateExpiredSessionId` atributo del elemento de configuración para `true`. El resultado será un nuevo identificador de sesión que se genera cuando se realiza una solicitud de sesión sin cookies con un identificador de sesión que ha expirado. Tenga en cuenta que si la solicitud realizada con el identificador de sesión expirada usa HTTP `POST` método y, a continuación, todos los datos enviados se perderán cuando `regenerateExpiredSessionId` es `true`, como ASP.NET realiza un redireccionamiento para asegurarse de que el explorador tiene el identificador de sesión nuevo en la dirección URL.  
  
> [!NOTE]
>  Durante la instalación del `regenerateExpiredSessionId` atribuir a `true` reduce la posibilidad de que se compartan de datos de la sesión, no ofrece protección contra un origen no deseado obtengan acceso a la sesión de otro usuario obteniendo el <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> valor y incluyéndolo en las solicitudes al servidor. Si almacena información confidencial o privada en estado de sesión, se recomienda usar SSL para cifrar cualquier comunicación entre el explorador y el servidor que incluye el <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `cookieless` atributo sesión en true en el archivo Web.config.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNewSession">
      <MemberSignature Language="C#" Value="public bool IsNewSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNewSession" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsNewSession" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNewSession As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNewSession { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNewSession : bool" Usage="System.Web.SessionState.HttpSessionState.IsNewSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the session was created with the current request.</summary>
        <value>
          <see langword="true" /> Si la sesión se creó con la solicitud actual; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Web.SessionState.HttpSessionState.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the session is read-only.</summary>
        <value>
          <see langword="true" /> Si la sesión es de solo lectura; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.SessionState.HttpSessionState.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe).</summary>
        <value>
          <see langword="true" /> Si el acceso a la colección está sincronizado (es seguro para subprocesos); en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets or sets individual session values.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj with get, set" Usage="System.Web.SessionState.HttpSessionState.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The numerical index of the session value.</param>
        <summary>Gets or sets a session value by numerical index.</summary>
        <value>El valor de estado de sesión almacenado en el índice especificado, o <see langword="null" /> si el elemento no existe.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ name); void set(System::String ^ name, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.SessionState.HttpSessionState.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The key name of the session value.</param>
        <summary>Gets or sets a session value by name.</summary>
        <value>El valor de estado de sesión con el nombre especificado, o <see langword="null" /> si el elemento no existe.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameObjectCollectionBase/KeysCollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As NameObjectCollectionBase.KeysCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameObjectCollectionBase::KeysCollection ^ Keys { System::Collections::Specialized::NameObjectCollectionBase::KeysCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" Usage="System.Web.SessionState.HttpSessionState.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of the keys for all values stored in the session-state collection.</summary>
        <value>El <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> que contiene todas las claves de sesión.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int with get, set" Usage="System.Web.SessionState.HttpSessionState.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the locale identifier (LCID) of the current session.</summary>
        <value>Un <see cref="T:System.Globalization.CultureInfo" /> instancia que especifica la referencia cultural de la sesión actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.SessionState.HttpSessionState.LCID%2A> propiedad se proporciona por compatibilidad con versiones anteriores de ASP únicamente. Si no necesita mantener la compatibilidad con las páginas ASP, utilice la <xref:System.Globalization.CultureInfo.LCID%2A> propiedad en su lugar.  
  
 ASP.NET no almacena el identificador de configuración regional en el estado de sesión. El <xref:System.Web.SessionState.HttpSessionState.LCID%2A> propiedad tiene acceso a la <xref:System.Globalization.CultureInfo.LCID%2A> propiedad para obtener y establecer el identificador.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.SessionStateMode Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.SessionState.SessionStateMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Mode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mode As SessionStateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::SessionStateMode Mode { System::Web::SessionState::SessionStateMode get(); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.SessionState.SessionStateMode" Usage="System.Web.SessionState.HttpSessionState.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current session-state mode.</summary>
        <value>Uno de los valores de <see cref="T:System.Web.SessionState.SessionStateMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información acerca de cómo configurar el servidor <xref:System.Web.SessionState.SessionStateMode.StateServer> o <xref:System.Web.SessionState.SessionStateMode.SQLServer> almacenamiento de información de estado de sesión, vea [información general sobre el estado de sesión de ASP.NET](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc).  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `mode` atributo sesión <xref:System.Web.SessionState.SessionStateMode.SQLServer> en el archivo Web.config. Para el modo de sesión de SQL Server, el `sqlConnectionString` atributo también es necesario.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="SQLServer"  
      sqlConnectionString="Data Source=localhost;Integrated Security=SSPI"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="httpSessionState.Remove name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the item to delete from the session-state collection.</param>
        <summary>Deletes an item from the session-state collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la colección de Estados de sesión no contiene un elemento con los valores especificados `name`, la colección no cambie. No se inicia ninguna excepción.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo almacenar valores en el estado de sesión mediante el uso de la <xref:System.Web.SessionState.HttpSessionState.Add%2A> método. También muestra cómo quitar valores de estado de sesión mediante el uso de la <xref:System.Web.SessionState.HttpSessionState.Remove%2A> método. Un <xref:System.Web.UI.WebControls.Repeater> control se utiliza para mostrar el contenido del estado de sesión en la página Web. El <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> método se utiliza para recorrer en iteración la colección de Estados de sesión y rellenar el <xref:System.Web.UI.WebControls.Repeater> control.  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : unit -&gt; unit" Usage="httpSessionState.RemoveAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all keys and values from the session-state collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> realiza la misma función que <xref:System.Web.SessionState.HttpSessionState.Clear%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="httpSessionState.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The index of the item to remove from the session-state collection.</param>
        <summary>Deletes an item at a specified index from the session-state collection.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  \- or -  <paramref name="index" /> is equal to or greater than <see cref="P:System.Web.SessionState.HttpSessionState.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionID">
      <MemberSignature Language="C#" Value="public string SessionID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SessionID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SessionID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SessionID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SessionID : string" Usage="System.Web.SessionState.HttpSessionState.SessionID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the unique identifier for the session.</summary>
        <value>Identificador único de la sesión.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> propiedad se utiliza para identificar de forma única un explorador con datos de la sesión en el servidor. El <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> valor se genera por ASP.NET aleatoriamente y se almacena en una cookie de sesión expiran en el explorador. El <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> valor, a continuación, se envía en una cookie con cada solicitud a la aplicación ASP.NET.  
  
 Si desea deshabilitar el uso de cookies en una aplicación de ASP.NET y permitir que el uso de estado de sesión, puede configurar la aplicación para almacenar el identificador de sesión en la dirección URL en lugar de una cookie estableciendo la `cookieless` atributo de la configuración elemento `true`, o a <xref:System.Web.HttpCookieMode.UseUri>, en el archivo Web.config de la aplicación. Puede hacer que ASP.NET determine si el explorador admite cookies mediante la especificación de un valor de <xref:System.Web.HttpCookieMode.UseDeviceProfile> para el `cookieless` atributo. También puede hacer que ASP.NET determine si las cookies están habilitadas para el explorador especificando un valor de <xref:System.Web.HttpCookieMode.AutoDetect> para el `cookieless` atributo. Si se admiten cookies cuando <xref:System.Web.HttpCookieMode.UseDeviceProfile> se ha especificado, o habilita al <xref:System.Web.HttpCookieMode.AutoDetect> se especifica, la sesión de identificador será almacenado en una cookie; de lo contrario el identificador de sesión se almacenará en la dirección URL. Para obtener más información, vea la propiedad <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>.  
  
 El <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> se envían entre el servidor y el explorador en texto no cifrado, en una cookie o en la dirección URL. Como resultado, un origen no deseado podría obtener acceso a la sesión de otro usuario obteniendo el <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> valor y su inclusión en las solicitudes al servidor. Si almacena información confidencial o privada en estado de sesión, se recomienda usar SSL para cifrar cualquier comunicación entre el explorador y el servidor que incluye el <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
 Al utilizar el estado de sesión basado en cookies, ASP.NET no asigna almacenamiento para datos de la sesión hasta que el <xref:System.Web.UI.Page.Session%2A> se utiliza el objeto. Como resultado, se genera un nuevo identificador de sesión para cada solicitud de página hasta que se tiene acceso al objeto de sesión. Si la aplicación requiere un identificador de sesión estático para toda la sesión, puede bien implemente la `Session_Start` método en el archivo Global.asax de la aplicación y almacenar datos en el <xref:System.Web.UI.Page.Session%2A> de objeto para corregir el identificador de sesión, o puede usar código en otra parte de la aplicación para almacenar los datos en forma explícita la <xref:System.Web.UI.Page.Session%2A> objeto.  
  
 Si la aplicación utiliza el estado de sesión sin cookies, el identificador de sesión se genera en la primera vista de página y se mantiene durante toda la sesión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un archivo Web.config que configura el estado de sesión para utilizar identificadores de sesión sin cookies. Para obtener más información, vea la propiedad <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.StaticObjects" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StaticObjects As HttpStaticObjectsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpStaticObjectsCollection ^ StaticObjects { System::Web::HttpStaticObjectsCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StaticObjects : System.Web.HttpStaticObjectsCollection" Usage="System.Web.SessionState.HttpSessionState.StaticObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of objects declared by <see langword="&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;" /> tags within the ASP.NET application file Global.asax.</summary>
        <value>Un <see cref="T:System.Web.HttpStaticObjectsCollection" /> que contiene los objetos declarados en el archivo Global.asax.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un objeto en una página no admite la serialización y <xref:System.Web.SessionState.HttpSessionState.Mode%2A> está fuera del proceso (<xref:System.Web.SessionState.SessionStateMode.SQLServer> o <xref:System.Web.SessionState.SessionStateMode.StateServer>), el objeto no se creará y no se agregará a esta colección.  
  
 El <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> propiedad se proporciona por compatibilidad con versiones anteriores de ASP.  
  
   
  
## Examples  
 El siguiente código de ejemplo enumera la `id` y el tipo de objeto de los objetos en el <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> colección.  
  
 [!code-csharp[HttpSessionState#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#10)]
 [!code-vb[HttpSessionState#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.SessionState.HttpSessionState.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the collection of session-state values.</summary>
        <value>Objeto que se puede utilizar para sincronizar el acceso a la colección.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Timeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : int with get, set" Usage="System.Web.SessionState.HttpSessionState.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets the amount of time, in minutes, allowed between requests before the session-state provider terminates the session.</summary>
        <value>Período de tiempo de espera, en minutos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> propiedad puede establecerse en el archivo Web.config para una aplicación utilizando la `timeout` puede establecer el atributo de elemento de configuración o la <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> valor de propiedad directamente mediante código de la aplicación.  
  
 El <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> propiedad no se puede establecer en un valor mayor que 525,600 minutos (1 año). El valor predeterminado es 20 minutos.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `timeout` atributo sesión en 30 minutos en el archivo Web.config.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>