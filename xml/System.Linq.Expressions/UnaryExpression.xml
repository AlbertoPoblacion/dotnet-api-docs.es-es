<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnaryExpression.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac578b490019eb46301374b660e227475d3f73a0716.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78b490019eb46301374b660e227475d3f73a0716</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>Represents an expression that has a unary operator.</source>
          <target state="translated">Representa una expresión que tiene un operador unario.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>The following table summarizes the factory methods that can be used to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> that has a specific node type.</source>
          <target state="translated">En la tabla siguiente se resume los métodos de generador que pueden usarse para crear un <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> que tiene un tipo de nodo específico.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>Factory Method</source>
          <target state="translated">Método de fábrica</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeUnary%2A&gt;</ph> methods can also be used to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph>.</source>
          <target state="translated">Además, el <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.MakeUnary%2A&gt;</ph> métodos también se pueden usar para crear un <ph id="ph2">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>These factory methods can be used to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> of any node type that represents a unary operation.</source>
          <target state="translated">Estos métodos de generador que pueden utilizarse para crear un <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> de cualquier tipo de nodo que representa una operación unaria.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>The parameter of these methods that is of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> specifies the desired node type.</source>
          <target state="translated">El parámetro de estos métodos que es de tipo <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> especifica el tipo de nodo deseado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.UnaryExpression">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> object that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</source>
          <target state="translated">En el ejemplo siguiente se crea un <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression&gt;</ph> objeto que representa la conversión de referencia de una expresión de entero que no acepta valores NULL al tipo entero que acepta valores NULL.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.CanReduce">
          <source>Gets a value that indicates whether the expression tree node can be reduced.</source>
          <target state="translated">Obtiene un valor que indica si el nodo del árbol de expresión se puede reducir.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.CanReduce">
          <source>True if a node can be reduced, otherwise false.</source>
          <target state="translated">Es true si se puede reducir un nodo; de lo contrario, es false.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.IsLifted">
          <source>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</source>
          <target state="translated">Obtiene un valor que indica si el nodo del árbol de expresión representa una llamada elevada a un operador.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLifted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the node represents a lifted call; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el nodo representa una llamada elevada; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLifted">
          <source>An operator call is <bpt id="p1">*</bpt>lifted<ept id="p1">*</ept> if the operator expects a non-nullable operand but a nullable operand is passed to it.</source>
          <target state="translated">Una llamada del operador es <bpt id="p1">*</bpt>soluciona<ept id="p1">*</ept> si el operador espera un operando que no acepta valores NULL pero se pasa un operando que acepta valores NULL.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</source>
          <target state="translated">Obtiene un valor que indica si el nodo del árbol de expresión representa una llamada elevada a un operador cuyo tipo de valor devuelto se eleva a un tipo que acepta valores null.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operator's return type is lifted to a nullable type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el tipo de valor devuelto del operador se eleva a un tipo que acepta valores null; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source>An operator call is <bpt id="p1">*</bpt>lifted<ept id="p1">*</ept> if the operator expects a non-nullable operand but a nullable operand is passed to it.</source>
          <target state="translated">Una llamada del operador es <bpt id="p1">*</bpt>soluciona<ept id="p1">*</ept> si el operador espera un operando que no acepta valores NULL pero se pasa un operando que acepta valores NULL.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
          <source>If the value of <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the operator returns a nullable type and if the nullable operand evaluates to <ph id="ph3">`null`</ph>, the operator returns <ph id="ph4">`null`</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">&lt;xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A&gt;</ph> es <ph id="ph2">`true`</ph>, el operador devuelve un tipo que acepta valores NULL y si el operando que acepta valores NULL se evalúa como <ph id="ph3">`null`</ph>, el operador devuelve <ph id="ph4">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.Method">
          <source>Gets the implementing method for the unary operation.</source>
          <target state="translated">Obtiene el método de implementación para la operación unaria.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.Method">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> that represents the implementing method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> que representa el método de implementación.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Devuelve el tipo de nodo de <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated">Enumeración <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> que representa esta expresión.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.Operand">
          <source>Gets the operand of the unary operation.</source>
          <target state="translated">Obtiene el operando de la operación unaria.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.Operand">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> that represents the operand of the unary operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> que representa el operando de la operación unaria.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>Reduces the expression node to a simpler expression.</source>
          <target state="translated">Reduce el nodo de expresión a una expresión más sencilla.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>The reduced expression.</source>
          <target state="translated">Expresión reducida.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>If the <ph id="ph1">`CanReduce`</ph> method returns true, this should return a valid expression.</source>
          <target state="translated">Si el <ph id="ph1">`CanReduce`</ph> método devuelve true, se debe devolver una expresión válida.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.UnaryExpression.Reduce">
          <source>This method can return another node which itself must be reduced.</source>
          <target state="translated">Este método puede devolver otro nodo que se debe reducir a su vez.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.UnaryExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">Obtiene el tipo estático de la expresión que <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representa.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.UnaryExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Type" /&gt;</ph> que representa el tipo estático de la expresión.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> property of the result.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /&gt;</ph> del resultado.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">Crea una nueva expresión que es como esta, pero usa el elemento secundario proporcionado.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">Si todos los elementos secundarios son iguales, devolverá esta expresión.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">Esta expresión si no se cambió ningún elemento secundario o una expresión con los elementos secundarios actualizados.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>