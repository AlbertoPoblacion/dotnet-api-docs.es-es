<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4abd0b0508fdc62e37d2117e5823a54dfc7dfdce" /><Meta Name="ms.sourcegitcommit" Value="d3dcd8c426adcf1bbe5ff78a76dee13bd8ad6efd" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/28/2019" /><Meta Name="ms.locfileid" Value="66251528" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona una interfaz interna para acceder a los argumentos de varios nodos de árbol (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e IndexExpression).  Esta API es solo para uso interno.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

Esta API no debe usarse.  Es pública solo debido a la refactorización del ensamblado, y existe únicamente para optimizaciones de rendimiento interno. Permite dos optimizaciones que reducen el tamaño de los árboles:
  
1. Permite a los nodos retener una <xref:System.Collections.Generic.IList%601> en lugar de un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  Esto ahorra el costo de asignar la colección de solo lectura para cada nodo.
  
2. Permite que las subclases especializadas que se crearán suspensión en a un número específico de argumentos (por ejemplo, `Block2`, `Block2`, `Block4`).  Por lo tanto, estos nodos evitan asignar ambos un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> y una matriz para almacenar sus elementos, ahorrando así 32 bytes por nodo.  Esta técnica se usa en varios nodos, incluidos <xref:System.Linq.Expressions.BlockExpression>, <xref:System.Linq.Expressions.InvocationExpression>, y <xref:System.Linq.Expressions.MethodCallExpression>.
            
Siguen exponiendo las propiedades LINQ originales de los nodos de árbol de expresión <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objetos. Para hacerlo mediante la reutilización de un campo para almacenar la matriz o un elemento que normalmente se almacenaría en la matriz.
            
El caso de la matriz, la colección se asigna a tipo <xref:System.Collections.Generic.IList%601> en lugar de <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. Cuando el nodo se construye inicialmente, es una matriz.  El compilador o utilidades de esta biblioteca de acceso a los elementos a través de esta interfaz. Obtener acceso a los elementos de matriz promueve la matriz a un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
Para el caso del objeto, el primer argumento se almacena en un campo con tipo de <xref:System.Object>. Cuando el nodo se construye inicialmente, este campo contiene el <xref:System.Linq.Expressions.Expression> del primer argumento.  Cuando el compilador y las utilidades de esta biblioteca, tener acceso a los argumentos, vuelva a usar esta interfaz y el descriptor de acceso para el primer argumento usa interno `Expression.ReturnObject<T>(System.Object)` método auxiliar para devolver el objeto que controla el <xref:System.Linq.Expressions.Expression> o <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> caso. Cuando el usuario tiene acceso a la <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>, se actualiza el campo de objeto para retener directamente el <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.
            
Es importante que <xref:System.Linq.Expressions.Expression> propiedades devuelven sistemáticamente la misma <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>. En caso contrario, se interrumpirá el Rastreador del árbol de un sistema de reescritura utilizado por los visitantes de expresiones. Es un cambio importante respecto a LINQ v1 devolver diferentes <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> desde la misma <xref:System.Linq.Expressions.Expression> nodo. Actualmente, los usuarios pueden basarse en la identidad del objeto para indicar si el nodo se ha cambiado.  Almacenar el <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> en un campo sobrecargado ambos reduce el uso de memoria y se mantiene la compatibilidad con la API pública.

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve el número de argumentos al nodo de árbol de expresión. Esta API es solo para uso interno.</summary>
        <value>Número de argumentos al nodo de árbol de expresión como <see cref="T:System.Int32" />.</value>
        <remarks>Esta API no debe usarse. Es pública solo debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del argumento.</param>
        <summary>Devuelve el argumento en <paramref name="index" />, y se iniciará una excepción si <paramref name="index" /> está fuera de los límites. Esta API es solo para uso interno.</summary>
        <returns>El argumento en el índice.</returns>
        <remarks>Esta API no debe usarse.  Solo es público debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
