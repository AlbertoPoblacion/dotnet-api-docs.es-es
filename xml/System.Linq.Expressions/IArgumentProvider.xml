<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IArgumentProvider.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bb1b0a12225c49cd06302a4822210d08cda2957f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb1b0a12225c49cd06302a4822210d08cda2957f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</source>
          <target state="translated">Proporciona una interfaz interna para acceder a los argumentos de varios nodos de árbol (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e InexExpression).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>You should not use this API.</source>
          <target state="translated">No se debe usar esta API.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is only public due to DLL refactoring and exists only for internal performance optimizations.</source>
          <target state="translated">Solo es pública debido a la refactorización de la DLL y existe únicamente para optimizaciones de rendimiento interno.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>This enables two optimizations which reduce the size of expression trees.</source>
          <target state="translated">Esto permite dos optimizaciones que reducen el tamaño de los árboles de expresiones.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The first enables the tree nodes to hold onto an IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of a ReadOnlyCollection.</source>
          <target state="translated">La primera permite a los nodos de árbol utilizar una interfaz IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> en lugar de ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> saves the cost of allocating the ReadOnlyCollection for each node.</source>
          <target state="translated">IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> ahorra el costo de asignar ReadOnlyCollection a cada nodo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</source>
          <target state="translated">La segunda permite crear subclases especializadas que utilizan un número específico de argumentos (por ejemplo, Block2, Block3, Block4).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</source>
          <target state="translated">Por lo tanto, estos nodos evitan asignar ReadOnlyCollection y una matriz para almacenar sus elementos, lo que permite ahorrar 32 bytes por nodo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</source>
          <target state="translated">Los nodos de los árbol de expresiones siguen exponiendo las propiedades LINQ originales de ReadOnlyCollections.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</source>
          <target state="translated">Para ello, los nodos vuelven a usar un campo para almacenar la matriz o un elemento que normalmente se almacenaría en la matriz.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the array case, the collection is typed to IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> instead of ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</source>
          <target state="translated">En el caso de la matriz, se asigna a la colección el tipo IList<ph id="ph1">&amp;lt;</ph>T<ph id="ph2">&amp;gt;</ph> en lugar de ReadOnlyCollection<ph id="ph3">&amp;lt;</ph>T<ph id="ph4">&amp;gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed it is an array.</source>
          <target state="translated">Cuando el nodo se construye inicialmente es una matriz.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the compiler accesses the members it uses this interface.</source>
          <target state="translated">Cuando el compilador accede a los miembros usa esta interfaz.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Accessing array elements promotes the array to a ReadOnlyCollection.</source>
          <target state="translated">Cuando se accede a los elementos de la matriz, la matriz se promueve a ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>For the object case we store the first argument in a field typed to object.</source>
          <target state="translated">En el caso del objeto, el primer argumento se almacena en un campo con tipo de objeto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the node is initially constructed, the field holds the Expression.</source>
          <target state="translated">Cuando el nodo se construye inicialmente, el campo contiene la expresión.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</source>
          <target state="translated">El compilador accede a los argumentos a través de esta interfaz, y el descriptor de acceso del primer argumento usa Expression.ReturnObject para devolver el objeto que controla el caso de la expresión o ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</source>
          <target state="translated">Cuando el usuario accede a ReadOnlyCollection, se actualiza el campo de objeto para que utilice directamente ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is important that the Expressions consistently return the same ReadOnlyCollection.</source>
          <target state="translated">Es importante que las expresiones devuelvan constantemente la misma ReadOnlyCollection.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Otherwise, the re-writer tree walker will break.</source>
          <target state="translated">En caso contrario, se interrumpirá el rastreador del árbol del sistema de reescritura.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</source>
          <target state="translated">Es un cambio importante con respecto a LINQ v1 devolver diferentes ReadOnlyCollections a partir del mismo nodo de expresión.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Currently users can rely on object identity to tell if the node has changed.</source>
          <target state="translated">Actualmente los usuarios pueden confiar en la identidad del objeto para saber si el nodo cambió.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.IArgumentProvider">
          <source>Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</source>
          <target state="translated">Si se almacena ReadOnlyCollection en un campo sobrecargado, se reduce el uso de memoria y se mantiene la compatibilidad con la API pública.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>Returns the number of arguments to the expression tree node.</source>
          <target state="translated">Devuelve el número de argumentos al nodo de árbol de expresión.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>You should not use this type.</source>
          <target state="translated">No se debe usar este tipo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">Solo es público debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
          <source>The number of arguments to the expression tree node as <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">Número de argumentos al nodo de árbol de expresión como <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The index of the argument.</source>
          <target state="translated">Índice del argumento.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>Returns the argument at index, throwing if index is out of bounds.</source>
          <target state="translated">Devuelve el argumento en el índice, indicando si el índice está fuera de los límites.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>You should not use this type.</source>
          <target state="translated">No se debe usar este tipo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="translated">Solo es público debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
          <source>The argument at index, throwing if index is out of bounds as <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Argumento en el índice, indicando si el índice está fuera de los límites, como <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>