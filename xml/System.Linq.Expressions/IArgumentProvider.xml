<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36555653" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona una interfaz interna para acceder a los argumentos de varios nodos de árbol (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression e InexExpression).  No se debe usar esta API.  Solo es pública debido a la refactorización de la DLL y existe únicamente para optimizaciones de rendimiento interno.  
  
Esto permite dos optimizaciones que reducen el tamaño de los árboles de expresiones.  La primera permite a los nodos de árbol utilizar una interfaz IList&lt;T&gt; en lugar de ReadOnlyCollection.  IList&lt;T&gt; ahorra el costo de asignar ReadOnlyCollection a cada nodo.  La segunda permite crear subclases especializadas que utilizan un número específico de argumentos (por ejemplo, Block2, Block3, Block4).  Por lo tanto, estos nodos evitan asignar ReadOnlyCollection y una matriz para almacenar sus elementos, lo que permite ahorrar 32 bytes por nodo.  
  
Los nodos de los árbol de expresiones siguen exponiendo las propiedades LINQ originales de ReadOnlyCollections.  Para ello, los nodos vuelven a usar un campo para almacenar la matriz o un elemento que normalmente se almacenaría en la matriz.  
  
En el caso de la matriz, se asigna a la colección el tipo IList&lt;T&gt; en lugar de ReadOnlyCollection&lt;T&gt;.  Cuando el nodo se construye inicialmente es una matriz.  Cuando el compilador accede a los miembros usa esta interfaz.  Cuando se accede a los elementos de la matriz, la matriz se promueve a ReadOnlyCollection.  
  
En el caso del objeto, el primer argumento se almacena en un campo con tipo de objeto.  Cuando el nodo se construye inicialmente, el campo contiene la expresión.  El compilador accede a los argumentos a través de esta interfaz, y el descriptor de acceso del primer argumento usa Expression.ReturnObject para devolver el objeto que controla el caso de la expresión o ReadOnlyCollection.  Cuando el usuario accede a ReadOnlyCollection, se actualiza el campo de objeto para que utilice directamente ReadOnlyCollection.  
  
Es importante que las expresiones devuelvan constantemente la misma ReadOnlyCollection.  En caso contrario, se interrumpirá el rastreador del árbol del sistema de reescritura.  Es un cambio importante con respecto a LINQ v1 devolver diferentes ReadOnlyCollections a partir del mismo nodo de expresión.  Actualmente los usuarios pueden confiar en la identidad del objeto para saber si el nodo cambió.  Si se almacena ReadOnlyCollection en un campo sobrecargado, se reduce el uso de memoria y se mantiene la compatibilidad con la API pública.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve el número de argumentos al nodo de árbol de expresión.  No se debe usar este tipo.  Solo es público debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</summary>
        <value>Número de argumentos al nodo de árbol de expresión como <see cref="T:System.Int32" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del argumento.</param>
        <summary>Devuelve el argumento en el índice, indicando si el índice está fuera de los límites.  No se debe usar este tipo.  Solo es público debido a la refactorización del ensamblado y se usa internamente para optimizaciones de rendimiento.</summary>
        <returns>Argumento en el índice, indicando si el índice está fuera de los límites, como <see cref="T:System.Linq.Expressions.Expression" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>