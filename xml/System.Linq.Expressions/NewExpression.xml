<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NewExpression.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57a5f14ddad76a75cb0b16a49a1410f03a3363263.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a5f14ddad76a75cb0b16a49a1410f03a3363263</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.NewExpression">
          <source>Represents a constructor call.</source>
          <target state="translated">Representa una llamada de constructor.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.NewExpression">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.New%2A&gt;</ph> factory methods to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph>.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.New%2A&gt;</ph> métodos de generador para crear un <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.NewExpression">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> object is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.New&gt;</ph>.</source>
          <target state="translated">El valor de la <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> propiedad de un <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> objeto es <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.New&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.NewExpression">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> that represents the construction of a new instance of a dictionary object.</source>
          <target state="translated">En el ejemplo siguiente se crea un <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> que representa la construcción de una nueva instancia de un objeto de diccionario.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">Visitante con el que se va a visitar este nodo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">Envía la expresión al método de visita específico de este tipo de nodo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">Por ejemplo, el objeto <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> llama al método <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">Resultado de visitar este nodo.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Esta implementación predeterminada para <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> llamadas nodos <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">Invalide este método para llamar a un método más específico en una clase de visitante derivado de la <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">Sin embargo, todavía debería admitir a los visitantes desconocidos mediante una llamada a <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.NewExpression.Arguments">
          <source>Gets the arguments to the constructor.</source>
          <target state="translated">Obtiene los argumentos para el constructor.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Arguments">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> objects that represent the arguments to the constructor.</source>
          <target state="translated">Una colección de objetos <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> que representan los argumentos para el constructor.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Arguments">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> property is an empty collection if the constructor takes no arguments.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> propiedad es una colección vacía si el constructor no toma ningún argumento.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.NewExpression.Constructor">
          <source>Gets the called constructor.</source>
          <target state="translated">Obtiene el constructor al que se llama.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Constructor">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> that represents the called constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> que representa el constructor al que se llama.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.NewExpression.Members">
          <source>Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.</source>
          <target state="translated">Obtiene los miembros que pueden recuperar los valores de los campos que se inicializaron con argumentos de constructor.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Members">
          <source>A collection of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.</source>
          <target state="translated">Una colección de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> que representan los miembros que pueden recuperar los valores de los campos que se inicializaron con argumentos de constructor.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Members">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> property provides a mapping between the constructor arguments and the type members that correspond to those values.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt;</ph> propiedad proporciona una asignación entre los argumentos de constructor y los miembros de tipo que corresponden a esos valores.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Members">
          <source>In the case of the construction of an anonymous type, this property maps the constructor arguments to the properties that are exposed by the anonymous type.</source>
          <target state="translated">En el caso de la construcción de un tipo anónimo, esta propiedad asigna los argumentos de constructor a las propiedades que se exponen por el tipo anónimo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Members">
          <source>This mapping information is important because the fields that are initialized by the construction of an anonymous type, or the properties that access those fields, are not discoverable through the <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> properties of a <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> node.</source>
          <target state="translated">Esta información de asignación es importante porque los campos que se inicializan mediante la construcción de un tipo anónimo, o las propiedades que tienen acceso a esos campos, no se puede detectables a través de la <ph id="ph1">&lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt;</ph> propiedades de un <ph id="ph3">&lt;xref:System.Linq.Expressions.NewExpression&gt;</ph> nodo.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.NewExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">Devuelve el tipo de nodo de este objeto <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated">Enumeración <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> que representa esta expresión.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>Gets the number of arguments to the expression tree node.</source>
          <target state="translated">Obtiene el número de argumentos en el nodo de árbol de expresión.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
          <source>The number of arguments to the expression tree node.</source>
          <target state="translated">Número de argumentos al nodo de árbol de expresión.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>The index of the argument.</source>
          <target state="translated">Índice del argumento.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>Returns the argument at index, throwing if index is out of bounds.</source>
          <target state="translated">Devuelve el argumento en el índice, indicando si el índice está fuera de los límites.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
          <source>The argument at index, throwing if index is out of bounds.</source>
          <target state="translated">Argumento en el índice, indicando si el índice está fuera de los límites.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.NewExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">Obtiene el tipo estático de la expresión que <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> representa.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.NewExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.NewExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Linq.Expressions.NewExpression.Type" /&gt;</ph> que representa el tipo estático de la expresión.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> property of the result.</source>
          <target state="translated">Propiedad <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.NewExpression.Arguments" /&gt;</ph> del resultado.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">Crea una nueva expresión que es como esta, pero usa el elemento secundario proporcionado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">Si todos los elementos secundarios son iguales, devolverá esta expresión.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">Esta expresión si no se ha cambiado ningún elemento secundario o una expresión con los elementos secundarios actualizados.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>