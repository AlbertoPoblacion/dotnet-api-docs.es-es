<Type Name="CryptoProvider" FullName="System.Security.RightsManagement.CryptoProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc0cdaf3c7e863e24d9544ba9e917e3485b4ad4d" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33660103" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CryptoProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CryptoProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.RightsManagement.CryptoProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class CryptoProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CryptoProvider : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona servicios de administración de derechos digitales para cifrar y descifrar contenido protegido.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider> se crea como resultado de la <xref:System.Security.RightsManagement.UseLicense.Bind%2A> método cuando enlace una derechos administrados <xref:System.Security.RightsManagement.UseLicense> a una <xref:System.Security.RightsManagement.SecureEnvironment>.  
  
 Como ocurre con otros <xref:System.Security.RightsManagement> tipos, <xref:System.Security.RightsManagement.CryptoProvider> es solo se puede usar en aplicaciones de plena confianza.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Security.RightsManagement.CryptoProvider> clase para crear un <xref:System.IO.Packaging.EncryptedPackageEnvelope>.  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.RightsManagement.UseLicense" />
    <altmember cref="T:System.Security.RightsManagement.SecureEnvironment" />
  </Docs>
  <Members>
    <Member MemberName="BlockSize">
      <MemberSignature Language="C#" Value="public int BlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BlockSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.BlockSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BlockSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BlockSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tamaño del bloque cifrado, en bytes.</summary>
        <value>Tamaño del bloque cifrado, en bytes.  El tamaño de bloque predeterminado para Advanced Encryption Standard (AES) es 8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `clearText` y `cipherText` búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> y <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> debe ser n *<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> bytes de longitud, donde ' n ' es un número entero mayor o igual que 1.  
  
 Si <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A> es `false`, búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> debe tener la misma longitud que los búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.  
  
 Si <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A> es `true`, búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> puede tener una longitud diferente de los búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> (todos los tamaños de búfer todavía siempre deben ser un múltiplo de <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> bytes de longitud).  
  
 A <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> de 1 indica que el cifrado es un cifrado de secuencia; <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> de 2 o mayor indica un cifrado por bloques.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> propiedad para convertir datos de texto no cifrado en datos de texto cifrado.  
  
 [!code-csharp[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentPublish/CSharp/Window1.xaml.cs#rmcontpubencrypt)]
 [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentPublish/visualbasic/window1.xaml.vb#rmcontpubencrypt)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundGrants">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.RightsManagement.ContentGrant&gt; BoundGrants { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.RightsManagement.ContentGrant&gt; BoundGrants" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.BoundGrants" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BoundGrants As ReadOnlyCollection(Of ContentGrant)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::RightsManagement::ContentGrant ^&gt; ^ BoundGrants { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Security::RightsManagement::ContentGrant ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.RightsManagement.ContentGrant&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección que enumera los derechos que han pasado la comprobación y que se conceden al usuario.</summary>
        <value>Colección que enumera los derechos que han pasado la comprobación y que se conceden al usuario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Security.RightsManagement.CryptoProvider.BoundGrants%2A> propiedad para obtener una lista de derechos concedidos a través de un <xref:System.Security.RightsManagement.UseLicense>.  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewuselicense)]
 [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewuselicense)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDecrypt">
      <MemberSignature Language="C#" Value="public bool CanDecrypt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDecrypt" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanDecrypt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanDecrypt { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el usuario tiene derechos para descifrar.</summary>
        <value>**True** si la <see cref="T:System.Security.RightsManagement.UseLicense" /> concede los derechos de usuario para descifrar; en caso contrario, **false**.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A> Devuelve **true** si la <xref:System.Security.RightsManagement.UseLicense> enlazados a este <xref:System.Security.RightsManagement.CryptoProvider> concede al usuario derechos de acceso de lectura como ver, editar, imprimir o propietario.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A> propiedad para determinar si se permite el descifrado.  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewuselicense)]
 [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewuselicense)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt" />
        <altmember cref="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)" />
      </Docs>
    </Member>
    <Member MemberName="CanEncrypt">
      <MemberSignature Language="C#" Value="public bool CanEncrypt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEncrypt" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanEncrypt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanEncrypt { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el usuario tiene derechos para cifrar.</summary>
        <value>**True** si la <see cref="T:System.Security.RightsManagement.UseLicense" /> concede los derechos de usuario para cifrar; de lo contrario, **false**.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A> Devuelve **true** si la <xref:System.Security.RightsManagement.UseLicense> enlazados a este <xref:System.Security.RightsManagement.CryptoProvider> concede al usuario derechos de acceso de escritura, como editar o propietario.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt" />
        <altmember cref="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)" />
      </Docs>
    </Member>
    <Member MemberName="CanMergeBlocks">
      <MemberSignature Language="C#" Value="public bool CanMergeBlocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanMergeBlocks" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanMergeBlocks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanMergeBlocks { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> y <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> pueden aceptar búferes con tamaños de bloque de longitud diferente.</summary>
        <value>**True** si el búfer pasado a <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> puede tener una longitud diferente desde el búfer pasado a <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />; en caso contrario, **false** si los búferes pasados a <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> y <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> deben ser exactos longitud de la misma.  AES el valor predeterminado es **true**.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `clearText` y `cipherText` búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> y <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> debe ser n *<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> bytes de longitud, donde ' n ' es un número entero mayor o igual que 1.  
  
 Si <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A> es **false**, búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> debe tener la misma longitud que los búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>.  
  
 Si <xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A> es **true**, búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> puede tener una longitud diferente de los búferes pasados a <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> (todos los tamaños de búfer todavía siempre deben ser un múltiplo de <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> bytes de longitud).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public byte[] Decrypt (byte[] cryptoText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Decrypt(unsigned int8[] cryptoText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Decrypt (cryptoText As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Decrypt(cli::array &lt;System::Byte&gt; ^ cryptoText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cryptoText" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="cryptoText">Texto cifrado que se va a descifrar.</param>
        <summary>Descifra texto cifrado para obtener texto no cifrado.</summary>
        <returns>Texto descifrado de <paramref name="cryptoText" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A> método para convertir datos cifrados en datos sin cifrar.  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewdecrypt)]
 [!code-vb[RightsManagedContentViewer#RmContViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cipherText" /> es null.</exception>
        <exception cref="T:System.Security.RightsManagement.RightsManagementException">Derecho de descifrado no concedido.</exception>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt" />
        <altmember cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libera los recursos que usa <see cref="T:System.Security.RightsManagement.CryptoProvider" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos que usa <see cref="T:System.Security.RightsManagement.CryptoProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> realiza <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(**true**).  
  
 Llame a <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> cuando haya terminado de usar <xref:System.Security.RightsManagement.CryptoProvider>. El método <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> deja el <xref:System.Security.RightsManagement.CryptoProvider> en un estado no utilizable. Después de llamar a <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>, debe liberar todas las referencias a la <xref:System.Security.RightsManagement.CryptoProvider> para que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.Security.RightsManagement.CryptoProvider> estaba ocupando. Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Realice siempre una llamada a <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> antes de liberar la última referencia al objeto <xref:System.Security.RightsManagement.CryptoProvider>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.Security.RightsManagement.CryptoProvider> del objeto `Finalize`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Security.RightsManagement.CryptoProvider" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama a este método público `Dispose()` método y <xref:System.Object.Finalize%2A> método. `Dispose()` se invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` con `disposing` establecido en `false`.  
  
 Cuando el `disposing` del parámetro es true, este método libera todos los recursos retenidos por los objetos administrados que este <xref:System.Security.RightsManagement.CryptoProvider> referencias. Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> puede recibir varias llamadas de otros objetos. Al reemplazar <see langword="Dispose(Boolean)" /> tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, consulte [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Para obtener más información acerca de <see langword="Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [reemplazar el método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public byte[] Encrypt (byte[] clearText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encrypt(unsigned int8[] clearText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Encrypt (clearText As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Encrypt(cli::array &lt;System::Byte&gt; ^ clearText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clearText" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="clearText">Contenido de texto no cifrado que se va a cifrar.</param>
        <summary>Cifra texto no cifrado para obtener texto cifrado.</summary>
        <returns>Cifra texto cifrado del <paramref name="clearText" /> proporcionado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La longitud en bytes de la `clearText` búfer debe ser un múltiplo del cifrado de <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> propiedad.  
  
 El sistema de administración de derechos digitales usa AES cifrado por bloques.  Con AES, los bloques se cifran de forma independiente forma que dos bloques de idéntico como texto no cifrado generan resultados de texto de cifrado idénticos.  Para minimizar las posibles amenazas de descifrado de cifrado de bloques independientes, las aplicaciones deberían emplear métodos para modificar el contenido, como la compresión, para evitar el cifrado de bloques idénticos de texto sin cifrar.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A> método para convertir datos de texto no cifrado en datos de texto cifrado.  
  
 [!code-csharp[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentPublish/CSharp/Window1.xaml.cs#rmcontpubencrypt)]
 [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentPublish/visualbasic/window1.xaml.vb#rmcontpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="clearText" /> es null.</exception>
        <exception cref="T:System.Security.RightsManagement.RightsManagementException">No se permite el cifrado.</exception>
        <altmember cref="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt" />
        <altmember cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CryptoProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!CryptoProvider ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera recursos y realiza la limpieza interna antes de que recopilación de elementos no utilizados reclame la instancia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.Finalize%2A> realiza <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(**false**).  
  
 Este método invalida <xref:System.Object.Finalize%2A>. Código de la aplicación no debe llamar a este método; un objeto `Finalize` método se invoca automáticamente durante la recolección de elementos no utilizados, a menos que se ha deshabilitado la finalización por el recolector de elementos no utilizados mediante una llamada a la <xref:System.GC.SuppressFinalize%2A> método.  
  
 Para obtener más información, consulte [métodos de finalización y destructores](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md), y [reemplazar el método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>