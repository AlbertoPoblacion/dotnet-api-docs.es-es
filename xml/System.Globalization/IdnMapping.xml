<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57a3f1970833b876294c8fd9ac91b8e658233e24" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37655179" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un nombre de dominio de Internet se compone de uno o más elementos, denominadas etiquetas de nombre de dominio, separadas por separadores de etiqueta. Por ejemplo, el nombre de dominio "www.proseware.com" consta de las etiquetas, "www", "proseware" y "com", separados por puntos. Los nombres de dominio estándar constan de caracteres designados en el intervalo de caracteres US-ASCII (o Latín básico), de u+0021 a 007E U +. Para facilitar el uso de Internet en las referencias culturales que no utilizan el juego de caracteres US-ASCII, el dominio de internacionalización de nombres en las aplicaciones (IDNA) estándar se ha adoptado en 2003 para admitir la inclusión de caracteres Unicode fuera del intervalo de caracteres US-ASCII. Sin embargo, los servidores de nombres y resolución de nombres de dominio seguirán dependen de caracteres dentro del intervalo de caracteres US-ASCII.  
  
 El mecanismo IDNA usa Punycode para asignar un nombre de dominio internacionalizado que contiene caracteres Unicode fuera del intervalo de caracteres US-ASCII para el intervalo de caracteres US-ASCII admitido por el sistema de nombres de dominio. El mecanismo IDNA se usa para convertir sólo los nombres de dominio, no los datos transmitidos a través de Internet.  
  
> [!IMPORTANT]
>  En el [!INCLUDE[net_v45](~/includes/net-v45-md.md)], el <xref:System.Globalization.IdnMapping> clase es compatible con distintas versiones del estándar IDNA, según el sistema operativo en uso:  
>   
>  -   Cuando se ejecuta en [!INCLUDE[win8](~/includes/win8-md.md)], es compatible con la versión 2008 del estándar IDNA descrito por [RFC 5891: nombres de dominio internacionalizados en las aplicaciones (IDNA): protocolo](http://go.microsoft.com/fwlink/?LinkId=231875).  
> -   Cuando se ejecutan en versiones anteriores del sistema operativo Windows, es compatible con la versión 2003 del estándar que se describen mediante [RFC 3490: internacionalización de nombres de dominio en las aplicaciones (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110).  
>   
>  Consulte [Unicode Technical Standard #46: procesamiento de compatibilidad de IDNA](http://go.microsoft.com/fwlink/?LinkId=232459) para las diferencias en la forma de estos estándares controlan un conjunto determinado de caracteres.  
  
 El <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> método normaliza un nombre de dominio, convierte el nombre normalizado en una representación que consta de caracteres Unicode mostrables en el intervalo de puntos de código (0020 a 007E) US-ASCII y antepone un prefijo de codificación (ACE) compatible con ASCII (" Xn--") a cada etiqueta. El <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> método convertidas las etiquetas de nombre de dominio restaura el <xref:System.Globalization.IdnMapping.GetAscii%2A> método.  
  
 Si se puede convertir la cadena incluye el separador de etiquetas caracteres ideográfico (U + 3002), detención completa de ancho completo (FF0E + U) y punto ideográfico (U+FF61), el <xref:System.Globalization.IdnMapping.GetAscii%2A> método convierte en el separador de etiquetas (punto, U + 002E). El <xref:System.Globalization.IdnMapping.GetUnicode%2A> método, sin embargo, no restaure el carácter de separador de etiqueta original.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> internacionalizados de método para convertir una matriz de nombres de dominio a Punycode. El <xref:System.Globalization.IdnMapping.GetUnicode%2A> método convierte el nombre de dominio Punycode por el nombre de dominio original, pero reemplaza los separadores de etiqueta original con el separador de etiquetas estándar.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Todos los métodos públicos de <see cref="T:System.Globalization.IdnMapping" /> son seguros para subprocesos y se pueden usar simultáneamente desde varios subprocesos, siempre y cuando la <see cref="T:System.Globalization.IdnMapping" /> propiedades de la instancia no también se establecen al mismo tiempo.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Globalization.IdnMapping" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> y <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> propiedades se inicializan con `false`. Un pequeño subconjunto de caracteres ASCII que no sean A-z, 0-9, el guión (-) de caracteres (u+002D) y el carácter de punto (.) se permiten en los nombres de dominio, pero sin asignar puntos de código Unicode no son.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> Si se utilizan puntos de código sin asignar en operaciones; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un nombre de dominio registrado no puede contener puntos de código sin asignar. Por lo tanto, el valor predeterminado de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propiedad es `false`. La especificación de IDNA permite que los puntos de código sin asignar solo en las consultas de coincidencia de cadenas (es decir, en la búsqueda de nombres de dominio). Para obtener más información sobre el uso de puntos de código sin asignar en los nombres de dominio, consulte [RFC 3454, "Preparación de Internationalized Strings (stringprep)"](http://go.microsoft.com/fwlink/?LinkId=231873) y [5891 RFC, los "nombres de dominio internacionalizado en las aplicaciones ( IDNA): protocolo "](http://go.microsoft.com/fwlink/?LinkId=231875).  
  
> [!IMPORTANT]
>  Si el <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propiedad es `false`, el comportamiento asociado con la propiedad depende del sistema operativo subyacente. En [!INCLUDE[win8](~/includes/win8-md.md)], el <xref:System.Globalization.IdnMapping> clase se ajusta a IDNA 2008, que se basa en el estándar Unicode 6.0. En versiones anteriores de Windows, el <xref:System.Globalization.IdnMapping> clase se basa en IDNA 2003, que se basa en Unicode 3.* x*. Algunos puntos de código que estaban sin asignar en IDNA 2003 se han asignado caracteres y se admiten en 2008 IDNA. Por ejemplo, U + 0221 se introdujo en Unicode 4.0. En [!INCLUDE[win8](~/includes/win8-md.md)], éste se codifica como "xn: 6la". En versiones anteriores de Windows, produce un <xref:System.ArgumentException> excepción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current object.</param>
        <summary>Indicates whether a specified object and the current <see cref="T:System.Globalization.IdnMapping" /> object are equal.</summary>
        <returns>
          <see langword="true" /> if the object specified by the <paramref name="obj" /> parameter is derived from <see cref="T:System.Globalization.IdnMapping" /> and its <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encodes a string of domain name labels that include Unicode characters outside the US-ASCII character range to a string of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E). The string is formatted according to the IDNA standard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <summary>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the string specified by the <paramref name="unicode" /> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `unicode` parámetro especifica una cadena de uno o más etiquetas que constan de caracteres Unicode válidos. Las etiquetas se separan mediante separadores de etiqueta. El `unicode` parámetro no puede empezar con un separador de etiquetas, pero puede incluir y, opcionalmente, terminar con un separador. Los separadores de etiqueta son punto (punto, 002E), ideográfico detener (U + 3002), detención completa de ancho completo (FF0E + U) y punto ideográfico (U+FF61). Por ejemplo, el nombre de dominio "www.adatum.com" consta de las etiquetas, "www", "adatum" y "com", separados por puntos.  
  
 Una etiqueta no puede contener ninguno de los siguientes caracteres:  
  
-   Caracteres de control Unicode desde U + 0001 a 001F U + y 007F U +.  
  
-   Sin asignar caracteres Unicode, si el valor de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propiedad es `false`.  
  
-   Intervalo, como el espacio de caracteres de caracteres no estándar en el US-ASCII (u+0020), signo de exclamación marcar (u+0021), y baja caracteres de línea (005F), si el valor de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propiedad es `true`.  
  
-   Caracteres que están prohibidos por una versión específica del estándar IDNA. Para obtener más información sobre los caracteres prohibidos, consulte [RFC 3454: preparación de internacionalizados las cadenas ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, y [RFC 5982: los puntos de código Unicode y nombres de dominio internacionalizados para Aplicaciones](http://go.microsoft.com/fwlink/?LinkId=231877) para 2008 IDNA.  
  
 El <xref:System.Globalization.IdnMapping.GetAscii%2A> método convierte todos los separadores de etiqueta en detención completa (punto, 002E).  
  
 Si `unicode` no contiene ningún carácter fuera el US-ASCII están prohibidos el intervalo de caracteres y no hay caracteres dentro del intervalo de caracteres US-ASCII, el método devuelve `unicode` sin cambios.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> método para convertir una matriz de nombres de dominio internacionalizados a Punycode, que es un equivalente codificado que consta de caracteres en el intervalo de caracteres US-ASCII. El <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> método convierte el nombre de dominio Punycode atrás en el nombre de dominio original, pero reemplaza los separadores de etiqueta original con el separador de etiquetas estándar.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>En la [! INCLUDE[net_v45](~/includes/NET-V45-MD.MD)], el <see cref="T:System.Globalization.IdnMapping" /> clase es compatible con distintas versiones del estándar IDNA, según el sistema operativo en uso:: cuando se ejecutan en [! INCLUDE[win8](~/includes/win8-MD.MD)], es compatible con la versión 2008 del estándar IDNA descrito por [RFC 5891: nombres de dominio internacionalizados en las aplicaciones (IDNA): protocolo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Cuando se ejecutan en versiones anteriores del sistema operativo Windows, es compatible con la versión 2003 de la norma descrita por [RFC 3490: internacionalización de nombres de dominio en las aplicaciones (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110).  Consulte [Unicode Technical Standard #46: procesamiento de compatibilidad de IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) para las diferencias en la forma de estos estándares controlan un conjunto determinado de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring to convert. The conversion operation continues to the end of the <c>unicode</c> string.</param>
        <summary>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" /> and <paramref name="index" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `unicode` y `index` parámetros definen una subcadena con una o más etiquetas que constan de caracteres Unicode válidos. Las etiquetas se separan mediante separadores de etiqueta. El primer carácter de la subcadena no puede empezar con un separador de etiquetas, pero puede incluir y, opcionalmente, terminar con un separador. Los separadores de etiqueta son punto (punto, 002E), ideográfico detener (U + 3002), detención completa de ancho completo (FF0E + U) y punto ideográfico (U+FF61). Por ejemplo, el nombre de dominio "www.adatum.com" consta de las etiquetas, "www", "adatum" y "com", separados por puntos.  
  
 Una etiqueta no puede contener ninguno de los siguientes caracteres:  
  
-   Caracteres de control Unicode desde U + 0001 a 001F U + y 007F U +.  
  
-   Sin asignar caracteres Unicode, dependiendo del valor de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propiedad.  
  
-   Intervalo, como el espacio de caracteres de caracteres no estándar en el US-ASCII (u+0020), signo de exclamación marcar (u+0021) y caracteres de línea de baja (005F), dependiendo del valor de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propiedad.  
  
-   Caracteres que están prohibidos por una versión específica del estándar IDNA. Para obtener más información sobre los caracteres prohibidos, consulte [RFC 3454: preparación de internacionalizados las cadenas ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, y [RFC 5982: los puntos de código Unicode y nombres de dominio internacionalizados para Aplicaciones](http://go.microsoft.com/fwlink/?LinkId=231877) para 2008 IDNA.  
  
 El <xref:System.Globalization.IdnMapping.GetAscii%2A> método convierte todos los separadores de etiqueta en detención completa (punto, 002E).  
  
 Si `unicode` no contiene ningún carácter fuera el US-ASCII están prohibidos el intervalo de caracteres y no hay caracteres dentro del intervalo de caracteres US-ASCII, el método devuelve `unicode` sin cambios.  
  
   
  
## Examples  
 En el ejemplo siguiente se quita la parte local y el @ caracteres de una dirección de correo electrónico y pasa el resultante nombre de dominio para el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> método para crear un nombre de dominio Punycode, que es un equivalente codificado que consta de caracteres en el US-ASCII intervalo de caracteres. El <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método convierte el nombre de dominio Punycode atrás en el nombre de dominio original, pero reemplaza los separadores de etiqueta original con el separador de etiquetas estándar.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>En la [! INCLUDE[net_v45](~/includes/NET-V45-MD.MD)], el <see cref="T:System.Globalization.IdnMapping" /> clase es compatible con distintas versiones del estándar IDNA, según el sistema operativo en uso:: cuando se ejecutan en [! INCLUDE[win8](~/includes/win8-MD.MD)], es compatible con la versión 2008 del estándar IDNA descrito por [RFC 5891: nombres de dominio internacionalizados en las aplicaciones (IDNA): protocolo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Cuando se ejecutan en versiones anteriores del sistema operativo Windows, es compatible con la versión 2003 de la norma descrita por [RFC 3490: internacionalización de nombres de dominio en las aplicaciones (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110).  Consulte [Unicode Technical Standard #46: procesamiento de compatibilidad de IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) para las diferencias en la forma de estos estándares controlan un conjunto determinado de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by  <c>index</c> in the <c>unicode</c> string.</param>
        <summary>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" />, <paramref name="index" />, and <paramref name="count" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Unicode`, `index`, y `count` parámetros definen una subcadena con una o más etiquetas que constan de caracteres Unicode válidos. Las etiquetas se separan mediante separadores de etiqueta. El primer carácter de la subcadena no puede empezar con un separador de etiquetas, pero puede incluir y, opcionalmente, terminar con un separador. Los separadores de etiqueta son punto (punto, 002E), ideográfico detener (U + 3002), detención completa de ancho completo (FF0E + U) y punto ideográfico (U+FF61). Por ejemplo, el nombre de dominio "www.adatum.com" consta de las etiquetas, "www", "adatum" y "com", separados por puntos.  
  
 Una etiqueta no puede contener ninguno de los siguientes caracteres:  
  
-   Caracteres de control Unicode desde U + 0001 a 001F U + y 007F U +.  
  
-   Sin asignar caracteres Unicode, dependiendo del valor de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propiedad.  
  
-   Intervalo, como el espacio de caracteres de caracteres no estándar en el US-ASCII (u+0020), signo de exclamación marcar (u+0021) y caracteres de línea de baja (005F), dependiendo del valor de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propiedad.  
  
-   Caracteres que están prohibidos por una versión específica del estándar IDNA. Para obtener más información sobre los caracteres prohibidos, consulte [RFC 3454: preparación de internacionalizados las cadenas ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003, y [RFC 5982: los puntos de código Unicode y nombres de dominio internacionalizados para Aplicaciones](http://go.microsoft.com/fwlink/?LinkId=231877) para 2008 IDNA.  
  
 El <xref:System.Globalization.IdnMapping.GetAscii%2A> método convierte todos los separadores de etiqueta en detención completa (punto, 002E). Si la subcadena no contiene ningún carácter fuera del intervalo de caracteres US-ASCII y no hay caracteres dentro del intervalo de caracteres US-ASCII están prohibidos, el método devuelve la subcadena sin cambios.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> método para convertir un nombre de dominio internacionalizados en un nombre de dominio que cumple con el estándar IDNA. El <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método convierte el nombre de dominio normalizado en el nombre de dominio original, pero reemplaza los separadores de etiqueta original con el separador de etiquetas estándar.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>En la [! INCLUDE[net_v45](~/includes/NET-V45-MD.MD)], el <see cref="T:System.Globalization.IdnMapping" /> clase es compatible con distintas versiones del estándar IDNA, según el sistema operativo en uso:: cuando se ejecutan en [! INCLUDE[win8](~/includes/win8-MD.MD)], es compatible con la versión 2008 del estándar IDNA descrito por [RFC 5891: nombres de dominio internacionalizados en las aplicaciones (IDNA): protocolo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Cuando se ejecutan en versiones anteriores del sistema operativo Windows, es compatible con la versión 2003 de la norma descrita por [RFC 3490: internacionalización de nombres de dominio en las aplicaciones (IDNA)] (http://go.microsoft.com/fwlink/?LinkId=158110).  Consulte [Unicode Technical Standard #46: procesamiento de compatibilidad de IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) para las diferencias en la forma de estos estándares controlan un conjunto determinado de caracteres.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <returns>One of four 32-bit signed constants derived from the properties of an <see cref="T:System.Globalization.IdnMapping" /> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invalidar el <xref:System.Globalization.IdnMapping.GetHashCode%2A> método si la aplicación necesita para implementar un algoritmo de código hash significativo.  
  
   
  
## Examples  
 En el siguiente ejemplo se da por supuesto que una sola cadena puede contener varias direcciones de correo electrónico separadas por espacios. Quita la parte local y el @ caracteres de cada dirección de correo electrónico y pasa el resultante nombre de dominio para el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> método para crear un nombre de dominio Punycode. El <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> método, a continuación, convierte el nombre de dominio Punycode atrás en el nombre de dominio original.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodes one or more domain name labels encoded according to the IDNA standard to a string of Unicode characters.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <summary>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre los nombres de dominio, las etiquetas y separadores de etiqueta, vea los comentarios sobre el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> internacionalizados de método para convertir una matriz de nombres de dominio a Punycode. El <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> método convierte el nombre de dominio Punycode atrás en el nombre de dominio original, pero reemplaza los separadores de etiqueta original con el separador de etiquetas estándar.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring to decode. The decoding operation continues to the end of the <c>ascii</c> string.</param>
        <summary>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> and <paramref name="index" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre los nombres de dominio, las etiquetas y separadores de etiqueta, vea los comentarios sobre el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by <c>index</c> in the <c>ascii</c> string.</param>
        <summary>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" />, <paramref name="index" />, and <paramref name="count" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre los nombres de dominio, las etiquetas y separadores de etiqueta, vea los comentarios sobre el <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> Si se utilizan convenciones de nomenclatura estándar en operaciones; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los nombres de dominio que siguen las reglas de nomenclatura estándares constan de un subconjunto específico de caracteres en el intervalo de caracteres US-ASCII. Los caracteres son las letras A Z, los dígitos del 0 al 9, el carácter de guión (-) (u+002D) y el carácter de punto (.). El caso de los caracteres no es significativo. Convenciones de nomenclatura relajadas permiten el uso de un intervalo más amplio de ASCII (u+0020) de caracteres de caracteres, incluido el espacio, el signo de exclamación de caracteres (u+0021) y (005F) de caracteres de la barra inferior. Si <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> es `true`, pueden aparecer solamente caracteres estándar en una etiqueta devuelta por la <xref:System.Globalization.IdnMapping.GetAscii%2A> método.  
  
 De forma predeterminada, el valor de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propiedad es `false`, y no se permite un subconjunto ampliado de caracteres ASCII en una etiqueta.  
  
> [!NOTE]
>  El <xref:System.Globalization.IdnMapping> clase prohíbe el uso de los caracteres de propios u+0000 a 001F U +, y las etiquetas U + 007F en nombre de dominio independientemente de la configuración de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propiedad. Esta prohibición reduce el riesgo de ataques de seguridad como la suplantación de nombres.  
  
   
  
## Examples  
 El ejemplo siguiente genera direcciones URL que contienen caracteres en el intervalo ASCII de u+0000 a 007F U + y los pasa a la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> método de dos <xref:System.Globalization.IdnMapping> objetos. Un objeto tiene sus <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propiedad establecida en `true`, y el otro objeto tiene establecido en `false`. La salida muestra los caracteres que no son válidos cuando la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propiedad es `true` pero válido cuando resulta `false`.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>