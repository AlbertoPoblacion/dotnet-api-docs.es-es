<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8bee7b96cd712f99cea3c5b643e9b885b969b98" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682205" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Recupera la información sobre un carácter Unicode. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123) define el número de categorías de caracteres Unicode. Por ejemplo, un carácter se puede clasificar como una letra mayúscula, una letra minúscula, un número de dígitos decimales, un número de letra, un separador de párrafo, un símbolo matemático o un símbolo de moneda. La aplicación puede utilizar la categoría de caracteres para controlar operaciones basadas en cadenas, como análisis o extraer la subcadena con expresiones regulares. El <xref:System.Globalization.UnicodeCategory> enumeración define las categorías de caracteres posible.  
  
 Usa el <xref:System.Globalization.CharUnicodeInfo> clase para obtener la <xref:System.Globalization.UnicodeCategory> valor de un carácter concreto. La <xref:System.Globalization.CharUnicodeInfo> clase define métodos que devuelven los siguientes valores de caracteres Unicode:  
  
-   La categoría específica a la que pertenece un par suplente o carácter. El valor devuelto es un miembro de la <xref:System.Globalization.UnicodeCategory> enumeración.  
  
-   Valor numérico. Se aplica solo a los caracteres numéricos, incluidas fracciones, subíndices, superíndices, números romanos, numeradores de moneda, números rodeados con un círculo y dígitos específicos de scripts.  
  
-   Valor de dígito. Se aplica a los caracteres numéricos que se pueden combinar con otros caracteres numéricos para representar un número entero en un sistema de numeración.  
  
-   Valor de dígito decimal. Solo se aplica a los caracteres que representan dígitos decimales en el sistema decimal (base 10). Un dígito decimal puede ser uno de los diez dígitos del 0 al 9. Estos caracteres son miembros de la <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> categoría.  
  
 Además, la <xref:System.Globalization.CharUnicodeInfo> clase se utiliza internamente por una serie de otros tipos de .NET Framework y los métodos que se basan en la clasificación de caracteres. Se incluyen los siguientes:  
  
-   El <xref:System.Globalization.StringInfo> (clase), que funciona con los elementos de texto en lugar de caracteres individuales en una cadena.  
  
-   Las sobrecargas de los <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> método, que determinan la categoría a la que pertenece un par suplente o carácter.  
  
-   El [clases de caracteres](~/docs/standard/base-types/character-classes-in-regular-expressions.md) reconocerlos <xref:System.Text.RegularExpressions.Regex>, motor de expresiones regulares de .NET Framework.  
  
 Al utilizar esta clase en sus aplicaciones, tenga en cuenta lo siguiente las consideraciones de programación para el uso de la <xref:System.Char> tipo. El tipo puede ser difícil de usar y cadenas generalmente son preferibles para representar contenido lingüístico.  
  
-   Un <xref:System.Char> objeto no siempre se corresponde a un único carácter. Aunque el <xref:System.Char> tipo representa un único valor de 16 bits, algunos caracteres (por ejemplo, glifos y los pares suplentes) constan de dos o más unidades de código UTF-16. Para obtener más información, vea "Char objetos y caracteres de Unicode" en la <xref:System.String> clase.  
  
-   La noción de un "carácter" también es flexible. A menudo se considera un carácter como un glifo, pero varios glifos requieren varios puntos de código. Por ejemplo, ä puede representar mediante dos puntos de código ("a" + + u+0308, que es la diéresis de combinación), o por un código único punto ("ä" o U + 00A4). Algunos lenguajes tienen muchas letras, caracteres y glifos que requieren varios puntos de código, lo que pueden causar confusión en representación del contenido lingüística. Por ejemplo, hay una ΰ (U + 03B0, letra griega minúscula ípsilon con dialytika y tonos), pero no hay ninguna letra mayúscula equivalente. Letras mayúsculas este valor, simplemente recupera el valor original.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Caracteres reconocidos y las categorías específicas a la que pertenecen se definen mediante el estándar Unicode y pueden cambiar de una versión del estándar Unicode a otro. Clasificación de los caracteres de una versión concreta de .NET Framework se basa en una única versión del estándar Unicode, independientemente del sistema operativo subyacente en el que se ejecuta .NET Framework. En la tabla siguiente se enumera las versiones de .NET Framework desde el [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] y las versiones del estándar Unicode se utilizan para ordenar caracteres.  
  
 <list type="table"><listheader><term> Versión de .NET framework  
  
 </term><description> Versión del estándar Unicode  
  
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [El estándar Unicode, versión 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [El estándar Unicode, versión 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [El estándar Unicode, versión 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [El estándar Unicode, versión 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [El estándar Unicode, versión 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [El estándar Unicode, versión 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [El estándar Unicode, versión 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  
  
 Cada versión del estándar Unicode incluye información sobre los cambios en la base de datos de caracteres Unicode desde la versión anterior. Se utiliza la base de datos de caracteres Unicode mediante la <see cref="T:System.Globalization.CharUnicodeInfo" /> clase para clasificar los caracteres.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el valor de dígito decimal de un carácter Unicode numérico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">El carácter Unicode para el que se obtiene el valor de dígito decimal.</param>
        <summary>Obtiene el valor de dígito decimal del carácter numérico especificado.</summary>
        <returns>El valor de dígito decimal del carácter numérico especificado.  
  
 O bien  
  
 -1, si el carácter especificado no es un dígito decimal.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método convierte los caracteres que representan dígitos decimales a sus valores enteros equivalentes. Dígitos decimales son caracteres de la <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoría que puede representar uno de los diez dígitos en el sistema, desde cero a nueve de numeración decimal (base 10). Incluye caracteres como u+0030 (DÍGITO cero) a u+0039 (dígitos NUEVE), u+0660 (ÁRABO-ÍNDICOS DÍGITO cero) a través de U+10000 0669 (ÁRABO-ÍNDICOS DÍGITO NUEVE), U + 07c 0 (NKO DÍGITO cero) a través de U+10000 07C 9 (NKO DÍGITO NUEVE) y 1040 U + (MYANMAR DÍGITO cero) a través de U+10000 1049 (MYANMAR DÍGITO NUEVE).  
  
 Para obtener más información acerca de los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">El objeto <see cref="T:System.String" /> que contiene el carácter Unicode para el que se obtiene el valor de dígito decimal.</param>
        <param name="index">El índice del carácter Unicode para el que se obtiene el valor de dígito decimal.</param>
        <summary>Obtiene el valor de dígito decimal del carácter numérico situado en el índice especificado de la cadena especificada.</summary>
        <returns>El valor de dígito decimal del carácter numérico situado en el índice especificado de la cadena especificada.  
  
 O bien  
  
 -1, si el carácter situado en el índice especificado de la cadena especificada no es un dígito decimal.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método convierte los caracteres que representan dígitos decimales a sus valores enteros equivalentes. Dígitos decimales son caracteres de la <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoría que puede representar uno de los diez dígitos en el sistema, desde cero a nueve de numeración decimal (base 10). Incluye caracteres como u+0030 (DÍGITO cero) a u+0039 (dígitos NUEVE), u+0660 (ÁRABO-ÍNDICOS DÍGITO cero) a través de U+10000 0669 (ÁRABO-ÍNDICOS DÍGITO NUEVE), U + 07c 0 (NKO DÍGITO cero) a través de U+10000 07C 9 (NKO DÍGITO NUEVE) y 1040 U + (MYANMAR DÍGITO cero) a través de U+10000 1049 (MYANMAR DÍGITO NUEVE).  
  
 Para obtener más información acerca de los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> se encuentra fuera del intervalo de índices válidos en <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el valor de dígito de un carácter Unicode numérico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">El carácter Unicode para el que se obtiene el valor de dígito.</param>
        <summary>Obtiene el valor de dígito del carácter numérico especificado.</summary>
        <returns>El valor de dígito del carácter numérico especificado.  
  
 O bien  
  
 -1, si el carácter especificado no es un dígito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor de dígito es una propiedad que se aplica solo a los caracteres numéricos que se pueden usar como dígitos. Un dígito es un carácter numérico que se pueden combinar con otros dígitos para representar un número entero en un sistema de numeración.  
  
 Para obtener más información sobre los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">El objeto <see cref="T:System.String" /> que contiene el carácter Unicode para el que se obtiene el valor de dígito.</param>
        <param name="index">El índice del carácter Unicode para el que se obtiene el valor de dígito.</param>
        <summary>Obtiene el valor de dígito del carácter numérico situado en el índice especificado de la cadena especificada.</summary>
        <returns>El valor de dígito del carácter numérico situado en el índice especificado de la cadena especificada.  
  
 O bien  
  
 -1, si el carácter situado en el índice especificado de la cadena especificada no es un dígito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor de dígito es una propiedad que se aplica solo a los caracteres numéricos que se pueden usar como dígitos. Un dígito es un carácter numérico que se pueden combinar con otros dígitos para representar un número entero en un sistema de numeración.  
  
 Para obtener más información sobre los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> se encuentra fuera del intervalo de índices válidos en <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el valor numérico asociado a un carácter Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">El carácter Unicode para el que se obtiene el valor numérico.</param>
        <summary>Obtiene el valor numérico asociado al carácter especificado.</summary>
        <returns>El valor numérico asociado al carácter especificado.  
  
 O bien  
  
 -1, si el carácter especificado no es un carácter numérico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor numérico es una propiedad de carácter Unicode que se aplica solo a los caracteres numéricos, que incluyen fracciones, subíndices, superíndices, números romanos, numeradores de moneda, números rodeados con un círculo y dígitos específicos de scripts. Para obtener más información sobre los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 El <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> método supone que `ch` corresponde a un único carácter lingüístico y comprueba si dicho carácter se puede convertir a un dígito decimal. Sin embargo, algunos números en el estándar Unicode están representadas por dos <xref:System.Char> objetos que forman un par suplente. Por ejemplo, dichas sistema de numeración consta de los puntos de código 10107 U + a través de 10133 U +. En el ejemplo siguiente se usa el <xref:System.Char.ConvertFromUtf32%2A> método para crear instancias de una cadena que representa el número uno en menores. Como la salida se muestra en el ejemplo, el <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> método devuelve -1 si se pasa un suplente alto o un suplente bajo de este carácter.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">El objeto <see cref="T:System.String" /> que contiene el carácter Unicode para el que se obtiene el valor numérico.</param>
        <param name="index">El índice del carácter Unicode para el que se obtiene el valor numérico.</param>
        <summary>Obtiene el valor numérico asociado al carácter situado en el índice especificado de la cadena especificada.</summary>
        <returns>El valor numérico asociado al carácter situado en el índice especificado de la cadena especificada.  
  
 O bien  
  
 -1, si el carácter situado en el índice especificado de la cadena especificada no es un carácter numérico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor numérico es una propiedad de carácter Unicode que se aplica solo a los caracteres numéricos, que incluyen fracciones, subíndices, superíndices, números romanos, numeradores de moneda, números rodeados con un círculo y dígitos específicos de scripts. Para obtener más información sobre los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Si el <xref:System.Char> objeto en la posición `index` es el primer carácter de un par suplente válido, el <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> método determina si el par suplente constituye un dígito numérico y, si es así, devuelve su valor numérico. Por ejemplo, dichas sistema de numeración consta de los puntos de código 10107 U + a través de 10133 U +. En el ejemplo siguiente se usa el <xref:System.Char.ConvertFromUtf32%2A> método para crear instancias de una cadena que representa cada número menores. Como la salida se muestra en el ejemplo, el <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> método devuelve el valor numérico correcto si se pasa el suplente alto de un número menores. Sin embargo, si se pasa al suplente bajo, considera que a solo el suplente bajo de forma aislada y devuelve -1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> se encuentra fuera del intervalo de índices válidos en <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene la categoría de Unicode de un carácter Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">El carácter Unicode para el que se obtiene la categoría de Unicode.</param>
        <summary>Obtiene la categoría de Unicode del carácter especificado.</summary>
        <returns>Un valor <see cref="T:System.Globalization.UnicodeCategory" /> que indica la categoría del carácter especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los caracteres Unicode se dividen en categorías. Categoría de un carácter es una de sus propiedades. Por ejemplo, un carácter puede ser una letra mayúscula, una letra minúscula, un número de dígitos decimales, un número de letra, una puntuación de conector, un símbolo matemático o un símbolo de moneda. La <xref:System.Globalization.UnicodeCategory> clase devuelve la categoría de un carácter Unicode. Para obtener más información sobre los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 El <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> método supone que `ch` corresponde a un único carácter lingüístico y devuelve su categoría. Esto significa que, para los pares suplentes, devuelve <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> en lugar de la categoría a la que pertenece el suplente. Por ejemplo, el alfabeto Ugaritic ocupa puntos del código U + 10380 para U + 1039F. En el ejemplo siguiente se usa el <xref:System.Char.ConvertFromUtf32%2A> método para crear instancias de una cadena que representa UGARITIC letra ALPA (U + 10380), que es la primera letra del alfabeto Ugaritic. Como la salida se muestra en el ejemplo, el <xref:System.Char.IsNumber%28System.Char%29> método `false` si se pasa el suplente alto o suplente bajo de este carácter.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Tenga en cuenta que <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> siempre devuelven el mismo <xref:System.Globalization.UnicodeCategory> valor como el <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> cuando se pasa un carácter determinado como un parámetro de método. El <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> método está diseñado para reflejar la versión actual del estándar Unicode. En cambio, aunque el <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> método normalmente refleja la versión actual del estándar Unicode, puede devolver la categoría de un carácter basándose en una versión anterior del estándar o puede devolver una categoría que difiera del estándar para conservar la compatibilidad con versiones anteriores.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">El objeto <see cref="T:System.String" /> que contiene el carácter Unicode para el que se obtiene la categoría de Unicode.</param>
        <param name="index">El índice del carácter Unicode para el que se obtiene la categoría de Unicode.</param>
        <summary>Obtiene la categoría de Unicode del carácter situado en el índice especificado de la cadena especificada.</summary>
        <returns>Un valor <see cref="T:System.Globalization.UnicodeCategory" /> que indica la categoría del carácter situado en el índice especificado de la cadena especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los caracteres Unicode se dividen en categorías. Categoría de un carácter es una de sus propiedades. Por ejemplo, un carácter puede ser una letra mayúscula, una letra minúscula, un número de dígitos decimales, un número de letra, una puntuación de conector, un símbolo matemático o un símbolo de moneda. La <xref:System.Globalization.UnicodeCategory> clase devuelve la categoría de un carácter Unicode. Para obtener más información sobre los caracteres Unicode, vea el [estándar Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Si el <xref:System.Char> objeto en la posición `index` es el primer carácter de un par suplente válido, el <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> método devuelve la categoría Unicode del par suplente en lugar de devolver <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Por ejemplo, el alfabeto Ugaritic ocupa puntos del código U + 10380 para U + 1039F. En el ejemplo siguiente se usa el <xref:System.Char.ConvertFromUtf32%2A> método para crear instancias de una cadena que representa UGARITIC letra ALPA (U + 10380), que es la primera letra del alfabeto Ugaritic. Como la salida se muestra en el ejemplo, el <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> método <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> si se pasa el suplente alto de este carácter, lo que indica que considera que el par suplente. Sin embargo, si se pasa el suplente bajo, considera que solo el suplente bajo de forma aislada y devuelve <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Tenga en cuenta que <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> método no devuelve siempre el mismo <xref:System.Globalization.UnicodeCategory> valor como el <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> cuando se pasa un carácter determinado como un parámetro de método. El <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> método está diseñado para reflejar la versión actual del estándar Unicode. En cambio, aunque el <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> método normalmente refleja la versión actual del estándar Unicode, puede devolver la categoría de un carácter basándose en una versión anterior del estándar o puede devolver una categoría que difiera del estándar para conservar la compatibilidad con versiones anteriores.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra los valores devueltos por cada método para diferentes tipos de caracteres.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> se encuentra fuera del intervalo de índices válidos en <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>