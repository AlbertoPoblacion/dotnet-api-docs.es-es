<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a4056ba8c53ff8a2667a467c531c16c69a54c122" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52362584" /></Metadata><TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona información de formato específica de la referencia cultural y los valores numéricos de análisis.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Globalization.NumberFormatInfo> clase contiene información específica de la referencia cultural que se utiliza al dar formato y analizar los valores numéricos. Esta información incluye el símbolo de moneda, el símbolo decimal, el símbolo de separador de grupos y los símbolos en busca de indicios positivos y negativos.  
  
-   [Instancias de un objeto NumberFormatInfo](#Instantiating)  
  
    -   [La referencia cultural actual](#Instantiating_Current)  
  
    -   [Para la referencia cultural](#Instantiating_Invariant)  
  
    -   [Para una referencia cultural específica](#Instantiating_Specific)  
  
    -   [Para una referencia cultural neutra](#Instantiating_Neutral)  
  
-   [NumberFormatInfo y dinámico de datos](#dynamic)  
  
-   [IFormatProvider, NumberFormatInfo y el formato numérico](#formatProvider)  
  
-   [Cadenas de formato y propiedades NumberFormatInfo](#properties)  
  
-   [Modificar propiedades NumberFormatInfo](#modifying)  
  
    -   [Modificar el símbolo de moneda y el patrón](#currency)  
  
    -   [Dar formato a un número de identificación nacional](#id)  
  
-   [Análisis de cadenas numéricas](#parsing)  
  
    -   [Analizar cadenas de usuario](#ParseUser)  
  
    -   [Serializar y deserializar datos numéricos](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>Instancias de un objeto NumberFormatInfo  
 Puede crear instancias de un <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de formato de la referencia cultural actual, la referencia cultural invariable, una referencia cultural específica o una referencia cultural neutra.  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>Instancias de un objeto NumberFormatInfo para la referencia cultural actual  
 Puede crear instancias de un <xref:System.Globalization.NumberFormatInfo> objeto para la referencia cultural del subproceso actual en cualquiera de las maneras siguientes. En cada caso, el valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de solo lectura.  
  
-   Recuperando un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural del subproceso actual de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propiedad y recuperar el <xref:System.Globalization.CultureInfo> objeto desde su <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propiedad.  
  
-   Recuperando el <xref:System.Globalization.NumberFormatInfo> objeto devuelto por la `static` (`Shared` en Visual Basic) <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> propiedad.  
  
-   Mediante una llamada a la <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> método con un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural actual.  
  
 El ejemplo siguiente utiliza estas tres maneras de crear <xref:System.Globalization.NumberFormatInfo> objetos que representan las convenciones de formato de la referencia cultural actual. También recupera el valor de la <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> propiedad para ilustrar que cada objeto es de solo lectura.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 Puede crear una escritura <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de la referencia cultural del subproceso actual en cualquiera de las maneras siguientes:  
  
-   Recuperando un <xref:System.Globalization.NumberFormatInfo> objeto en cualquiera de las maneras en que se muestra en el ejemplo de código anterior y llamar a la <xref:System.Globalization.NumberFormatInfo.Clone%2A> método en el valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto. Esto crea una copia del original <xref:System.Globalization.NumberFormatInfo> objeto, salvo que su <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> propiedad es `false`.  
  
-   Mediante una llamada a la <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> método para crear un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural actual y, a continuación, usar su <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propiedad para recuperar el <xref:System.Globalization.NumberFormatInfo> objeto.  
  
 El ejemplo siguiente muestra estas dos maneras de crear instancias de un <xref:System.Globalization.NumberFormatInfo> de objetos y muestra el valor de su <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> propiedad para ilustrar que el objeto no es de solo lectura.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 Tenga en cuenta que el sistema operativo Windows permite al usuario reemplazar algunas de las <xref:System.Globalization.NumberFormatInfo> valores de propiedad usados en las operaciones a través de análisis y formato numérico el **región e idioma** elemento en el Panel de Control. Por ejemplo, podría elegir un usuario cuya referencia cultural es inglés (Estados Unidos) mostrar los valores de moneda como 1.1 USD en lugar del predeterminado de $1.1. El <xref:System.Globalization.NumberFormatInfo> los objetos recuperados de las maneras en que se describe anteriormente reflejan todos estas invalidaciones del usuario. Si esto es indeseable, puede crear un <xref:System.Globalization.NumberFormatInfo> objeto que no refleje las invalidaciones del usuario (y que también es lectura/escritura en lugar de solo lectura) mediante una llamada a la <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> constructor y proporcionar un valor de `false` para el `useUserOverride` argumento. El ejemplo siguiente proporciona una ilustración de un sistema cuya referencia cultural actual es inglés (Estados Unidos) y cuyos símbolos de moneda se ha cambiado el valor predeterminado es $ a USD.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 Si el <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> propiedad está establecida en `true`, las propiedades <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>, y <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> también se recuperan de la configuración del usuario. Si la configuración de usuario no es compatible con la referencia cultural asociada con el <xref:System.Globalization.CultureInfo> objeto (por ejemplo, si el calendario seleccionado no es uno de los calendarios enumerados por la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> propiedad), los resultados de los métodos y los valores de las propiedades son sin definir.  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>Instancias de un objeto NumberFormatInfo para la referencia cultural  
 La referencia cultural invariable representa una referencia cultural que no tiene en cuenta la referencia cultural. Se basa en el idioma inglés, pero no en cualquier angloparlante país o región determinados. Aunque los datos de referencias culturales específicas pueden ser dinámicos y se pueden cambiar para reflejar las convenciones culturales nuevo o las preferencias del usuario, no cambian los datos de la referencia cultural invariable. Un <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de formato de la referencia cultural se puede usar para dar formato a las operaciones en el resultado de las cadenas no deberían variar según la referencia cultural.  
  
 Puede crear instancias de un <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de formato de la referencia cultural de las maneras siguientes:  
  
-   Recuperando el valor de la <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> propiedad. El valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de solo lectura.  
  
-   Recuperando el valor de la <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propiedad desde la <xref:System.Globalization.CultureInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> propiedad. El valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de solo lectura.  
  
-   Mediante una llamada sin parámetros <xref:System.Globalization.NumberFormatInfo.%23ctor%2A> constructor de clase. El valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de lectura/escritura.  
  
 El ejemplo siguiente usa cada uno de estos métodos para crear instancias de un <xref:System.Globalization.NumberFormatInfo> objeto que representa la referencia cultural invariable. A continuación, indica si el objeto es de solo lectura  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>Instancias de un objeto NumberFormatInfo para una referencia cultural específica  
 Una referencia cultural específica representa el idioma que se habla en un determinado país o región. Por ejemplo, en-US es una referencia cultural que representa el idioma inglés de Estados Unidos y en-CA es una referencia cultural que representa el idioma inglés de Canadá. Puede crear instancias de un <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de formato de una referencia cultural específica de las maneras siguientes:  
  
-   Mediante una llamada a la <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType> método y recuperar el valor devuelto del <xref:System.Globalization.CultureInfo> del objeto <xref:System.Globalization.CultureInfo.NumberFormat%2A> propiedad. El valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de solo lectura.  
  
-   Al pasar un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo <xref:System.Globalization.NumberFormatInfo> objeto que quiera recuperar a estático <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> método. El valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de lectura/escritura.  
  
-   Mediante una llamada a la <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> método y recuperar el valor devuelto del <xref:System.Globalization.CultureInfo> del objeto <xref:System.Globalization.CultureInfo.NumberFormat%2A> propiedad. El valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de lectura/escritura.  
  
-   Llamando a uno de los <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> constructores de clase y recuperar el valor devuelto del <xref:System.Globalization.CultureInfo> del objeto <xref:System.Globalization.CultureInfo.NumberFormat%2A> propiedad. El valor devuelto <xref:System.Globalization.NumberFormatInfo> objeto es de lectura/escritura.  
  
 El ejemplo siguiente utiliza estas cuatro formas de crear un <xref:System.Globalization.NumberFormatInfo> objeto que refleja las convenciones de formato de la referencia cultural Indonesio (Indonesia). También indica si cada objeto es de solo lectura.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>Instancias de un objeto NumberFormatInfo para una referencia cultural neutra  
 Una referencia cultural neutra representa una referencia cultural o idioma que es independiente de un país o región. Suele ser el elemento primario de referencias culturales específicas de uno o más. Por ejemplo, fr es una referencia cultural neutra para el idioma francés y el elemento primario de la referencia cultural fr-FR. Crear un <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de formato de una referencia cultural neutra de la misma manera que cree un <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de formato de una referencia cultural concreta.  
  
> [!NOTE]
>  En el [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] y versiones anteriores, al intentar recuperar un <xref:System.Globalization.NumberFormatInfo> objeto que refleja las convenciones de formato de una referencia cultural neutra produce un <xref:System.NotSupportedException> excepción.  
  
 Sin embargo, dado que es independiente de un país o región específico, una referencia cultural neutra carece de información de formato específica de la referencia cultural. En lugar de rellenar el <xref:System.Globalization.NumberFormatInfo> objeto con valores genéricos, .NET Framework devuelve un <xref:System.Globalization.NumberFormatInfo> que refleja las convenciones de formato de una determinada referencia cultural que es un elemento secundario de la referencia cultural neutra. Por ejemplo, el <xref:System.Globalization.NumberFormatInfo> para la referencia cultural neutra en refleja las convenciones de formato de la referencia cultural en-US, de objeto y el <xref:System.Globalization.NumberFormatInfo> de objeto para la referencia cultural fr refleja las convenciones de formato de la referencia cultural fr-FR.  
  
 Puede usar código similar al siguiente para determinar las convenciones de formato de la referencia cultural concreta representa cada referencia cultural neutra.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>NumberFormatInfo y dinámico de datos  
 Los datos específicos de referencias culturales para dar formato a valores numéricos proporcionados por el <xref:System.Globalization.NumberFormatInfo> clase es dinámica, al igual que los datos de referencia culturales proporcionados por el <xref:System.Globalization.CultureInfo> clase. No debe hacer ninguna suposición sobre la estabilidad de los valores de <xref:System.Globalization.NumberFormatInfo> objetos que están asociados a determinado <xref:System.Globalization.CultureInfo> objetos. Solo los datos proporcionados por la referencia cultural y los correspondientes <xref:System.Globalization.NumberFormatInfo> objeto es estable. Pueden cambiar a otros datos entre sesiones de aplicación, o incluso en una sola sesión, por las razones siguientes:  
  
-   **Actualizaciones del sistema.** Cambian las preferencias culturales, como el símbolo de moneda o los formatos de moneda con el tiempo. Cuando esto sucede, Windows Update incluye los cambios realizados en el <xref:System.Globalization.NumberFormatInfo> valor de propiedad para una referencia cultural determinada.  
  
-   **Referencias culturales de reemplazo.** La <xref:System.Globalization.CultureAndRegionInfoBuilder> clase puede utilizarse para reemplazar los datos de una referencia cultural existente.  
  
-   **Cambios en cascada en los valores de propiedad.** Pueden cambiar varias propiedades relacionadas con la referencia cultural en tiempo de ejecución, a su vez, lo que hace que <xref:System.Globalization.NumberFormatInfo> datos para cambiar. Por ejemplo, la referencia cultural actual se puede cambiar mediante programación o a través de la acción del usuario. Cuando esto sucede, el <xref:System.Globalization.NumberFormatInfo> objeto devuelto por la <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> propiedad cambia a un objeto asociado a la referencia cultural actual.  
  
-   **Preferencias del usuario.** Los usuarios de la aplicación podrían invalidar algunos de los valores asociados con la referencia cultural actual del sistema a través de las opciones de idioma y región en el Panel de Control. Por ejemplo, los usuarios podrían elegir otro símbolo de moneda o un símbolo de separador de decimales diferente. Si el <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> propiedad está establecida en `true` (su valor predeterminado), las propiedades de la <xref:System.Globalization.NumberFormatInfo> objeto también se recuperan de la configuración del usuario.  
  
 A partir de .NET Framework 2.0, todas las propiedades que se puede invalidar el usuario de un <xref:System.Globalization.NumberFormatInfo> objetos se inicializan cuando se crea el objeto. Hay una posibilidad de incoherencia, porque ninguna creación de objeto ni el proceso de reemplazo de usuario es atómico y pueden cambiar los valores pertinentes durante la creación del objeto. Sin embargo, estas incoherencias deben ser muy poco habitual.  
  
 Puede controlar si las invalidaciones del usuario se reflejan en <xref:System.Globalization.NumberFormatInfo> objetos que representan la misma referencia cultural que la referencia cultural del subproceso actual. La tabla siguiente enumeran las formas en que un <xref:System.Globalization.NumberFormatInfo> objeto se pueden recuperar e indica si el objeto resultante refleja invalidaciones del usuario.  
  
|Origen de un objeto CultureInfo y NumberFormatInfo|Refleja las invalidaciones del usuario|  
|-------------------------------------------------------|-----------------------------|  
|Propiedad`CultureInfo.CurrentCulture.NumberFormat` |Sí|  
|Propiedad<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> |Sí|  
|Método <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>|Sí|  
|Método <xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType>|No|  
|Constructor <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>|Sí|  
|Constructor <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>|Depende de valor de `useUserOverride` parámetro|  
  
 A menos que haya una razón de peso para no hacerlo, debe respetar las invalidaciones del usuario cuando se usa el <xref:System.Globalization.NumberFormatInfo> objetos en las aplicaciones cliente para dar formato y analizar la entrada de usuario o para mostrar datos numéricos. Para las aplicaciones de servidor o aplicaciones desatendidas, no debe respetar invalidaciones del usuario. Sin embargo, si está utilizando el <xref:System.Globalization.NumberFormatInfo> objeto ya sea explícitamente o implícitamente para conservar datos numéricos en forma de cadena, debería usar un <xref:System.Globalization.NumberFormatInfo> debe especificar el objeto que refleja las convenciones de formato de la referencia cultural invariable, o bien un cadena de formato numérico personalizado que usa independientemente de la referencia cultural.  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider, NumberFormatInfo y el formato numérico  
 Un <xref:System.Globalization.NumberFormatInfo> objeto sirve implícita o explícitamente numérico todas las operaciones de formato. Estos incluyen llamadas a los métodos siguientes:  
  
-   Todos los formato numérico de los métodos, como <xref:System.Int32.ToString%2A?displayProperty=nameWithType>, <xref:System.Double.ToString%2A?displayProperty=nameWithType>, y <xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType>.  
  
-   El método de formato compuesto principal <xref:System.String.Format%2A?displayProperty=nameWithType>.  
  
-   Otro elemento compuesto, como aplicar formato a los métodos, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> y <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Todas las operaciones de formato numéricas hacer uso de un <xref:System.IFormatProvider> implementación. El <xref:System.IFormatProvider> interfaz incluye un único método, <xref:System.IFormatProvider.GetFormat%28System.Type%29>. Se trata de un método de devolución de llamada que se pasa un <xref:System.Type> objeto que representa el tipo necesario para proporcionar información de formato. El método es responsable de devolver una instancia de ese tipo o `null`, si no puede proporcionar una instancia del tipo. .NET Framework proporciona dos <xref:System.IFormatProvider> implementaciones para dar formato a números:  
  
-   La <xref:System.Globalization.CultureInfo> clase, que representa una referencia cultural concreta (o un idioma específico en un país o región específico). En un operación de formato numérico el <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType> método devuelve el <xref:System.Globalization.NumberFormatInfo> objeto asociado con su <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propiedad.  
  
-   La <xref:System.Globalization.NumberFormatInfo> clase, que proporciona información sobre las convenciones de formato de la referencia cultural asociada. El <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType> método devuelve una instancia de sí mismo.  
  
 Si un <xref:System.IFormatProvider> implementación no se proporciona a un método de formato de forma explícita, una <xref:System.Globalization.CultureInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> se utiliza la propiedad que representa la referencia cultural del subproceso actual.  
  
 El ejemplo siguiente ilustra la relación entre el <xref:System.IFormatProvider> interfaz y la <xref:System.Globalization.NumberFormatInfo> clase para dar formato a las operaciones definiendo un personalizado <xref:System.IFormatProvider> implementación. Su <xref:System.IFormatProvider.GetFormat%2A> método muestra el nombre de tipo del objeto solicitado por la operación de formato. Si está solicitando la interfaz de un <xref:System.Globalization.NumberFormatInfo> objeto, este método proporciona la <xref:System.Globalization.NumberFormatInfo> objeto para la referencia cultural del subproceso actual. Como la salida muestra el ejemplo, el <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> las solicitudes de métodos un <xref:System.Globalization.NumberFormatInfo> objeto para proporcionar información de formato, mientras que el <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> las solicitudes de métodos <xref:System.Globalization.NumberFormatInfo> y <xref:System.Globalization.DateTimeFormatInfo> objetos, así como un <xref:System.ICustomFormatter> implementación de.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 Si un <xref:System.IFormatProvider> implementación no se proporciona explícitamente en un llamada de método, las llamadas al método de formato numérico el `CultureInfo.CurrentCulture.GetFormat` método, que devuelve el <xref:System.Globalization.NumberFormatInfo> objeto que corresponde a la referencia cultural del subproceso actual.  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>Cadenas de formato y propiedades NumberFormatInfo  
 Cada operación de formato usa un estándar o una cadena de formato numérico personalizado para generar una cadena de resultado de un número. En algunos casos, el uso de una cadena de formato para generar una cadena de resultado es explícito, como en el ejemplo siguiente. Este código llama a la <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para convertir un <xref:System.Decimal> valor con un número diferente de representaciones de cadena mediante el uso de las convenciones de formato de la referencia cultural en-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 En otros casos, el uso de una cadena de formato está implícito. Por ejemplo, en las siguientes llamadas de método en el valor predeterminado o sin parámetros <xref:System.Decimal.ToString?displayProperty=nameWithType> método, el valor de la <xref:System.Decimal> instancia esté formateada con el especificador de formato general ("G") y las convenciones de la referencia cultural actual, que en este caso es el referencia cultural en-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 Cada cadena de formato numérico estándar usa uno o varios <xref:System.Globalization.NumberFormatInfo> propiedades para determinar el patrón o los símbolos utilizados en la cadena de resultado. De forma similar, cada especificador de formato numérico personalizado con la excepción "0" y "#" inserción símbolos en la cadena de resultado que se definen mediante <xref:System.Globalization.NumberFormatInfo> propiedades. La siguiente tabla enumera el estándar y los especificadores de formato numérico personalizado y sus asociados <xref:System.Globalization.NumberFormatInfo> propiedades.  Para cambiar la apariencia de la cadena de resultado de una referencia cultural determinada, consulte el [propiedades NumberFormatInfo modificar](#modifying) sección. Para obtener información detallada sobre el uso de estos especificadores de formato, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas con formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
|Especificador de formato|Propiedades asociadas|  
|----------------------|---------------------------|  
|"C" o "c" (especificador de formato de moneda)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, para definir el número predeterminado de dígitos fraccionarios.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, para definir el símbolo del separador decimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, para definir el grupo o miles separador.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>, para definir los tamaños de grupos enteros.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>, para definir el modelo de valores de divisa negativos.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>, para definir el modelo de valores de divisa positivos.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, para definir el símbolo de moneda.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo.|  
|"D" o "d" (especificador de formato decimal)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo.|  
|"E" o "e" (especificador de formato exponencial o científicos)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo de la mantisa y el exponente.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, para definir el símbolo del separador decimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, para definir el símbolo de signo positivo en el exponente.|  
|"F" o "f" (especificador de formato de punto fijo)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, para definir el número predeterminado de dígitos fraccionarios.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, para definir el símbolo del separador decimal.|  
|"G" o "g" (especificador de formato general)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, para definir el símbolo del separador decimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, para definir el símbolo de signo positivo para cadenas de resultado en formato exponencial.|  
|"N" o "n" (especificador de formato number)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, para definir el número predeterminado de dígitos fraccionarios.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, para definir el símbolo del separador decimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, para definir el símbolo del separador (miles) de grupo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, para definir el número de dígitos enteros en un grupo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>, para definir el formato de los valores negativos.|  
|"P" o "p" (especificador de formato de porcentaje)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>, para definir el número predeterminado de dígitos fraccionarios.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>, para definir el símbolo del separador decimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, para definir el símbolo de separador de grupo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>, para definir el número de dígitos enteros en un grupo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>, para definir la posición del símbolo de porcentaje y del símbolo negativo para los valores negativos.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>, para definir la posición del símbolo de porcentaje para los valores positivos.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, para definir el símbolo de porcentaje.|  
|"R" o "r" (especificador de formato de ida y vuelta)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, para definir el símbolo del separador decimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, para definir el símbolo de signo positivo en un exponente.|  
|"X" o "x" (especificador de formato hexadecimal)|Ninguno.|  
|"." (especificador de formato personalizado del separador decimal)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, para definir el símbolo del separador decimal.|  
|"," (especificador de formato personalizado del separador de grupo)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, para definir el símbolo de separador de grupos (miles).|  
|"%" (especificador de formato personalizado de marcador de posición de porcentaje)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, para definir el símbolo de porcentaje.|  
|"‰" (por el especificador de formato personalizado de marcador de posición de millar)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>, para definir el símbolo de por mil.|  
|"E" (especificador de formato personalizado de una notación exponencial)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, para definir el símbolo de signo negativo de la mantisa y el exponente.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, para definir el símbolo de signo positivo en el exponente.|  
  
 Tenga en cuenta que el <xref:System.Globalization.NumberFormatInfo> clase incluye un <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> propiedad que especifica la bases 10 dígitos utilizados por una referencia cultural concreta. Sin embargo, la propiedad no se utiliza para dar formato a las operaciones; solo los dígitos latinos básicos del 0 (u+0030) a través de 9 (u+0039) se usan en la cadena de resultado. Además, para <xref:System.Single> y <xref:System.Double> valores de `NaN`, `PositiveInfinity`, y `NegativeInfinity`, la cadena de resultado consta únicamente de los símbolos definidos por el <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, y <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> propiedades , respectivamente.  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>Modificar propiedades NumberFormatInfo  
 Puede modificar las propiedades de un <xref:System.Globalization.NumberFormatInfo> objeto para personalizar la cadena de resultado generados en un operación de formato numérico. Para hacerlo:  
  
1.  Crear una copia de lectura/escritura de un <xref:System.Globalization.NumberFormatInfo> objeto cuyas convenciones de formato que desea modificar. Para obtener más información, consulte el [instancias de un objeto NumberFormatInfo](#Instantiating) sección.  
  
2.  Modifique la propiedad o propiedades que se utilizan para generar la cadena de resultado deseado. Para obtener información sobre el uso de métodos de formato cómo <xref:System.Globalization.NumberFormatInfo> las propiedades para definir cadenas de resultado, consulte el [cadenas de formato y propiedades NumberFormatInfo](#properties) sección.  
  
3.  Usar personalizado <xref:System.Globalization.NumberFormatInfo> objeto como el <xref:System.IFormatProvider> argumento en las llamadas a métodos de formato.  
  
> [!NOTE]
>  En lugar de modificar los valores de propiedad de la referencia cultural dinámicamente cada vez que se inicia una aplicación, puede usar el <xref:System.Globalization.CultureAndRegionInfoBuilder> clase para definir una referencia cultural personalizada (una referencia cultural que tiene un nombre único y que complementa referencias culturales existentes) o un reemplazo referencia cultural (uno que se utiliza en lugar de una referencia cultural específica).  
  
 Las secciones siguientes proporcionan algunos ejemplos.  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>Modificar el símbolo de moneda y el patrón  
 En el ejemplo siguiente se modifica un <xref:System.Globalization.NumberFormatInfo> objeto que representa las convenciones de formato de la referencia cultural en-US. Asigna el símbolo de divisa ISO 4217 para la <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> propiedad y define un patrón para los valores de moneda que consta del símbolo de moneda seguido por un espacio y un valor numérico.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>Dar formato a un número de identificación nacional  
 Muchos de los números de identificación nacional constar únicamente de dígitos y por lo que fácilmente se puede dar formato mediante la modificación de las propiedades de un <xref:System.Globalization.NumberFormatInfo> objeto. Por ejemplo, un número de seguridad social de Estados Unidos consta de 9 dígitos que se organizan de esta forma: `XXX-XX-XXXX`. En el siguiente ejemplo se da por supuesto que los números del seguro social se almacenan como valores de entero y les da formato de forma adecuada.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>Análisis de cadenas numéricas  
 Análisis implica convertir la representación de cadena de un número en un número. Cada tipo numérico en .NET Framework incluye dos métodos sobrecargados de análisis: `Parse` y `TryParse`. El `Parse` método convierte una cadena en un número y produce una excepción si se produce un error en la conversión. El `TryParse` método convierte una cadena en un número, se asigna el número a un `out` argumento y devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente.  
  
 Utilizan los métodos de análisis implícita o explícitamente un <xref:System.Globalization.NumberStyles> valor de enumeración para determinar qué elementos de estilo (como separadores de grupo, un separador decimal o un símbolo de moneda) pueden estar presentes en una cadena de la operación de análisis se realice correctamente. Si un <xref:System.Globalization.NumberStyles> valor no es se proporciona en la llamada al método, el valor predeterminado es un <xref:System.Globalization.NumberStyles> valor que incluye el <xref:System.Globalization.NumberStyles.Float> y <xref:System.Globalization.NumberStyles.AllowThousands> marcas, que especifica que la cadena analizada puede incluir los símbolos de grupo, un separador decimal, un signo negativo, y caracteres de espacio en blanco, o puede ser la representación de cadena de un número en notación exponencial.  
  
 Utilizan los métodos de análisis también implícita o explícitamente un <xref:System.Globalization.NumberFormatInfo> objeto que define los símbolos específicos y los patrones que puede aparecer en la cadena que se puede analizar. Si un <xref:System.Globalization.NumberFormatInfo> objeto no se proporciona, el valor predeterminado es el <xref:System.Globalization.NumberFormatInfo> para la referencia cultural del subproceso actual. Para obtener más información sobre el análisis, vea los métodos de análisis individuales, como <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>, <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>, <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>, y <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>.  
  
 En el ejemplo siguiente se ilustra la naturaleza de la referencia cultural de análisis de cadenas. Se intenta analizar una cadena que incluye miles separadores mediante las convenciones de en-US, fr-FR y referencias culturales invariables. No se puede analizar en el en-US y referencias culturales invariables una cadena que incluye la coma como separador de grupos y el período como un separador decimal no se puede analizar en la referencia cultural fr-FR y una cadena con white space como un separador de grupo y una coma como separador decimal.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 Análisis por lo general se produce en dos contextos:  
  
-   Como una operación que está diseñado para convertir la entrada de usuario en un valor numérico.  
  
-   Como una operación que se ha diseñado para un valor numérico; de ida y vuelta es decir, para deserializar un valor numérico que anteriormente se serializó como una cadena.  
  
 Las secciones siguientes tratan estas dos operaciones con mayor detalle.  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>Analizar cadenas de usuario  
 Cuando se va a analizar cadenas numéricas escritas por el usuario, siempre debe crear un <xref:System.Globalization.NumberFormatInfo> objeto que refleja la configuración cultural del usuario. Para obtener información acerca de cómo crear una instancia de un <xref:System.Globalization.NumberFormatInfo> objeto que refleje las personalizaciones del usuario, consulte el [NumberFormatInfo y dinámico de datos](#dynamic) sección.  
  
 El ejemplo siguiente ilustra la diferencia entre una operación de análisis que refleja la configuración cultural del usuario y otra que no lo hace. En este caso, la referencia cultural predeterminada del sistema es en-US, pero el usuario ha definido "," como el símbolo de decimales y "." como separador de grupo en el Panel de Control, **región e idioma**. Normalmente, estos símbolos se invierten en la referencia cultural en-US de forma predeterminada. Cuando el usuario escribe una cadena que refleja la configuración de usuario y la cadena se analiza un <xref:System.Globalization.NumberFormatInfo> objeto que también refleja la configuración de usuario (reemplazos), la operación de análisis devuelve un resultado correcto. Sin embargo, cuando se analiza la cadena mediante un <xref:System.Globalization.NumberFormatInfo> objeto que refleja la configuración de la referencia cultural en-US estándar, el símbolo de comas para un separador de grupos de errores y se devuelve un resultado incorrecto.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>Serializar y deserializar datos numéricos  
 Cuando los datos numéricos se serializa en formato de cadena y más adelante puede deserializar y analizan, las cadenas deben genera y se analizan mediante las convenciones de la referencia cultural invariable. Las operaciones de formato y análisis nunca deben reflejar las convenciones de una referencia cultural concreta. Si se usa la configuración de la referencia cultural específica, la portabilidad de los datos está estrictamente limitada; se puede deserializar correctamente sólo en un subproceso cuya configuración específicas de referencias culturales es idénticos a los del subproceso en el que se van a serializar. En algunos casos, esto significa que los datos no se pueden incluso se puede deserializar correctamente en el mismo sistema en el que se van a serializar.  
  
 El ejemplo siguiente muestra lo que puede suceder cuando se infringe este principio. En una matriz de valores de punto flotante se convierten en cadenas cuando el subproceso actual usa la configuración de la referencia cultural específica de la referencia cultural en-US. Un subproceso que usa la configuración cultural de la referencia cultural en-GB, a continuación, analiza los datos. En este caso, aunque cada operación de análisis se realiza correctamente, los datos no ida y vuelta correctamente y se producen daños de datos. En otros casos, se producirá un error en una operación de análisis y un <xref:System.FormatException> podría ser una excepción.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo recuperar un <xref:System.Globalization.NumberFormatInfo> objeto correspondiente <xref:System.Globalization.CultureInfo> de objetos y usar el objeto recuperado a información para la referencia cultural concreta de formato de número de consultas.  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
    <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">Cadenas con formato numérico personalizado</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Globalization.NumberFormatInfo" /> en la que se puede escribir y que es independiente de la referencia cultural (invariable).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la aplicación necesita el formato definido por el usuario, se pueden modificar las propiedades de la nueva instancia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia superficial del objeto <see cref="T:System.Globalization.NumberFormatInfo" />.</summary>
        <returns>Nuevo objeto copiado del objeto original <see cref="T:System.Globalization.NumberFormatInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El clon es grabable aunque original <xref:System.Globalization.NumberFormatInfo> objeto es de solo lectura. Por lo tanto, se pueden modificar las propiedades del clon con patrones definido por el usuario.  
  
 Una copia superficial de un objeto es una copia del objeto únicamente. Si el objeto contiene referencias a otros objetos, la copia superficial no creará copias de los objetos que se hace referencia. En su lugar, hará referencia a los objetos originales. Por otro lado, una copia en profundidad de un objeto crea una copia del objeto y una copia de todo lo que hace referencia directa o indirectamente por ese objeto. En el caso de un <xref:System.Globalization.NumberFormatInfo> objeto, una copia superficial es suficiente para copiar todas las propiedades de instancia, como todas las propiedades que devuelven referencias a objetos `static` (`Shared` en Visual Basic).  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Globalization.NumberFormatInfo.Clone%2A> método para crear una copia de lectura/escritura de un <xref:System.Globalization.NumberFormatInfo> objeto que representa el convenciones de la referencia cultural del subproceso actual de formato numérico.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de posiciones decimales que se van a utilizar en valores de divisa.</summary>
        <value>Número de posiciones decimales que se van a utilizar en valores de divisa. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> propiedad se utiliza con la cadena de formato estándar "C" sin un especificador de precisión en las operaciones de formato numérico. Define el número predeterminado de dígitos fraccionarios que aparecen después del separador decimal. Este valor se reemplaza si se usa un especificador de precisión. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> propiedad.  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se está estableciendo en un valor menor que 0 o mayor que 99.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que se va a utilizar como separador decimal en valores de divisa.</summary>
        <value>Cadena que se va a utilizar como separador decimal en valores de divisa. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor inicial de esta propiedad se deriva de la configuración de la **región e idioma** elemento en el Panel de Control.  
  
 El <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> propiedad se utiliza con la cadena de formato estándar "C" para definir el símbolo que separa el entero de dígitos fraccionarios. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> propiedad.  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <exception cref="T:System.ArgumentException">La propiedad se establece en una cadena vacía.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que separa grupos de dígitos a la izquierda de la coma decimal en valores de divisa.</summary>
        <value>Cadena que separa grupos de dígitos a la izquierda de la coma decimal en valores de divisa. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor inicial de esta propiedad se deriva de la configuración de la **Regional e idioma** elemento en el Panel de Control.  
  
 El <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> propiedad se utiliza con la cadena de formato estándar "C" para definir el símbolo que separa grupos de dígitos enteros. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> propiedad.  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de dígitos en cada grupo a la izquierda de la coma decimal en valores de divisa.</summary>
        <value>Número de dígitos en cada grupo a la izquierda de la coma decimal en valores de divisa. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es una matriz unidimensional con un único elemento, que se establece en 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> propiedad se utiliza con la cadena de formato estándar "C" para definir el número de dígitos que aparecen en grupos enteros. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md). Todos los elementos de la matriz unidimensional deben ser un entero comprendido entre 1 y 9. El último elemento puede ser 0.  
  
 El primer elemento de la matriz define el número de elementos en el grupo de dígitos inmediatamente a la izquierda de menos significativo el <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>. Cada elemento subsiguiente hace referencia al siguiente grupo significativo de dígitos a la izquierda del grupo anterior. Si es el último elemento de la matriz no es 0, los dígitos restantes se agrupan según el último elemento de la matriz. Si el último elemento es 0, no se agrupan los dígitos restantes.  
  
 Por ejemplo, si la matriz contiene {3, 4, 5}, se agrupan los dígitos similar a "$55,55555,55555,55555,4444,333.00". Si la matriz contiene {3, 4, 0}, los dígitos se agrupan similar a "$55555555555555555,4444,333.00".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> propiedad.  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La propiedad se establece y la matriz contiene una entrada que es menor que 0 o mayor que 9.  
  
O bien 
La propiedad se establece y la matriz contiene una entrada distinta a la última entrada que se establece en 0.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el modelo de formato para los valores de divisa negativos.</summary>
        <value>Modelo de formato para los valores de divisa negativos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es 0, que representa "($n)", donde "$" es <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> y <paramref name="n" /> es un número.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> propiedad se utiliza con la cadena de formato estándar "C" para definir el patrón de valores de divisa negativos. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md). Esta propiedad tiene uno de los valores en la tabla siguiente. El símbolo "$" es el <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, el símbolo "-" es el <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, y `n` es un número.  
  
|Valor|Patrón asociado|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$-n|  
|3|$n-|  
|4|(n$)|  
|5|-n$|  
|6|n$|  
|7|$-n|  
|8|$ - n|  
|9|-n $|  
|10|$-n|  
|11|$ n-|  
|12|$ - n|  
|13|n - $|  
|14|(n$)|  
|15|(n $)|  
  
   
  
## Examples  
 El ejemplo siguiente se muestra cómo el <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> propiedad define el formato de los valores de divisa negativos.  Recupera todas las referencias culturales específicas que se definen en el equipo host y se muestra cada referencia cultural <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> formato de valor de propiedad, su patrón asociado y un número como valor de moneda.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se está estableciendo en un valor menor que 0 o mayor que 15.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el modelo de formato para los valores de divisa positivos.</summary>
        <value>Modelo de formato para los valores de divisa positivos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es 0, que representa "$n", donde "$" es <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> y <paramref name="n" /> es un número.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> propiedad se utiliza con la cadena de formato estándar "C" para definir el patrón de valores de divisa positivos. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md). Esta propiedad tiene uno de los valores en la tabla siguiente. El símbolo "$" es el <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> y `n` es un número.  
  
|Valor|Patrón asociado|  
|-----------|------------------------|  
|0|$n|  
|1|n$|  
|2|$ n|  
|3|$ n|  
  
 Tenga en cuenta que el patrón no es compatible con un signo positivo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se está estableciendo en un valor menor que 0 o mayor que 3.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que se va a utilizar como símbolo de divisa.</summary>
        <value>Cadena que se va a usar como símbolo de divisa. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "¤".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena asignada a la <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> propiedad se incluye en la cadena de resultado cuando se da formato a un valor numérico con la "C" [cadena de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 El ejemplo siguiente muestra el símbolo de moneda para la referencia cultural actual y usa la cadena de formato numérico estándar "C" para dar formato a un valor de divisa.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un <see cref="T:System.Globalization.NumberFormatInfo" /> de solo lectura que aplica formato a los valores basándose en la referencia cultural actual.</summary>
        <value><see cref="T:System.Globalization.NumberFormatInfo" /> de solo lectura que se basa en la referencia cultural del subproceso actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Recuperar un <xref:System.Globalization.NumberFormatInfo> objeto desde el <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> propiedad es equivalente a la recuperación de un <xref:System.Globalization.NumberFormatInfo> objeto desde el `CultureInfo.CurrentCulture.NumberFormat` propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente muestra que los objetos devueltos por la <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> y `CultureInfo.CurrentCulture.NumberFormat` propiedades son idénticas. A continuación, usa la reflexión para mostrar los valores de propiedad de la <xref:System.Globalization.NumberFormatInfo> objeto devuelto por la <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> propiedad en un sistema cuya referencia cultural actual es en-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberSignature Language="F#" Value="member this.DigitSubstitution : System.Globalization.DigitShapes with get, set" Usage="System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica cómo la interfaz gráfica de usuario muestra la forma de un dígito.</summary>
        <value>Uno de los valores de enumeración que especifica la forma del dígito específica de la referencia cultural.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  El <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A> propiedad está reservada para uso futuro. Actualmente, no se usa en operaciones actual de formato o análisis <xref:System.Globalization.NumberFormatInfo> objeto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Globalization.NumberFormatInfo" /> actual es de solo lectura.</exception>
        <exception cref="T:System.ArgumentException">El valor de una operación set no es un valor <see cref="T:System.Globalization.DigitShapes" /> válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="numberFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType"><see cref="T:System.Type" /> del servicio de formato requerido.</param>
        <summary>Obtiene un objeto del tipo especificado que proporciona un servicio de formato numérico.</summary>
        <returns>El <see cref="T:System.Globalization.NumberFormatInfo" />actual, si <paramref name="formatType" /> es el mismo que el tipo del <see cref="T:System.Globalization.NumberFormatInfo" /> actual; en caso contrario, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Format(String, IFormatProvider)` este método de invocación de métodos admitidos por los tipos de base de datos al actual <xref:System.Globalization.NumberFormatInfo> se pasa como el <xref:System.IFormatProvider> parámetro. Este método implementa <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.GetInstance formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider"><see cref="T:System.IFormatProvider" /> utilizado para obtener <see cref="T:System.Globalization.NumberFormatInfo" />.  
  
O bien 
 <see langword="null" /> para obtener <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</param>
        <summary>Obtiene el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> asociado al <see cref="T:System.IFormatProvider" /> especificado.</summary>
        <returns><see cref="T:System.Globalization.NumberFormatInfo" /> asociado al <see cref="T:System.IFormatProvider" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa la <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método `formatProvider` mediante <xref:System.Globalization.NumberFormatInfo> como parámetro de tipo. Si `formatProvider` es `null` o si <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> devuelve `null`, este método devuelve <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.  
  
 La aplicación obtiene un <xref:System.Globalization.NumberFormatInfo> objeto para una referencia cultural concreta utilizando uno de los métodos siguientes:  
  
-   A través de la <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propiedad.  
  
-   A través de la <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> método donde `provider` es un <xref:System.Globalization.CultureInfo>.  
  
 Un <xref:System.Globalization.NumberFormatInfo> se crea un objeto solo para la referencia cultural invariable o para referencias culturales específicas, pero no para referencias culturales neutras. Para obtener más información acerca de la referencia cultural invariable, referencias culturales específicas y las referencias culturales neutras, vea la <xref:System.Globalization.CultureInfo> clase.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Globalization.NumberFormatInfo" /> de solo lectura que es independiente de la referencia cultural (invariable).</summary>
        <value>Objeto de solo lectura que es independiente de la referencia cultural (invariable).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esto <xref:System.Globalization.NumberFormatInfo> objeto devuelto por esta propiedad no cambia, independientemente de la referencia cultural actual. Representa las convenciones de formato de la referencia cultural invariable, que es una referencia cultural asociada con el idioma inglés, pero no con cualquier país o región. La referencia cultural se usa para dar formato a las operaciones que son independientes de la referencia cultural o que generar cadenas de resultado adecuadas para su presentación a través de varias referencias culturales.  
  
   
  
## Examples  
 El ejemplo siguiente muestra los valores de propiedad predeterminados de la <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>.  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si este objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</summary>
        <value>Es <see langword="true" /> si la interfaz <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Intenta realizar una asignación a una propiedad de solo lectura <xref:System.Globalization.NumberFormatInfo> hace que un <xref:System.InvalidOperationException>.  
  
 Puede llamar a la <xref:System.Globalization.NumberFormatInfo.Clone%2A> método para crear una lectura/escritura <xref:System.Globalization.NumberFormatInfo> objeto desde un objeto de sólo lectura, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NaNSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que representa el valor NaN (no un número) de IEEE.</summary>
        <value>La cadena que representa el valor NaN (no un número) de IEEE. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "NaN".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre valores NaN, vea <xref:System.Double> o <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NativeDigits : string[] with get, set" Usage="System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una matriz de cadenas de dígitos nativos equivalentes a los dígitos occidentales del 0 al 9.</summary>
        <value>Matriz de cadena que contiene los dígitos nativos equivalentes a los dígitos occidentales del 0 al 9. El valor predeterminado es una matriz con los elementos "0", "1", "2", "3", "4", "5", "6", "7", "8" y "9".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  El juego de caracteres especificado por el <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> propiedad no tiene ningún efecto en el análisis ni operaciones de formato. Solo los dígitos latinos básicos del 0 (u+0030) a través de 9 (u+0039) se usan al dar formato o analizar valores numéricos o valores de fecha y hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> propiedad.  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Globalization.NumberFormatInfo" /> actual es de solo lectura.</exception>
        <exception cref="T:System.ArgumentNullException">En una operación Set, el valor es <see langword="null" />.  
  
O bien 
En una operación Set, un elemento de la matriz de valores es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">En una operación Set, la matriz de valores no contiene 10 elementos.  
  
O bien 
En una operación Set, un elemento de la matriz de valores no contiene un único objeto <see cref="T:System.Char" /> o un par de objetos <see cref="T:System.Char" /> que componen un par suplente.  
  
O bien 
En una operación Set, un elemento de la matriz de valores no es un dígito numérico como el definido por el [estándar Unicode](https://go.microsoft.com/fwlink/?linkid=37123). Es decir, el dígito del elemento de matriz no contiene el valor de categoría general de Unicode <see langword="Number, Decimal Digit" /> (Nd).  
  
O bien 
En una operación Set, el valor numérico de un elemento de la matriz de valores no se corresponde con la posición del elemento en la matriz. Es decir, el elemento del índice 0, que es el primer elemento de la matriz, no tiene un valor numérico de 0, o el elemento del índice 1 no tiene un valor numérico de 1.</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que representa un infinito negativo.</summary>
        <value>Cadena que representa un infinito negativo. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "-Infinity".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre infinito negativo, vea <xref:System.Double> o <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que denota que el número asociado es negativo.</summary>
        <value>Cadena que denota que el número asociado es negativo. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "-".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad se usa en operaciones de análisis y formato. Para obtener más información sobre su uso en operaciones de formato, vea el [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas con formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md) temas.  
  
   
  
## Examples  
 El ejemplo siguiente se crea una instancia de una lectura y escritura <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural invariable y asigna el carácter de línea alta (203E) a su <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propiedad. A continuación, usa esto <xref:System.Globalization.CultureInfo> objeto para dar formato a una matriz de números de punto flotante negativo.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de posiciones decimales que se van a utilizar en valores numéricos.</summary>
        <value>Número de posiciones decimales que se van a utilizar en valores numéricos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> propiedad se utiliza con las cadenas de formato estándar "F" y "N" sin un especificador de precisión en las operaciones de formato numérico. Define el número predeterminado de dígitos fraccionarios que aparecen después del separador decimal. Este valor se reemplaza si se usa un especificador de precisión. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> propiedad.  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se está estableciendo en un valor menor que 0 o mayor que 99.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que se va a utilizar como separador decimal en valores numéricos.</summary>
        <value>Cadena que se va a utilizar como separador decimal en valores numéricos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> propiedad se utiliza con las cadenas de formato estándar "R", "F", "G", "N" y "E" para definir el símbolo que separa el entero de dígitos fraccionarios. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 El valor inicial de esta propiedad se deriva de la configuración de la **región e idioma** elemento en el Panel de Control.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> propiedad.  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <exception cref="T:System.ArgumentException">La propiedad se establece en una cadena vacía.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que separa grupos de dígitos a la izquierda de la coma decimal en valores numéricos.</summary>
        <value>La cadena que separa grupos de dígitos a la izquierda de la coma decimal en valores numéricos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> propiedad se utiliza con la cadena de formato estándar "N" para definir el símbolo que separa grupos de dígitos enteros. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 El valor inicial de esta propiedad se deriva de la configuración de la **región e idioma** elemento en el Panel de Control.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> propiedad.  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de dígitos en cada grupo a la izquierda de la coma decimal en valores numéricos.</summary>
        <value>Número de dígitos en cada grupo a la izquierda de la coma decimal en valores numéricos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es una matriz unidimensional con un único elemento, que se establece en 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> propiedad afecta al resultado de los valores numéricos que se ha dado formato mediante el uso de la "N". Si el formato numérico personalizado es cadena u otro formato numérico estándar en las cadenas se usan, el valor de la <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> propiedad se omite.  
  
 Todos los elementos de la matriz unidimensional deben ser un entero comprendido entre 1 y 9. El último elemento puede ser 0.  
  
 El primer elemento de la matriz define el número de elementos en el grupo de dígitos inmediatamente a la izquierda de menos significativo el <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>. Cada elemento subsiguiente hace referencia al siguiente grupo significativo de dígitos a la izquierda del grupo anterior. Si es el último elemento de la matriz no es 0, los dígitos restantes se agrupan según el último elemento de la matriz. Si el último elemento es 0, no se agrupan los dígitos restantes.  
  
 Por ejemplo, si la matriz contiene {3, 4, 5}, se agrupan los dígitos similar a "55,55555,55555,55555,4444,333.00". Si la matriz contiene {3, 4, 0}, los dígitos se agrupan similar a "55555555555555555,4444,333.00".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> propiedad.  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 El ejemplo siguiente imprime un valor utilizando diferentes <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> matrices.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La propiedad se establece y la matriz contiene una entrada que es menor que 0 o mayor que 9.  
  
O bien 
La propiedad se establece y la matriz contiene una entrada distinta a la última entrada que se establece en 0.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el modelo de formato para los valores numéricos negativos.</summary>
        <value>Modelo de formato para los valores numéricos negativos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> propiedad define el formato de los valores negativos con el formato con la cadena de formato numérico estándar "N". Esta propiedad tiene uno de los valores en la tabla siguiente. El símbolo "-" es el <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> y `n` es un número.  
  
|Valor|Patrón asociado|  
|-----------|------------------------|  
|0|(n)|  
|1|-n|  
|2|-n|  
|3|n-|  
|4|n-|  
  
 El valor predeterminado de la referencia cultural invariable devuelta por la <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> propiedad es 1, que representa "-n", donde *n* es un número.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un valor diferente <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> patrones.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se está estableciendo en un valor menor que 0 o mayor que 4.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de posiciones decimales que se van a utilizar en valores de porcentaje.</summary>
        <value>Número de posiciones decimales que se van a utilizar en valores de porcentaje. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> propiedad se utiliza con la cadena de formato estándar "P" sin un especificador de precisión en las operaciones de formato numérico. Define el número predeterminado de dígitos fraccionarios que aparecen después del separador decimal. Este valor se reemplaza si se usa un especificador de precisión. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> propiedad.  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se está estableciendo en un valor menor que 0 o mayor que 99.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que se va a utilizar como separador decimal en valores de porcentaje.</summary>
        <value>La cadena que se va a utilizar como separador decimal en valores de porcentaje. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es ".".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> propiedad se utiliza con la cadena de formato estándar "P" para definir el símbolo que separa el entero de dígitos fraccionarios. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> propiedad.  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <exception cref="T:System.ArgumentException">La propiedad se establece en una cadena vacía.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que separa grupos de dígitos a la izquierda de la coma decimal en valores de porcentaje.</summary>
        <value>Cadena que separa grupos de dígitos a la izquierda de la coma decimal en valores de porcentaje. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es ",".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> propiedad se utiliza con la cadena de formato estándar "P" para definir el símbolo que separa grupos de números enteros. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> propiedad.  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de dígitos en cada grupo a la izquierda de la coma decimal en valores de porcentaje.</summary>
        <value>Número de dígitos en cada grupo a la izquierda de la coma decimal en valores de porcentaje. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es una matriz unidimensional con un único elemento, que se establece en 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> propiedad se utiliza con la cadena de formato estándar "P" para definir el número de dígitos que aparecen en grupos enteros. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md). Todos los elementos de la matriz unidimensional deben ser un entero comprendido entre 1 y 9. El último elemento puede ser 0.  
  
 El primer elemento de la matriz define el número de elementos en el grupo de dígitos inmediatamente a la izquierda de menos significativo el <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>. Cada elemento subsiguiente hace referencia al siguiente grupo significativo de dígitos a la izquierda del grupo anterior. Si es el último elemento de la matriz no es 0, los dígitos restantes se agrupan según el último elemento de la matriz. Si el último elemento es 0, no se agrupan los dígitos restantes.  
  
 Por ejemplo, si la matriz contiene {3, 4, 5}, los dígitos se agrupan similar a "55,55555,55555,55555,4444,333.00%". Si la matriz contiene {3, 4, 0}, los dígitos se agrupan similar a "55555555555555555,4444,333.00%".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de cambiar la <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> propiedad.  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La propiedad se establece y la matriz contiene una entrada que es menor que 0 o mayor que 9.  
  
O bien 
La propiedad se establece y la matriz contiene una entrada distinta a la última entrada que se establece en 0.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el modelo de formato para los valores de porcentaje negativos.</summary>
        <value>Modelo de formato para los valores de porcentaje negativos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es 0, que representa "-n%", donde "%" es <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> y <paramref name="n" /> es un número.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A> propiedad se utiliza con la cadena de formato estándar "P" para definir el modelo de los valores de porcentaje negativos. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md). Esta propiedad tiene uno de los valores en la tabla siguiente. El símbolo "%" es el <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, el símbolo "-" es el <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, y `n` es un número. Valores 11-3 se introdujeron en .NET Framework 2.0 y no se puede usar en versiones anteriores.  
  
|Valor|Patrón asociado|  
|-----------|------------------------|  
|0|-n %|  
|1|-n %|  
|2|-%n|  
|3|% n|  
|4|%n-|  
|5|% n|  
|6|% n-|  
|7|-% n|  
|8|% n-|  
|9|% n-|  
|10|% - n|  
|11|n %|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se establece en un valor menor que 0 o mayor que 11.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el modelo de formato para los valores de porcentaje positivos.</summary>
        <value>Modelo de formato para los valores de porcentaje positivos. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es 0, que representa "n%", donde "%" es <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> y <paramref name="n" /> es un número.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A> propiedad se utiliza con la cadena de formato estándar "P" para definir el patrón de los valores de porcentaje positivos. Para más información, vea [Cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md). Esta propiedad tiene uno de los valores en la tabla siguiente. El símbolo "%" es el <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> y `n` es un número.  
  
|Valor|Patrón asociado|  
|-----------|------------------------|  
|0|% n|  
|1|% n|  
|2|%n|  
|3|% n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad se está estableciendo en un valor menor que 0 o mayor que 3.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que se va a utilizar como símbolo de porcentaje.</summary>
        <value>Cadena que se va a usar como símbolo de porcentaje. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "%".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena asignada a la <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> propiedad se incluye en la cadena de resultado cuando se da formato a un valor numérico con la "P" o con una cadena de formato que incluye el "%".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PerMilleSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que se va a utilizar como símbolo de por mil.</summary>
        <value>Cadena que se va a usar como símbolo de por mil. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "‰", que es el carácter Unicode U+2030.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena asignada a la <xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A> propiedad se incluye en la cadena de resultado cuando se da formato a un valor numérico con una cadena de formato que incluye el "‰".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que representa un infinito positivo.</summary>
        <value>Cadena que representa el infinito positivo. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "Infinity".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre infinito positivo, vea <xref:System.Double> o <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cadena que denota que el número asociado es positivo.</summary>
        <value>Cadena que denota que el número asociado es positivo. El valor predeterminado de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> es "+".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad se usa solo para analizar cadenas numéricas, no para aplicar formato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">En una operación de establecimiento, el valor asignado es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propiedad está establecida y el objeto <see cref="T:System.Globalization.NumberFormatInfo" /> es de solo lectura.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.NumberFormatInfo -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.ReadOnly nfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi"><see cref="T:System.Globalization.NumberFormatInfo" /> que se va a incluir.</param>
        <summary>Devuelve un contenedor de <see cref="T:System.Globalization.NumberFormatInfo" /> de solo lectura.</summary>
        <returns>Contenedor de <see cref="T:System.Globalization.NumberFormatInfo" /> de solo lectura para <paramref name="nfi" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este contenedor impide cualquier modificación a `nfi`.  
  
 Intenta realizar una asignación a una propiedad de solo lectura <xref:System.Globalization.NumberFormatInfo> hace que un <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="nfi" /> es <see langword="null" />.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>