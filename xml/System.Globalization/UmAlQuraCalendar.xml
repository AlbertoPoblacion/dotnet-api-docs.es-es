<Type Name="UmAlQuraCalendar" FullName="System.Globalization.UmAlQuraCalendar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f727bb0af2aaeaa88cdc75c083c0b6de33ed7c04" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30420389" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UmAlQuraCalendar : System.Globalization.Calendar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UmAlQuraCalendar extends System.Globalization.Calendar" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.UmAlQuraCalendar" />
  <TypeSignature Language="VB.NET" Value="Public Class UmAlQuraCalendar&#xA;Inherits Calendar" />
  <TypeSignature Language="C++ CLI" Value="public ref class UmAlQuraCalendar : System::Globalization::Calendar" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Calendars</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Globalization.Calendar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa el calendario Hijri saudita (Um Al Qura).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.UmAlQuraCalendar> clase es casi idéntica a la <xref:System.Globalization.HijriCalendar> de clases, excepto en el calendario Um Al Qura utiliza un algoritmo basado en tablas con licencia del gobierno Saudita para calcular fechas, puede express fechas para el año 1500 A.H. y no admite la <xref:System.Globalization.HijriCalendar.HijriAdjustment%2A> propiedad.  
  
> [!NOTE]
>  Para obtener información sobre el uso de la <xref:System.Globalization.UmAlQuraCalendar> clase y las demás clases de .NET Framework de calendario, consulte [trabajar con calendarios](~/docs/standard/datetime/working-with-calendars.md).  
  
 Para el <xref:System.Globalization.UmAlQuraCalendar> (clase), cada mes tiene 29 o 30 días, pero normalmente en ningún orden discernible. Mientras que la documentación para el calendario Hijri proporciona una tabla que muestra los días correspondientes en cada mes, no se puede producir ninguna tabla así general para el calendario Um Al Qura.  
  
 Para obtener más información sobre el calendario Hijri, vea la <xref:System.Globalization.HijriCalendar> clase.  
  
 **Tenga en cuenta** la <xref:System.Globalization.UmAlQuraCalendar> clase solo admite las fechas del 30/04/1900 00.00.00 (calendario gregoriano) al 16/11/2077 23:59:59 (calendario gregoriano).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="P:System.Globalization.CultureInfo.Calendar" />
    <altmember cref="P:System.Globalization.CultureInfo.OptionalCalendars" />
    <altmember cref="T:System.Globalization.HijriCalendar" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UmAlQuraCalendar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UmAlQuraCalendar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public override DateTime AddMonths (DateTime time, int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddMonths (time As DateTime, months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime AddMonths(DateTime time, int months);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">Fecha a la que se van a agregar los meses. La clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> solo admite las fechas comprendidas entre 30/04/1900 00.00.00 (calendario gregoriano) y 16/11/2077 23:59:59 (calendario gregoriano).</param>
        <param name="months">Número positivo o negativo de meses que se van a agregar.</param>
        <summary>Calcula una fecha que está a un número determinado de meses de una fecha inicial especificada.</summary>
        <returns>Fecha que es el resultado de sumar el número de meses especificado por el parámetro <paramref name="months" /> a la fecha especificada por el parámetro <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La parte del día del resultante <xref:System.DateTime> se ve afectada si el día resultante no es un día válido del mes resultante del año resultante. Se cambia al último día válido del mes resultante del año resultante. La parte del año del resultante <xref:System.DateTime> se ve afectada si el mes resultante está fuera del año del elemento especificado <xref:System.DateTime>. Esta implementación admite solo la era actual. Por lo tanto, se produce una excepción si el año resultante está fuera de la era del elemento especificado <xref:System.DateTime>. La parte de hora del día del resultante <xref:System.DateTime> es el mismo que el especificado <xref:System.DateTime>.  
  
 Por ejemplo, si el mes especificado es Dulkada, que tiene 30 días, el día especificado es el 30 de dicho mes y el valor de la `months` del parámetro es 3, el año resultante será uno más que el año especificado, el mes resultante será Záfar y el día resultante es el día 29, que es el último día de Záfar.  
  
 Si el valor de la `months` parámetro es negativo, resultante <xref:System.DateTime> es anterior a la especificada <xref:System.DateTime>.  
  
 El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor siempre es igual a <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Puede conservar la <xref:System.DateTime.Kind%2A> propiedad de la `time` parámetro mediante una llamada a la <xref:System.DateTime.SpecifyKind%2A?displayProperty=nameWithType> método, tal como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#5)]
 [!code-vb[System.Globalization.Calendar.AddMethods#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#5)]  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTime> valor y muestra los valores de varias de sus componentes en el calendario Um Al Qura. A continuación, llama a la <xref:System.Globalization.UmAlQuraCalendar.AddYears%2A> y <xref:System.Globalization.UmAlQuraCalendar.AddMonths%2A> métodos para agregar 2 años, 10 meses en el calendario Um Al Qura para el valor de fecha. Por último, tampoco mostrará los valores de estos componentes de fecha en el calendario Um Al Qura.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La fecha resultante está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="months" /> es menor que -120.000 o mayor que 120.000.  
  
 O bien  
  
 <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public override DateTime AddYears (DateTime time, int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddYears (time As DateTime, years As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime AddYears(DateTime time, int years);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="time">Fecha a la que se van a agregar los años. La clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> solo admite las fechas comprendidas entre 30/04/1900 00.00.00 (calendario gregoriano) y 16/11/2077 23:59:59 (calendario gregoriano).</param>
        <param name="years">Número positivo o negativo de años que se van a sumar.</param>
        <summary>Calcula una fecha que está a un número determinado de años de una fecha inicial especificada.</summary>
        <returns>Fecha que es el resultado de sumar el número de años especificado por el parámetro <paramref name="years" /> a la fecha especificada por el parámetro <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La parte del día del resultante <xref:System.DateTime> se ve afectada si el día resultante no es un día válido del mes resultante del año resultante. Se cambia al último día válido del mes resultante del año resultante. La parte del mes del resultante <xref:System.DateTime> es el mismo que el especificado <xref:System.DateTime>. Esta implementación admite solo la era actual. Por lo tanto, se produce una excepción si el año resultante está fuera de la era del elemento especificado <xref:System.DateTime>. La parte de hora del día del resultante <xref:System.DateTime> es el mismo que el especificado <xref:System.DateTime>.  
  
 Por ejemplo, Duhiya tiene 29 días, excepto en los años bisiestos que tiene 30 días. Si la fecha especificada es el día 30 de Duhiya de un año bisiesto y el valor de la `years` del parámetro es 1, la fecha resultante es el día 29 de Duhiya del año siguiente.  
  
 Si `years` es negativo, resultante <xref:System.DateTime> es anterior a la especificada <xref:System.DateTime>.  
  
 El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor siempre es igual a <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Puede conservar la <xref:System.DateTime.Kind%2A> propiedad de la `time` parámetro mediante una llamada a la <xref:System.DateTime.SpecifyKind%2A?displayProperty=nameWithType> método, tal como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/cs/add1.cs#8)]
 [!code-vb[System.Globalization.Calendar.AddMethods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.addmethods/vb/add1.vb#8)]  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTime> valor y muestra los valores de varias de sus componentes en el calendario Um AL Qura. A continuación, llama a la <xref:System.Globalization.UmAlQuraCalendar.AddYears%2A> y <xref:System.Globalization.UmAlQuraCalendar.AddMonths%2A> métodos para agregar 2 años, 10 meses en el calendario Um Al Qura para el valor de fecha. Por último, tampoco mostrará los valores de estos componentes de fecha en el calendario Um Al Qura.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La fecha resultante está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="years" /> es menor que -10.000 o mayor que 10.000.  
  
 O bien  
  
 <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
      </Docs>
    </Member>
    <Member MemberName="AlgorithmType">
      <MemberSignature Language="C#" Value="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.UmAlQuraCalendar.AlgorithmType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AlgorithmType As CalendarAlgorithmType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CalendarAlgorithmType AlgorithmType { System::Globalization::CalendarAlgorithmType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarAlgorithmType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el calendario actual está basado en el calendario solar, en el lunar o en una combinación de ambos.</summary>
        <value>Siempre devuelve <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se utiliza la reflexión para crear instancias de cada <xref:System.Globalization.Calendar> tipo encontrados en .NET Framework y muestra el valor de su <xref:System.Globalization.Calendar.AlgorithmType%2A> propiedad.  
  
 [!code-csharp[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/cs/algorithmtype1.cs#1)]
 [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.calendar.algorithmtype/vb/algorithmtype1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaysInYearBeforeMinSupportedYear">
      <MemberSignature Language="C#" Value="protected override int DaysInYearBeforeMinSupportedYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DaysInYearBeforeMinSupportedYear" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.UmAlQuraCalendar.DaysInYearBeforeMinSupportedYear" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DaysInYearBeforeMinSupportedYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int DaysInYearBeforeMinSupportedYear { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de días del año que precede al año especificado por la propiedad <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" />.</summary>
        <value>El número de días del año que precede al año especificado por <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve un valor constante de 384.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Eras">
      <MemberSignature Language="C#" Value="public override int[] Eras { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] Eras" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.UmAlQuraCalendar.Eras" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Eras As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;int&gt; ^ Eras { cli::array &lt;int&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una lista de las eras admitidas por el objeto <see cref="T:System.Globalization.UmAlQuraCalendar" /> actual.</summary>
        <value>Matriz formada por un solo elemento cuyo valor es <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El calendario Hijri reconoce una era: A.H. (Latín "Anno Hegirae", lo que significa "el año de la migración" en relación con la migración de Mahoma (PBUH) desde la Meca). Esta propiedad siempre devuelve una matriz con un único elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDayOfMonth">
      <MemberSignature Language="C#" Value="public override int GetDayOfMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfMonth(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfMonth (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDayOfMonth(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valor de fecha que se va a leer. La clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> solo admite las fechas comprendidas entre 30/04/1900 00.00.00 (calendario gregoriano) y 16/11/2077 23:59:59 (calendario gregoriano).</param>
        <summary>Calcula el día del mes en que cae una fecha especificada.</summary>
        <returns>Número entero del 1 al 30 que representa el día del mes especificado en el parámetro <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra los valores de varios componentes de un <xref:System.DateTime> en términos del calendario Um Al Qura.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
        <altmember cref="P:System.DateTime.Day" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfWeek">
      <MemberSignature Language="C#" Value="public override DayOfWeek GetDayOfWeek (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfWeek (time As DateTime) As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DayOfWeek GetDayOfWeek(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valor de fecha que se va a leer. La clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> solo admite las fechas comprendidas entre 30/04/1900 00.00.00 (calendario gregoriano) y 16/11/2077 23:59:59 (calendario gregoriano).</param>
        <summary>Calcula el día de la semana en que cae una fecha especificada.</summary>
        <returns>Un valor de <see cref="T:System.DayOfWeek" /> que representa el día de la semana que especifica el parámetro <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DayOfWeek> valores son los siguientes:  
  
|Valor de DayOfWeek|Que indica|  
|---------------------|---------------------|  
|Domingo|الاحد (Al Ahad)|  
|Lunes|الاثنين (Al Ithnayn)|  
|Martes|الثلاثاء (al Tholatha ')|  
|Miércoles|الاربعاء (Al Arbi'aa')|  
|Jueves|الخميس (Al Kamis)|  
|Viernes|الجمعة (Al Jumu'ah)|  
|Sábado|السبت (como Sabt)|  
  
   
  
## Examples  
 El ejemplo siguiente muestra los valores de varios componentes de un <xref:System.DateTime> en términos del calendario Um Al Qura.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
        <altmember cref="P:System.DateTime.DayOfWeek" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetDayOfYear">
      <MemberSignature Language="C#" Value="public override int GetDayOfYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDayOfYear(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDayOfYear (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDayOfYear(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valor de fecha que se va a leer. La clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> solo admite las fechas comprendidas entre 30/04/1900 00.00.00 (calendario gregoriano) y 16/11/2077 23:59:59 (calendario gregoriano).</param>
        <summary>Calcula el día del año en que se produce una fecha especificada.</summary>
        <returns>Un entero del 1 al 355 que representa el día del año especificado por el parámetro <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El día del año se define como el número de días desde el primer día del año. Por ejemplo, el <xref:System.Globalization.UmAlQuraCalendar.GetDayOfYear%2A> método devuelve 1 para el primer día del primer mes del año y el número total de días del año para el último día del último mes.  
  
   
  
## Examples  
 El ejemplo siguiente muestra los valores de varios componentes de un <xref:System.DateTime> en términos del calendario Um Al Qura.  
  
 [!code-csharp[System.Globalization.UmALQuraCalendar.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.Globalization.UmALQuraCalendar.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
        <altmember cref="P:System.DateTime.DayOfYear" />
      </Docs>
    </Member>
    <Member MemberName="GetDaysInMonth">
      <MemberSignature Language="C#" Value="public override int GetDaysInMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDaysInMonth (year As Integer, month As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDaysInMonth(int year, int month, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="month">Entero de 1 a 12 que representa el mes.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Calcula el número de días del mes especificado en el año y la era especificados.</summary>
        <returns>El número de días del mes especificado en el año y la era especificados. El valor devuelto es 29 en un año normal y 30 en un año bisiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve un número diferente de días en un mes especificado para un año normal en lugar de un año bisiesto. Por ejemplo, este método devuelve 29 o 30 para Duhiya (`month` = 12), en función de si `year` es un año bisiesto.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.Globalization.UmAlQuraCalendar.GetDaysInMonth%2A> método para obtener el número de días de cada mes de cinco años consecutivos.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getdaysinmonth/cs/getdaysinmonth1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getdaysinmonth/vb/getdaysinmonth1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" />, <paramref name="month" /> o <paramref name="era" /> está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDaysInYear">
      <MemberSignature Language="C#" Value="public override int GetDaysInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetDaysInYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDaysInYear (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetDaysInYear(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Calcula el número de días del año especificado de la era especificada.</summary>
        <returns>Número de días del año y era especificados. El número de días es 354 en un año normal o 355 en un año bisiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.Globalization.UmAlQuraCalendar.GetDaysInYear%2A> método para obtener el número de días en los diez años consecutivos en cada era admitida por la <xref:System.Globalization.UmAlQuraCalendar> clase.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.GetDaysInYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getdaysinyear/cs/getdaysinyear1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.GetDaysInYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getdaysinyear/vb/getdaysinyear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> o <paramref name="era" /> está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</exception>
        <altmember cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public override int GetEra (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetEra(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEra (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetEra(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valor de fecha que se va a leer.</param>
        <summary>Calcula la era en la que cae una fecha especificada.</summary>
        <returns>Siempre devuelve el valor de <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El calendario Um Al Qura reconoce una era: A.H. (Latín "Anno Hegirae", lo que significa "el año de la migración" en relación con la migración de Mahoma (PBUH) desde la Meca).  
  
   
  
## Examples  
 En el ejemplo siguiente muestra los valores de varios componentes de una fecha en el calendario Um Al Qura.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLeapMonth">
      <MemberSignature Language="C#" Value="public override int GetLeapMonth (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLeapMonth(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLeapMonth (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLeapMonth(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Calcula el mes bisiesto para un año y era especificados.</summary>
        <returns>Siempre 0 porque la clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> no admite los meses bisiestos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En un calendario que admite la noción de mes bisiesto, el mes bisiesto puede aparecer después de un mes determinado o después de cualquier mes del año. Por ejemplo, el <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%28System.DateTime%29?displayProperty=nameWithType> método devuelve un número entre 1 y 13 que indica el mes asociado a una fecha especificada. Si hay un mes bisiesto entre los meses octavo y noveno del año, el <xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> método devuelve 8 para el octavo mes, 9 para el octavo mes bisiesto y 10 para el noveno mes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> es menor que 1318 o mayor que 1450.  
  
 O bien  
  
 <paramref name="era" /> no es <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> ni <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMonth">
      <MemberSignature Language="C#" Value="public override int GetMonth (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonth(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMonth (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMonth(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valor de fecha que se va a leer. La clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> solo admite las fechas comprendidas entre 30/04/1900 00.00.00 (calendario gregoriano) y 16/11/2077 23:59:59 (calendario gregoriano).</param>
        <summary>Calcula el mes en el que cae una fecha especificada.</summary>
        <returns>Un entero del 1 al 12 que representa el mes de la fecha especificada por el parámetro <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra los intervalos de fecha admitidos por la <xref:System.Globalization.UmAlQuraCalendar> clase en el calendario Um Al Qura y gregoriano. El <xref:System.Globalization.UmAlQuraCalendar.GetMonth%2A> método se utiliza para recuperar el mes de las fechas admitidos máximo y mínimos en el calendario Um Al Qura si no es calendario actual de la referencia cultural actual.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/cs/getmonth1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/vb/getmonth1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
        <altmember cref="P:System.DateTime.Month" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthsInYear">
      <MemberSignature Language="C#" Value="public override int GetMonthsInYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMonthsInYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMonthsInYear (year As Integer, era As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMonthsInYear(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuaraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Calcula el número de meses del año especificado de la era especificada.</summary>
        <returns>Siempre es 12.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.Globalization.UmAlQuraCalendar.GetMonthsInYear%2A> método para determinar el número de meses de cuatro años consecutivos y, a continuación, llama el <xref:System.Globalization.UmAlQuraCalendar.GetDaysInMonth%2A> método para determinar el número de días que se encuentran en cada mes.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getdaysinmonth/cs/getdaysinmonth1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.GetDaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getdaysinmonth/vb/getdaysinmonth1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> está fuera del intervalo admitido por este calendario.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="era" /> está fuera del intervalo admitido por este calendario.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetYear">
      <MemberSignature Language="C#" Value="public override int GetYear (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetYear(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetYear (time As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetYear(DateTime time);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valor de fecha que se va a leer. La clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> solo admite las fechas comprendidas entre 30/04/1900 00.00.00 (calendario gregoriano) y 16/11/2077 23:59:59 (calendario gregoriano).</param>
        <summary>Calcula el año de una fecha que representa un objeto <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>Un entero que representa el año especificado por el parámetro <paramref name="time" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra los intervalos de fecha admitidos por la <xref:System.Globalization.UmAlQuraCalendar> clase en el calendario Um Al Qura y gregoriano. El <xref:System.Globalization.UmAlQuraCalendar.GetYear%2A> método se utiliza para recuperar el año de las fechas admitidos máximo y mínimos en el calendario Um Al Qura si no es calendario actual de la referencia cultural actual.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/cs/getmonth1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/vb/getmonth1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="time" /> está fuera del intervalo admitido por este calendario.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLeapDay">
      <MemberSignature Language="C#" Value="public override bool IsLeapDay (int year, int month, int day, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapDay (year As Integer, month As Integer, day As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapDay(int year, int month, int day, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="month">Entero de 1 a 12 que representa el mes.</param>
        <param name="day">Entero del 1 al 30 que representa un día.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Determina si la fecha especificada es un día bisiesto.</summary>
        <returns>
          Es <see langword="true" /> si el día especificado es un día bisiesto; en caso contrario, es <see langword="false" />. El valor devuelto es siempre <see langword="false" /> porque la clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> no admite los meses bisiestos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un día bisiesto es un día en que se produce únicamente en un año bisiesto.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.Globalization.UmAlQuraCalendar.IsLeapDay%2A> método para el último día del segundo mes (febrero) durante cinco años en cada una de las eras.  
  
 [!code-cpp[System.Globalization.HijriCalendar.IsLeapDay#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapDay/CPP/hijricalendar_isleapday.cpp#1)]
 [!code-csharp[System.Globalization.HijriCalendar.IsLeapDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapDay/CS/hijricalendar_isleapday.cs#1)]
 [!code-vb[System.Globalization.HijriCalendar.IsLeapDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.HijriCalendar.IsLeapDay/VB/hijricalendar_isleapday.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" />, <paramref name="month" />, <paramref name="day" /> o <paramref name="era" /> está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLeapMonth">
      <MemberSignature Language="C#" Value="public override bool IsLeapMonth (int year, int month, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapMonth(int32 year, int32 month, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapMonth (year As Integer, month As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapMonth(int year, int month, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="month">Entero de 1 a 12 que representa el mes.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Determina si el mes especificado del año y la era especificados es un mes bisiesto.</summary>
        <returns>Siempre <see langword="false" /> porque la clase <see cref="T:System.Globalization.UmAlQuraCalendar" /> no admite los meses bisiestos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un mes bisiesto es todo un mes que sólo se produce en un año bisiesto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" />, <paramref name="month" /> o <paramref name="era" /> está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public override bool IsLeapYear (int year, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsLeapYear(int32 year, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsLeapYear (year As Integer, era As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsLeapYear(int year, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Determina si el año especificado de la era especificada es un año bisiesto.</summary>
        <returns>
          Es <see langword="true" /> si el año especificado es un año bisiesto; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un año normal tiene 354 días y un año bisiesto tiene 355 días.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el número de días en diez años consecutivos y llama el <xref:System.Globalization.UmAlQuraCalendar.IsLeapYear%2A> método para determinar qué son años bisiestos.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.isleapyear/cs/isleapyear1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.isleapyear/vb/isleapyear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> o <paramref name="era" /> está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MaxSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MaxSupportedDateTime" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MaxSupportedDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime MaxSupportedDateTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la última fecha y hora admitidas por este calendario.</summary>
        <value>La última fecha y hora admitidas por la <see cref="T:System.Globalization.UmAlQuraCalendar" /> de la clase, que es equivalente al último instante del 16 de noviembre de 2077 era cristiana. en el calendario gregoriano.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], el valor de la <xref:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime%2A> propiedad es 16/11/2077. En versiones anteriores de .NET Framework, su valor es el último momento del 13 de mayo de 2029 de la era cristiana en el calendario gregoriano.  
  
   
  
## Examples  
 El ejemplo siguiente muestra los intervalos de fecha admitidos por la <xref:System.Globalization.UmAlQuraCalendar> clase en el calendario Um Al Qura y gregoriano.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/cs/getmonth1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/vb/getmonth1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinSupportedDateTime">
      <MemberSignature Language="C#" Value="public override DateTime MinSupportedDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime MinSupportedDateTime" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MinSupportedDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTime MinSupportedDateTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la primera fecha y hora que este calendario admite.</summary>
        <value>La primera fecha y hora admitidas por la <see cref="T:System.Globalization.UmAlQuraCalendar" /> (clase), que es equivalente al primer instante del 30 de abril de 1900 de la era cristiana. en el calendario gregoriano.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra los intervalos de fecha admitidos por la <xref:System.Globalization.UmAlQuraCalendar> clase en el calendario Um Al Qura y gregoriano.  
  
 [!code-csharp[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/cs/getmonth1.cs#1)]
 [!code-vb[System.Globalization.UmAlQuraCalendar.GetMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.umalquracalendar.getmonth/vb/getmonth1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToDateTime (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Un año.</param>
        <param name="month">Entero de 1 a 12 que representa el mes.</param>
        <param name="day">Entero del 1 al 29 que representa un día.</param>
        <param name="hour">Entero del 0 al 23 que representa la hora.</param>
        <param name="minute">Entero del 0 al 59 que representa el minuto.</param>
        <param name="second">Entero del 0 al 59 que representa el segundo.</param>
        <param name="millisecond">Entero del 0 al 999 que representa el milisegundo.</param>
        <param name="era">Una era. Indique <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> o <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />.</param>
        <summary>Devuelve un objeto <see cref="T:System.DateTime" /> cuyo valor está establecido en la fecha, la hora y la era especificadas.</summary>
        <returns>Objeto <see cref="T:System.DateTime" /> que se establece en la fecha y hora especificadas de la era actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.UmAlQuraCalendar.ToDateTime%2A> método es útil porque puede convertir cualquier fecha del calendario actual a una fecha del calendario gregoriano. La fecha gregoriana puede posteriormente utilizar, por ejemplo, para comparar las fechas en calendarios, o crear una fecha equivalente en un calendario determinado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" />, <paramref name="month" />, <paramref name="day" /> o <paramref name="era" /> está fuera del intervalo admitido por la clase <see cref="T:System.Globalization.UmAlQuraCalendar" />.  
  
 O bien  
  
 <paramref name="hour" /> es menor que cero o mayor que 23.  
  
 O bien  
  
 <paramref name="minute" /> es menor que cero o mayor que 59.  
  
 O bien  
  
 <paramref name="second" /> es menor que cero o mayor que 59.  
  
 O bien  
  
 <paramref name="millisecond" /> es menor que cero o mayor que 999.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToFourDigitYear">
      <MemberSignature Language="C#" Value="public override int ToFourDigitYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ToFourDigitYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToFourDigitYear (year As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ToFourDigitYear(int year);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Año de 2 dígitos desde 0 hasta 99 o un año del calendario Umm Al-Qura de 4 dígitos desde 1318 hasta 1450.</param>
        <summary>Convierte el año especificado en un año de 4 dígitos mediante la propiedad <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" /> para determinar el siglo adecuado.</summary>
        <returns>Si el valor del parámetro <paramref name="year" /> es un año de 2 dígitos, el valor devuelto es el correspondiente año de 4 dígitos. Si el valor del parámetro <paramref name="year" /> es un año de 4 dígitos, el valor devuelto es el valor del parámetro <paramref name="year" /> sin modificar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.UmAlQuraCalendar.ToFourDigitYear%2A> método usa la `year` parámetro, el <xref:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax%2A> propiedad y un año para calcular un año de 4 dígitos. El siglo se determina buscando la única coincidencia de 2 dígitos `year` parámetro dentro de ese intervalo de 100 años. Por ejemplo, si <xref:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax%2A> se establece en 1429, el intervalo de 100 años es de 1330 a 1429. Por lo tanto, un valor de 2 dígitos de 30 se interpreta como 1330, mientras que un valor de 2 dígitos de 29 se interpreta como 1429.  
  
 Si el <xref:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax%2A> propiedad es el valor especial 99, el <xref:System.Globalization.UmAlQuraCalendar.ToFourDigitYear%2A> método omite la configuración de la configuración regional y el idioma opciones en el Panel de Control y devuelve el `year` parámetro sin cambios.  
  
 <xref:System.Globalization.UmAlQuraCalendar.ToFourDigitYear%2A> admite un año de dos dígitos o un año de cuatro dígitos. Se pasa un valor de año de dos dígitos (menor que 100) hace que el método convertir el valor en un valor de cuatro dígitos según el <xref:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax%2A> valor que representa el siglo adecuado. Si la aplicación proporciona un valor de año de cuatro dígitos que está dentro del intervalo del calendario admitido para <xref:System.Globalization.UmAlQuraCalendar.ToFourDigitYear%2A>, el método devuelve el valor de entrada real. Si la aplicación proporciona un valor de cuatro dígitos que está fuera del intervalo del calendario admitido, o si proporciona un valor negativo, el método produce una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> está fuera del intervalo admitido por este calendario.</exception>
        <altmember cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" />
      </Docs>
    </Member>
    <Member MemberName="TwoDigitYearMax">
      <MemberSignature Language="C#" Value="public override int TwoDigitYearMax { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TwoDigitYearMax" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property TwoDigitYearMax As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TwoDigitYearMax { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Calendars</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el último año de un intervalo de 100 años que puede representarse mediante un año de dos dígitos.</summary>
        <value>Último año de un intervalo de 100 años que puede representarse por un año de dos dígitos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite que un año de 2 dígitos convertir correctamente un año de 4 dígitos. Por ejemplo, si esta propiedad se establece en 1429, el intervalo de 100 años es de 1330 a 1429. Por lo tanto, un valor de 2 dígitos de 30 se interpreta como 1330, mientras que un valor de 2 dígitos de 29 se interpreta como 1429.  
  
 El valor inicial de esta propiedad se deriva de la configuración en la parte de opciones de configuración regional y de idioma del Panel de Control. Sin embargo, esa información puede cambiar durante la vida de la <xref:System.AppDomain>. La <xref:System.Globalization.UmAlQuraCalendar> clase no detecta cambios en la configuración del sistema automáticamente.  
  
 Especial valor 99 causas el <xref:System.Globalization.UmAlQuraCalendar.ToFourDigitYear%2A> método para pasar por alto la configuración del sistema y devuelva el año especificado sin modificar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Este calendario es de solo lectura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">En una operación de establecimiento (Set), el valor de año del calendario Umm Al-Qura es menor que 1318 pero no es 99, o es mayor que 1450.</exception>
        <altmember cref="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="UmAlQuraEra">
      <MemberSignature Language="C#" Value="public const int UmAlQuraEra = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 UmAlQuraEra = (1)" />
      <MemberSignature Language="DocId" Value="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />
      <MemberSignature Language="VB.NET" Value="Public Const UmAlQuraEra As Integer  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: int UmAlQuraEra = 1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Representa la era actual. Este campo es constante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.Globalization.UmAlQuraCalendar.UmAlQuraEra> campo es 1.  
  
 El calendario Um Al Qura reconoce una era: A.H. (Latín "Anno Hegirae", lo que significa "el año de la migración" en relación con la migración de Mahoma (PBUH) desde la Meca).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>