<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a42de7a60ea69dbfbe903a0a445bc3a7856a8f41" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37656512" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implements a set of methods for culture-sensitive string comparisons.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Convenciones para comparar y ordenar datos varían culturales. Por ejemplo, el criterio de ordenación puede basarse en la fonética o en la representación visual de caracteres. En los idiomas de Asia oriental, los caracteres se ordenan teniendo en cuenta los trazos y el radical de los ideogramas. El criterio de ordenación también depende del orden que se emplea en los distintos idiomas y referencias culturales para el alfabeto. Por ejemplo, el idioma danés tiene un carácter "Æ" que se ordena después de la "Z" en el alfabeto. Además, pueden ser comparaciones entre mayúsculas y minúsculas o mayúsculas y minúsculas, y las reglas de mayúsculas y minúsculas pueden también diferir según la referencia cultural. La <xref:System.Globalization.CompareInfo> clase es responsable de mantener estos datos de comparación de cadenas dependientes de la referencia cultural y para realizar operaciones de cadenas de la referencia cultural.  
  
 Normalmente, no es necesario crear una instancia de un <xref:System.Globalization.CompareInfo> objeto directamente, ya que uno se usa implícitamente por todas las operaciones de comparación de cadena no ordinal, incluidas las llamadas a la <xref:System.String.Compare%2A?displayProperty=nameWithType> método. Sin embargo, si desea recuperar un <xref:System.Globalization.CompareInfo> de objeto, puede hacerlo en una de estas maneras:  
  
-   Recuperando el valor de la <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> propiedad para una referencia cultural determinada.  
  
-   Mediante una llamada a estático <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> método con un nombre de referencia cultural. Esto permite el acceso en tiempo de ejecución a un <xref:System.Globalization.CompareInfo> objeto.  
  
## <a name="ignored-search-values"></a>Omite los valores de búsqueda  
 Los juegos de caracteres incluyen caracteres que se pueden pasar por alto, que son los caracteres que no se tienen en cuenta al realizar una comparación lingüística o en la que se tiene en cuenta la referencia cultural. Los métodos de comparación como <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> no considere la posibilidad de dichos caracteres cuando se realiza una comparación dependiente de la referencia cultural. Puede pasar por alto caracteres se incluyen:  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>. Métodos de comparación de la referencia cultural siempre encontrarán una cadena vacía al principio (índice cero) de la cadena buscada.  
  
-   Un carácter o cadena que consta de caracteres con puntos de código que no se consideran en la operación debido a las opciones de comparación, en particular, el <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> y <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> opciones producen búsquedas en los símbolos y la combinación sin espacio se omiten los caracteres.  
  
-   Una cadena con puntos de código que no tienen importancia lingüística. Por ejemplo, un guion (00AD) siempre se omite en una comparación de cadenas de la referencia cultural.  
  
## <a name="security-considerations"></a>Consideraciones de seguridad  
 Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente, independientemente de la configuración de la referencia cultural del sistema operativo.  
  
> [!NOTE]
>  Cuando sea posible, debe usar los métodos de comparación de cadenas que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente se muestra cómo el <xref:System.Globalization.CompareInfo> objeto asociado con un <xref:System.Globalization.CultureInfo> objeto afecta a la comparación de cadenas.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares two strings.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <summary>Compares two strings.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description><paramref name="string1" /> is less than <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description><paramref name="string1" /> is greater than <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, la comparación se realiza mediante el uso de <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente independientemente de la configuración de la referencia cultural del sistema operativo.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para las comparaciones de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se comparan partes de dos cadenas utilizando los diferentes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado con el <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 En el ejemplo siguiente se muestra la forma de llamar al método <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar una comparación lingüística o la referencia cultural. El <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> método no tiene en cuenta dichos caracteres cuando realiza una comparación dependiente de la referencia cultural. Por ejemplo, una comparación de referencias culturales de "animal" con "ani correo" (con un guion o 00AD U +) indica que las dos cadenas son equivalentes, como se muestra en el ejemplo siguiente.  [! code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  Para que reconozca los caracteres pueden pasar por alto en una comparación de cadenas, llamar a la <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> método y proporcione un valor de uno de ellos <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para el <paramref name="options" /> parámetro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description><paramref name="string1" /> is less than <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description><paramref name="string1" /> is greater than <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente independientemente de la configuración de la referencia cultural del sistema operativo.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para las comparaciones de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se comparan dos cadenas utilizando diferentes <xref:System.Globalization.CompareOptions> configuración.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 En el ejemplo siguiente se muestra la forma de llamar al método <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar una comparación lingüística o la referencia cultural. El <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> método no tiene en cuenta dichos caracteres cuando realiza una comparación dependiente de la referencia cultural. Para que reconozca los caracteres pueden pasar por alto en la comparación, proporcione un valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para el <paramref name="options" /> parámetro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <summary>Compares the end section of a string with the end section of another string.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente independientemente de la configuración de la referencia cultural del sistema operativo.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para las comparaciones de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se comparan partes de dos cadenas utilizando los diferentes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado con el <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto. El <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> método no tiene en cuenta estos caracteres cuando realiza una comparación lingüística o la referencia cultural. Para que reconozca los caracteres pueden pasar por alto en la comparación, llame a la <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> método y proporcione un valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para el <paramref name="options" /> parámetro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares the end section of a string with the end section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente independientemente de la configuración de la referencia cultural del sistema operativo.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para las comparaciones de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se comparan las partes de dos cadenas utilizando diferentes <xref:System.Globalization.CompareOptions> configuración.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar una comparación lingüística o la referencia cultural. El <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> método no tiene en cuenta este tipo de caracteres al realizar una comparación dependiente de la referencia cultural. Para que reconozca los caracteres pueden pasar por alto en la comparación, proporcione un valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para el <paramref name="options" /> parámetro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <c>string1</c> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <c>string2</c> to compare.</param>
        <summary>Compares a section of one string with a section of another string.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente independientemente de la configuración de la referencia cultural del sistema operativo.  
  
> [!NOTE]
>  Cuando sea posible, debe usar los métodos de comparación de cadenas que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para las comparaciones de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se comparan partes de dos cadenas utilizando los diferentes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado con el <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.  -or-  <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.  -or-  <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto. El <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> método no tiene en cuenta estos caracteres cuando realiza una comparación lingüística o la referencia cultural. Para que reconozca los caracteres pueden pasar por alto en la comparación, llame a la <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método y proporcione un valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para el <paramref name="options" /> parámetro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <c>string1</c> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <c>string2</c> to compare.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares a section of one string with a section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente independientemente de la configuración de la referencia cultural del sistema operativo.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> para las comparaciones de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se comparan las partes de dos cadenas utilizando diferentes <xref:System.Globalization.CompareOptions> configuración.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.  -or-  <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.  -or-  <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto. El <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método no tiene en cuenta estos caracteres cuando realiza una comparación dependiente de la referencia cultural. Para que reconozca los caracteres pueden pasar por alto en la comparación, proporcione un valor de <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> para el <paramref name="options" /> parámetro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare with the current <see cref="T:System.Globalization.CompareInfo" />.</param>
        <summary>Determines whether the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dos <xref:System.Globalization.CompareInfo> objetos son iguales si sus <xref:System.Globalization.CompareInfo.LCID%2A> y <xref:System.Globalization.CompareInfo.Name%2A> propiedades son iguales.  
  
 Este método invalida <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Si una decisión de seguridad depende de una comparación de cadenas o un cambio de mayúsculas, debe usar el <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad para asegurarse de que el comportamiento es coherente independientemente de la configuración de la referencia cultural del sistema operativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">An integer representing the culture identifier.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified identifier.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se comparan partes de dos cadenas utilizando los diferentes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado con el <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A string representing the culture name.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified name.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se comparan partes de dos cadenas utilizando los diferentes <xref:System.Globalization.CompareInfo> objetos:  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización internacional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado a la referencia cultural de español (España) con alfabetización tradicional  
  
-   <xref:System.Globalization.CompareInfo> objeto asociado con el <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an invalid culture name.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">An integer representing the culture identifier.</param>
        <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  El comportamiento de este método es imprevisible. Se recomienda para que la aplicación para usar una versión de este método que no toma una entrada de ensamblado.  
  
 El `assembly` parámetro debe ser del mismo tipo como <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> is of an invalid type.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">A string representing the culture name.</param>
        <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  El comportamiento de este método es imprevisible. Se recomienda que utilice una versión de este método que no toma una entrada de ensamblado.  
  
 El `assembly` parámetro debe ser del mismo tipo como <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.  -or-  <paramref name="assembly" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an invalid culture name.  -or-  <paramref name="assembly" /> is of an invalid type.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a hash code either for this <see cref="T:System.Globalization.CompareInfo" /> instance or for a particular string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for the current <see cref="T:System.Globalization.CompareInfo" /> for hashing algorithms and data structures, such as a hash table.</summary>
        <returns>A hash code for the current <see cref="T:System.Globalization.CompareInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invalida <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Este método genera el mismo código hash para dos objetos que son iguales de acuerdo con el método <xref:System.Globalization.CompareInfo.Equals%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string whose hash code is to be returned.</param>
        <param name="options">A value that determines how strings are compared.</param>
        <summary>Gets the hash code for a string based on specified comparison options.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento de <xref:System.Globalization.CompareInfo.GetHashCode%2A> depende de su implementación, que puede cambiar de una versión de common language runtime a otro, o desde una plataforma de .NET Framework a otra.  
  
> [!IMPORTANT]
>  Si dos objetos de cadena son iguales, la <xref:System.Globalization.CompareInfo.GetHashCode%2A> método devuelve valores idénticos. Sin embargo, no hay un valor de código hash único para cada valor de cadena único. Cadenas diferentes pueden devolver el mismo código hash.  
>   
>  El propio código hash no se garantiza que sean estables. Los códigos hash para cadenas idénticas pueden diferir en las versiones de .NET Framework y en las plataformas (por ejemplo, 32 bits y 64 bits) para una única versión de .NET Framework. En algunos casos, incluso pueden diferir por dominio de aplicación.  
>   
>  Como resultado, hash códigos nunca deben utilizarse fuera del dominio de aplicación en el que se crearon, nunca deben usarse como campos de clave en una colección y nunca debe persistir.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a <see cref="T:System.Globalization.SortKey" /> object for a string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
        <summary>Gets the sort key for the specified string.</summary>
        <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada carácter de una cadena se le otorgan varias categorías de prioridades de ordenación, incluidos scripts, es un carácter alfabético, mayúsculas y diacríticas. Un criterio de ordenación es el repositorio de estas categorías para una cadena determinada. Por ejemplo, un criterio de ordenación puede contener una cadena de categorías alfabéticas, seguida de una cadena de prioridades de uso de mayúsculas y minúsculas, etc. El <xref:System.Globalization.CompareInfo.GetSortKey%2A> método es equivalente al método de API de Windows `LCMapString` con el indicador LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
        <param name="options">A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Gets a <see cref="T:System.Globalization.SortKey" /> object for the specified string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada carácter de una cadena se le otorgan varias categorías de prioridades de ordenación, incluidos scripts, es un carácter alfabético, mayúsculas y diacríticas. Un criterio de ordenación es el repositorio de estas categorías para una cadena determinada. Por ejemplo, un criterio de ordenación puede contener una cadena de categorías alfabéticas, seguida de una cadena de prioridades de uso de mayúsculas y minúsculas, etc. El <xref:System.Globalization.CompareInfo.GetSortKey%2A> método es equivalente al método de API de Windows `LCMapString` con el indicador LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the zero-based index of the first occurrence of a value within a string or within a portion of it.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método busca en la cadena de origen desde el principio de la cadena hasta el final de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Si `value` representa un Unicode carácter compuesto, como la ligadura "Æ" U + 00 C 6, es posible que se consideran equivalentes a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde un carácter se considera equivalente a otro carácter solo si sus puntos de código Unicode son los mismos, se debe llamar a una sobrecarga que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valor. A diferencia de <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>, que realiza una comparación dependiente de la referencia cultural, sobrecargas de los <xref:System.String.IndexOf%2A?displayProperty=nameWithType> método que busque un carácter realizan una comparación ordinal y sobrecargas que buscan una cadena realizan una comparación dependiente de la referencia cultural.  
  
> [!NOTE]
>  Cuando sea posible, debe usar los métodos de comparación de cadenas que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> método siempre devuelve 0 (cero) para indicar que se encuentra la coincidencia al principio de <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> método se utiliza para buscar el guion (00AD) de dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, el método devuelve 0 (cero) para indicar que ha encontrado a una coincidencia al principio de la cadena.  [! código csharp [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)] [! código vb [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se busca hacia delante desde el principio de la cadena y termina al final de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode, debe usar una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural, si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> método siempre devuelve 0 (cero) para indicar que se encuentra la coincidencia al principio de <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> método se utiliza para buscar tres subcadenas (un guion (00AD), un guion seguido de "n" y un guion seguido de "m") de dos cadenas. Solo una de las cadenas contiene un guion virtual. En cada caso, dado que el guion virtual es un carácter ignorable, el resultado es el mismo como si no se incluía el guion en <paramref name="value" />. Cuando se busca un guion solo, el método devuelve 0 (cero) para indicar que ha encontrado a una coincidencia al principio de la cadena.  [! código csharp [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)] [! código vb [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="options">A value that defines how the strings should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se busca hacia delante desde el principio de la cadena y termina al final de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural). Un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos. Las sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe usar los métodos de comparación de cadenas que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método siempre devuelve 0 (cero) para indicar que se encuentra la coincidencia al principio de <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método se utiliza para buscar un guion (00AD) de dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve 0 (cero) para indicar que ha encontrado a una coincidencia al principio de la cadena. Una búsqueda ordinal, sin embargo, busca el guion en una cadena y notifica que está presente correctamente desde la segunda cadena.  [! código csharp [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)] [! código vb [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` y termina al final de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor. Las sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> método se utiliza para buscar un guion (00AD) después de una "n" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, el método devuelve 1 para indicar que ha encontrado a una coincidencia en la posición de las "n".  [! código csharp [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)] [! código vb [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se busca hacia delante desde el principio de la cadena y termina al final de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural (es decir, si <paramref name="options" /> no es <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método siempre devuelve 0 (cero) para indicar que se encuentra la coincidencia al principio de <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método se utiliza para buscar tres subcadenas (un guion (00AD), un guion seguido de "n" y un guion seguido de "m") de dos cadenas. Solo una de las cadenas contiene un guion virtual. Dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve el mismo valor que se devolvería si el guion no se incluyeron en la cadena de búsqueda. Una búsqueda ordinal, sin embargo, busca el guion en una cadena y notifica que está presente correctamente desde la segunda cadena.  [! código csharp [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)] [! código vb [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` y termina al final de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural, si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda.  En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> método se utiliza para buscar la posición de un guion (00AD) seguida por una "m" en dos cadenas. Solo una de las cadenas contiene la subcadena necesaria. En ambos casos, dado que el guion virtual es un carácter ignorable, el método devuelve el índice de "m" en la cadena. Tenga en cuenta que en el caso de la primera cadena, que incluye el guion seguido de una "m", el método no devuelve el índice del guion, pero en su lugar, devuelve el índice de la "m".  [! código csharp [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)] [! código vb [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` y termina al final de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural). Un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos. Las sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, la posición del carácter en el que comenzó la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar el guion (00AD) después de una "n" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve 1 para indicar que ha encontrado a una coincidencia en la posición de las "n". Una búsqueda ordinal, sin embargo, busca el guion en una cadena y notifica que está presente correctamente desde la segunda cadena.  [! código csharp [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)] [! código vb [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` hasta `startIndex`  +  `count` - 1.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor. Las sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter en el que comenzó la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método se utiliza para buscar un guion (00AD) después de una "n" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, el método devuelve 1 para indicar que ha encontrado a una coincidencia en la posición de las "n".  [! código csharp [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)] [! código vb [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` y termina al final de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural (es decir, si <paramref name="options" /> no es <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda.  En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar la posición de un guion (00AD) seguida por una "m" a partir de la tercera posición de carácter de dos cadenas. Solo una de las cadenas contiene la subcadena necesaria. En ambos casos, como el guion virtual es un carácter que se puede pasar por alto, el método devuelve el índice de "m" en la cadena cuando realiza una comparación que tiene en cuenta la referencia cultural. Observe que en el caso de la primera cadena, que incluye el guion virtual seguido de una "m", el método no devuelve el índice del guion virtual, sino el índice de "m". El método devuelve el índice del guion en la primera cadena solo cuando realiza una comparación ordinal.  [! código csharp [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)] [! código vb [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` hasta `startIndex`  +  `count` - 1.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural, si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda.  En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> método se utiliza para buscar la posición de un guion (00AD) seguida por una "m" a partir de la tercera y la sexta posición de carácter de dos cadenas. Solo una de las cadenas contiene la subcadena necesaria. En ambos casos, como el guion virtual es un carácter que se puede pasar por alto, el método devuelve el índice de "m" en la cadena cuando realiza una comparación que tiene en cuenta la referencia cultural. Tenga en cuenta que en el caso de la primera cadena, que incluye el guion seguido de una "m", el método no devuelve el índice del guion, pero en su lugar, devuelve el índice de la "m".  [! código csharp [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)] [! código vb [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` hasta `startIndex`  +  `count` - 1.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural). Un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos. Las sobrecargas de <xref:System.String.IndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter en el que comenzó la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar el guion (00AD) después de una "n" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve 1 para indicar que ha encontrado a una coincidencia en la posición de las "n". Una búsqueda ordinal, sin embargo, busca el guion en una cadena y notifica que está presente correctamente desde la segunda cadena.  [! código csharp [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)] [! código vb [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se buscará hacia delante, empezando en `startIndex` hasta `startIndex`  +  `count` - 1.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural (es decir, si <paramref name="options" /> no es <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda.  En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar la posición de un guion (00AD) seguida por una "m" a partir de la tercera y la sexta posición de carácter de dos cadenas. Solo una de las cadenas contiene la subcadena necesaria. En ambos casos, como el guion virtual es un carácter que se puede pasar por alto, el método devuelve el índice de "m" en la cadena cuando realiza una comparación que tiene en cuenta la referencia cultural. Cuando realiza una comparación ordinal, sin embargo, busca la subcadena solo en la primera cadena. Tenga en cuenta que en el caso de la primera cadena, que incluye el guion seguido de una "m", el método no devuelve el índice del guion, pero en su lugar, devuelve el índice de la "m" cuando realiza una comparación dependiente de la referencia cultural. El método devuelve el índice del guion en la primera cadena solo cuando realiza una comparación ordinal.  [! código csharp [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)] [! código vb [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a string starts with a specific prefix.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <c>source</c>.</param>
        <summary>Determines whether the specified source string starts with the specified prefix.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadena se inicia y finaliza con una subcadena vacía (""); por lo tanto, si `prefix` es una cadena vacía, este método devuelve `true`.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina si una cadena es el prefijo o sufijo de otra cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="prefix" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>prefix</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determines whether the specified source string starts with the specified prefix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadena se inicia y finaliza con una subcadena vacía (""); por lo tanto, si `prefix` es una cadena vacía, este método devuelve `true`.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina si una cadena es el prefijo o sufijo de otra cadena utilizando <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="prefix" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indicates whether a specified Unicode character or string is sortable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">A Unicode character.</param>
        <summary>Indicates whether a specified Unicode character is sortable.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="ch" /> parameter is sortable; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `ch` parámetro es que se puede ordenar si es un carácter Unicode que se define en una instancia interna <xref:System.Globalization.CompareInfo> clase tabla de orden y no es un uso privado o un carácter suplente alto o bajo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A string of zero or more Unicode characters.</param>
        <summary>Indicates whether a specified Unicode string is sortable.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="str" /> parameter is not an empty string ("") and all the Unicode characters in <paramref name="str" /> are sortable; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada carácter Unicode en el `str` parámetro está representado por uno o con codificación UTF-16 más <xref:System.Char> objetos. El `str` parámetro es que se puede ordenar si cada carácter Unicode se define en una instancia interna <xref:System.Globalization.CompareInfo> clase tabla de orden y no es un uso privado o un carácter suplente alto o bajo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a string ends with a specific suffix.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <c>source</c>.</param>
        <summary>Determines whether the specified source string ends with the specified suffix.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadena se inicia y finaliza con una subcadena vacía (""); por lo tanto, si `suffix` es una cadena vacía, este método devuelve `true`.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina si una cadena es el prefijo o sufijo de otra cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="suffix" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>suffix</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determines whether the specified source string ends with the specified suffix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada cadena se inicia y finaliza con una subcadena vacía (""); por lo tanto, si `suffix` es una cadena vacía, este método devuelve `true`.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina si una cadena es el prefijo o sufijo de otra cadena utilizando <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="suffix" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the zero-based index of the last occurrence of a value within a string or within a portion of it.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se realiza hacia atrás a partir del final de la cadena y terminando al principio de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor. Las sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> método siempre devuelve la última posición de índice en <paramref name="source" /> para indicar que se encuentra la coincidencia al final de <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> método se utiliza para buscar el guion (00AD) de dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, el método devuelve la última posición de índice en la cadena para indicar que ha encontrado a una coincidencia al final de la cadena.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se realiza hacia atrás a partir del final de la cadena y terminando al principio de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valor.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural, si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> método siempre devuelve <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, que representa la última posición de índice en <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> método se utiliza para buscar tres subcadenas (un guion (00AD), un guion seguido de "n" y un guion seguido de "m") de dos cadenas. Solo una de las cadenas contiene un guion virtual. En cada caso, dado que el guion virtual es un carácter ignorable, el resultado es el mismo como si no se incluía el guion en <paramref name="value" />. Cuando se busca un guion solo, el método devuelve 6 y 5. Estos valores se corresponden con el índice del último carácter de las dos cadenas.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se realiza hacia atrás a partir del final de la cadena y terminando al principio de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural). Un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos. Las sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método siempre devuelve la última posición de carácter en <paramref name="source" /> para indicar que se encuentra la coincidencia al final de <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> método se utiliza para buscar un guion (00AD) de dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve la última posición de índice en la cadena de origen. En cambio, una búsqueda ordinal correctamente busca el guion en una cadena y notifica que está presente en la segunda cadena.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta el principio de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor. Las sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> método se utiliza para buscar un guion (00AD) que precede al último "m" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, el método devuelve la posición de índice de la "m", que es el valor de <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen se realiza hacia atrás a partir del final de la cadena y terminando al principio de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural (es decir, si <paramref name="options" /> no es <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, que representa la última posición de índice en <paramref name="source" />. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> método se utiliza para buscar tres subcadenas (un guion (00AD), un guion seguido de "n" y un guion seguido de "m") de dos cadenas. Solo una de las cadenas contiene un guion virtual. Dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve el mismo valor que se devolvería si el guion no se incluyeron en la cadena de búsqueda. Una búsqueda ordinal, sin embargo, busca el guion en una cadena y notifica que está presente correctamente desde la segunda cadena.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta el principio de la cadena.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valor.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural, si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> método se utiliza para buscar una subcadena que incluye un guion (00AD) y que precede o que incluya la "m" final en una cadena. Dado que se pasa por alto el guion en la cadena de búsqueda, una llamada al método para buscar una subcadena que consta del guion y "m" devuelve la posición de la "m" en la cadena, mientras que llamarlo para buscar una subcadena que consta del guion y "n" devuelve la  posición de las "n". Cuando la cadena de búsqueda contiene sólo el guion, el método devuelve el índice de la letra "m", que representa el valor de <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta el principio de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural). Un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos. Las sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar un guion (00AD) que precede al último "m" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve la posición de índice de la letra "m". Una búsqueda ordinal, sin embargo, busca el guion en una cadena y notifica que está presente correctamente desde la segunda cadena.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta `startIndex`  -  `count` + 1.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor. Las sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> método se utiliza para buscar un guion (00AD) que precede al último "m" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, el método devuelve la posición de índice de la "m", que es el valor de <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta el principio de la cadena.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena. Tenga en cuenta que <xref:System.Globalization.CompareInfo.IndexOf%2A> y <xref:System.Globalization.CompareInfo.LastIndexOf%2A> está buscando en diferentes partes de la cadena, incluso con el mismo `startIndex` parámetro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural (es decir, si <paramref name="options" /> no es <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda.  En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar la posición de un guion (00AD) seguida por una "m", empezando por el final de la "m" en dos cadenas. Solo una de las cadenas contiene la subcadena necesaria. En ambos casos, como el guion virtual es un carácter que se puede pasar por alto, el método devuelve el índice de "m" en la cadena cuando realiza una comparación que tiene en cuenta la referencia cultural. Observe que en el caso de la primera cadena, que incluye el guion virtual seguido de una "m", el método no devuelve el índice del guion virtual, sino el índice de "m". El método devuelve el índice del guion en la primera cadena solo cuando realiza una comparación ordinal.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta `startIndex`  -  `count` + 1.  
  
 Esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Para llevar a cabo una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode, debe llamar a una de las sobrecargas que tiene un parámetro de tipo <xref:System.Globalization.CompareOptions> y usar el <xref:System.Globalization.CompareOptions.Ordinal> valor.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural, si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda.  En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> método se utiliza para buscar la posición de un guion (00AD) seguida por una "m" en los tres caracteres que preceden a la última "m" de dos cadenas. Solo una de las cadenas contiene la subcadena necesaria. En ambos casos, como el guion virtual es un carácter que se puede pasar por alto, el método devuelve el índice de "m" en la cadena cuando realiza una comparación que tiene en cuenta la referencia cultural. Tenga en cuenta que en el caso de la primera cadena, que incluye el guion seguido de una "m", el método no devuelve el índice del guion, pero en su lugar, devuelve el índice de la "m".  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta `startIndex`  -  `count` + 1.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Si el carácter es un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), se puede considerar equivalente a cualquier aparición de sus componentes en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural). Un carácter se considera equivalente a otro carácter solo si los valores Unicode son los mismos. Las sobrecargas de <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> que buscan un carácter de realizar una búsqueda ordinal, mientras que las que buscan una cadena de realizan una búsqueda de referencias culturales.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda de la referencia cultural, si <paramref name="value" /> es un carácter ignorable, el resultado es equivalente a buscar sin ese carácter. En este caso, el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda. En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar un guion (00AD) que precede al último "m" en dos cadenas. Solo una de las cadenas contiene un guion virtual. En ambos casos, dado que el guion virtual es un carácter ignorable, una búsqueda de la referencia cultural devuelve la posición de índice de la "m", que es el valor de <paramref name="startIndex" />. Una búsqueda ordinal, sin embargo, busca el guion en una cadena y notifica que está presente correctamente desde la segunda cadena.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de origen es la búsqueda hacia atrás, empezando en `startIndex` hasta `startIndex`  -  `count` + 1.  
  
 El <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valor no es válido para este método.  
  
 Si `options` no incluye el <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda de referencias culturales. Un valor Unicode que representa un carácter compuesto, como la ligadura "Æ" (U + 00 C 6), puede considerarse equivalente a cualquier aparición de los componentes del carácter en la secuencia correcta, como "AE" (u+0041, u+0045), en función de la referencia cultural. Si `options` incluye la <xref:System.Globalization.CompareOptions.Ordinal> valor, esta sobrecarga realiza una búsqueda ordinal (sin tener en cuenta la referencia cultural), donde se comparan los valores Unicode.  
  
> [!NOTE]
>  Cuando sea posible, debe llamar a cadena de los métodos de comparación que tienen un parámetro de tipo <xref:System.Globalization.CompareOptions> para especificar el tipo de comparación que se esperaba. Como norma general, usar opciones lingüísticas (utilizar la referencia cultural actual) para comparar cadenas que se muestran en la interfaz de usuario y especifique <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> para las comparaciones de seguridad.  
  
   
  
## Examples  
 El ejemplo siguiente determina los índices de las apariciones de la primeros y últimas de un carácter o una subcadena en una parte de una cadena.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Juegos de caracteres incluyen caracteres puede pasar por alto, que son caracteres que no se consideran al realizar a una ordenación lingüística o la referencia cultural. En una búsqueda que tiene en cuenta la referencia cultural (es decir, si <paramref name="options" /> no es <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), si <paramref name="value" /> contiene un carácter que se puede pasar por alto, el resultado es equivalente a buscar sin ese carácter. Si <paramref name="value" /> consta solo de uno o varios caracteres puede pasar por alto el <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método siempre devuelve <paramref name="startIndex" />, que es la posición del carácter donde comienza la búsqueda.  En el ejemplo siguiente, la <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> método se utiliza para buscar la posición de un guion (00AD) seguido por una "m" en todas, pero la posición del primer carácter antes de la última "m" en dos cadenas. Solo una de las cadenas contiene la subcadena necesaria. En ambos casos, como el guion virtual es un carácter que se puede pasar por alto, el método devuelve el índice de "m" en la cadena cuando realiza una comparación que tiene en cuenta la referencia cultural. Cuando realiza una comparación ordinal, sin embargo, busca la subcadena solo en la primera cadena. Tenga en cuenta que en el caso de la primera cadena, que incluye el guion seguido de una "m", el método no devuelve el índice del guion, pero en su lugar, devuelve el índice de la "m" cuando realiza una comparación dependiente de la referencia cultural. El método devuelve el índice del guion en la primera cadena solo cuando realiza una comparación ordinal.  [! code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the properly formed culture identifier for the current <see cref="T:System.Globalization.CompareInfo" />.</summary>
        <value>Identificador de referencia cultural correctamente formado para el objeto <see cref="T:System.Globalization.CompareInfo" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.Globalization.CompareInfo.LCID%2A> propiedad.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the culture used for sorting operations by this <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <value>Nombre de una referencia cultural.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.CompareInfo.Name%2A> y <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> las propiedades pueden tener valores diferentes. Por ejemplo, un <xref:System.Globalization.CompareInfo.LCID%2A> propiedad el valor hexadecimal 0 x 10407 identifica una referencia cultural de ordenación alternativa que ordena los nombres tal y como aparecen en una guía telefónica alemana. El <xref:System.Globalization.CompareInfo.Name%2A> propiedad tiene un valor de "de-de_phoneb", mientras que el <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> propiedad de la referencia cultural de alemán (Alemania) asociada tiene un valor de "de-DE".  
  
   
  
## Examples  
 El ejemplo siguiente compara tres cadenas mediante las referencias culturales fr-FR y ja-JP. El <xref:System.Globalization.CultureInfo.Name%2A> propiedad se utiliza para mostrar el nombre de cada referencia cultural.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback.</param>
        <summary>Runs when the entire object graph has been deserialized.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación de miembro de interfaz explícita que puede usarse solo cuando actual <xref:System.Globalization.CompareInfo> objeto se convierte en un <xref:System.Runtime.Serialization.IDeserializationCallback> interfaz. Para obtener más información, vea el método <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <returns>A string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invalida el <xref:System.Object.ToString%2A?displayProperty=nameWithType> método. Devuelve una cadena formada por el nombre de clase y el valor de la instancia <xref:System.Globalization.CompareInfo.Name%2A> propiedad, separados por un guión.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Que comience por .NET Framework 4, el <see cref="M:System.Globalization.CompareInfo.ToString" /> método devuelve el nombre de clase seguido por un espacio, un guión, un espacio y el valor de la <see cref="P:System.Globalization.CompareInfo.Name" /> propiedad. Por ejemplo, para un <see cref="T:System.Globalization.CompareInfo" /> objeto que representa la referencia cultural en-US, el <see cref="M:System.Globalization.CompareInfo.ToString" /> método devuelve "CompareInfo - en-US". En versiones anteriores de .NET Framework, devuelve el nombre de clase seguido por un espacio, un guión, un espacio y el valor de la <see cref="P:System.Globalization.CompareInfo.LCID" /> propiedad. Por ejemplo, para un <see cref="T:System.Globalization.CompareInfo" /> objeto que representa la referencia cultural en-US, el <see cref="M:System.Globalization.CompareInfo.ToString" /> método devuelve "CompareInfo - 1033".</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the version of Unicode used for comparing and sorting strings.</summary>
        <value>Objeto que contiene información sobre la versión Unicode utilizada para comparar y ordenar cadenas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El peso de caracteres individuales y, por lo tanto, la manera en la que están en comparación con u ordenadas, cadenas concretas depende de la versión de la especificación Unicode que implementa una versión concreta de .NET Framework. En el [!INCLUDE[net_v45](~/includes/net-v45-md.md)], esto también depende del sistema operativo del host, como se muestra en la tabla siguiente. Tenga en cuenta que esta lista de versiones compatibles de Unicode se aplica solo a la comparación y ordenación de caracteres; no se aplica a la clasificación de caracteres Unicode por categoría.  
  
|Versión de .NET Framework|Sistema operativo|Versión de Unicode|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Todos los sistemas operativos|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] y versiones posteriores|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] y versiones posteriores|[!INCLUDE[win8](~/includes/win8-md.md)] y versiones posteriores del sistema operativo Windows|Unicode 6.3|  
  
 El <xref:System.Globalization.SortVersion> objeto devuelto por la <xref:System.Globalization.CompareInfo.Version%2A> propiedad no identifica la versión exacta de Unicode utilizada para comparar cadenas. Es útil sólo cuando se comparan dos <xref:System.Globalization.SortVersion> objetos para determinar si utilizan la misma versión de Unicode y la referencia cultural para comparar cadenas. Para obtener más información y un ejemplo, consulte la <xref:System.Globalization.SortVersion> página de referencia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>