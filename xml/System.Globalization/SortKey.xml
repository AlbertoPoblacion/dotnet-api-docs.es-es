<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ff0d44e069348650c8ba127bcb0c1bb3c73ed547" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39910362" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SortKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortKey" />
  <TypeSignature Language="F#" Value="type SortKey = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa el resultado de asignar una cadena a su criterio de ordenación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una comparación de referencias culturales de dos cadenas depende de cada carácter en las cadenas de varias categorías de prioridad de ordenación, incluidos scripts, es un carácter alfabético, mayúsculas, minúsculas y diacríticos. Un criterio de ordenación sirve como repositorio de estas categorías para una cadena determinada.  
  
 El <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=nameWithType> método devuelve una instancia de la <xref:System.Globalization.SortKey> clase que refleja la asignación de referencias culturales de caracteres en una cadena especificada. El valor de un <xref:System.Globalization.SortKey> objeto es sus datos clave, que es devuelto por la <xref:System.Globalization.SortKey.KeyData%2A> propiedad. Estos datos de claves constan de una serie de bytes que codificar la cadena, las reglas de ordenación específicas de referencias culturales y las opciones de comparación especificada por el usuario. Una comparación con las claves de ordenación consta de una comparación bit a bit de los datos de clave correspondientes en cada criterio de ordenación.  Por ejemplo, si crea una clave de ordenación mediante una llamada a la <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> método con un valor de <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=nameWithType>, una operación de comparación de cadenas que utiliza la clave de ordenación que distingue mayúsculas de minúsculas.  
  
 Después de crear un criterio de ordenación para una cadena, comparar las claves de ordenación mediante una llamada a estático <xref:System.Globalization.SortKey.Compare%2A?displayProperty=nameWithType> método. Este método realiza una comparación byte a byte simple, por lo que es mucho más rápido que el <xref:System.String.Compare%2A?displayProperty=nameWithType> o <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método.  
  
## <a name="performance-considerations"></a>Consideraciones sobre el rendimiento  
 Al realizar una comparación de cadenas, la <xref:System.Globalization.SortKey.Compare%2A> y <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> métodos producen los mismos resultados, pero se dirigen a distintos escenarios.  
  
 En un nivel alto, el <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método genera la clave de ordenación para cada cadena, realiza la comparación y, a continuación, descarta el criterio de ordenación y devuelve el resultado de la comparación. Sin embargo, el <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método realmente no genera un criterio de ordenación completo para realizar la comparación. En su lugar, el método genera los datos de clave para cada elemento de texto (es decir, carácter base, par suplente o secuencia de caracteres combinables) en cada cadena. El método, a continuación, compara los datos de clave para los elementos de texto correspondientes. La operación finaliza en cuanto se determina el resultado final de la comparación. Se calcula la información de clave de ordenación, pero no <xref:System.Globalization.SortKey> se crea el objeto. Esta estrategia es económica en términos de rendimiento si se comparan dos cadenas una vez, pero puede resultar caro si las cadenas se comparan muchas veces.  
  
 El <xref:System.Globalization.SortKey.Compare%2A> método requiere la generación de un <xref:System.Globalization.SortKey> objeto para cada cadena antes de realizar la comparación. Esta estrategia es costosa en términos de rendimiento para la primera comparación debido al tiempo y memoria invertido para generar el <xref:System.Globalization.SortKey> objetos. Sin embargo, resulta económico si las mismas claves de ordenación se comparan muchas veces.  
  
 Por ejemplo, supongamos que escribe una aplicación que busca en una tabla de base de datos para la fila en la que la columna de índice basada en cadena coincide con una cadena de búsqueda especificado. La tabla contiene miles de filas y comparar la cadena de búsqueda en el índice de cada fila tardará mucho tiempo. Por lo tanto, cuando la aplicación almacena una fila y su columna de índice, también genera y almacena la clave de ordenación para el índice en una columna específica para mejorar el rendimiento de la búsqueda. Cuando la aplicación busca una fila de destino, compara la clave de ordenación para la cadena de búsqueda a la clave de ordenación para la cadena del índice, en lugar de comparar la cadena de búsqueda en la cadena de índice.  
  
## <a name="security-considerations"></a>Consideraciones de seguridad  
 El <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método devuelve un <xref:System.Globalization.SortKey> objeto con el valor basado en una cadena especificada y <xref:System.Globalization.CompareOptions> valor y la referencia cultural asociada subyacente <xref:System.Globalization.CompareInfo> objeto. Si una decisión de seguridad depende de una comparación de cadenas o cambio de mayúsculas, debe usar el <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método de la referencia cultural para asegurarse de que el comportamiento de la operación es coherente, independientemente de la configuración de la referencia cultural del sistema operativo.  
  
 Para obtener una clave de ordenación, siga estos pasos:  
  
1.  Recuperar la referencia cultural de la <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=nameWithType> propiedad.  
  
2.  Recuperar un <xref:System.Globalization.CompareInfo> objeto para la referencia cultural de la <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> propiedad.  
  
3.  Llame al método <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType>.  
  
 Trabajar con el valor de un <xref:System.Globalization.SortKey> objeto es equivalente a llamar a la Windows `LCMapString` método con el valor LCMAP_SORTKEY especificado. Sin embargo, para el <xref:System.Globalization.SortKey> de objetos, las claves de ordenación para caracteres ingleses preceder a las claves de ordenación de los caracteres coreanos.  
  
 <xref:System.Globalization.SortKey> objetos pueden ser serializado, pero solo por lo que pueden cruzar <xref:System.AppDomain> objetos. Si una aplicación serializa un <xref:System.Globalization.SortKey> de objeto, la aplicación debe volver a generar todas las claves de ordenación cuando hay una nueva versión de .NET Framework.  
  
 Para obtener más información acerca de las claves de ordenación, vea Unicode Technical Standard #10, "Unicode Collation Algorithm" en el [sitio Web de Unicode Consortium](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 El ejemplo siguiente compara la cadena "llama" utilizando "en-US" y referencias culturales "es-es" y las culturas tradicionales "en-US" y "es-es".  
  
 [!code-cpp[System.Globalization.SortKey.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 El ejemplo siguiente muestra cómo puede usar el <xref:System.Globalization.SortKey> clase para mejorar el rendimiento en una aplicación que depende en gran parte de una matriz grande de búsqueda y ordenación. El ejemplo crea una matriz no ordenada de nombres, que en este caso tiene 13 elementos. A continuación, almacena la clave de ordenación de cada nombre en una matriz paralela, que pasa a la <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> método. El resultado es una matriz ordenada. En el ejemplo, a continuación, busca en la matriz de tres cadenas. Para cada cadena de búsqueda, llama a la <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método para recuperar la cadena clave de ordenación y, a continuación, llama a la <xref:System.Array.FindIndex%2A?displayProperty=nameWithType> método para recuperar el índice de esa clave de ordenación de la matriz de claves de ordenación. Dado que las matrices de clave de nombre y la ordenación son paralelas, el índice devuelto también es el índice del nombre de la `names` matriz.  
  
 [!code-csharp[System.Globalization.SortKey.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (sortkey1 As SortKey, sortkey2 As SortKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::Globalization::SortKey ^ sortkey1, System::Globalization::SortKey ^ sortkey2);" />
      <MemberSignature Language="F#" Value="static member Compare : System.Globalization.SortKey * System.Globalization.SortKey -&gt; int" Usage="System.Globalization.SortKey.Compare (sortkey1, sortkey2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">Primera clave de ordenación que se va a comparar.</param>
        <param name="sortkey2">Segunda clave de ordenación que se va a comparar.</param>
        <summary>Compara dos claves de ordenación.</summary>
        <returns>Entero con signo que indica la relación entre <paramref name="sortkey1" /> y <paramref name="sortkey2" />.  
  
 <list type="table"><listheader><term> Valor </term><description> Condición </description></listheader><item><term> Menor que cero </term><description><paramref name="sortkey1" /> es menor que <paramref name="sortkey2" />.  </description></item><item><term> Cero </term><description><paramref name="sortkey1" /> es igual a <paramref name="sortkey2" />.  </description></item><item><term> Mayor que cero </term><description><paramref name="sortkey1" /> es mayor que <paramref name="sortkey2" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Globalization.SortKey.Compare%2A> método compara la <xref:System.Globalization.SortKey.KeyData%2A> propiedades de la `sortkey1` y `sortkey2` parámetros. El método produce los mismos resultados que la <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> método.  
  
 Para obtener más información sobre la <xref:System.Globalization.SortKey.Compare%2A> método y la comparación de las claves de ordenación, vea el <xref:System.Globalization.SortKey> tema de la clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se compara dos cadenas mediante la <xref:System.Globalization.SortKey.Compare%2A> método y el equivalente <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[sys.glob.sortkey.compare#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="sortkey1" /> o <paramref name="sortkey2" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortKey.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto que se compara con el objeto <see cref="T:System.Globalization.SortKey" /> actual.</param>
        <summary>Determina si el objeto especificado es igual al objeto <see cref="T:System.Globalization.SortKey" /> actual.</summary>
        <returns>
          <see langword="true" /> si el parámetro <paramref name="value" /> es igual al objeto <see cref="T:System.Globalization.SortKey" /> actual; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dos <xref:System.Globalization.SortKey> objetos se consideran iguales si sus <xref:System.Globalization.SortKey.KeyData%2A> propiedades son iguales.  
  
 Este método invalida <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra los resultados de <xref:System.Globalization.SortKey.Equals%2A> en comparación con diferentes <xref:System.Globalization.SortKey> objetos.  
  
 [!code-cpp[System.Globalization.SortKey.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortKey.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sirve como función hash para el objeto <see cref="T:System.Globalization.SortKey" /> actual que es adecuado para los algoritmos hash y las estructuras de datos, como una tabla hash.</summary>
        <returns>Código hash para el objeto <see cref="T:System.Globalization.SortKey" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método genera el mismo código hash para dos objetos que son iguales de acuerdo con el método <xref:System.Globalization.SortKey.Equals%2A>.  
  
 Este método invalida <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyData As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ KeyData { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : byte[]" Usage="System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la matriz de bytes que representa el objeto <see cref="T:System.Globalization.SortKey" /> actual.</summary>
        <value>Matriz de bytes que representa el objeto <see cref="T:System.Globalization.SortKey" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el uso de los datos devueltos por la <xref:System.Globalization.SortKey.KeyData%2A> propiedad en la comparación de cadenas, vea el <xref:System.Globalization.SortKey> tema de la clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una cadena original y la cadena equivalente y datos de clave de un criterio de ordenación entre mayúsculas y minúsculas y un criterio de ordenación entre mayúsculas y minúsculas.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OriginalString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ OriginalString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalString : string" Usage="System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la cadena original utilizada para crear el objeto <see cref="T:System.Globalization.SortKey" /> actual.</summary>
        <value>Cadena original utilizada para crear el objeto <see cref="T:System.Globalization.SortKey" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra una cadena original y la cadena equivalente y datos de clave de un criterio de ordenación entre mayúsculas y minúsculas y un criterio de ordenación entre mayúsculas y minúsculas.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sortKey.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa el actual objeto <see cref="T:System.Globalization.SortKey" />.</summary>
        <returns>Una cadena que representa el objeto <see cref="T:System.Globalization.SortKey" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto es la concatenación de la cadena "SortKey -", el identificador de referencia cultural y opciones de comparación del actual <xref:System.Globalization.SortKey> objeto y el valor de la <xref:System.Globalization.SortKey.OriginalString%2A> propiedad.  
  
 Este método invalida <xref:System.Object.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una cadena original, las cadenas de resultado de la <xref:System.Globalization.SortKey.ToString%2A> método para las claves de ordenación entre mayúsculas y minúsculas y los datos de clave para las claves de ordenación entre mayúsculas y minúsculas.  
  
 [!code-csharp[sys.glob.sortkey.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>