<Type Name="Literal" FullName="System.Web.UI.WebControls.Literal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7103ea665380f176d6e51bd5f4c131b4afc7022" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30598829" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Literal : System.Web.UI.Control, System.Web.UI.ITextControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Literal extends System.Web.UI.Control implements class System.Web.UI.ITextControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Literal" />
  <TypeSignature Language="VB.NET" Value="Public Class Literal&#xA;Inherits Control&#xA;Implements ITextControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Literal : System::Web::UI::Control, System::Web::UI::ITextControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.ITextControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LiteralDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.LiteralControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reserva una ubicación en la página web para mostrar texto estático.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En este tema:  
  
-   [Introducción](#introduction)  
  
-   [Sintaxis declarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introducción  
 Use el <xref:System.Web.UI.WebControls.Literal?displayProperty=nameWithType> control para reservar una ubicación en la página Web para mostrar el texto. El <xref:System.Web.UI.WebControls.Literal> control es similar a la <xref:System.Web.UI.WebControls.Label> (control), excepto el <xref:System.Web.UI.WebControls.Literal> control no permite aplicar un estilo al texto mostrado. Se puede controlar mediante programación el texto mostrado en el control estableciendo la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad.  
  
> [!CAUTION]
>  Este control se puede utilizar para mostrar los datos proporcionados por el usuario, que pueden incluir script de cliente malintencionado. Compruebe que cualquier información que se envía desde un cliente de secuencias de comandos ejecutables, instrucciones SQL u otro código antes de mostrarla en la aplicación. ASP.NET proporciona una característica de validación de solicitudes de entrada para bloquear secuencias de comandos y código HTML en proporcionados por el usuario. Controles de servidor de validación también se proporcionan para evaluar proporcionados por el usuario.  
  
 Para obtener más información acerca de la seguridad, consulte [protección de los controles estándar](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [Cómo: proteger frente a ataques mediante secuencias de una aplicación Web mediante la aplicación de la codificación de HTML a cadenas](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), y [validar entrada de usuario en las páginas Web ASP.NET](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintaxis declarativa  
  
```  
<asp:Literal  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    Mode="Transform|PassThrough|Encode"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Text="string"  
    Visible="True|False"  
/>  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.Literal> control para mostrar texto estático.  
  
> [!NOTE]
>  En el ejemplo siguiente se utiliza el modelo de código de un solo archivo y podría no funcionar correctamente si se copia directamente en un archivo de código subyacente. Este ejemplo de código debe copiarse en un archivo de texto vacío con la extensión .aspx. Para obtener más información sobre el modelo de código de formularios Web Forms, vea [modelo de código de páginas de ASP.NET Web Forms](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.Label" />
    <altmember cref="P:System.Web.UI.WebControls.Literal.Text" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Literal();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.AddParsedSubObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddParsedSubObject (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddParsedSubObject(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> que representa el elemento analizado.</param>
        <summary>Notifica al control <see cref="T:System.Web.UI.WebControls.Literal" /> que se analizó un elemento XML o HTML y agrega ese elemento a <see cref="T:System.Web.UI.ControlCollection" /> del control del servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.Literal.AddParsedSubObject%2A> controlar el método en un servidor personalizado para que siempre se establece la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad para el objeto analizado `Text` propiedad, si el objeto analizado es una <xref:System.Web.UI.WebControls.Literal>y a vacío `string` en caso contrario.  
  
 [!code-aspx-csharp[CustomLiteralAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomLiteralAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/CS/custom_literal_addparsedsubobject.cs#2)]
 [!code-vb[CustomLiteralAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralAddParsedSubObject/VB/custom_literal_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> no es del tipo <see cref="T:System.Web.UI.LiteralControl" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un objeto <see cref="T:System.Web.UI.EmptyControlCollection" /> para la instancia actual del control <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <returns>Objeto <see cref="T:System.Web.UI.ControlCollection" /> que va a contener los controles de servidor secundarios del control de servidor actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.Literal.CreateControlCollection%2A> controlar el método en un servidor personalizado para que siempre devuelva una instancia de la <xref:System.Web.UI.EmptyControlCollection> de clases para el <xref:System.Web.UI.WebControls.Literal> objeto.  
  
 [!code-aspx-csharp[CustomLiteralCreateControlCollection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollectioncs.aspx#1)]
 [!code-aspx-vb[CustomLiteralCreateControlCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollectionvb.aspx#1)]  
  
 [!code-csharp[CustomLiteralCreateControlCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/CS/custom_literal_createcontrolcollection.cs#2)]
 [!code-vb[CustomLiteralCreateControlCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralCreateControlCollection/VB/custom_literal_createcontrolcollection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece el foco de entrada en un control; el método de control base <see cref="M:System.Web.UI.WebControls.Literal.Focus" /> no se admite en un control <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Literal> invalidaciones de controlar la <xref:System.Web.UI.Control.Focus%2A> método de la clase base. El <xref:System.Web.UI.WebControls.Literal.Focus%2A> método de un <xref:System.Web.UI.WebControls.Literal> control siempre produce una excepción para indicar que la <xref:System.Web.UI.WebControls.Literal.Focus%2A> método no se admite en un <xref:System.Web.UI.WebControls.Literal> control.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se realizó una llamada al método <see cref="M:System.Web.UI.WebControls.Literal.Focus" /> para un control <see cref="T:System.Web.UI.WebControls.Literal" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.LiteralMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.LiteralMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As LiteralMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::LiteralMode Mode { System::Web::UI::WebControls::LiteralMode get(); void set(System::Web::UI::WebControls::LiteralMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LiteralMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor de enumeración que especifica cómo se representa el contenido del control <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <value>Uno de los valores de enumeración de <see cref="T:System.Web.UI.WebControls.LiteralMode" />. El valor predeterminado es <see langword="Transform" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.Literal.Mode%2A> propiedad para especificar cómo el contenido de un <xref:System.Web.UI.WebControls.Literal> se debe representar el control. Esta propiedad se establece mediante uno de los <xref:System.Web.UI.WebControls.LiteralMode> valores de enumeración. En la tabla siguiente se enumera los valores posibles.  
  
|Valor|Descripción|  
|-----------|-----------------|  
|`PassThrough`|No se modifica el contenido del control.|  
|`Encode`|El contenido del control se convierte en una cadena codificada en HTML.|  
|`Transform`|Elementos de lenguaje de marcado no compatibles se quitan del contenido del control. Si el <xref:System.Web.UI.WebControls.Literal> control se representa en un explorador compatible con HTML o XHTML, no se modifica el contenido del control.|  
  
 Si especifica `PassThrough`, todo el contenido de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad se pasan al dispositivo o explorador sin realizar ninguna modificación. Por ejemplo, si la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Literal> control contiene un `<hr>` (etiqueta), se envía a todos los dispositivos y exploradores si son compatibles o no.  
  
 Si especifica `Encode`, el contenido de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad se convierten en una cadena codificada en HTML antes de su representación. Por ejemplo, si la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Literal> control contiene un `<hr>` etiqueta, se convierte en `&lt;Hr&gt;` y se envía al dispositivo o explorador.  
  
 Si especifica `Transform`, el comportamiento de representación de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad depende del tipo de marcado que se va a representar. Cuando el <xref:System.Web.UI.WebControls.Literal> control se representa para un dispositivo o explorador que admite HTML o XHTML, especificar <xref:System.Web.UI.WebControls.LiteralMode.Transform> se comporta como si especificaran <xref:System.Web.UI.WebControls.LiteralMode.PassThrough>. Todas las etiquetas de marcado y los elementos de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad se representan del explorador que lo solicita.  
  
 Cuando el <xref:System.Web.UI.WebControls.Literal> control se representa para un lenguaje de marcado distinto de HTML o XHTML, como WML o cHTML, puede utilizar el <xref:System.Web.UI.WebControls.LiteralMode.Transform> valor para quitar elementos de marcado no compatible. En este caso, los elementos de lenguaje de marcado de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad que no se admiten en el lenguaje de marcado de destino no se representan para el control. Por ejemplo, si la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Literal> control contiene un `<hr>` etiqueta, la etiqueta se quita antes de que el contenido se envía a un dispositivo WML. Si una etiqueta no compatible incluye contenido, sólo la etiqueta se quita y se envía el contenido al dispositivo o explorador. Por ejemplo, si la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad contiene el contenido `<XYZ>Test</XYZ>`, `<XYZ>` y `</XYZ>` se quitan las etiquetas y el texto "Test" se envía al dispositivo o explorador.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo establecer un <xref:System.Web.UI.WebControls.Literal> del control <xref:System.Web.UI.WebControls.Literal.Mode%2A> propiedad. El <xref:System.Web.UI.WebControls.Literal.Mode%2A> propiedad se establece inicialmente en `Encode` en la sintaxis declarativa para el control. Una vez cargada la página, el usuario puede pulsar un botón para establecer el <xref:System.Web.UI.WebControls.Literal.Mode%2A> propiedad `PassThrough`. Esto hace que el contenido de la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad que se va a representar de manera diferente.  
  
> [!NOTE]
>  En el ejemplo siguiente se utiliza el modelo de código de un solo archivo y podría no funcionar correctamente si se copia directamente en un archivo de código subyacente. Este ejemplo de código debe copiarse en un archivo de texto vacío con la extensión .aspx. Para obtener más información sobre el modelo de código de formularios Web Forms, vea [modelo de código de páginas de ASP.NET Web Forms](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-vb[Literal.Mode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal.Mode/VB/literal.modevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El tipo especificado no se corresponde con ninguno de los valores de la enumeración <see cref="T:System.Web.UI.WebControls.LiteralMode" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.LiteralMode" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Literal.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> que recibe el contenido del control de servidor.</param>
        <summary>Envía el contenido del control de servidor al objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> proporcionado, que escribe el contenido que se representará en el cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.Literal.Render%2A> controlar el método en un servidor personalizado para que siempre se muestre un texto específico antes de la <xref:System.Web.UI.WebControls.Literal>.  
  
 [!code-aspx-csharp[CustomLiteralRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_rendercs.aspx#1)]
 [!code-aspx-vb[CustomLiteralRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_rendervb.aspx#1)]  
[!code-csharp[CustomLiteralRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLiteralRender/CS/custom_literal_render.cs#2)]
[!code-vb[CustomLiteralRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLiteralRender/VB/custom_literal_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Literal.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.ITextControl.Text</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el título que se muestra en el control <see cref="T:System.Web.UI.WebControls.Literal" />.</summary>
        <value>Título que se muestra en el control <see cref="T:System.Web.UI.WebControls.Literal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad para especificar o determinar el título que se muestra en el <xref:System.Web.UI.WebControls.Literal> control. Esto le permite cambiar el título mediante programación en tiempo de ejecución.  
  
 El título es descodifica de HTML en función de cómo asignar un valor a esta propiedad. Si asigna un valor a través de un atributo de la <xref:System.Web.UI.WebControls.Literal> (control), el valor es descodificado antes de mostrarse en HTML. Por ejemplo, `<asp:Literal id="DisplayLiteral" Text="A&nbsp;B"/>` se representa como "A B" en el explorador. Sin embargo, si establece esta propiedad mediante programación o colocando el texto entre las etiquetas apertura y cierre del control, el título no es descodificado en HTML. Por ejemplo, `<asp:Literal id="DisplayLiteral"> A&nbsp;B </asp:Literal>` se representa como "A&nbsp;B".  
  
> [!CAUTION]
>  Este control se puede utilizar para mostrar los datos proporcionados por el usuario, que pueden incluir script de cliente malintencionado. Compruebe que cualquier información que se envía desde un cliente de secuencias de comandos ejecutables, instrucciones SQL u otro código antes de mostrarla en la aplicación. ASP.NET proporciona una característica de validación de solicitudes de entrada para bloquear secuencias de comandos y código HTML en proporcionados por el usuario. Controles de servidor de validación también se proporcionan para evaluar proporcionados por el usuario. Para obtener más información, consulte [sintaxis de Control de servidor de validación](http://msdn.microsoft.com/library/96d2c59e-693c-4079-9b53-b3ff0d9e9133).  
  
 El valor de esta propiedad, cuando se establece, pueden guardar automáticamente en un archivo de recursos utilizando una herramienta de diseñador. Para obtener más información, consulte <xref:System.ComponentModel.LocalizableAttribute> y [globalización y localización](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.Literal.Text%2A> propiedad para cambiar mediante programación el título que se muestra en el <xref:System.Web.UI.WebControls.Literal> control.  
  
> [!NOTE]
>  En el ejemplo siguiente se utiliza el modelo de código de un solo archivo y podría no funcionar correctamente si se copia directamente en un archivo de código subyacente. Este ejemplo de código debe copiarse en un archivo de texto vacío con la extensión .aspx. Para obtener más información sobre el modelo de código de formularios Web Forms, vea [modelo de código de páginas de ASP.NET Web Forms](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Literal#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Literal/CS/literalcs.aspx#1)]
 [!code-aspx-vb[Literal#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Literal/VB/literalvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>