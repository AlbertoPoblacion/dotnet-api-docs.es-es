<Type Name="WizardStepCollection" FullName="System.Web.UI.WebControls.WizardStepCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5b7235e3f9d180f991b08d0d777816d59d572f9e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600319" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WizardStepCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WizardStepCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WizardStepCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WizardStepCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class WizardStepCollection sealed : System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa una colección de objetos derivados de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en un control que actúa como un asistente. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WizardStepCollection> clase se utiliza para almacenar y administrar una colección de <xref:System.Web.UI.WebControls.WizardStepBase>-derivado objetos en un control que actúa como un asistente, como el <xref:System.Web.UI.WebControls.CreateUserWizard> control o <xref:System.Web.UI.WebControls.Wizard> control. Por ejemplo, el <xref:System.Web.UI.WebControls.Wizard> control usa la <xref:System.Web.UI.WebControls.WizardStepCollection> clase para su <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> propiedad.  
  
 Hay varias maneras puede tener acceso a la <xref:System.Web.UI.WebControls.WizardStepBase>-derivado objetos en el <xref:System.Web.UI.WebControls.WizardStepCollection>:  
  
-   Use la <xref:System.Web.UI.WebControls.WizardStepCollection.Item%2A> propiedad para tener acceso directamente a un <xref:System.Web.UI.WebControls.WizardStepBase>-deriva el objeto en un índice de base cero especificado.  
  
-   Use la <xref:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator%2A> método para crear un enumerador que puede usarse para recorrer en iteración la colección.  
  
-   Use la <xref:System.Web.UI.WebControls.WizardStepCollection.CopyTo%2A> método para copiar el contenido de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección en un <xref:System.Array> objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo rellenar la <xref:System.Web.UI.WebControls.WizardStepCollection> colección utilizando la sintaxis declarativa.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionDeclare#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionDeclare/CS/wizardstepcollectiondeclarecs.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionDeclare#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionDeclare/VB/wizardstepcollectiondeclarevb.aspx#3)]  
  
 En el ejemplo siguiente se muestra cómo rellenar mediante programación un <xref:System.Web.UI.WebControls.WizardStepCollection> colección.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/CS/wizardstepcollectioncs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/VB/wizardstepcollectionvb.aspx#1)]  
  
 El siguiente es el archivo de código subyacente para la página Web en el ejemplo anterior.  
  
 [!code-csharp[System.Web.UI.WebControls.WizardStepCollection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/CS/wizardstepcollection.cs#2)]
 [!code-vb[System.Web.UI.WebControls.WizardStepCollection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollection/VB/wizardstepcollection.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
    <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
    <altmember cref="T:System.Web.UI.WebControls.Wizard" />
    <altmember cref="T:System.Web.UI.WebControls.CreateUserWizard" />
    <altmember cref="T:System.Web.UI.WebControls.Login" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Add(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">Objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se va a anexar a la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</param>
        <summary>Agrega, al final de la colección, el objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> método agrega la <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado al final de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección. Para agregar una <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado a la colección en una ubicación de índice específica, utilice el <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear mediante programación un <xref:System.Web.UI.WebControls.Wizard> control y usar el <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> método para agregar <xref:System.Web.UI.WebControls.WizardStepBase>-derivado <xref:System.Web.UI.WebControls.WizardStep> objetos a la <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> colección. Tenga en cuenta que en el ejemplo, el <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> propiedad de la <xref:System.Web.UI.WebControls.Wizard> control es una instancia de la <xref:System.Web.UI.WebControls.WizardStepCollection> clase.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardSteps#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardSteps/CS/wizardstepscs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardSteps#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardSteps/VB/wizardstepsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se pasa es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.AddAt(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.AddAt(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAt (index As Integer, wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAt(int index, System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación de índice en la que insertar el objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" />.</param>
        <param name="wizardStep">Objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se va a anexar a la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</param>
        <summary>Agrega el objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> especificado a la colección en la ubicación de índice especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> método agrega la <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado a la colección en la ubicación de índice especificada.  
  
 Para agregar una <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado al final de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección, utilice el <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se pasa es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.Add(System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita todos los objetos derivados de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.Clear%2A> método para quitar todos los <xref:System.Web.UI.WebControls.WizardStepBase>-objetos derivados de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección.  
  
> [!NOTE]
>  Después de la <xref:System.Web.UI.WebControls.WizardStepCollection.Clear%2A> método quita el <xref:System.Web.UI.WebControls.WizardStepBase>-objetos derivados de la colección, el <xref:System.Web.UI.WebControls.WizardStepCollection.Count%2A> propiedad de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección tiene un valor de cero.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Contains(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (wizardStep As WizardStepBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">Objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se va a buscar en la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</param>
        <summary>Determina si la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> contiene un objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> específico.</summary>
        <returns>
          <see langword="true" /> si el objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> está en la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.Contains%2A> método para determinar si un <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado se encuentra en la colección. Este método se usa normalmente para probar la existencia de un <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado antes de realizar una tarea, como la eliminación de un <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado de la colección.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wizardStep" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.WizardStepBase[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.WizardStepBase[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.CopyTo(System.Web.UI.WebControls.WizardStepBase[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As WizardStepBase(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Web::UI::WebControls::WizardStepBase ^&gt; ^ array, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Web.UI.WebControls.WizardStepBase[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Matriz de base cero de objetos <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que recibe los elementos copiados de la colección.</param>
        <param name="index">Posición de la matriz de destino donde se empiezan a recibir los elementos copiados.</param>
        <summary>Copia todos los elementos de una colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> en una matriz unidimensional compatible de objetos <see cref="T:System.Web.UI.WebControls.WizardStepBase" />, empezando por el índice especificado de la matriz de destino.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.CopyTo%2A> método para copiar el contenido de la colección en la matriz de base cero especificada. Los elementos se copian empezando por el índice especificado de la matriz de destino. Cuando los elementos se encuentran en una matriz, puede utilizar la sintaxis de la matriz para tener acceso a los elementos de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección.  
  
 Como alternativa, también puede utilizar el <xref:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator%2A> método para crear un enumerador que puede utilizarse para tener acceso a los elementos de la colección.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.WizardStepCollection.CopyTo%2A> método para copiar el <xref:System.Web.UI.WebControls.WizardStepBase> objetos de la colección en una matriz. A continuación, se recorre la matriz para mostrar la <xref:System.Web.UI.Control.ID%2A> propiedad de cada <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado. Tenga en cuenta que en el ejemplo, el <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> propiedad de la <xref:System.Web.UI.WebControls.Wizard> control es una instancia de la <xref:System.Web.UI.WebControls.WizardStepCollection> clase.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionCopyTo/CS/wizardstepcollectioncopytocs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionCopyTo/VB/wizardstepcollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de objetos derivados de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en la colección <see cref="T:System.Web.UI.WebControls.Wizard" /> del control <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /></summary>
        <value>Número de objetos derivados de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en el control <see cref="T:System.Web.UI.WebControls.Wizard" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.Count%2A> propiedad para determinar el número de <xref:System.Web.UI.WebControls.WizardStepBase>-derivado objetos en el <xref:System.Web.UI.WebControls.WizardStepCollection> colección. El <xref:System.Web.UI.WebControls.WizardStepCollection.Count%2A> propiedad normalmente se utiliza al recorrer en iteración la colección para determinar su superior enlazado.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="T:System.Web.UI.WebControls.Wizard" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un objeto implementado a partir de <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer los objetos derivados de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en la colección.</summary>
        <returns>Objeto implementado a partir de <see cref="T:System.Collections.IEnumerator" /> que contiene todos los objetos derivados de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.CopyTo(System.Web.UI.WebControls.WizardStepBase[],System.Int32)" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.IndexOf(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (wizardStep As WizardStepBase) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">Objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se va a buscar en la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</param>
        <summary>Determina el valor del índice que representa la posición del objeto especificado derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en la colección.</summary>
        <returns>Si se encuentra, es el índice (a partir de cero) de la primera aparición del objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" />, pasado como parámetro, dentro de la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> actual; en caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.IndexOf%2A> método para determinar el índice del elemento especificado <xref:System.Web.UI.WebControls.WizardStepBase>-objeto actual derivado <xref:System.Web.UI.WebControls.WizardStepCollection> colección. Si el <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado no está en la colección, el método devuelve -1.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se pasa es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Insert(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación de índice en la que se va a insertar el objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" />.</param>
        <param name="wizardStep">Objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se va a insertar en la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</param>
        <summary>Inserta el objeto especificado derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en la ubicación de índice especificada de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> método agrega la <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado a la colección en la ubicación de índice especificada.  
  
 Como alternativa, puede usar el <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> método para agregar el <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado a la colección. Para agregar una <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado al final de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección, utilice el <xref:System.Web.UI.WebControls.WizardStepCollection.Add%2A> método.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> método y <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> método realizan básicamente la misma función. Cuando el <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> se llama al método, simplemente pasa el `wizardStep` y `index` parámetros para el <xref:System.Web.UI.WebControls.WizardStepCollection.AddAt%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear mediante programación un <xref:System.Web.UI.WebControls.Wizard> control y usar el <xref:System.Web.UI.WebControls.WizardStepCollection.Insert%2A> método para agregar <xref:System.Web.UI.WebControls.WizardStepBase>-derivados el <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> colección. Tenga en cuenta que en el ejemplo, el <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> propiedad de la <xref:System.Web.UI.WebControls.Wizard> control es una instancia de la <xref:System.Web.UI.WebControls.WizardStepCollection> clase.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionInsert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionInsert/CS/wizardstepcollectioninsertcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionInsert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionInsert/VB/wizardstepcollectioninsertvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.Add(System.Web.UI.WebControls.WizardStepBase)" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.AddAt(System.Int32,System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se pueden modificar los objetos derivados de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> en la colección.</summary>
        <value>
          <see langword="true" /> si la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> se puede modificar; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="T:System.Web.UI.WebControls.Wizard" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
        <value>
          <see langword="false" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad se deriva de la <xref:System.Collections.ICollection> de la interfaz y se reemplaza para que siempre devuelva `false`.  
  
 Para obtener más información sobre la <xref:System.Web.UI.WebControls.WizardStepCollection.IsSynchronized%2A> propiedad, vea la <xref:System.Collections.ICollection.IsSynchronized%2A> propiedad de la <xref:System.Collections.ICollection> interfaz  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WizardStepBase this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WizardStepBase Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As WizardStepBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::WizardStepBase ^ default[int] { System::Web::UI::WebControls::WizardStepBase ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WizardStepBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del objeto <see cref="T:System.Web.UI.WebControls.WizardStep" /> que se va a recuperar.</param>
        <summary>Obtiene un objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> perteneciente a la colección y correspondiente al índice especificado.</summary>
        <value>Objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> perteneciente a la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> y correspondiente al índice especificado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.Item%2A> propiedad que se va a recuperar el <xref:System.Web.UI.WebControls.WizardStepBase>-deriva el objeto en la ubicación de índice especificada en el <xref:System.Web.UI.WebControls.WizardStepCollection> colección mediante una notación de matriz.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.WizardStepBase wizardStep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.WizardStepBase wizardStep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.Remove(System.Web.UI.WebControls.WizardStepBase)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (wizardStep As WizardStepBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Web::UI::WebControls::WizardStepBase ^ wizardStep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wizardStep" Type="System.Web.UI.WebControls.WizardStepBase" />
      </Parameters>
      <Docs>
        <param name="wizardStep">Objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se va a quitar de la colección.</param>
        <summary>Quita el objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> especificado de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.Remove%2A> método para quitar el <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección. Como alternativa, puede usar el <xref:System.Web.UI.WebControls.WizardStepCollection.RemoveAt%2A> método para quitar un <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado de una ubicación especificada en el <xref:System.Web.UI.WebControls.WizardStepCollection> colección.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.WizardStepCollection.Remove%2A> método para quitar un <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección. Tenga en cuenta que en el ejemplo, el <xref:System.Web.UI.WebControls.Wizard.WizardSteps%2A> propiedad de la <xref:System.Web.UI.WebControls.Wizard> control es una instancia de la <xref:System.Web.UI.WebControls.WizardStepCollection> clase.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.WizardStepCollectionRemove#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionRemove/CS/wizardstepcollectionremovecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.WizardStepCollectionRemove#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.WizardStepCollectionRemove/VB/wizardstepcollectionremovevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se pasa es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> que se va a quitar.</param>
        <summary>Quita el objeto derivado de <see cref="T:System.Web.UI.WebControls.WizardStepBase" /> de la ubicación especificada de la colección.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.WizardStepCollection.RemoveAt%2A> método para quitar el <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado de la <xref:System.Web.UI.WebControls.WizardStepCollection> colección en la ubicación de índice especificado. Como alternativa, puede quitar un determinado <xref:System.Web.UI.WebControls.WizardStepBase>-objeto derivado de la colección utilizando la <xref:System.Web.UI.WebControls.WizardStepCollection.Remove%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.WizardStepBase" />
        <altmember cref="T:System.Web.UI.WebControls.WizardStep" />
        <altmember cref="M:System.Web.UI.WebControls.WizardStepCollection.Remove(System.Web.UI.WebControls.WizardStepBase)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
        <value>Objeto que se puede usar para sincronizar el acceso a la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El objeto devuelto en esta implementación es el <xref:System.Web.UI.WebControls.WizardStepCollection> propio objeto.  
  
 Para obtener más información sobre la <xref:System.Web.UI.WebControls.WizardStepCollection.SyncRoot%2A> propiedad, vea la <xref:System.Collections.ICollection.SyncRoot%2A> propiedad de la <xref:System.Collections.ICollection> interfaz.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Matriz <see cref="T:System.Array" />, cuyo índice empieza en cero, que recibe los elementos copiados de la colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" />.</param>
        <param name="index">Posición de la matriz de destino donde se va a empezar a recibir el contenido copiado.</param>
        <summary>Copia todos los elementos de una colección <see cref="T:System.Web.UI.WebControls.WizardStepCollection" /> en una matriz unidimensional, empezando por el índice especificado de la matriz de destino.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.Object" /> que se va a agregar al final de la colección.</param>
        <summary>Agrega el objeto especificado al final de la colección.</summary>
        <returns>Posición en la que se insertó el nuevo elemento.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> que se va a buscar en la colección.</param>
        <summary>Determina si la colección contiene el objeto especificado.</summary>
        <returns>
          Es <see langword="true" /> si <see cref="T:System.Object" /> se encuentra en <see cref="T:System.Collections.IList" />; de lo contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto que se va a buscar en la colección.</param>
        <summary>Determina el valor del índice que representa la posición del objeto especificado en la colección.</summary>
        <returns>El valor de índice del objeto especificado en la colección.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Índice en el que insertar el objeto en la colección.</param>
        <param name="value">El objeto que se va a insertar en la colección.</param>
        <summary>Inserta el objeto especificado en la colección en la ubicación especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la colección tiene un tamaño fijo.</summary>
        <value>
          Es <see langword="true" /> si la colección tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del objeto que se va a recuperar de la colección.</param>
        <summary>Obtiene el objeto en el índice especificado de la colección.</summary>
        <value>El objeto que se va a recuperar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad permite obtener acceso a un elemento específico de la colección mediante la siguiente sintaxis: myCollection[index].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WizardStepCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto que se quitará de la colección.</param>
        <summary>Quita el objeto especificado de la colección.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>