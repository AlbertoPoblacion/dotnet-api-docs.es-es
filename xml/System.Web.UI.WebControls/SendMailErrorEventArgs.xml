<Type Name="SendMailErrorEventArgs" FullName="System.Web.UI.WebControls.SendMailErrorEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9fe284598deae2244d35755d6c8592618f509fa6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36379633" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SendMailErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SendMailErrorEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type SendMailErrorEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona datos para el evento <see langword="SendMailError" /> de controles tales como el control <see cref="T:System.Web.UI.WebControls.ChangePassword" />, el control <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> y el control <see cref="T:System.Web.UI.WebControls.PasswordRecovery" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> objeto contiene un mensaje de error que se genera mediante el proveedor de correo SMTP cuando no se puede enviar un mensaje de correo electrónico por la <xref:System.Web.UI.WebControls.ChangePassword> (control), o la <xref:System.Web.UI.WebControls.CreateUserWizard> control. En tal caso, el <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> objeto se envía a la <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>.  
  
 Crear un <xref:System.Web.UI.WebControls.SendMailErrorEventHandler> delegado para controlar el evento. Controlar el evento permite a la aplicación Web continúe ejecutándose aunque se ha producido una excepción. Esto es útil cuando no es crítico para enviar un mensaje de correo electrónico. Por ejemplo, si la excepción se produce cuando un usuario está trabajando a través de un asistente de varios pasos, puede ser ventajoso registrar el error, mostrar un mensaje informativo al usuario y permitir al usuario completar al asistente.  
  
 Examine el <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> propiedad para determinar la causa real de la excepción. La razón más común para la excepción es un error de configuración en el [ &lt;smtp&gt; Element (Network Settings)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) del archivo de configuración del equipo. Aunque un error como se descubre normalmente durante el desarrollo y depuración de una aplicación, en los servidores de correo se pueden producir errores inesperados en un entorno de producción y debe determinar si desea que toda la aplicación genere un error en esa situación. De lo contrario, controlar el evento permite a la aplicación continuar.  
  
 Debe establecer el <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad `true` para indicar que la excepción se ha controlado; en caso contrario, se vuelve a producir la excepción e incluirá el mensaje original de pila y error de llamada.  
  
 Si no crea un controlador de eventos para el <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> evento, o si crea un controlador de eventos pero dejar la <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad establecida en `false`, la aplicación Web dejará de ejecutarse si se produce un error al enviar un mensaje de correo electrónico y le de ASP.NET mostrar un mensaje de error.  
  
 El <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> método también permite que las clases derivadas controlen el evento, en lugar de este que estaba realizando el <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>. Ésta es la técnica preferida para controlar el evento en una clase que se deriva de <xref:System.Web.UI.WebControls.ChangePassword> o <xref:System.Web.UI.WebControls.CreateUserWizard>.  
  
 Para obtener más información sobre el control de eventos, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una página ASP.NET que utiliza un <xref:System.Web.UI.WebControls.ChangePassword> control Web e incluye un controlador de eventos para el <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> denominado SendMailError. El ejemplo de código se supone que el sitio Web de ASP.NET se ha configurado para utilizar la pertenencia a ASP.NET y la autenticación de formularios y que se ha creado un usuario cuyo nombre y contraseña se conocen. Para obtener más información, consulte [Cómo: Implement Simple Forms Authentication](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Si el cambio de contraseña se realiza correctamente, el código en el `SendingMail` controlador de eventos intenta enviar un mensaje de correo electrónico al usuario que confirme el cambio. SMTP debe estar configurado en el servidor para que funcione este ejemplo de código. Para obtener información acerca de cómo configurar un servidor SMTP, vea [NIB: Cómo: instalar y configurar SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). Para los fines de este ejemplo, no es necesario configurar un servidor SMTP; el ejemplo sirve para comprobar si hay un error al enviar un mensaje de correo electrónico.  
  
 Si un servidor de correo electrónico no está configurado correctamente o se produce algún otro error y no se puede enviar el mensaje de correo electrónico, el `SendMailError` se llama a función. Se muestra un mensaje al usuario. Además, se registra un evento en el registro de eventos de aplicación para Windows con la suposición de que un origen de eventos denominado MySamplesSite ya existe. Vea el ejemplo de código siguiente para crear el origen de eventos especificado. Para obtener más información acerca de cómo crear un origen de eventos, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). El <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad de la <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> objeto se establece en `true` para indicar que se ha controlado el error.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 Utilice el siguiente ejemplo de código si necesita agregar mediante programación el origen de eventos denominado MySamplesSite al registro de aplicación. Este origen de eventos debe existir en orden para el primer ejemplo de código para que funcione correctamente. El siguiente ejemplo de código requiere privilegios de administrador.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al reemplazar <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> en una clase derivada, asegúrese de llamar a la <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> método de la clase base para permitir que los delegados registrados reciban el evento.</para>
    </block>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendMailErrorEventArgs (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SendMailErrorEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendMailErrorEventArgs(Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SendMailErrorEventArgs : Exception -&gt; System.Web.UI.WebControls.SendMailErrorEventArgs" Usage="new System.Web.UI.WebControls.SendMailErrorEventArgs e" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Un objeto <see cref="T:System.Exception" /> que contiene la excepción.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Devuelve la excepción generada por un servicio de correo SMTP cuando no se puede enviar un mensaje de correo electrónico.</summary>
        <value>Objeto <see cref="T:System.Exception" /> que contiene la excepción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> propiedad contiene la excepción que se produce por el proveedor de correo SMTP cuando no se puede enviar un mensaje de correo electrónico por la <xref:System.Web.UI.WebControls.ChangePassword> control o <xref:System.Web.UI.WebControls.CreateUserWizard>. La razón más común para esta excepción es un error de configuración en el [ &lt;smtp&gt; Element (Network Settings)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) del archivo de configuración del equipo, lo que produce el siguiente mensaje de excepción: `The transport failed to connect to the server.`  
  
 No se producen excepciones si hay un error en el mensaje de correo electrónico al incrustar un archivo mediante <xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>. En su lugar, el archivo incrustado parece dañado cuando se ve el mensaje de correo electrónico.  
  
 Debe establecer el <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> objeto, pasado como el `e` parámetro de <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>a `true` para indicar que la excepción se ha controlado; en caso contrario, se vuelve a producir la excepción e incluye el mensaje de error y de pila de llamada original.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una página ASP.NET que utiliza un <xref:System.Web.UI.WebControls.ChangePassword> control Web e incluye un controlador de eventos para el <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> evento denominado `SendMailError`. El ejemplo de código se supone que el sitio Web de ASP.NET se ha configurado para utilizar la pertenencia a ASP.NET y la autenticación de formularios y que se ha creado un usuario cuyo nombre y contraseña se conocen. Para obtener más información, consulte [Cómo: Implement Simple Forms Authentication](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Si el cambio de contraseña se realiza correctamente, el código en el `SendingMail` controlador de eventos intenta enviar un mensaje de correo electrónico al usuario que confirme el cambio. SMTP debe estar configurado en el servidor para que funcione este ejemplo de código. Para obtener información acerca de cómo configurar un servidor SMTP, vea [NIB: Cómo: instalar y configurar SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). Para los fines de este ejemplo, no es necesario configurar un servidor SMTP; el ejemplo sirve para comprobar si hay un error al enviar un mensaje de correo electrónico.  
  
 Si un servidor de correo electrónico no está configurado correctamente o se produce algún otro error y no se puede enviar el mensaje de correo electrónico, el `SendMailError` se llama a función. Se muestra un mensaje al usuario. Además, se registra un evento en el registro de eventos de aplicación para Windows con la suposición de que un origen de eventos denominado MySamplesSite ya existe. Vea el ejemplo de código siguiente para crear el origen de eventos especificado. Para obtener más información acerca de cómo crear un origen de eventos, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). El <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad de la <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> objeto se establece en `true` para indicar que se ha controlado el error.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 Utilice el siguiente ejemplo de código si necesita agregar mediante programación el origen de eventos denominado MySamplesSite al registro de aplicación. Este origen de eventos debe existir en orden para el primer ejemplo de código para que funcione correctamente. El siguiente ejemplo de código requiere privilegios de administrador.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica si se ha controlado la excepción SMTP contenida en la propiedad <see cref="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />.</summary>
        <value>Si es <see langword="true" />, el delegado <see cref="T:System.Web.UI.WebControls.SendMailErrorEventHandler" /> utiliza y controla la excepción. Si es <see langword="false" />, la excepción se produce de nuevo, incluyendo la pila de llamadas y el mensaje de error original.  El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad indica si el <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> se ha controlado. La excepción se produce por el proveedor de correo SMTP cuando no se puede enviar un mensaje de correo electrónico por la <xref:System.Web.UI.WebControls.ChangePassword> control o <xref:System.Web.UI.WebControls.CreateUserWizard>. La razón más común para la excepción es un error de configuración en el [ &lt;smtp&gt; Element (Network Settings)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) del archivo de configuración del equipo. Aunque un error como se descubre normalmente durante el desarrollo y depuración de una aplicación, en los servidores de correo se pueden producir errores inesperados en un entorno de producción y debe determinar si desea que toda la aplicación genere un error en esa situación. De lo contrario, controlar el evento permite a la aplicación continuar.  
  
 Si no crea un controlador de eventos para el <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> evento, o si crea un controlador de eventos pero dejar la <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad establecida en `false`, la aplicación Web dejará de ejecutarse si se produce un error al enviar un mensaje de correo electrónico y le de ASP.NET mostrar un mensaje de error. Controlar el evento permite a la aplicación Web continúe ejecutándose aunque se ha producido una excepción. Esto es útil cuando no es crítico para enviar un mensaje de correo electrónico. Por ejemplo, si la excepción se produce cuando un usuario está trabajando a través de un asistente de varios pasos, puede ser ventajoso registrar el error, mostrar un mensaje informativo al usuario y permitir al usuario completar al asistente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una página ASP.NET que utiliza un <xref:System.Web.UI.WebControls.ChangePassword> control Web e incluye un controlador de eventos para el <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> evento denominado `SendMailError`. El ejemplo de código se supone que el sitio Web de ASP.NET se ha configurado para utilizar la pertenencia a ASP.NET y la autenticación de formularios y que se ha creado un usuario cuyo nombre y contraseña se conocen. Para obtener más información, consulte [Cómo: Implement Simple Forms Authentication](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Si el cambio de contraseña se realiza correctamente, el código en el `SendingMail` controlador de eventos intenta enviar un mensaje de correo electrónico al usuario que confirme el cambio. SMTP debe estar configurado en el servidor para que funcione este ejemplo de código. Para obtener información acerca de cómo configurar un servidor SMTP, vea [NIB: Cómo: instalar y configurar SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). Para los fines de este ejemplo, no es necesario configurar un servidor SMTP; el ejemplo sirve para comprobar si hay un error al enviar un mensaje de correo electrónico.  
  
 Si un servidor de correo electrónico no está configurado correctamente o se produce algún otro error y no se puede enviar el mensaje de correo electrónico, el `SendMailError` se llama a función. Se muestra un mensaje al usuario. Además, se registra un evento en el registro de eventos de aplicación para Windows con la suposición de que un origen de eventos denominado MySamplesSite ya existe. Vea el ejemplo de código siguiente para crear el origen de eventos especificado. Para obtener más información acerca de cómo crear un origen de eventos, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). El <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad de la <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> objeto se establece en `true` para indicar que se ha controlado el error.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 Utilice el siguiente ejemplo de código si necesita agregar mediante programación el origen de eventos denominado MySamplesSite al registro de aplicación. Este origen de eventos debe existir en orden para el primer ejemplo de código para que funcione correctamente. El siguiente ejemplo de código requiere privilegios de administrador.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
  </Members>
</Type>