<Type Name="Xml" FullName="System.Web.UI.WebControls.Xml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="439b55e2a784b5ff6bcd5cfe837c04d451b8ef19" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30599559" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Xml : System.Web.UI.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Xml extends System.Web.UI.Control" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Xml" />
  <TypeSignature Language="VB.NET" Value="Public Class Xml&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class Xml : System::Web::UI::Control" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DocumentSource")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.XmlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false, true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Muestra un documento XML sin formato o que utiliza Lenguaje de transformación basado en hojas de estilo (XSLT).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En este tema:  
  
-   [Introducción](#introduction)  
  
-   [Especificar datos XML](#specifying_xml_data)  
  
-   [Especifica una transformación XSL](#specifying_an_xsl_transformation)  
  
-   [Sintaxis declarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introducción  
 Use el <xref:System.Web.UI.WebControls.Xml> control para mostrar el contenido de un documento XML sin formato o utilizando transformaciones XSL.  
  
<a name="specifying_xml_data"></a>   
## <a name="specifying-xml-data"></a>Especificar datos XML  
 El documento XML para mostrar se especifica si se establece alguna de las tres propiedades. Estas tres propiedades representan los diferentes tipos de documentos XML que se pueden mostrar. Puede mostrar un <xref:System.Xml.XmlDocument?displayProperty=nameWithType>, una cadena XML o un archivo XML, estableciendo la propiedad adecuada. En la tabla siguiente se enumera las propiedades para especificar el documento XML.  
  
|Propiedad.|Descripción|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.Xml.Document%2A>|Establece el documento XML mediante un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objeto. **Advertencia:** esta propiedad está obsoleta. Use una de las otras propiedades enumerados en esta sección para establecer el código XML contenido para el <xref:System.Web.UI.WebControls.Xml> control.|  
|<xref:System.Web.UI.WebControls.Xml.DocumentContent%2A>|Establece el documento XML mediante una cadena. **Nota:** esta propiedad se suele establecer mediante declaración, colocando texto entre la apertura y cierre `<asp:Xml>` etiquetas de la <xref:System.Web.UI.WebControls.Xml> control.|  
|<xref:System.Web.UI.WebControls.Xml.DocumentSource%2A>|Establece el documento XML mediante un archivo.|  
  
> [!NOTE]
>  Al menos una de las propiedades del documento XML debe establecerse para mostrar un documento XML. Si se establece más de una propiedad de documento XML, se muestra el documento XML que se hace referencia en la última propiedad establecida. Los documentos de las demás propiedades se omiten.  
  
<a name="specifying_an_xsl_transformation"></a>   
## <a name="specifying-an-xsl-transformation"></a>Especifica una transformación XSL  
 También puede especificar una hoja de estilos de transformación XSL (XSLT) que se da formato al documento XML antes de que se escriba en el flujo de salida estableciendo una de dos propiedades. Las dos propiedades representan los diferentes tipos de hojas de estilo de transformación XSL que pueden usarse para dar formato al documento XML. Puede dar formato al documento XML mediante un <xref:System.Xml.Xsl.XslCompiledTransform?displayProperty=nameWithType> de un objeto o con una transformación XSL de archivo de hoja de estilos estableciendo la propiedad adecuada. Si no se especifica ninguna hoja de estilo de transformación XSL, se mostrará el documento XML utilizando el formato predeterminado. En la tabla siguiente se enumera las propiedades para especificar una hoja de estilos de transformación XSL.  
  
|Propiedad.|Descripción|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.Xml.Transform%2A>|Da formato al documento XML utilizando los <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objeto. **Nota:** mediante un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objeto requiere `Full Trust` permisos.|  
|<xref:System.Web.UI.WebControls.Xml.TransformSource%2A>|Da formato al documento XML mediante el archivo de hoja de estilo de transformación XSL especificado.|  
  
> [!NOTE]
>  La hoja de estilos de transformación XSL es opcional. No es necesario establecer el <xref:System.Web.UI.WebControls.Xml.Transform%2A> o <xref:System.Web.UI.WebControls.Xml.TransformSource%2A> propiedad. Si se establecen ambas propiedades de hoja de estilo de transformación XSL, la última propiedad establecida determina qué hoja de estilos de transformación XSL se utiliza para dar formato al documento XML. Se omite la otra propiedad.  
  
 El <xref:System.Web.UI.WebControls.Xml> clase también proporciona la <xref:System.Web.UI.WebControls.Xml.TransformArgumentList%2A> propiedad, lo que permite proporcionar argumentos opcionales a la hoja de estilos de transformación XSL. Los argumentos pueden ser parámetros de transformaciones XSL (XSLT) u objetos de extensión.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintaxis declarativa  
  
```  
<asp:Xml  
    DocumentSource="uri"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformSource="string"  
    Visible="True|False"  
/>  
```  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear <xref:System.Xml.XmlDocument> y <xref:System.Xml.Xsl.XslTransform> objetos de un archivo XML de ejemplo y una hoja de estilos de transformación XSL. Los objetos se usan, a continuación, el control de XML para mostrar el documento XML.  
  
 [!code-aspx-csharp[XmlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-aspx-vb[XmlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.XmlDocument" />
    <altmember cref="T:System.Xml.Xsl.XslTransform" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.TransformArgumentList" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Xml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Xml();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.AddParsedSubObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddParsedSubObject (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddParsedSubObject(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> que representa el elemento analizado.</param>
        <summary>Notifica al control de servidor que se analizó un elemento, ya sea XML o HTML, y agrega el elemento al objeto <see cref="T:System.Web.UI.ControlCollection" /> del control del servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.Xml.AddParsedSubObject%2A> método en un personalizado <xref:System.Web.UI.WebControls.Xml> control de servidor.  
  
 [!code-aspx-csharp[CustomXmlAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/CS/custom_xml_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomXmlAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/VB/custom_xml_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomXmlAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/CS/custom_xml_addparsedsubobject.cs#2)]
 [!code-vb[CustomXmlAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/VB/custom_xml_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> no es del tipo <see cref="T:System.Web.UI.LiteralControl" />.</exception>
        <altmember cref="M:System.Web.UI.Control.AddParsedSubObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.ClientID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ClientID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ClientID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reemplaza la propiedad <see cref="P:System.Web.UI.Control.ClientID" /> y devuelve el identificador del control de servidor base.</summary>
        <value>El identificador del control de servidor base.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Controls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Controls As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ControlCollection ^ Controls { System::Web::UI::ControlCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reemplaza la propiedad <see cref="P:System.Web.UI.Control.Controls" /> y devuelve la colección <see cref="T:System.Web.UI.ControlCollection" /> base.</summary>
        <value>Colección de <see cref="T:System.Web.UI.ControlCollection" /> base.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuevo objeto <see cref="T:System.Web.UI.EmptyControlCollection" />.</summary>
        <returns>Siempre devuelve un objeto <see cref="T:System.Web.UI.EmptyControlCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Xml.CreateControlCollection%2A> método la usan principalmente los programadores de controles para extender la funcionalidad de la <xref:System.Web.UI.WebControls.Xml> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument Document { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Document" />
      <MemberSignature Language="VB.NET" Value="Public Property Document As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDocument ^ Document { System::Xml::XmlDocument ^ get(); void set(System::Xml::XmlDocument ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is the XPathNavigator property. Create a System.Xml.XPath.XPathDocument and call CreateNavigator() to create an XPathNavigator. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Xml.XmlDocument" /> que se muestra en el control <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>
          <see cref="T:System.Xml.XmlDocument" /> que se va a mostrar en el control <see cref="T:System.Web.UI.WebControls.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.Web.UI.WebControls.Xml.Document%2A> está obsoleta. Para especificar el XML que se mostrará en el <xref:System.Web.UI.WebControls.Xml> de control, use la <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propiedad o <xref:System.Web.UI.WebControls.Xml.DocumentSource%2A> propiedad. Para obtener más información acerca de estas alternativas, consulte la información general de la clase para el <xref:System.Web.UI.WebControls.Xml> control.  
  
 El documento XML para mostrar en el <xref:System.Web.UI.WebControls.Xml> control está especificado en una de estas tres maneras. Puede especificar un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objeto, una cadena XML o un archivo XML, estableciendo la propiedad adecuada. El <xref:System.Web.UI.WebControls.Xml.Document%2A> propiedad se utiliza para especificar un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> (que representa un documento XML) para mostrar en el control.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear <xref:System.Xml.XmlDocument> y <xref:System.Xml.Xsl.XslTransform> objetos de un archivo XML de ejemplo y una hoja de estilos de transformación XSL. Los objetos se usan, a continuación, el control de XML para mostrar el documento XML.  
  
 [!code-aspx-csharp[XmlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-aspx-vb[XmlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlDocument" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="DocumentContent">
      <MemberSignature Language="C#" Value="public string DocumentContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.DocumentContent" />
      <MemberSignature Language="VB.NET" Value="Public Property DocumentContent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DocumentContent { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece una cadena que contiene el documento XML que se va a mostrar en el control <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>Cadena que contiene el documento XML que se va a mostrar en el control <see cref="T:System.Web.UI.WebControls.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El documento XML para mostrar en el <xref:System.Web.UI.WebControls.Xml> control está especificado en una de estas tres maneras. Puede especificar un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objeto, una cadena XML o un archivo XML, estableciendo la propiedad adecuada. El <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propiedad se utiliza para especificar una cadena XML (que representa un documento XML) para mostrar en el control. El <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propiedad no es normalmente mediante programación establecida o establecida como un atributo del control. En su lugar, normalmente se establece la cadena XML de forma declarativa colocando texto entre la apertura y cierre `<asp:Xml>` etiquetas del control.  
  
> [!NOTE]
>  Aunque la <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> propiedad contiene `get` y `set` descriptores de acceso, sólo el `set` descriptor de acceso resulta útil. Si usas el `get` descriptor de acceso, <xref:System.String.Empty?displayProperty=nameWithType> se devuelve.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="DocumentSource">
      <MemberSignature Language="C#" Value="public string DocumentSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      <MemberSignature Language="VB.NET" Value="Public Property DocumentSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DocumentSource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso a un documento XML que se va a mostrar en el control <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>Ruta de acceso a un documento XML que se va a mostrar en el control <see cref="T:System.Web.UI.WebControls.Xml" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El documento XML para mostrar en el <xref:System.Web.UI.WebControls.Xml> control está especificado en una de estas tres maneras. Puede especificar un <xref:System.Xml.XmlDocument?displayProperty=nameWithType> objeto, una cadena XML o un archivo XML, estableciendo la propiedad adecuada. El <xref:System.Web.UI.WebControls.Xml.DocumentSource%2A> propiedad se utiliza para especificar la ruta de acceso a un archivo XML (que representa un documento XML) para mostrar en el control. Puede usar una ruta de acceso absoluta o relativa. Ruta de acceso relativa relaciona la ubicación del archivo a la ubicación del control de usuario o página de formularios Web Forms, sin especificar una ruta de acceso completa en el servidor. La ruta de acceso es relativa a la ubicación de la página Web. Resulta más fácil mover todo el sitio a otro directorio en el servidor sin actualizar la ruta de acceso al archivo de código. Una ruta de acceso absoluta proporciona la ruta de acceso completa, para mover el sitio a otro directorio es preciso actualizar el código.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar un documento XML mediante una transformación XSL en el <xref:System.Web.UI.WebControls.Xml> control.  
  
 [!code-aspx-csharp[XmlControlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlControlClassExample/CS/xmlcontrolcs.aspx#1)]
 [!code-aspx-vb[XmlControlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlControlClassExample/VB/xmlcontrolvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.EnableTheming" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EnableTheming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableTheming { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reemplaza la propiedad <see cref="P:System.Web.UI.Control.EnableTheming" />. La clase <see cref="T:System.Web.UI.WebControls.Xml" /> no admite esta propiedad.</summary>
        <value>Siempre devuelve <see langword="false" />. Esta propiedad no es compatible.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Xml.EnableTheming%2A> propiedad se hereda de la <xref:System.Web.UI.Control> clase, pero no es aplicable a la <xref:System.Web.UI.WebControls.Xml> clase. Cualquier intento de establecer el valor de esta propiedad produce un <xref:System.NotSupportedException> excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se realiza un intento de establecer el valor de esta propiedad.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindControl">
      <MemberSignature Language="C#" Value="public override System.Web.UI.Control FindControl (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.Control FindControl(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.FindControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindControl (id As String) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::Control ^ FindControl(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identificador del control que se va a buscar.</param>
        <summary>Busca el contenedor de nomenclatura de la página del control de servidor especificado.</summary>
        <returns>Control especificado; de lo contrario, es <see langword="null" /> si el control especificado no existe.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Focus();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reemplaza el método <see cref="M:System.Web.UI.Control.Focus" />. La clase <see cref="T:System.Web.UI.WebControls.Xml" /> no admite este método.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Xml.Focus%2A> método se hereda de la <xref:System.Web.UI.Control> clase, pero no es aplicable a la <xref:System.Web.UI.WebControls.Xml> clase. Cualquier intento de invocar el método produce una <xref:System.NotSupportedException> excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se realiza un intento de invocación de este método.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDesignModeState">
      <MemberSignature Language="C#" Value="protected override System.Collections.IDictionary GetDesignModeState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.IDictionary GetDesignModeState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.GetDesignModeState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetDesignModeState () As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::IDictionary ^ GetDesignModeState();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene datos en tiempo de diseño para un control.</summary>
        <returns>Objeto <see cref="T:System.Collections.IDictionary" /> que contiene los datos en tiempo de diseño del control <see cref="T:System.Web.UI.WebControls.Xml" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Xml.GetDesignModeState%2A> método es un método auxiliar que se utiliza para obtener el estado actual de tiempo de diseño de la <xref:System.Web.UI.WebControls.Xml> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasControls">
      <MemberSignature Language="C#" Value="public override bool HasControls ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool HasControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.HasControls" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function HasControls () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool HasControls();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina si el control de servidor tiene controles secundarios.</summary>
        <returns>
          Es <see langword="true" /> si el control contiene otros controles; en caso contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (output As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Resultado del flujo de salida.</param>
        <summary>Procesa el resultado en el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.Xml.Render%2A> método en un control de servidor personalizado para que el <xref:System.Web.UI.WebControls.Xml> control se muestra siempre con una imagen.  
  
 [!code-aspx-csharp[CustomXmlRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlRender/CS/custom_xml_rendercs.aspx#1)]
 [!code-aspx-vb[CustomXmlRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlRender/VB/custom_xml_rendervb.aspx#1)]  
  
 [!code-csharp[CustomXmlRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlRender/CS/custom_xml_render.cs#2)]
 [!code-vb[CustomXmlRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlRender/VB/custom_xml_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.SkinID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SkinID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SkinID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reemplaza la propiedad <see cref="P:System.Web.UI.Control.SkinID" />. La clase <see cref="T:System.Web.UI.WebControls.Xml" /> no admite esta propiedad.</summary>
        <value>Siempre devuelve una cadena vacía (""). Esta propiedad no es compatible.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Xml.SkinID%2A> propiedad se hereda de la <xref:System.Web.UI.Control> clase, pero no es aplicable a la <xref:System.Web.UI.WebControls.Xml> clase. Cualquier intento de establecer el valor de esta propiedad produce un <xref:System.NotSupportedException> excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Se realiza un intento de establecer el valor de esta propiedad.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.Xsl.XslTransform Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XslTransform Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As XslTransform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Xsl::XslTransform ^ Transform { System::Xml::Xsl::XslTransform ^ get(); void set(System::Xml::Xsl::XslTransform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XslTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Xml.Xsl.XslTransform" /> que da formato al documento XML antes de escribirlo en el flujo de salida.</summary>
        <value>Objeto <see cref="T:System.Xml.Xsl.XslTransform" /> que da formato al documento XML antes de escribirlo en el flujo de salida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se usa el <xref:System.Web.UI.WebControls.Xml> de control para mostrar un documento XML, también puede especificar una hoja de estilos de transformación de lenguaje de hojas de estilo Extensible (XSLT) que da formato al documento XML, antes de que se escriban en el flujo de salida de una de dos maneras. Puede dar formato al documento XML mediante cualquiera una <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objeto o un archivo de hoja de estilo de transformación XSL. Si no se especifica ningún documento de transformación XSL, se mostrará el documento XML utilizando el formato predeterminado. El <xref:System.Web.UI.WebControls.Xml.Transform%2A> propiedad se utiliza para especificar un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objeto (que representa un documento de transformación XSL) que se utilizan para dar formato al documento XML antes de que se escriban en el flujo de salida.  
  
> [!NOTE]
>  Con un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> objeto requiere `Full Trust` permisos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear <xref:System.Xml.XmlDocument> y <xref:System.Xml.Xsl.XslTransform> objetos de un archivo XML de ejemplo y una hoja de estilos de transformación XSL. Los objetos se usan, a continuación, el control de XML para mostrar el documento XML.  
  
 [!code-aspx-csharp[XmlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-aspx-vb[XmlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XslTransform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.TransformArgumentList" />
      <MemberSignature Language="VB.NET" Value="Public Property TransformArgumentList As XsltArgumentList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Xsl::XsltArgumentList ^ TransformArgumentList { System::Xml::Xsl::XsltArgumentList ^ get(); void set(System::Xml::Xsl::XsltArgumentList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene una lista de argumentos opcionales que se pasan a la hoja de estilos durante la transformación XSL.</summary>
        <value>
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> que contiene una lista de argumentos opcionales que se pasan a la hoja de estilos durante la transformación XSL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.Xml.TransformArgumentList%2A> propiedad que se va a proporcionar argumentos opcionales a la hoja de estilos de transformación XSL. Los argumentos pueden ser parámetros XSLT u objetos de extensión.  
  
 Para obtener más información sobre el uso de la <xref:System.Xml.Xsl.XsltArgumentList?displayProperty=nameWithType> de clases, consulte [XsltArgumentList para parámetros Stylesheet y objetos de extensión](~/docs/standard/data/xml/xsltargumentlist-for-style-sheet-parameters-and-extension-objects.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="TransformSource">
      <MemberSignature Language="C#" Value="public string TransformSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.TransformSource" />
      <MemberSignature Language="VB.NET" Value="Public Property TransformSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransformSource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso a una hoja de estilos de transformación XSL que da formato al documento XML antes de escribirlo en el flujo de salida.</summary>
        <value>Ruta de acceso a una hoja de estilos de transformación XSL que da formato al documento XML antes de escribirlo en el flujo de salida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se usa el <xref:System.Web.UI.WebControls.Xml> de control para mostrar un documento XML, también puede especificar una hoja de estilos de transformación XSL que da formato al documento XML antes de que se escriban en el flujo de salida de una de dos maneras. Se puede dar formato al documento XML mediante un <xref:System.Xml.Xsl.XslTransform?displayProperty=nameWithType> de un objeto o archivo de hoja de estilos de con una transformación XSL. Si no se especifica ninguna hoja de estilo de transformación XSL, se mostrará el documento XML utilizando el formato predeterminado. El <xref:System.Web.UI.WebControls.Xml.TransformSource%2A> propiedad se utiliza para especificar la ruta de acceso a un archivo de hoja de estilo de transformación XSL (que representa una hoja de estilos de transformación XSL) utilizada para dar formato al documento XML antes de que se escriban en el flujo de salida. Puede usar una ruta de acceso absoluta o relativa. Ruta de acceso relativa relaciona la ubicación del archivo a la ubicación del control de usuario o página de formularios Web Forms, sin especificar una ruta de acceso completa en el servidor. La ruta de acceso es relativa a la ubicación de la página Web. Resulta más fácil mover todo el sitio a otro directorio en el servidor sin actualizar la ruta de acceso al archivo de código. Una ruta de acceso absoluta proporciona la ruta de acceso completa, para mover el sitio a otro directorio es preciso actualizar el código.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo mostrar un documento XML mediante una transformación XSL en el <xref:System.Web.UI.WebControls.Xml> control.  
  
 [!code-aspx-csharp[XmlControlClassExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlControlClassExample/CS/xmlcontrolcs.aspx#1)]
 [!code-aspx-vb[XmlControlClassExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlControlClassExample/VB/xmlcontrolvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      </Docs>
    </Member>
    <Member MemberName="XPathNavigator">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.XPathNavigator XPathNavigator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XPath.XPathNavigator XPathNavigator" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.XPathNavigator" />
      <MemberSignature Language="VB.NET" Value="Public Property XPathNavigator As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XPath::XPathNavigator ^ XPathNavigator { System::Xml::XPath::XPathNavigator ^ get(); void set(System::Xml::XPath::XPathNavigator ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un modelo de cursor para navegar y editar los datos XML asociados al control <see cref="T:System.Web.UI.WebControls.Xml" />.</summary>
        <value>Un objeto <see cref="T:System.Xml.XPath.XPathNavigator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad puede utilizarse para asociar un <xref:System.Xml.XPath.XPathNavigator> objeto con el <xref:System.Web.UI.WebControls.Xml> control.  
  
 Un <xref:System.Xml.XPath.XPathNavigator> objeto se crea a partir de una clase que implementa el <xref:System.Xml.XPath.IXPathNavigable> interfaz, como el <xref:System.Xml.XPath.XPathDocument> y <xref:System.Xml.XmlDocument> clases. <xref:System.Xml.XPath.XPathNavigator> objetos creados por <xref:System.Xml.XPath.XPathDocument> objetos son de solo lectura, y <xref:System.Xml.XPath.XPathNavigator> objetos creados por <xref:System.Xml.XmlDocument> se pueden editar los objetos. Un <xref:System.Xml.XPath.XPathNavigator> estado de solo lectura o editable del objeto se determina según la <xref:System.Xml.XPath.XPathNavigator.CanEdit%2A> propiedad de la <xref:System.Xml.XPath.XPathNavigator> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>