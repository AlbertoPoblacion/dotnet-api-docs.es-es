<Type Name="TreeNodeCollection" FullName="System.Web.UI.WebControls.TreeNodeCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2382121d5364129fa236d74aea8a6ed85d34fa60" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30600359" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TreeNodeCollection : System.Collections.ICollection, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TreeNodeCollection&#xA;Implements ICollection, IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection sealed : System::Collections::ICollection, System::Web::UI::IStateManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa una colección de objetos <see cref="T:System.Web.UI.WebControls.TreeNode" /> del control <see cref="T:System.Web.UI.WebControls.TreeView" />. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNodeCollection> clase se utiliza para almacenar y administrar una colección de <xref:System.Web.UI.WebControls.TreeNode> objetos en el <xref:System.Web.UI.WebControls.TreeView> control. El <xref:System.Web.UI.WebControls.TreeView> control usa la <xref:System.Web.UI.WebControls.TreeNodeCollection> clase en dos de sus propiedades. Almacena sus nodos raíz en el <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propiedad y sus nodos seleccionados en el <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> propiedad. El <xref:System.Web.UI.WebControls.TreeNodeCollection> recopilación también se utiliza para la <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedad para almacenar los nodos secundarios (si existe).  
  
 La <xref:System.Web.UI.WebControls.TreeNodeCollection> clase admite varias maneras de obtener acceso a los elementos de la colección:  
  
-   Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.Item%2A> indizador para recuperar un <xref:System.Web.UI.WebControls.TreeNode> objeto directamente en un índice de base cero especificado.  
  
-   Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> método para crear un enumerador que puede usarse para recorrer en iteración la colección.  
  
-   Use `foreach` (C#) o `For Each` (Visual Basic) para recorrer en iteración la colección.  
  
-   Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> método para copiar el contenido de la colección en un <xref:System.Array> objeto.  
  
 Puede administrar mediante programación la <xref:System.Web.UI.WebControls.TreeNodeCollection> agregando y quitando <xref:System.Web.UI.WebControls.TreeNode> objetos. Para agregar nodos a la colección, use el <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> o <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> método. Para quitar nodos de la colección, utilice el <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A>, <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A>, o <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> método.  
  
> [!NOTE]
>  Cuando el <xref:System.Web.UI.WebControls.TreeView> control se enlaza a un origen de datos, el <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> colecciones se rellenan automáticamente cada vez que se produce el enlace. Se perderán los cambios realizados en las colecciones entre los enlaces. Para conservar estos cambios, actualice el origen de datos o volver a generar manualmente la colección cada vez que se enlace.  
  
 El <xref:System.Web.UI.WebControls.TreeNodeCollection> contiene propiedades y métodos que permiten recuperar información acerca de la propia colección. Para averiguar cuántos elementos se encuentran en la colección, use el <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propiedad. Si desea determinar si la colección contiene un determinado <xref:System.Web.UI.WebControls.TreeNode> objeto, utilice el <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> método. Para obtener el índice de un <xref:System.Web.UI.WebControls.TreeNode> objeto en la colección, utilice el <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo agregar nodos y quitar mediante programación un <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedades devuelven un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.TreeView" />
    <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> usando los valores predeterminados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.TreeNodeCollection> clase con los valores predeterminados. Normalmente se utiliza este constructor al crear una colección de nodos raíz donde no se requiere un nodo primario (o propietario).  
  
> [!NOTE]
>  Al crear una colección de nodos no raíz, debe usar el constructor sobrecargado que toma el `owner` parámetro, en lugar de este constructor para especificar el nodo primario.  
  
 Este constructor se usa principalmente los programadores de controles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection (System.Web.UI.WebControls.TreeNode owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.TreeNode owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNodeCollection(System::Web::UI::WebControls::TreeNode ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="owner">El objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que representa al nodo principal de la colección.</param>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> utilizando el nodo principal especificado (o propietario).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.TreeNodeCollection> clase utilizando el nodo principal especificado (o propietario). Normalmente se utiliza este constructor al crear una colección de nodos no raíz donde debe especificar el nodo primario.  
  
> [!NOTE]
>  Al crear una colección de nodos raíz, considere la posibilidad de usar el constructor predeterminado porque los nodos raíz no tiene un nodo primario.  
  
 Este constructor se usa principalmente los programadores de controles.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="child">El objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que se anexa.</param>
        <summary>Agrega el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> especificado al final del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> método anexar especificado <xref:System.Web.UI.WebControls.TreeNode> objeto al final de la <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.TreeNodeCollection> le permite agregar referencias nulas (Nothing en Visual Basic), así como duplicado <xref:System.Web.UI.WebControls.TreeNode> objetos.  
  
 Como alternativa, puede insertar un <xref:System.Web.UI.WebControls.TreeNode> objeto en el <xref:System.Web.UI.WebControls.TreeNodeCollection> en un índice específico mediante el uso de la <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> método para agregar mediante programación un nodo para el <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedades cada devuelven un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAt (index As Integer, child As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAt(int index, System::Web::UI::WebControls::TreeNode ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación de índice de base cero donde se inserta el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" />.</param>
        <param name="child">Objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que se agrega.</param>
        <summary>Inserta el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> especificado en un objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> en la ubicación de índice especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> método para insertar especificado <xref:System.Web.UI.WebControls.TreeNode> objeto en el <xref:System.Web.UI.WebControls.TreeNodeCollection> en el índice de base cero especificado.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.TreeNodeCollection> le permite insertar referencias nulas (Nothing en Visual Basic), así como duplicado <xref:System.Web.UI.WebControls.TreeNode> objetos.  
  
 Como alternativa, puede anexar una <xref:System.Web.UI.WebControls.TreeNode> objeto al final de la <xref:System.Web.UI.WebControls.TreeNodeCollection> utilizando el <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> método para agregar mediante programación un nodo para el <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedades cada devuelven un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="child" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vacía el objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> método para quitar cada <xref:System.Web.UI.WebControls.TreeNode> objeto desde el <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
> [!NOTE]
>  Para quitar un nodo individual de la colección, utilice el <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> o <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> método y queda vacía mediante programación un <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedades devuelven un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.TreeNode c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.TreeNode c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (c As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Web::UI::WebControls::TreeNode ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="c">Objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que se va a buscar.</param>
        <summary>Determina si el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> especificado está en la colección.</summary>
        <returns>
          <see langword="true" /> si la colección contiene el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" />; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> método para determinar si un <xref:System.Web.UI.WebControls.TreeNode> objeto se encuentra en la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Este método se usa normalmente para probar la existencia de un <xref:System.Web.UI.WebControls.TreeNode> objeto antes de realizar una tarea, como agregar o quitar un nodo de la colección.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> método para determinar si el nodo seleccionado está en el <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> colección. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propiedad devuelve un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.TreeNode[] nodeArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.TreeNode[] nodeArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (nodeArray As TreeNode(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Web::UI::WebControls::TreeNode ^&gt; ^ nodeArray, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArray" Type="System.Web.UI.WebControls.TreeNode[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nodeArray">Una matriz de objetos <see cref="T:System.Web.UI.WebControls.TreeNode" /> de base cero que recibe los elementos copiados de la colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</param>
        <param name="index">Posición de la matriz de destino donde se va a empezar a recibir el contenido copiado.</param>
        <summary>Copia todos los elementos del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> en una matriz unidimensional compatible de objetos <see cref="T:System.Web.UI.WebControls.TreeNode" />, empezando por el índice especificado de la matriz de destino.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> método para copiar el contenido de la <xref:System.Web.UI.WebControls.TreeNodeCollection> en especificado basado en cero <xref:System.Array?displayProperty=nameWithType> objeto. Los elementos se copian empezando por el índice especificado de la matriz de destino. Con el <xref:System.Array?displayProperty=nameWithType> objeto, a continuación, puede usar una sintaxis de matriz para tener acceso a los elementos de la <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
 Como alternativa, también puede utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> método para crear un enumerador que puede utilizarse para tener acceso a los elementos de la colección.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> método para copiar los valores de un <xref:System.Web.UI.WebControls.TreeNodeCollection> en una matriz. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propiedad devuelve un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <value>Número de elementos en <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propiedad para determinar el número de elementos en una <xref:System.Web.UI.WebControls.TreeNodeCollection>. Esta propiedad se usa normalmente al recorrer en iteración una colección para determinar el límite superior de la colección. El <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propiedad también se utiliza para determinar si una colección está vacía.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> propiedad para determinar el número de elementos de la <xref:System.Web.UI.WebControls.TreeNodeCollection>. A continuación, realiza un recorrido preordenado del <xref:System.Web.UI.WebControls.TreeView> control para mostrar el texto de cada nodo.  
  
 [!code-aspx-csharp[TreeNodeCollectionCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCount/CS/treenodecollectioncountcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCount/VB/treenodecollectioncountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador que puede utilizarse para recorrer en iteración un objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <returns>Un enumerador que se puede utilizar para recorrer en iteración la colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> método para crear un enumerador que puede ser fácilmente una iteración para obtener cada elemento de la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Para obtener el elemento señalado actualmente en el enumerador, use la <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> propiedad. Use la <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> método para desplazarse hasta el siguiente elemento. Si tiene que devolver el enumerador al principio de la colección, utilice el <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> método.  
  
> [!NOTE]
>  Después de crear un enumerador o utilizar el <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=nameWithType> método, debe llamar a la <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> método. En caso contrario, el elemento representado por la <xref:System.Collections.IEnumerator.Current%2A?displayProperty=nameWithType> propiedad no está definida.  
  
 Como alternativa, también puede utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> método para crear un <xref:System.Array?displayProperty=nameWithType> objeto que puede utilizarse para tener acceso a los elementos de la colección. Otra alternativa consiste en utilizar un `foreach` o `For Each` estructura para recorrer en iteración la colección.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> método para crear un enumerador que contiene los nodos raíz de la <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/CS/treenodecollectiongetenumeratorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionGetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/VB/treenodecollectiongetenumeratorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que se va a buscar.</param>
        <summary>Determina el índice del objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> especificado.</summary>
        <returns>El índice de base cero de la primera aparición de <paramref name="value" /> en la colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />, si se encuentra; en caso contrario, es -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> método para determinar el índice de base cero del elemento especificado <xref:System.Web.UI.WebControls.TreeNode> objeto en el <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto. Si el nodo no está en la colección, el método devuelve -1.  
  
> [!NOTE]
>  Si el nodo especificado aparece varias veces en la colección, se devuelve el índice de la primera aparición.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> método para determinar el índice de un nodo raíz. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propiedad devuelve un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionIndexOf#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> está sincronizado (es seguro para subprocesos).</summary>
        <value>
          <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> propiedad se utiliza para indicar si el acceso a la <xref:System.Web.UI.WebControls.TreeNodeCollection> está sincronizado (es seguro para subprocesos). Esta propiedad se deriva de la <xref:System.Collections.ICollection?displayProperty=nameWithType> clase y se reemplaza para que siempre devuelva `false`.  
  
 Para obtener más información sobre la <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> propiedad, vea la <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=nameWithType> propiedad de la <xref:System.Collections.ICollection?displayProperty=nameWithType> interfaz.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNode this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNode ^ default[int] { System::Web::UI::WebControls::TreeNode ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que se va a recuperar.</param>
        <summary>Obtiene el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> situado en el índice especificado del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <value>El objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> situado en el índice especificado de la colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este indizador para obtener acceso a un <xref:System.Web.UI.WebControls.TreeNode> objeto desde el <xref:System.Web.UI.WebControls.TreeNodeCollection> en el índice especificado mediante una notación de matriz. El indizador le permite modificar o reemplazar un <xref:System.Web.UI.WebControls.TreeNode> objeto de la colección directamente. La colección está basada en cero.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el indizador para obtener acceso a un elemento en el <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedades devuelven un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Web::UI::WebControls::TreeNode ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que se quita.</param>
        <summary>Quita el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> especificado del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> método para quitar el nodo especificado de la colección. Todos los elementos que siguen a ese nodo, a continuación, se mueven para ocupar la posición libre. También se actualizan los índices de los elementos movidos.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.TreeNodeCollection> puede contener referencias nulas (Nothing en Visual Basic), así como duplicar <xref:System.Web.UI.WebControls.TreeNode> objetos.  
  
 Como alternativa, puede quitar un nodo en un índice específico mediante el <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> método. También puede quitar todos los nodos de la colección mediante el <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> método para quitar mediante programación un nodo de la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedades cada devuelven un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">La ubicación del índice de base cero del nodo que se va a quitar.</param>
        <summary>Quita el objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> de la ubicación de índice especificada del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> método para quitar el <xref:System.Web.UI.WebControls.TreeNode> objeto en la ubicación de índice de base cero especificado de un <xref:System.Web.UI.WebControls.TreeNodeCollection>. Todos los elementos que siguen a ese nodo, a continuación, se mueven para ocupar la posición libre. También se actualizan los índices de los elementos movidos.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.TreeNodeCollection> puede contener referencias nulas (Nothing en Visual Basic), así como duplicar <xref:System.Web.UI.WebControls.TreeNode> objetos.  
  
 Como alternativa, puede quitar un determinado <xref:System.Web.UI.WebControls.TreeNode> objeto mediante el uso de la <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> método. También puede quitar todos los nodos de la colección mediante el <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> método para quitar mediante programación un nodo de la <xref:System.Web.UI.WebControls.TreeNodeCollection>. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> y <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedades cada devuelven un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionAdd#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionAdd#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que puede utilizarse para sincronizar el acceso al objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <value>Un objeto <see cref="T:System.Object" /> que se puede utilizar para sincronizar el acceso a la colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> propiedad proporciona una versión sincronizada de la <xref:System.Web.UI.WebControls.TreeNodeCollection> que se puede utilizar con la sincronización de código (subproceso).  
  
> [!CAUTION]
>  El <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> siempre la propiedad de esta clase devuelve `false`, lo que indica que la <xref:System.Web.UI.WebControls.TreeNodeCollection> clase no está sincronizada (no es seguro para la ejecución de subprocesos).  
  
 El código de sincronización debe realizar las operaciones en el <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> objeto de la <xref:System.Web.UI.WebControls.TreeNodeCollection>y no directamente en el <xref:System.Web.UI.WebControls.TreeNodeCollection> propio. De este modo, se garantiza el funcionamiento correcto de las colecciones derivadas de otros objetos. En concreto, mantiene la sincronización correcta con otros subprocesos que podrían modificar al mismo tiempo la <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
> [!NOTE]
>  El objeto devuelto en esta implementación es el <xref:System.Collections.ArrayList?displayProperty=nameWithType> objeto que se usa para almacenar el <xref:System.Web.UI.WebControls.TreeNode> objetos de la colección.  
  
 Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos. Incluso cuando una colección está sincronizada, otros subprocesos todavía podrían modificar la colección, que hace que el enumerador produzca una excepción. Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.  
  
 Para obtener más información sobre la <xref:System.Web.UI.WebControls.DataGridColumnCollection.SyncRoot%2A> propiedad, vea la <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=nameWithType> propiedad de la <xref:System.Collections.ICollection?displayProperty=nameWithType> interfaz.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Objeto <see cref="T:System.Array" /> basado en cero que recibe los elementos copiados de <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</param>
        <param name="index">Posición de la matriz de destino donde se va a empezar a recibir el contenido copiado.</param>
        <summary>Copia todos los elementos del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> en una matriz unidimensional compatible de objetos <see cref="T:System.Array" />, empezando por el índice especificado de la matriz de destino.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> método para copiar el contenido de la <xref:System.Web.UI.WebControls.TreeNodeCollection> en especificado basado en cero <xref:System.Array?displayProperty=nameWithType> objeto. Los elementos se copian empezando por el índice especificado de la matriz de destino. Con el <xref:System.Array?displayProperty=nameWithType> objeto, a continuación, puede usar una sintaxis de matriz para tener acceso a los elementos de la <xref:System.Web.UI.WebControls.TreeNodeCollection>.  
  
 Como alternativa, también puede utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> método para crear un enumerador que puede utilizarse para tener acceso a los elementos de la colección.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> método para copiar los valores de un <xref:System.Web.UI.WebControls.TreeNodeCollection> en una matriz. Tenga en cuenta que la <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> propiedad devuelve un <xref:System.Web.UI.WebControls.TreeNodeCollection> objeto.  
  
 [!code-aspx-csharp[TreeNodeCollectionCopyTo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> no es una matriz de objetos <see cref="T:System.Web.UI.WebControls.TreeNode" />.</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IStateManager.IsTrackingViewState { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> está guardando los cambios en su estado de vista.</summary>
        <value>
          Es <see langword="true" /> si el control está marcado para guardar su estado; en caso contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.Control.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (state As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ state) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">Un objeto <see cref="T:System.Object" /> que contiene los valores del estado de vista guardados.</param>
        <summary>Carga el estado de vista previamente guardado del objeto <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Guarda los cambios del estado de vista en un objeto <see cref="T:System.Object" />.</summary>
        <returns>
          <see cref="T:System.Object" /> que contiene los cambios de estado de la vista.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica a la colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> que efectúe un seguimiento de los cambios de su estado de vista.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de llamar a este método en un control de servidor, el <xref:System.Web.UI.Control.IsTrackingViewState%2A> propiedad devolverá `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
  </Members>
</Type>