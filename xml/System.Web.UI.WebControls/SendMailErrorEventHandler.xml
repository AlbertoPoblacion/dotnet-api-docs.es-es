<Type Name="SendMailErrorEventHandler" FullName="System.Web.UI.WebControls.SendMailErrorEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9b3e329efd01ede5b0c453486b17b70304f19317" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30596459" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void SendMailErrorEventHandler(object sender, SendMailErrorEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SendMailErrorEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub SendMailErrorEventHandler(sender As Object, e As SendMailErrorEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void SendMailErrorEventHandler(System::Object ^ sender, SendMailErrorEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Web.UI.WebControls.SendMailErrorEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Origen del evento.</param>
    <param name="e">Un objeto <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" /> que contiene los datos del evento.</param>
    <summary>Representa el método que controla el evento <see langword="SendMailError" /> de controles como <see cref="T:System.Web.UI.WebControls.ChangePassword" />, <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> y <see cref="T:System.Web.UI.WebControls.PasswordRecovery" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se crea un delegado <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>, se identifica el método que controlará el evento. Para asociar el evento con el controlador de eventos, agregue una instancia del delegado al evento. Se llama al controlador de eventos cada vez que se produce el evento, a menos que se quite al delegado del evento. Para obtener más información sobre los delegados de controladores de eventos, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
 Controlar la `SendMailError` evento permite a la aplicación Web se siga ejecutando, incluso si se produce una excepción al intentar enviar un mensaje de correo electrónico. Por ejemplo, esto es útil si la excepción se produce cuando un usuario está trabajando a través de un asistente de varios pasos. Es preferible para registrar el error, mostrar un mensaje informativo al usuario y permitir al usuario completar al asistente, en lugar de finalizar la aplicación.  
  
 Si no crea un controlador de eventos para el <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> evento, o si crea un controlador de eventos pero dejar la <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad establecida en `false`, la aplicación Web dejará de ejecutarse si se produce un error al enviar un mensaje de correo electrónico y le de ASP.NET mostrar un mensaje de error.  
  
 El <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> método también permite que las clases derivadas controlen el evento en lugar de la <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>. Ésta es la técnica preferida para controlar el evento en una clase que se deriva de <xref:System.Web.UI.WebControls.ChangePassword> o <xref:System.Web.UI.WebControls.CreateUserWizard>.  
  
 Para obtener más información sobre el control de eventos, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una página ASP.NET que utiliza un <xref:System.Web.UI.WebControls.ChangePassword> control Web e incluye un controlador de eventos para el <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> evento denominado `SendMailError`. El ejemplo de código se supone que el sitio Web de ASP.NET se ha configurado para utilizar la pertenencia a ASP.NET y la autenticación de formularios y que se ha creado un usuario cuyo nombre y contraseña se conocen. Para obtener más información, consulte [Cómo: Implement Simple Forms Authentication](http://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Si el cambio de contraseña es correcta, el código intenta usar SMTP para enviar un mensaje de correo electrónico al usuario que confirme el cambio. Esto se hace en el `SendingMail` controlador de eventos. Para obtener información acerca de cómo configurar un servidor SMTP, vea [NIB: Cómo: instalar y configurar SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). Para los fines de este ejemplo, no es necesario configurar un servidor SMTP; el ejemplo sirve para comprobar si hay un error al enviar un mensaje de correo electrónico.  
  
 Si un servidor de correo electrónico no está configurado correctamente o se produce algún otro error y no se puede enviar el mensaje de correo electrónico, el `SendMailError` se llama a función. Se muestra un mensaje al usuario. Además, se registra un evento en el registro de eventos de aplicación para Windows con la suposición de que un origen de eventos denominado MySamplesSite ya existe. Vea el ejemplo de código siguiente para crear el origen de eventos especificado. Para obtener más información acerca de cómo crear un origen de eventos, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). El <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> propiedad de la <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> objeto se establece en `true` para indicar que se ha controlado el error.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 Utilice el siguiente ejemplo de código si necesita agregar mediante programación el origen de eventos denominado MySamplesSite al registro de aplicación. Este origen de eventos debe existir en orden para el primer ejemplo de código para que funcione correctamente. El siguiente ejemplo de código requiere privilegios de administrador.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
    <altmember cref="T:System.Web.Mail.SmtpMail" />
  </Docs>
</Type>