<Type Name="CustomValidator" FullName="System.Web.UI.WebControls.CustomValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c9c16154f0596866ce3d5ad57c9e40deedc19ee" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037298" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CustomValidator : System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomValidator extends System.Web.UI.WebControls.BaseValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CustomValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomValidator&#xA;Inherits BaseValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CustomValidator : System::Web::UI::WebControls::BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseValidator</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ServerValidate")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:CustomValidator runat="server" ErrorMessage="CustomValidator"&gt;&lt;/{0}:CustomValidator&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Realiza la validación definida por el usuario en un control de entrada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.UI.WebControls.CustomValidator> control para proporcionar una función de validación definida por el usuario para un control de entrada. El <xref:System.Web.UI.WebControls.CustomValidator> control es un control independiente desde el control de entrada se valida, que le permite controlar dónde se muestra el mensaje de validación.  
  
 Controles de validación siempre realizan la validación en el servidor. También tienen una implementación completa en el cliente que permite a los exploradores habilitados para escritura (por ejemplo, Microsoft Internet Explorer 4.0 y versiones posteriores) para realizar la validación en el cliente. Validación del lado cliente mejora el proceso de validación mediante la comprobación proporcionados por el usuario antes de que se envíe al servidor. Esto permite que los errores que se ha detectado en el cliente antes de que se envía el formulario, lo que evita la ida y vuelta de la información necesaria para la validación del lado servidor.  
  
 Para crear una función de validación del lado servidor, proporcione un controlador para el <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> evento que realiza la validación. Puede tener acceso a la cadena desde el control de entrada para validar mediante la <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> propiedad de la <xref:System.Web.UI.WebControls.ServerValidateEventArgs> objeto pasado en el controlador de eventos como un parámetro. El resultado de la validación, a continuación, se almacena en la <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> propiedad de la <xref:System.Web.UI.WebControls.ServerValidateEventArgs> objeto.  
  
 Para crear una función de validación del lado cliente, primero agregue la función de validación del lado servidor se ha descrito anteriormente. A continuación, agregue la función de script de validación del lado cliente a la página ASP.NET (.aspx).  
  
 Si está utilizando Visual Basic Scripting Edition (VBScript), la función debe estar en este formulario:  
  
```  
Sub ValidationFunctionName(source, arguments)  
```  
  
 Si usas JScript, la función debe estar en este formulario:  
  
```  
function ValidationFunctionName(source, arguments)  
```  
  
 El `source` parámetro es una referencia a la \<span > elemento representa para el <xref:System.Web.UI.WebControls.CustomValidator> control. Esto permite controlar mediante programación el \<abarcan > etiqueta, como modificar el <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> atributo. El `arguments` parámetro es un objeto con dos propiedades: Value e IsValid. Este parámetro le permite obtener el valor del control para validar e indicar si el valor es válido según su rutina de validación personalizada.  
  
 Use la <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> propiedad para especificar el nombre de la función de script de validación del lado cliente asociado con el <xref:System.Web.UI.WebControls.CustomValidator> control. Dado que la función de script se ejecuta en el cliente, la función debe estar en un idioma que admite el Explorador de destino, como VBScript o JScript.  
  
> [!NOTE]
>  Cuando se usa el <xref:System.Web.UI.WebControls.CustomValidator> control dentro de un <xref:System.Web.UI.UpdatePanel> de control, asegúrese de que el control de validación y el control que está asociado están en el mismo panel. Para obtener más información sobre el uso de la <xref:System.Web.UI.UpdatePanel> control para actualizaciones parciales de página, vea [Partial-Page Rendering Overview](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
 Al igual que la validación del lado servidor, se obtiene acceso mediante la cadena del control de entrada para validar la <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> propiedad de la `arguments` parámetro. Devolver el resultado de la validación estableciendo la <xref:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid%2A> propiedad de la `arguments` parámetro.  
  
> [!CAUTION]
>  Al usar controles de validación, debe comprobar siempre los resultados de validación del lado servidor antes de realizar cualquier procesamiento. Después de un devolución de datos pero antes de llaman a los métodos de evento, la página llama a los controles de validación y agrega sus resultados en la <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> propiedad. (También puede llamar a los controles de validación utilizando explícitamente el `Validate` método.) En su propio código, debe comprobar que la <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> propiedad devuelve `true` antes de procesar los datos proporcionados. Aunque los exploradores compatibles con script pueden impedir una devolución de datos en el cliente si el error en una comprobación de validación, también debe comprobar siempre <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> en código del servidor antes de procesar los datos validados.  
  
 Varios controles de validación se pueden utilizar con un control de entrada individual para validar diferentes criterios. Por ejemplo, puede aplicar varios controles de validación en un <xref:System.Web.UI.WebControls.TextBox> control que permite al usuario especificar la cantidad de elementos que se va a agregar a un carro de la compra. Puede usar un <xref:System.Web.UI.WebControls.CustomValidator> control para asegurarse de que el valor especificado es menor que la cantidad de inventario y un <xref:System.Web.UI.WebControls.RequiredFieldValidator> control para asegurarse de que el usuario escribe un valor en el <xref:System.Web.UI.WebControls.TextBox> control.  
  
> [!NOTE]
>  Si el control de entrada está vacío, se llamará a ninguna función de validación y la validación se realiza correctamente. Use un <xref:System.Web.UI.WebControls.RequiredFieldValidator> control para requerir al usuario que escriba datos en el control de entrada.  
  
 Es posible utilizar un <xref:System.Web.UI.WebControls.CustomValidator> control sin establecer el <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> propiedad. Esto se suele hacer cuando se está validando varios controles de entrada o controles de entrada que no se puede usar con controles de validación, como el <xref:System.Web.UI.WebControls.CheckBox> control. En este caso, el <xref:System.Web.UI.WebControls.ServerValidateEventArgs.Value%2A> propiedad de la `arguments` parámetro se pasa al controlador de eventos para el <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> eventos y para la validación del lado cliente función siempre contiene una cadena vacía (""). Sin embargo, se sigue llamando a estas funciones de validación en su caso, para determinar la validez en el cliente y el servidor. Para obtener acceso a la capacidad de validar, mediante programación debe hacer referencia el control de entrada que desea validar y, a continuación, recuperar el valor de la propiedad adecuada. Por ejemplo, para validar un <xref:System.Web.UI.WebControls.CheckBox> de control en el servidor, no establezca la <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> propiedad del control de validación y utilice el siguiente código para el controlador de la <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> eventos.  
  
```vb  
Sub ServerValidation (source As object, args As ServerValidateEventArgs)  
    args.IsValid = (CheckBox1.Checked = True)  
 End Sub  
```  
  
```csharp  
void ServerValidation (object source, ServerValidateEventArgs args)  
 {  
    args.IsValid = (CheckBox1.Checked == true);  
 }  
```  
  
 Para obtener más información sobre controles de validación, consulte <xref:System.Web.UI.WebControls.BaseValidator>.  
  
## <a name="accessibility"></a>Accesibilidad  
 Para obtener información acerca de cómo configurar este control para que genera el marcado que se ajusta a las normas de accesibilidad, consulte [accesibilidad en Visual Studio y ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) y [controles ASP.NET y accesibilidad](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un servidor <xref:System.Web.UI.WebControls.CustomValidator> control.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 En el ejemplo de código siguiente se muestra cómo crear un cliente <xref:System.Web.UI.WebControls.CustomValidator> control.  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
    <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
    <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
    <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
    <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CustomValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.CustomValidator" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventArgs" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.Value" />
        <altmember cref="P:System.Web.UI.WebControls.ServerValidateEventArgs.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> que contiene el flujo de salida que se representará en el cliente.</param>
        <summary>Agrega las propiedades del control <see cref="T:System.Web.UI.WebControls.CustomValidator" /> al flujo de salida para representar en el cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.CustomValidator.AddAttributesToRender%2A> método en un control de servidor personalizado para que el <xref:System.Web.UI.WebControls.CustomValidator> mensaje de error siempre aparece en negrita.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/CS/custom_customvalidator_addattributestorender.cs#2)]
[!code-vb[CustomCustomValidatorAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorAddAttributesToRender/VB/custom_customvalidator_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientValidationFunction">
      <MemberSignature Language="C#" Value="public string ClientValidationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientValidationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientValidationFunction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientValidationFunction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de la función de script de cliente personalizada que se utiliza para la validación.</summary>
        <value>Nombre de la función de script de cliente personalizada que se utiliza para la validación. El valor predeterminado es <see cref="F:System.String.Empty" />, que indica que no se ha establecido esta propiedad.  
  
 <block subset="none" type="note"><para>  
 El nombre de la función no debe incluir ningún paréntesis ni ningún parámetro.  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establezca esta propiedad en el nombre de la función que realiza la validación del lado cliente.  
  
 Dado que la función de validación de cliente se ejecuta en el Explorador de destino, la función debe escribirse utilizando un lenguaje de scripting compatible con el explorador, como VBScript o JScript.  
  
 Esta propiedad no se puede establecer mediante temas o temas de la hoja de estilos. Para obtener más información, consulte <xref:System.Web.UI.ThemeableAttribute> y [ASP.NET temas y máscaras](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.CustomValidator.ClientValidationFunction%2A> propiedad para especificar el nombre de la función que realiza la validación del lado cliente. La función de validación comprueba números pares. Para obtener una descripción de los parámetros de función, vea la sección Comentarios de <xref:System.Web.UI.WebControls.CustomValidator>.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorClient/CS/customvalidatorclientcs.aspx#1)]
 [!code-aspx-vb[CustomValidatorClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorClient/VB/customvalidatorclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected override bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ControlPropertiesValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ControlPropertiesValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comprueba las propiedades del control para valores válidos.</summary>
        <returns>
          <see langword="true" /> si las propiedades del control son válidas; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.CustomValidator.ControlPropertiesValid%2A> controlar el método en un servidor personalizado para que siempre devuelva el valor de la propiedad visible, siempre y cuando la <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> propiedad de la <xref:System.Web.UI.WebControls.CustomValidator> control en la página y contiene propiedades de validación.  
  
 [!code-aspx-csharp[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorControlPropertiesValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/CS/custom_customvalidator_controlpropertiesvalid.cs#2)]
[!code-vb[CustomCustomValidatorControlPropertiesValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorControlPropertiesValid/VB/custom_customvalidator_controlpropertiesvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected override bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EvaluateIsValid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool EvaluateIsValid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reemplaza el método <see cref="M:System.Web.UI.MobileControls.BaseValidator.EvaluateIsValid" />.</summary>
        <returns>
          <see langword="true" /> si el valor del control de entrada es válido; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.WebControls.CustomValidator.EvaluateIsValid%2A> método en un control de servidor personalizado.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalidcs.aspx#1)]
 [!code-aspx-vb[CustomCustomValidatorEvaluateIsValid#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalidvb.aspx#1)]  
[!code-csharp[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/CS/custom_customvalidator_evaluateisvalid.cs#2)]
[!code-vb[CustomCustomValidatorEvaluateIsValid#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomCustomValidatorEvaluateIsValid/VB/custom_customvalidator_evaluateisvalid.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnServerValidate">
      <MemberSignature Language="C#" Value="protected virtual bool OnServerValidate (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnServerValidate(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnServerValidate (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnServerValidate(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Valor que se va a validar.</param>
        <summary>Genera el evento <see cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" /> para el control <see cref="T:System.Web.UI.WebControls.CustomValidator" />.</summary>
        <returns>
          Es <see langword="true" /> si el valor especificado por el parámetro <paramref name="value" /> pasa la validación; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> evento se desencadena cuando se realiza la validación en el servidor.  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Web.UI.WebControls.CustomValidator.OnServerValidate%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo especificar y codificar un controlador para un servidor <xref:System.Web.UI.WebControls.CustomValidator> control.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> en una clase derivada, asegúrese de llamar al método <see cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" /> de la clase base para que los delegados registrados reciban el evento.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      </Docs>
    </Member>
    <Member MemberName="ServerValidate">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ServerValidateEventHandler ServerValidate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.CustomValidator.ServerValidate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ServerValidate As ServerValidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::UI::WebControls::ServerValidateEventHandler ^ ServerValidate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ServerValidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la validación se realiza en el servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.CustomValidator.ServerValidate> evento se desencadena cuando se realiza la validación en el servidor. Este evento se usa para proporcionar una rutina de validación personalizada para un control de entrada, como un <xref:System.Web.UI.WebControls.TextBox> control.  
  
 Para obtener más información sobre el control de eventos, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo especificar y codificar un controlador para un servidor <xref:System.Web.UI.WebControls.CustomValidator> control. Crea una rutina de validación personalizada, se valida el valor de un <xref:System.Web.UI.WebControls.TextBox> control para un número par y, a continuación, muestra el resultado de la validación.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomValidatorServerValidate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomValidatorServerValidate/CS/customvalidatorservervalidatecs.aspx#1)]
 [!code-aspx-vb[CustomValidatorServerValidate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomValidatorServerValidate/VB/customvalidatorservervalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.OnServerValidate(System.String)" />
        <altmember cref="T:System.Web.UI.WebControls.ServerValidateEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEmptyText">
      <MemberSignature Language="C#" Value="public bool ValidateEmptyText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateEmptyText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateEmptyText As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateEmptyText { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor booleano que indica si se debe validar el texto vacío.</summary>
        <value>
          Es <see langword="true" /> si se debe validar el texto vacío; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada control de validación puede asociarse con un control de destino. En versiones anteriores de .NET Framework, si el control de destino tenía un valor de cadena vacía, como un <xref:System.Web.UI.WebControls.TextBox.Text%2A> propiedad tiene un valor de <xref:System.String.Empty?displayProperty=nameWithType>, el validador (excepto la <xref:System.Web.UI.WebControls.RequiredFieldValidator> validador) no se evaluarían el control de destino y simplemente devolvería el valor que pasa la validación.  
  
 El <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> propiedad es una novedad de la versión 2.0 de .NET Framework.  Si <xref:System.Web.UI.WebControls.CustomValidator.ValidateEmptyText%2A> está establecido en `true`, el validador evalúa el valor del control (utilizando los criterios especificados para el <xref:System.Web.UI.WebControls.CustomValidator> control) y devuelve los resultados de validación. Esta propiedad permite a los desarrolladores evaluar los resultados de una <xref:System.Web.UI.WebControls.CustomValidator> control independientemente del valor del control de destino.  
  
 Esta propiedad no se puede establecer mediante temas o temas de la hoja de estilos. Para obtener más información, consulte <xref:System.Web.UI.ThemeableAttribute> y [ASP.NET temas y máscaras](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.BaseValidator" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>