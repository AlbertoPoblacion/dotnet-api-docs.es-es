<Type Name="FileUpload" FullName="System.Web.UI.WebControls.FileUpload">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5f8053b8b6855feb117a691385f00b2fd96dde6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37593888" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileUpload : System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileUpload extends System.Web.UI.WebControls.WebControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FileUpload" />
  <TypeSignature Language="VB.NET" Value="Public Class FileUpload&#xA;Inherits WebControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileUpload : System::Web::UI::WebControls::WebControl" />
  <TypeSignature Language="F#" Value="type FileUpload = class&#xA;    inherit WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("FileBytes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Muestra un control de cuadro de texto y un botón Examinar que permiten a los usuarios seleccionar un archivo para cargarlo al servidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En este tema:  
  
-   [Introducción](#introduction)  
  
-   [Guardando archivos cargados](#saving_uploaded_files)  
  
-   [Consideraciones de seguridad](#security_considerations)  
  
-   [Limitaciones de memoria](#memory_limitations)  
  
-   [Mediante el Control FileUpload con el Control UpdatePanel](#using_the_FileUpload_Control_with_the_UpdatePanel_control)  
  
-   [Sintaxis declarativa](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introducción  
 La <xref:System.Web.UI.WebControls.FileUpload> clase muestra un control de cuadro de texto y un botón Examinar que permiten a los usuarios seleccionar un archivo en el cliente y cargarlo en el servidor Web. El usuario especifica el archivo para cargar escribiendo la ruta de acceso completa del archivo en el equipo local (por ejemplo, **C:\MyFiles\TestFile.txt**) en el cuadro de texto del control. Como alternativa, el usuario puede seleccionar el archivo haciendo clic en el **examinar** botón y, a continuación, buscar en el **Elegir archivo** cuadro de diálogo.  
  
 Use la <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propiedad va a obtener el nombre de un archivo en un cliente para cargar mediante el <xref:System.Web.UI.WebControls.FileUpload> control. El nombre de archivo que devuelve esta propiedad no incluye la ruta de acceso del archivo en el cliente.  
  
 El <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> procedimientos property get un <xref:System.IO.Stream> objeto que apunta a un archivo para cargarlo. Utilice esta propiedad para tener acceso al contenido del archivo como bytes. Por ejemplo, puede usar el <xref:System.IO.Stream> objeto devuelto por la <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propiedad para leer el contenido del archivo como bytes y almacenarlos en una matriz de bytes. Como alternativa, puede usar el <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propiedad para recuperar todos los bytes en el archivo.  
  
 El <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad obtiene subyacente <xref:System.Web.HttpPostedFile> objeto cargar el archivo. Puede utilizar esta propiedad para tener acceso a propiedades adicionales en el archivo. El <xref:System.Web.HttpPostedFile.ContentLength%2A> propiedad obtiene la longitud del archivo. El <xref:System.Web.HttpPostedFile.ContentType%2A> propiedad obtiene el tipo de contenido MIME del archivo. Además, puede usar el <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad para tener acceso a la <xref:System.Web.HttpPostedFile.FileName%2A> propiedad, el <xref:System.Web.HttpPostedFile.InputStream%2A> propiedad y el <xref:System.Web.HttpPostedFile.SaveAs%2A> método. Sin embargo, se proporciona la misma funcionalidad mediante el <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propiedad, el <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propiedad y el <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método.  
  
<a name="saving_uploaded_files"></a>   
## <a name="saving-uploaded-files"></a>Guardando archivos cargados  
 El <xref:System.Web.UI.WebControls.FileUpload> control no guarda automáticamente un archivo en el servidor después de que el usuario selecciona el archivo para cargar. Debe proporcionar explícitamente un control o un mecanismo que permita al usuario enviar el archivo especificado. Por ejemplo, puede proporcionar un botón que el usuario hace clic para cargar el archivo. El código que escribe para guardar el archivo especificado debe llamar a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, que guarda el contenido de un archivo en una ruta de acceso especificada en el servidor. Normalmente, el <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> se llama al método en un método de control de eventos para un evento que provoca un envío al servidor. Por ejemplo, si proporciona un botón para enviar un archivo, podría incluir el código para guardar el archivo dentro del método de control de eventos para el evento click.  
  
 Antes de llamar a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método para guardar el archivo en el servidor, utilice el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propiedad para comprobar que el <xref:System.Web.UI.WebControls.FileUpload> control contiene un archivo. Si el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> devuelve `true`, llame a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método. Si devuelve `false`, mostrar un mensaje al usuario indicando que el control no contiene un archivo. No comprobar la <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad para determinar si un archivo para cargarlo existe porque, de forma predeterminada, esta propiedad contiene 0 bytes. Como resultado, incluso cuando el <xref:System.Web.UI.WebControls.FileUpload> control está en blanco, el <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad devuelve un valor distinto de null.  
  
<a name="security_considerations"></a>   
## <a name="security-considerations"></a>Consideraciones de seguridad  
 Cuando se llama a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, debe especificar la ruta de acceso completa del directorio en el que se va a guardar el archivo cargado. Si no especifica explícitamente una ruta de acceso en el código de aplicación, se produce una excepción cuando un usuario intenta cargar un archivo. Este comportamiento ayuda a proteger los archivos en el servidor, evitando que los usuarios de poder escribir en ubicaciones arbitrarias en la estructura de directorios de la aplicación, así como para impedir el acceso a los directorios raíz confidenciales.  
  
 El <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método escribe el archivo cargado en el directorio especificado. Por lo tanto, la aplicación ASP.NET debe tener acceso de escritura al directorio en el servidor. Hay dos maneras de que la aplicación puede obtener acceso de escritura. Puede conceder explícitamente el acceso de escritura a la cuenta bajo la que se ejecuta la aplicación, en el directorio en el que se guardarán los archivos cargados. Como alternativa, puede aumentar el nivel de confianza que se concede a la aplicación ASP.NET. Para obtener acceso de escritura al directorio de ejecución de la aplicación, la aplicación debe concederse el <xref:System.Web.AspNetHostingPermission> objeto con el nivel de confianza establecido en el <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valor. Aumentar el nivel de confianza aumenta el acceso de la aplicación a los recursos del servidor. Tenga en cuenta que esto no es un enfoque seguro, porque un usuario malintencionado que toma el control de la aplicación también podrá ejecutarse en este nivel de confianza superior. Es una práctica recomendada para ejecutar una aplicación ASP.NET en el contexto de un usuario con los privilegios mínimos necesarios para ejecutar la aplicación. Para obtener más información sobre la seguridad en aplicaciones ASP.NET, vea [prácticas de seguridad básica para aplicaciones Web](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) y [niveles de confianza de ASP.NET y los archivos de directiva](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
<a name="memory_limitations"></a>   
## <a name="memory-limitations"></a>Limitaciones de memoria  
 Una manera de protegerse contra denegación de servicio ataques es limitar el tamaño de los archivos que se pueden cargar mediante el uso de la <xref:System.Web.UI.WebControls.FileUpload> control. Debe establecer un límite de tamaño que sea adecuado para los tipos de archivos que se esperan que se cargará. El límite de tamaño predeterminado es 4096 kilobytes (KB) o 4 megabytes (MB). Puede permitir que los archivos de mayor tamaño que se cargará estableciendo el `maxRequestLength` atributo del elemento. Para aumentar el tamaño de archivo máximo permitido para toda la aplicación, establezca el `maxRequestLength` atributo en el archivo Web.config. Para aumentar el tamaño de archivo máximo permitido para una página especificada, establecer el `maxRequestLength` atributo dentro de la `location` elemento en el archivo Web.config. Para obtener un ejemplo, vea [ubicación Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/922ef7d5-da38-4661-b1c6-5b9e5ceda1d5).  
  
 Al cargar archivos grandes, un usuario también podría recibir el mensaje de error siguiente:  
  
 `aspnet_wp.exe (PID: 1520) was recycled because memory consumption exceeded 460 MB (60 percent of available RAM).`  
  
 Si los usuarios reciben este mensaje de error, aumente el valor de la `memoryLimit` el atributo en del elemento del archivo Web.config de archivos para la aplicación. El `memoryLimit` atributo especifica la cantidad máxima de memoria que puede utilizar un proceso de trabajo. Si el proceso de trabajo supera el `memoryLimit` cantidad, se crea un nuevo proceso para reemplazarlo y todas las solicitudes actuales se vuelven a asignar al nuevo proceso.  
  
 Para controlar si el archivo para cargar se almacena temporalmente en memoria o en el servidor mientras se procesa la solicitud, estableciendo el `requestLengthDiskThreshold` atributo del elemento. Este atributo permite administrar el tamaño del búfer de flujo de entrada. El valor predeterminado es 256 bytes. El valor que especifique no debe superar el valor que especifique para el `maxRequestLength` atributo.  
  
<a name="using_the_FileUpload_Control_with_the_UpdatePanel_control"></a>   
## <a name="using-the-fileupload-control-with-the-updatepanel-control"></a>Mediante el Control FileUpload con el Control UpdatePanel  
 El <xref:System.Web.UI.WebControls.FileUpload> control está diseñado para usarse solo en escenarios de postback y no en escenarios de postback asincrónicos durante la representación parcial de página. Cuando se usa un <xref:System.Web.UI.WebControls.FileUpload> control dentro de un <xref:System.Web.UI.UpdatePanel> control, se debe cargar el archivo mediante el uso de un control que está un <xref:System.Web.UI.PostBackTrigger> objeto para el panel. <xref:System.Web.UI.UpdatePanel> los controles se usan para actualizar regiones seleccionadas de una página en lugar de actualizar toda la página con una devolución de datos. Para obtener más información, consulte [información general del Control UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) y [información general de representación de página parcial](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Sintaxis declarativa  
  
```  
<asp:FileUpload  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Un proyecto de sitio Web de Visual Studio con código fuente está disponible como acompañamiento de este tema: [descargar](http://go.microsoft.com/fwlink/?LinkId=191897).  
  
 Esta sección contiene los cuatro ejemplos siguientes:  
  
-   El primer ejemplo muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en una ruta de acceso especificada en el código.  
  
-   El segundo ejemplo muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en un directorio especificado en el sistema de archivos para la aplicación.  
  
-   El tercer ejemplo muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en una ruta de acceso especificada y limita el tamaño del archivo que se puede cargar.  
  
-   El cuarto ejemplo muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en una ruta de acceso especificada y permite sólo los archivos que tienen las extensiones de nombre de archivo .doc o. xls para cargarse.  
  
> [!CAUTION]
>  Estos ejemplos muestran la sintaxis básica para el <xref:System.Web.UI.WebControls.FileUpload> control, pero no muestran todas la comprobación de errores necesarios que deben completarse antes de para guardar el archivo. Para obtener un ejemplo más completo, vea <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en una ruta de acceso especificada en el código. El <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método se llama para guardar el archivo en la ruta de acceso especificada en el servidor.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en un directorio especificado en el sistema de archivos para la aplicación. El <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A?displayProperty=nameWithType> propiedad se utiliza para obtener la ruta de acceso de archivo físico del sistema del directorio raíz de la aplicación de servidor está ejecutando actualmente. El <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método se llama para guardar el archivo en la ruta de acceso especificada en el servidor.  
  
 [!code-aspx-csharp[FileUploadClass2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass2/cs/fileuploadclass2cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass2/VB/fileuploadclass2vb.aspx#1)]  
  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en una ruta de acceso que se especifica en el código. El control limita el tamaño del archivo que se pueda cargar en 5 MB. El <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad se utiliza para tener acceso a subyacente <xref:System.Web.HttpPostedFile.ContentLength%2A> propiedad y devolver el tamaño del archivo. Si el tamaño de archivo que se carga es inferior a 2 MB, el <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método se llama para guardar el archivo en la ruta de acceso especificada en el servidor. Además de comprobar la configuración del tamaño máximo de archivo en el código de aplicación, puede establecer el `maxRequestLength` atributo del elemento a un tamaño máximo permitido en el archivo de configuración de la aplicación.  
  
 [!code-aspx-csharp[FileUploadClass3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass3/cs/fileuploadclass3cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass3/VB/fileuploadclass3vb.aspx#1)]  
  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en una ruta de acceso que se especifica en el código. En este ejemplo permite que sólo los archivos que tienen las extensiones de nombre de archivo .doc o. xls para cargarse. El <xref:System.IO.Path.GetExtension%2A?displayProperty=nameWithType> método se llama para devolver la extensión de archivo que se cargará. Si el archivo tiene la extensión .doc o .xls, el <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método se llama para guardar el archivo en la ruta de acceso especificada en el servidor.  
  
 [!code-aspx-csharp[FileUploadClass4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass4/cs/fileuploadclass4cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass4/VB/fileuploadclass4vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileUpload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileUpload();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.FileUpload.%23ctor%2A> constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.FileUpload> clase. El <xref:System.Web.UI.WebControls.FileUpload> control no guarda automáticamente un archivo en el servidor después de que el usuario selecciona el archivo para cargar. Debe proporcionar explícitamente un control o un mecanismo que permita al usuario enviar el archivo especificado. Por ejemplo, puede proporcionar un botón que el usuario hace clic para cargar el archivo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.FileUpload> clase. Tenga en cuenta que en este ejemplo se muestra la sintaxis del constructor, pero no agrega ninguna funcionalidad al control después de crearlo.  
  
 Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.Web.UI.WebControls.FileUpload> clase.  
  
 [!code-aspx-vb[FileUploadCstr#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadCstr/VB/fileuploadcstrvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AddAttributesToRender (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AddAttributesToRender(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.AddAttributesToRender : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.AddAttributesToRender writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> que representa el flujo de salida para representar contenido HTML en el cliente.</param>
        <summary>Agrega los atributos y estilos HTML de un control <see cref="T:System.Web.UI.WebControls.FileUpload" /> para procesarlos en el objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> método se utiliza principalmente los desarrolladores de controles para insertar los atributos adecuados y estilos para el <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> flujo de salida para un <xref:System.Web.UI.WebControls.FileUpload> control. El <xref:System.Web.UI.WebControls.FileUpload.AddAttributesToRender%2A> reemplazos de método la <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public virtual bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.Web.UI.WebControls.FileUpload.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica si pueden seleccionarse varios archivos para la carga.</summary>
        <value>
          <see langword="true" /> si varios archivos pueden seleccionarse; de lo contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileBytes">
      <MemberSignature Language="C#" Value="public byte[] FileBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] FileBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileBytes As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ FileBytes { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileBytes : byte[]" Usage="System.Web.UI.WebControls.FileUpload.FileBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una matriz de los bytes de un archivo que se especifica mediante un control <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Matriz <see cref="T:System.Byte" /> con el contenido del archivo especificado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload> control no lee automáticamente el archivo desde el cliente. Debe proporcionar explícitamente un control o un mecanismo que permita al usuario enviar el archivo especificado. Por ejemplo, puede proporcionar un botón que el usuario puede hacer clic para cargar el archivo. El código que escribe para guardar el archivo especificado podría llamar a la <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propiedad, que devuelve el contenido del archivo.  
  
 Antes de llamar a la <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propiedad, debe usar el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propiedad para comprobar que el <xref:System.Web.UI.WebControls.FileUpload> control contiene un archivo para cargarlo. Si el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> devuelve `true`, llame a la <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propiedad. Si devuelve `false`, mostrar un mensaje al usuario indicando que el control no contiene un archivo. Si no se proporciona código de control de errores para comprobar la existencia de un archivo, se produce un intento de guardar un archivo que no existe una <xref:System.Web.HttpException> excepción.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control. Cuando el usuario hace clic en el **cargar archivo** botón, el contenido del archivo se muestran como bytes en un cuadro de texto en la página. Este ejemplo se usa el <xref:System.Web.UI.WebControls.FileUpload.FileBytes%2A> propiedad que se va a cargar el archivo completo.  
  
 [!code-aspx-csharp[FileUploadFileBytes#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadFileBytes/CS/FileUploadFileBytesCS.aspx#1)]
 [!code-aspx-vb[FileUploadFileBytes#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadFileBytes/VB/FileUploadFileBytesVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">No se leyó el archivo completo.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
    <Member MemberName="FileContent">
      <MemberSignature Language="C#" Value="public System.IO.Stream FileContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream FileContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileContent As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ FileContent { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileContent : System.IO.Stream" Usage="System.Web.UI.WebControls.FileUpload.FileContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.IO.Stream" /> que señala a un archivo para cargarlo con el control <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Objeto <see cref="T:System.IO.Stream" /> que señala a un archivo para cargarlo con el <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> procedimientos property get un <xref:System.IO.Stream> objeto que apunta a un archivo para cargar mediante el <xref:System.Web.UI.WebControls.FileUpload> control. Use el <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propiedad para tener acceso al contenido del archivo. Por ejemplo, puede usar el <xref:System.IO.Stream> objeto devuelto por esta propiedad para leer el contenido del archivo como bytes y almacenarlos en una matriz de bytes.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control. El <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propiedad se utiliza para leer el contenido del archivo en una matriz de bytes. Cuando el usuario hace clic en el **cargar archivo** botón, el contenido del archivo se muestran como bytes en un cuadro de texto en la página.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Web.UI.WebControls.FileUpload.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de un archivo en un cliente que se cargará con el control <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>Cadena que especifica el nombre de un archivo en un cliente que se cargará con el <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtiene el nombre de un archivo en un cliente que se cargará con el control <xref:System.Web.UI.WebControls.FileUpload>. El nombre del archivo que el <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propiedad devuelve no incluye la ruta de acceso del archivo en el cliente.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que guarda los archivos en una ruta de acceso especificada en el código. El <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propiedad se utiliza para obtener el nombre del archivo para cargar. El <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método se llama para guardar el archivo en la ruta de acceso especificada en el servidor, utilizando el mismo nombre tiene el archivo en el cliente. Tenga en cuenta que en este ejemplo se muestra la sintaxis básica para este control, pero no todos los procedimientos de comprobación de errores necesarios que deben realizarse antes de guardar el archivo. Para obtener un ejemplo más completo, vea <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A>.  
  
 [!code-aspx-csharp[FileUploadClass1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUploadClass1/cs/fileuploadclass1cs.aspx#1)]
 [!code-aspx-vb[FileUploadClass1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUploadClass1/VB/fileuploadclass1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFile">
      <MemberSignature Language="C#" Value="public bool HasFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFile As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFile { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFile : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el control <see cref="T:System.Web.UI.WebControls.FileUpload" /> contiene un archivo.</summary>
        <value>Es <see langword="true" /> si <see cref="T:System.Web.UI.WebControls.FileUpload" /> contiene un archivo; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propiedad obtiene un valor que indica si el <xref:System.Web.UI.WebControls.FileUpload> control contiene un archivo para cargarlo. Utilice esta propiedad para comprobar la existencia de un archivo para cargarlo antes de realizar operaciones en el archivo. Por ejemplo, antes de llamar a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método para guardar el archivo en el disco, use el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propiedad para comprobar que el archivo existe. Si <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> devuelve `true`, llame a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método. Si devuelve `false`, mostrar un mensaje al usuario indicando que el control no contiene un archivo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que realiza la comprobación de errores. Antes de guardar el archivo, el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> método se llama para comprobar que el control contiene un archivo para cargarlo. Además, el <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> método se llama para comprobar si un archivo con el mismo nombre ya existe en la ruta de acceso. Si es así, tiene como prefijo el nombre del archivo que se cargará con un carácter de subrayado antes el <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> se llama al método. Esto impide que se sobrescriba el archivo existente.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFiles">
      <MemberSignature Language="C#" Value="public bool HasFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasFiles : bool" Usage="System.Web.UI.WebControls.FileUpload.HasFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si cargaron archivos.</summary>
        <value>
          <see langword="true" /> si se cargó algún archivo; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método también devuelve `false` si se carga un archivo vacío (de cero bytes).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnPreRender : EventArgs -&gt; unit" Usage="fileUpload.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Web.UI.Control.PreRender" /> para el control <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload.OnPreRender%2A> método notifica el <xref:System.Web.UI.WebControls.FileUpload> control para realizar todos los pasos necesarios previos a la representación antes de guardar el estado de vista y representar el contenido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFile As HttpPostedFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpPostedFile ^ PostedFile { System::Web::HttpPostedFile ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFile : System.Web.HttpPostedFile" Usage="System.Web.UI.WebControls.FileUpload.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Web.HttpPostedFile" /> subyacente para un archivo que se carga con el control <see cref="T:System.Web.UI.WebControls.FileUpload" />.</summary>
        <value>
          <see cref="T:System.Web.HttpPostedFile" /> para un archivo cargado mediante el <see cref="T:System.Web.UI.WebControls.FileUpload" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad obtiene subyacente <xref:System.Web.HttpPostedFile> objeto para un archivo que se cargará mediante la <xref:System.Web.UI.WebControls.FileUpload> control. Utilice esta propiedad para tener acceso a propiedades adicionales en el archivo cargado.  
  
 Puede usar el <xref:System.Web.HttpPostedFile.ContentLength%2A> propiedad va a obtener la longitud del archivo. Puede usar el <xref:System.Web.HttpPostedFile.ContentType%2A> tipo del archivo de contenido de la propiedad que se va a obtener el MIME. Además, puede usar el <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad para tener acceso a la <xref:System.Web.HttpPostedFile.FileName%2A> propiedad, el <xref:System.Web.HttpPostedFile.InputStream%2A> propiedad y el <xref:System.Web.HttpPostedFile.SaveAs%2A> método. Sin embargo, se proporciona la misma funcionalidad mediante el <xref:System.Web.UI.WebControls.FileUpload.FileName%2A> propiedad, el <xref:System.Web.UI.WebControls.FileUpload.FileContent%2A> propiedad y el <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control. Cuando el usuario hace clic en el **cargar archivo** botón, el contenido del archivo se muestran como bytes en un cuadro de texto en la página. Este ejemplo se usa el <xref:System.Web.UI.WebControls.FileUpload.PostedFile%2A> propiedad para tener acceso a la <xref:System.Web.HttpPostedFile.ContentLength%2A?displayProperty=nameWithType> propiedad. El <xref:System.Web.HttpPostedFile.ContentLength%2A> propiedad se utiliza para determinar la longitud del archivo antes de copiar el contenido del archivo en una matriz de bytes.  
  
 [!code-aspx-csharp[FileUpload.FileContent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.FileContent/cs/fileupload.filecontentcs.aspx#1)]
 [!code-aspx-vb[FileUpload.FileContent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.FileContent/VB/fileupload.filecontentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpPostedFile" />
      </Docs>
    </Member>
    <Member MemberName="PostedFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt; PostedFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Web.HttpPostedFile&gt; PostedFiles" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PostedFiles As IList(Of HttpPostedFile)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ PostedFiles { System::Collections::Generic::IList&lt;System::Web::HttpPostedFile ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PostedFiles : System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;" Usage="System.Web.UI.WebControls.FileUpload.PostedFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Web.HttpPostedFile&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de archivos cargados.</summary>
        <value>La colección de archivos cargados.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="fileUpload.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> que recibe el contenido del control <see cref="T:System.Web.UI.WebControls.FileUpload" />.</param>
        <summary>Envía el contenido del control <see cref="T:System.Web.UI.WebControls.FileUpload" /> al objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> especificado, que escribe el contenido que se representará en el cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload.Render%2A> método envía el <xref:System.Web.UI.WebControls.FileUpload> contenido especificado del control <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> objeto, que escribe el contenido se represente en el cliente.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FileUpload.SaveAs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string -&gt; unit" Usage="fileUpload.SaveAs filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Cadena que especifica la ruta de acceso completa de la ubicación del servidor donde se guardará el archivo cargado.</param>
        <summary>Guarda el contenido de un archivo cargado en una ruta de acceso especificada en el servidor web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método guarda el contenido de un archivo cargado en una ruta de acceso especificada en el servidor Web.  
  
 El <xref:System.Web.UI.WebControls.FileUpload> control no guarda automáticamente un archivo en el servidor después de que el usuario selecciona el archivo para cargar. Debe proporcionar explícitamente un control o un mecanismo que permita al usuario enviar el archivo especificado. Por ejemplo, puede proporcionar un botón que el usuario hace clic para cargar el archivo. El código que escribe para guardar el archivo especificado debe llamar a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, que guarda el contenido de un archivo en una ruta de acceso especificada en el servidor. Normalmente, el <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> se llama al método en un método de control de eventos para un evento que provoca un envío al servidor. Por ejemplo, si proporciona un botón para enviar un archivo, el código para guardar el archivo en el servidor, a continuación, podría incluirse dentro del método de control de eventos para el evento click.  
  
 Cuando se llama a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, debe especificar la ruta de acceso completa del directorio en el servidor en el que se va a guardar el archivo cargado. Si no especifica explícitamente una ruta de acceso en el código de aplicación, un <xref:System.Web.HttpException> excepción se produce cuando un usuario intenta cargar un archivo. Este comportamiento ayuda a proteger los archivos en el servidor, ya que no permite a los usuarios especificar una ruta de acceso en el que se va a guardar los archivos que se cargan.  
  
 Antes de llamar a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método, debe usar el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> propiedad para comprobar que el <xref:System.Web.UI.WebControls.FileUpload> control contiene un archivo para cargarlo. Si el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> devuelve `true`, llame a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> método. Si devuelve `false`, mostrar un mensaje al usuario indicando que el control no contiene un archivo. Si no se proporciona código de control de errores para comprobar la existencia de un archivo, se produce un intento de guardar un archivo que no existe una <xref:System.Web.HttpException> excepción.  
  
 Para llamar a la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> para trabajar, la aplicación ASP.NET debe tener acceso de escritura al directorio en el servidor. Hay dos maneras de que la aplicación puede obtener acceso de escritura. Puede conceder explícitamente el acceso de escritura a la cuenta bajo la que se ejecuta la aplicación, en el directorio en el que se guardarán los archivos cargados. Como alternativa, puede aumentar el nivel de confianza que se concede a la aplicación ASP.NET. Para obtener acceso de escritura al directorio de ejecución de la aplicación, la aplicación debe concederse el <xref:System.Web.AspNetHostingPermission> objeto con el nivel de confianza establecido en el <xref:System.Web.AspNetHostingPermissionLevel.Medium?displayProperty=nameWithType> valor. Aumentar el nivel de confianza aumenta el acceso de la aplicación a los recursos del servidor. Tenga en cuenta que esto no es un enfoque seguro, porque un usuario malintencionado que toma el control de la aplicación también podrá ejecutarse en este nivel de confianza superior. Es una práctica recomendada para ejecutar una aplicación ASP.NET en el contexto de un usuario que tenga los privilegios mínimos necesarios para ejecutar la aplicación. Para obtener más información sobre la seguridad en aplicaciones ASP.NET, vea [prácticas de seguridad básica para aplicaciones Web](http://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad) y [niveles de confianza de ASP.NET y los archivos de directiva](http://msdn.microsoft.com/library/f897c794-10d3-414c-86b7-59b66564bbf1).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un <xref:System.Web.UI.WebControls.FileUpload> control que realiza la comprobación de errores. Antes de guardar el archivo, el <xref:System.Web.UI.WebControls.FileUpload.HasFile%2A> método se llama para comprobar la existencia de un archivo para cargarlo. Además, el <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> método se llama para comprobar si un archivo que tiene el mismo nombre ya existe en la ruta de acceso. Si es así, tiene como prefijo el nombre del archivo para cargar un número antes de la <xref:System.Web.UI.WebControls.FileUpload.SaveAs%2A> se llama al método. Esto impide que se sobrescriba el archivo existente.  
  
 [!code-aspx-csharp[FileUpload.SaveAs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FileUpload.SaveAs/cs/fileupload.saveascs.aspx#1)]
 [!code-aspx-vb[FileUpload.SaveAs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FileUpload.SaveAs/VB/fileupload.saveasvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="filename" /> no es una ruta de acceso completa.</exception>
        <altmember cref="P:System.Web.UI.WebControls.FileUpload.HasFile" />
      </Docs>
    </Member>
  </Members>
</Type>