<Type Name="TreeNode" FullName="System.Web.UI.WebControls.TreeNode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4c8ed5cf2e157b21cbb79ea8e00e4a365559249" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36379119" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TreeNode : ICloneable, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNode extends System.Object implements class System.ICloneable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TreeNode" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNode&#xA;Implements ICloneable, IStateManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNode : ICloneable, System::Web::UI::IStateManager" />
  <TypeSignature Language="F#" Value="type TreeNode = class&#xA;    interface IStateManager&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "ChildNodes")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un nodo del control <see cref="T:System.Web.UI.WebControls.TreeView" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeView> control se compone de nodos. Cada entrada en el árbol se denomina nodo y se representa mediante un <xref:System.Web.UI.WebControls.TreeNode> objeto. Un nodo que contiene otros nodos se denomina un *nodo primario*. Un nodo que está contenido en otro nodo se denomina un *nodo secundario*. Un nodo que no tiene nodos secundarios se denomina un *nodo hoja*. Un nodo que no está incluido en ningún otro nodo, pero es el antecesor de todos los demás nodos es el *nodo raíz*. Un nodo puede ser un elemento primario y un elemento secundario, pero raíz, primario y nodos hoja son mutuamente excluyentes. Varias propiedades visuales y comportamientos de nodos vienen determinadas por si un nodo es un *raíz*, *primario*, o *hoja* nodo.  
  
 Aunque un árbol típico tiene solo un nodo raíz, el <xref:System.Web.UI.WebControls.TreeView> control le permite agregar varios nodos raíz a la estructura de árbol. Esto es útil cuando desea mostrar listas de elementos sin mostrar un único nodo raíz principal, como en una lista de categorías de producto.  
  
 Un nodo almacena los datos principalmente en dos propiedades, el <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad y el <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad. El valor de la <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad se muestra en el <xref:System.Web.UI.WebControls.TreeView> (control) y el <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad se utiliza para almacenar datos adicionales sobre el nodo, como los datos utilizados para controlar los eventos de devolución. Un nodo también almacena la ruta de acceso desde el nodo a su nodo raíz en el <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> propiedad. El <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> propiedad indica la posición del nodo relativa al nodo raíz.  
  
> [!NOTE]
>  Nodos del mismo nivel deben tener un valor único para la <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad; el <xref:System.Web.UI.WebControls.TreeView> control no puede distinguir entre distintos nodos del mismo nivel que tienen el mismo valor. En este escenario, si el usuario hace clic en un nodo que tiene un valor duplicado, el nodo que aparece en primer lugar en el <xref:System.Web.UI.WebControls.TreeView> control está seleccionado.  
  
 Un <xref:System.Web.UI.WebControls.TreeNode> objeto se compone de los siguientes elementos de interfaz de usuario de cuatro, que se pueden personalizar u ocultos:  
  
-   Un icono de indicador de nodo de expansión utilizado para mostrar si el nodo está expandido, contraído o no se puede expandir.  
  
-   Una casilla de verificación opcional asociada al nodo.  
  
-   Una imagen de nodo opcional.  
  
-   El texto del nodo.  
  
 Puede especificar una imagen personalizada para los indicadores de nodo expansible, contraíble y no se puede expandir estableciendo la <xref:System.Web.UI.WebControls.TreeView.ExpandImageUrl%2A>, <xref:System.Web.UI.WebControls.TreeView.CollapseImageUrl%2A>, y <xref:System.Web.UI.WebControls.TreeView.NoExpandImageUrl%2A> propiedades de la <xref:System.Web.UI.WebControls.TreeView> clase. Incluso se pueden ocultar los iconos de indicador de nodo de expansión completamente estableciendo la <xref:System.Web.UI.WebControls.TreeView.ShowExpandCollapse%2A> propiedad de la <xref:System.Web.UI.WebControls.TreeView> clase a `false`.  
  
 Para mostrar una casilla de verificación junto a un nodo, establezca la <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A> propiedad de la <xref:System.Web.UI.WebControls.TreeView> clase. Cuando el <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A> propiedad se establece en un valor distinto de `TreeNodeType.Node`, se muestran casillas de verificación situada junto al tipo de nodo especificado. Puede reemplazar de forma selectiva la casilla de verificación de un nodo individual estableciendo el nodo <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> propiedad. Cuando se muestra una casilla de verificación, utilice la <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> propiedad para determinar si se selecciona la casilla de verificación.  
  
 También puede mostrar una imagen en un nodo estableciendo la <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> propiedad. Esta imagen se muestra junto al texto del nodo.  
  
 El texto de un nodo en el <xref:System.Web.UI.WebControls.TreeView> control puede estar en uno de dos modos: modo de selección o modo de exploración. De forma predeterminada, un nodo está en modo de selección. Para poner un nodo en modo de exploración, establezca el nodo <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> propiedad en un valor distinto de una cadena vacía (""). Para poner un nodo en modo de selección, establezca el nodo <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> propiedad en una cadena vacía.  
  
> [!NOTE]
>  Algunos exploradores de Internet tienen una limitación que puede afectar al rendimiento de la <xref:System.Web.UI.WebControls.TreeView> control. Por ejemplo, Microsoft Internet Explorer 6.0 tiene un límite de caracteres de la dirección URL de 2067 caracteres que envía. Si el número de caracteres en una dirección URL de un nodo es mayor que este número, se producirá un error al expandir ese nodo y se inicia ninguna excepción.  
  
 De forma predeterminada, al hacer clic en un nodo que está en modo de selección de entradas de la página de nuevo al servidor y genera el <xref:System.Web.UI.WebControls.TreeView.SelectedNodeChanged> eventos. Opcionalmente, puede especificar un evento diferente para generar estableciendo el nodo `SelectAction` propiedad. Para obtener más información, vea <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A>. Para determinar qué nodo se hizo clic en modo de selección, utilice el <xref:System.Web.UI.WebControls.TreeView.SelectedNode%2A> propiedad de la <xref:System.Web.UI.WebControls.TreeView> control.  
  
 Cuando un nodo está en modo de exploración, se deshabilitan todos los eventos de selección para ese nodo. Haga clic en el nodo en modo de exploración, se dirige al usuario a la dirección URL especificada. Opcionalmente, puede establecer el <xref:System.Web.UI.WebControls.TreeNode.Target%2A> propiedad para especificar la ventana o el marco en el que se va a mostrar el contenido vinculado.  
  
 La <xref:System.Web.UI.WebControls.TreeNode> clase contiene varias propiedades que se usan para almacenar el estado del nodo. Use la <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> propiedad para determinar si se selecciona un nodo. Para determinar si se expande el nodo, use la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad. El <xref:System.Web.UI.WebControls.TreeNode.DataBound%2A> propiedad se utiliza para determinar si un nodo está enlazado a datos. Cuando un nodo está enlazado a datos, se puede tener acceso el elemento de datos subyacente mediante la <xref:System.Web.UI.WebControls.TreeNode.DataItem%2A> propiedad.  
  
 La clase proporciona varias propiedades que ayudan a determinar la posición de un nodo con respecto a otros nodos en el árbol. Use la <xref:System.Web.UI.WebControls.TreeNode.Depth%2A> propiedad para determinar la profundidad del nodo. Puede obtener la lista delimitada de nodos desde el nodo actual a su nodo raíz mediante el <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> propiedad. Para determinar principal del nodo el nodo, use la <xref:System.Web.UI.WebControls.TreeNode.Parent%2A> propiedad. Nodos secundarios son accesibles mediante la <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> colección.  
  
 A veces, no es práctico estáticamente predefinir la estructura de árbol debido al tamaño de los datos o el contenido personalizado que depende proporcionados por el usuario. Por este motivo, el <xref:System.Web.UI.WebControls.TreeView> control admite el llenado de nodos dinámico. Un nodo se puede rellenar en tiempo de ejecución cuando se expande. Tenga en cuenta que puede obtener un comportamiento inesperado si conserva nodos creados de forma asincrónica. Por ejemplo, si utiliza un subproceso de trabajo de fondo para rellenar nodos de forma asincrónica, el árbol de nodos puede no estar rellena inmediatamente aunque el control continúe con el resto del ciclo de vida de página. En la devolución de datos, la creación diferida de los nodos puede causar problemas cuando se carga el estado de vista del control, pero aún no está totalmente rellena el árbol de nodos.  Para obtener más información sobre el llenado de nodos dinámico, consulte el <xref:System.Web.UI.WebControls.TreeNode.PopulateOnDemand%2A> propiedad.  
  
 Para obtener una lista de valores de propiedad iniciales para una instancia de <xref:System.Web.UI.WebControls.TreeNode>, consulte el <xref:System.Web.UI.WebControls.TreeNode.%23ctor%2A> constructor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo configurar los marcos para el ejemplo de código siguiente.  
  
 [!code-aspx-csharp[TreeViewFrameSet#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameSet/CS/framecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameSet#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameSet/VB/framevb.aspx#1)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar la sintaxis declarativa para crear <xref:System.Web.UI.WebControls.TreeNode> objetos en el <xref:System.Web.UI.WebControls.TreeView> control. En este ejemplo se utiliza en el conjunto de marcos del ejemplo anterior para mostrar una tabla de contenido.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.TreeView" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Parent" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.PopulateOnDemand" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Target" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" /> sin un texto ni un valor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.TreeNode> clase con los valores predeterminados.  
  
> [!NOTE]
>  Cuando se utiliza este constructor, todas las propiedades de la <xref:System.Web.UI.WebControls.TreeNode> objeto se establecen en sus valores predeterminados. Asegúrese de establecer las propiedades, según sea necesario, después de crear el objeto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar este constructor para agregar dinámicamente un nodo para el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNode : string -&gt; System.Web.UI.WebControls.TreeNode" Usage="new System.Web.UI.WebControls.TreeNode text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">El texto que se muestra en el control <see cref="T:System.Web.UI.WebControls.TreeView" /> para el nodo.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" /> con el texto especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.TreeNode> clase mediante el texto especificado por el `text` parámetro.  
  
 En la tabla siguiente muestra el valor de propiedad iniciales para una instancia de <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Propiedad.|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Valor del parámetro `text`.|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar este constructor para agregar dinámicamente un nodo para el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text, System::String ^ value);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNode : string * string -&gt; System.Web.UI.WebControls.TreeNode" Usage="new System.Web.UI.WebControls.TreeNode (text, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">El texto que se muestra en el control <see cref="T:System.Web.UI.WebControls.TreeView" /> para el nodo.</param>
        <param name="value">Los datos complementarios asociados al nodo, tales como los datos utilizados para controlar los eventos de postback.</param>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" /> con el texto y el valor especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.TreeNode> clase mediante el texto y el valor especificado por el `text` y `value` parámetros, respectivamente.  
  
 La siguiente tabla muestra los valores de propiedad iniciales para una instancia de <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Propiedad.|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Valor del parámetro `text`.|  
|<xref:System.Web.UI.WebControls.TreeNode.Value%2A>|Valor del parámetro `value`.|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar este constructor para agregar dinámicamente un nodo para el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal TreeNode (System.Web.UI.WebControls.TreeView owner, bool isRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.TreeView owner, bool isRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.Web.UI.WebControls.TreeView,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (owner As TreeView, isRoot As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; TreeNode(System::Web::UI::WebControls::TreeView ^ owner, bool isRoot);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNode : System.Web.UI.WebControls.TreeView * bool -&gt; System.Web.UI.WebControls.TreeNode" Usage="new System.Web.UI.WebControls.TreeNode (owner, isRoot)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.TreeView" />
        <Parameter Name="isRoot" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="owner">El objeto <see cref="T:System.Web.UI.WebControls.TreeView" /> que incluirá el nuevo objeto <see cref="T:System.Web.UI.WebControls.TreeNode" />.</param>
        <param name="isRoot">Es <see langword="true" /> si <see cref="T:System.Web.UI.WebControls.TreeNode" /> es un nodo raíz; de lo contrario, es <see langword="false" />.</param>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" /> utilizando el propietario especificado.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeNodeTypes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, string value, string imageUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, string value, string imageUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, value As String, imageUrl As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text, System::String ^ value, System::String ^ imageUrl);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNode : string * string * string -&gt; System.Web.UI.WebControls.TreeNode" Usage="new System.Web.UI.WebControls.TreeNode (text, value, imageUrl)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="imageUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">El texto que se muestra en el control <see cref="T:System.Web.UI.WebControls.TreeView" /> para el nodo.</param>
        <param name="value">Los datos complementarios asociados al nodo, tales como los datos utilizados para controlar los eventos de postback.</param>
        <param name="imageUrl">La dirección URL de una imagen que se muestra al lado del nodo.</param>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" /> con el texto, el valor y la dirección URL de imagen especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.TreeNode> clase utilizando el texto, valor y la imagen de dirección URL especificada por el `text`, `value`, y `imageUrl` parámetros, respectivamente.  
  
 La siguiente tabla muestra los valores de propiedad iniciales para una instancia de <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Propiedad.|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Valor del parámetro `text`.|  
|<xref:System.Web.UI.WebControls.TreeNode.Value%2A>|Valor del parámetro `value`.|  
|<xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A>|Valor del parámetro `imageUrl`.|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar este constructor para agregar dinámicamente un nodo para el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNode (string text, string value, string imageUrl, string navigateUrl, string target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, string value, string imageUrl, string navigateUrl, string target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.#ctor(System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, value As String, imageUrl As String, navigateUrl As String, target As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TreeNode(System::String ^ text, System::String ^ value, System::String ^ imageUrl, System::String ^ navigateUrl, System::String ^ target);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.TreeNode : string * string * string * string * string -&gt; System.Web.UI.WebControls.TreeNode" Usage="new System.Web.UI.WebControls.TreeNode (text, value, imageUrl, navigateUrl, target)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="imageUrl" Type="System.String" />
        <Parameter Name="navigateUrl" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">El texto que se muestra en el control <see cref="T:System.Web.UI.WebControls.TreeView" /> para el nodo.</param>
        <param name="value">Los datos complementarios asociados al nodo, tales como los datos utilizados para controlar los eventos de postback.</param>
        <param name="imageUrl">La dirección URL de una imagen que se muestra al lado del nodo.</param>
        <param name="navigateUrl">La dirección URL a la que se establece un vínculo cuando se hace clic en el nodo.</param>
        <param name="target">La ventana o el marco de destino donde debe mostrarse el contenido de la página Web a la que se establece un vínculo al hacer clic en el nodo.</param>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" /> utilizando los datos de texto, valor, dirección URL de imagen, dirección URL de desplazamiento y destino especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este constructor para inicializar una nueva instancia de la <xref:System.Web.UI.WebControls.TreeNode> clase utilizando las direcciones URL de texto, valor, imagen y la navegación y mostrar el destino especificado por la `text`, `value`, `imageUrl`, `navigateUrl`, y `target` parámetros, respectivamente.  
  
 La siguiente tabla muestra los valores de propiedad iniciales para una instancia de <xref:System.Web.UI.WebControls.TreeNode>.  
  
|Propiedad.|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Web.UI.WebControls.TreeNode.Text%2A>|Valor del parámetro `text`.|  
|<xref:System.Web.UI.WebControls.TreeNode.Value%2A>|Valor del parámetro `value`.|  
|<xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A>|Valor del parámetro `imageUrl`.|  
|<xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A>|Valor del parámetro `navigateUrl`.|  
|<xref:System.Web.UI.WebControls.TreeNode.Target%2A>|Valor del parámetro `target`.|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar este constructor para agregar dinámicamente un nodo para el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCtor/CS/treenodectorcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCtor/VB/treenodectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Target" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Checked : bool with get, set" Usage="System.Web.UI.WebControls.TreeNode.Checked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la casilla del nodo está activada.</summary>
        <value>Es <see langword="true" /> si la casilla del nodo está activada; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un nodo muestra una casilla de verificación, el <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> propiedad normalmente se utiliza para especificar si se debe seleccionar la casilla de verificación. Cuando se selecciona la casilla de verificación asociada a un nodo, el nodo se agrega automáticamente a la <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> colección de la <xref:System.Web.UI.WebControls.TreeView> control. El <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> propiedad también puede utilizarse para determinar si se selecciona la casilla de verificación.  
  
> [!NOTE]
>  Es más habitual para determinar qué nodos en el <xref:System.Web.UI.WebControls.TreeView> control tienen sus casillas de verificación activadas recorriendo en iteración la <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> colección.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Checked%2A> propiedad para especificar si se selecciona la casilla de verificación de un nodo. Inicializa las casillas de verificación de nodos con una profundidad de uno en un estado seleccionado. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Newsgroup.xml.  
  
 [!code-aspx-csharp[TreeNodeChecked#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeChecked/CS/treenodecheckedcs.aspx#1)]
 [!code-aspx-vb[TreeNodeChecked#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeChecked/VB/treenodecheckedvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<category name="news.microsoft.com">  
    <group name="microsoft.public.dotnet.framework.aspnet"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.mobile"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.webservices"/>  
</category>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
      </Docs>
    </Member>
    <Member MemberName="ChildNodes">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNodeCollection ChildNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNodeCollection ChildNodes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChildNodes As TreeNodeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNodeCollection ^ ChildNodes { System::Web::UI::WebControls::TreeNodeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChildNodes : System.Web.UI.WebControls.TreeNodeCollection" Usage="System.Web.UI.WebControls.TreeNode.ChildNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNodeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> que contiene los nodos secundarios de primer nivel del nodo actual.</summary>
        <value>Una colección <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> que contiene los nodos secundarios de primer nivel del nodo actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedad que se va a obtener un <xref:System.Web.UI.WebControls.TreeNodeCollection> colección que contiene los nodos secundarios de primer nivel del nodo actual. Esta colección se suele utilizar para recorrer en iteración todos los nodos secundarios de primer nivel, o para tener acceso a un nodo específico secundarios de primer nivel del nodo actual.  
  
 El <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedad también puede utilizarse para administrar mediante programación los nodos secundarios de primer nivel del nodo actual. Puede agregar, insertar, eliminar y recuperar <xref:System.Web.UI.WebControls.TreeNode> objetos de la colección. Las actualizaciones de la colección se reflejarán automáticamente en el <xref:System.Web.UI.WebControls.TreeView> controlar la próxima vez que se actualice la página.  
  
 Para obtener acceso a los nodos secundarios situados más abajo en el árbol, utilice la <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedad del nodo secundario de siguiente nivel para descender en los niveles de nodo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedad para recorrer el árbol.  
  
 [!code-aspx-csharp[TreeNodeCollectionCount#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCount/CS/treenodecollectioncountcs.aspx#1)]
 [!code-aspx-vb[TreeNodeCollectionCount#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCount/VB/treenodecollectioncountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNodeCollection" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Parent" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="protected virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Clone" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="treeNode.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una instancia nueva de la clase <see cref="T:System.Web.UI.WebControls.TreeNode" /> con las propiedades de la instancia <see cref="T:System.Web.UI.WebControls.TreeNode" /> actual.</summary>
        <returns>Una instancia nueva de <see cref="T:System.Web.UI.WebControls.TreeNode" /> con las propiedades de la instancia de <see cref="T:System.Web.UI.WebControls.TreeNode" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se trata de un método auxiliar que admite la <xref:System.ICloneable> interfaz implementada por <xref:System.Web.UI.WebControls.TreeNode>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ICloneable" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public void Collapse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Collapse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Collapse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Collapse();" />
      <MemberSignature Language="F#" Value="member this.Collapse : unit -&gt; unit" Usage="treeNode.Collapse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Contrae el nodo de árbol actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> método para contraer fácilmente el nodo actual.  
  
> [!NOTE]
>  Como alternativa, también puede establecer el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad `false`.  
  
 Para contraer el nodo actual y todos sus nodos secundarios, considere el uso de la <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> método.  
  
 <xref:System.Web.UI.WebControls.TreeView.CollapseAll%2A> Contrae todos los nodos del árbol completo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> método para contraer mediante programación un nodo en el <xref:System.Web.UI.WebControls.TreeView> control. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpand/CS/treenodeexpandcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpand/VB/treenodeexpandvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.CollapseAll" />
      </Docs>
    </Member>
    <Member MemberName="CollapseAll">
      <MemberSignature Language="C#" Value="public void CollapseAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CollapseAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub CollapseAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CollapseAll();" />
      <MemberSignature Language="F#" Value="member this.CollapseAll : unit -&gt; unit" Usage="treeNode.CollapseAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Contrae el nodo actual y todos sus nodos secundarios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> método para contraer fácilmente el nodo actual y todos sus nodos secundarios.  
  
> [!NOTE]
>  Como alternativa, también puede establecer el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad del nodo actual y cada uno de sus nodos secundarios en `false`.  
  
 Para contraer solamente el nodo actual, considere el uso de la <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> método.  
  
 <xref:System.Web.UI.WebControls.TreeView.CollapseAll%2A> Contrae todos los nodos del árbol completo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> método para contraer mediante programación un nodo y todos sus nodos secundarios en el <xref:System.Web.UI.WebControls.TreeView> control. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpandAll#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpandAll/CS/treenodeexpandallcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpandAll#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpandAll/VB/treenodeexpandallvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.CollapseAll" />
      </Docs>
    </Member>
    <Member MemberName="DataBound">
      <MemberSignature Language="C#" Value="public bool DataBound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataBound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.DataBound" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataBound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DataBound { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.DataBound : bool" Usage="System.Web.UI.WebControls.TreeNode.DataBound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el nodo se creó mediante enlace de datos.</summary>
        <value>Es <see langword="true" /> si el nodo se creó mediante enlace de datos; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNode.DataBound%2A> propiedad se utiliza para determinar mediante programación si el nodo fue creado a través del enlace de datos. Dado que no se pueden mezclar contenidos estáticos y dinámicos en el mismo nodo, esta propiedad se utiliza normalmente al rellenar un <xref:System.Web.UI.WebControls.TreeView> control dinámicamente para determinar si el nodo contiene contenido estático.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
      </Docs>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public object DataItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataItem" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.DataItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataItem : obj" Usage="System.Web.UI.WebControls.TreeNode.DataItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el elemento de datos enlazado al control.</summary>
        <value>Un objeto <see cref="T:System.Object" /> que representa el elemento de datos enlazado al control. El valor predeterminado es <see langword="null" />, para indicar que el nodo no está enlazado a ningún elemento de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Web.UI.WebControls.TreeView> control se enlaza a un origen de datos, como un <xref:System.Web.UI.WebControls.XmlDataSource> de objeto, esta propiedad se establece en el elemento de datos que está enlazado a este nodo concreto. Esta propiedad se utiliza normalmente para tener acceso a los valores del elemento de datos.  
  
> [!NOTE]
>  Esta propiedad está disponible solo una vez realizado el enlace de datos.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.XmlDataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataPath">
      <MemberSignature Language="C#" Value="public string DataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.DataPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataPath : string" Usage="System.Web.UI.WebControls.TreeNode.DataPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ruta de acceso a los datos enlazados al nodo.</summary>
        <value>La ruta de acceso a los datos enlazados al nodo. Este valor procede del control de origen de datos jerárquico al que el control <see cref="T:System.Web.UI.WebControls.TreeView" /> se encuentra enlazado. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNode.DataPath%2A> valor de propiedad se utiliza normalmente cuando se llama a la <xref:System.Web.UI.IHierarchicalDataSource.GetHierarchicalView%2A?displayProperty=nameWithType> método para proporcionar la ruta de acceso a los datos enlazados al nodo actual. Este método, a continuación, devuelve un <xref:System.Web.UI.HierarchicalDataSourceView?displayProperty=nameWithType> objeto que contiene los datos en la ruta de acceso especificada.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="M:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView(System.String)" />
        <altmember cref="T:System.Web.UI.HierarchicalDataSourceControl" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Depth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Web.UI.WebControls.TreeNode.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la profundidad del nodo.</summary>
        <value>La profundidad del nodo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Depth%2A> propiedad para determinar la profundidad del nodo. La profundidad representa el número de niveles de jerarquía entre un nodo y el nodo raíz. Por ejemplo, un nodo raíz tiene una profundidad de cero. Un elemento secundario del nodo raíz tiene una profundidad de uno y así sucesivamente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Depth%2A> propiedad para determinar la profundidad de un nodo. Inicializa todos los nodos con una profundidad de uno en un estado seleccionado. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Newsgroup.xml.  
  
 [!code-aspx-csharp[TreeNodeChecked#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeChecked/CS/treenodecheckedcs.aspx#1)]
 [!code-aspx-vb[TreeNodeChecked#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeChecked/VB/treenodecheckedvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<category name="news.microsoft.com">  
    <group name="microsoft.public.dotnet.framework.aspnet"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.mobile"/>  
    <group name="microsoft.public.dotnet.framework.aspnet.webservices"/>  
</category>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
      </Docs>
    </Member>
    <Member MemberName="Expand">
      <MemberSignature Language="C#" Value="public void Expand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Expand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Expand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Expand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Expand();" />
      <MemberSignature Language="F#" Value="member this.Expand : unit -&gt; unit" Usage="treeNode.Expand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Expande el nodo de árbol actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> método cómodamente expandiendo el nodo actual.  
  
> [!NOTE]
>  Como alternativa, también puede establecer el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad `true`.  
  
 Para expandir el nodo actual y todos sus nodos secundarios, considere el uso de la <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> método.  
  
 <xref:System.Web.UI.WebControls.TreeView.ExpandAll%2A> se expandirá todos los nodos del árbol completo.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> método para expandir mediante programación un nodo en el <xref:System.Web.UI.WebControls.TreeView> control. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpand/CS/treenodeexpandcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpand/VB/treenodeexpandvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.ExpandAll" />
      </Docs>
    </Member>
    <Member MemberName="ExpandAll">
      <MemberSignature Language="C#" Value="public void ExpandAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandAll();" />
      <MemberSignature Language="F#" Value="member this.ExpandAll : unit -&gt; unit" Usage="treeNode.ExpandAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Expande el nodo actual y todos sus nodos secundarios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> método cómodamente expandir el nodo actual y todos sus nodos secundarios.  
  
> [!NOTE]
>  Como alternativa, también puede establecer el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad del nodo actual y cada uno de sus nodos secundarios en `true`.  
  
 Para expandir el nodo actual, considere el uso de la <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> método.  
  
 <xref:System.Web.UI.WebControls.TreeView.ExpandAll%2A> se expandirá todos los nodos del árbol completo.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> método para expandir mediante programación un nodo y todos sus nodos secundarios en el <xref:System.Web.UI.WebControls.TreeView> control. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpandAll#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpandAll/CS/treenodeexpandallcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpandAll#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpandAll/VB/treenodeexpandallvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.ExpandAll" />
      </Docs>
    </Member>
    <Member MemberName="Expanded">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; Expanded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; Expanded" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Expanded" />
      <MemberSignature Language="VB.NET" Value="Public Property Expanded As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; Expanded { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.Expanded : Nullable&lt;bool&gt; with get, set" Usage="System.Web.UI.WebControls.TreeNode.Expanded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Nullable`1&lt;System.Boolean&gt;), "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el nodo está expandido.</summary>
        <value>
          <see langword="true" /> si el nodo está expandido, <see langword="false" /> si el nodo no está expandido, o <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad para especificar o determinar si el nodo está expandido.  
  
 Puede expandir y contraer un nodo mediante una llamada a la <xref:System.Web.UI.WebControls.TreeNode.Expand%2A> y <xref:System.Web.UI.WebControls.TreeNode.Collapse%2A> métodos, respectivamente. También puede expandir y contraer un nodo y todos sus nodos secundarios mediante una llamada a la <xref:System.Web.UI.WebControls.TreeNode.ExpandAll%2A> y <xref:System.Web.UI.WebControls.TreeNode.CollapseAll%2A> métodos, respectivamente.  
  
 Puesto que la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> es una propiedad de tres estados, el siguiente fragmento de código de C# produce un error de compilación:  
  
```  
protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)  
{  
if (TreeView1.Nodes[0].Expanded)  
{  
// some work here   
}  
}  
```  
  
 Aunque VB.Net convierte implícitamente el `Boolean` valor a un `NullableBoolean`, C# no lo hace. Por lo tanto, es recomendable comprobar explícitamente el estado de la propiedad. Por ejemplo, los siguientes ejemplos de código en Visual Basic y C# probar explícitamente el valor de la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad.  
  
 El siguiente ejemplo de código de Visual Basic comprueba explícitamente el valor de la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad. En este ejemplo se comprueba si el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad está establecida en `True`; por lo tanto, `Nothing` y `False` pasar explícitamente el `If` instrucción.  
  
```  
If TreeView1.Nodes(0).Expanded = True Then 'some work hereEnd IF  
```  
  
 Este ejemplo de código de C# comprueba explícitamente el valor de la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad. En este ejemplo se comprueba si el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad está establecida en `True`; por lo tanto, `Null` y `False` pasar explícitamente el `If` instrucción.  
  
```  
if( TreeView1.Nodes[0].Expanded == true ) { //some work here}  
```  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad que se va a expandir mediante programación un nodo. Inicializa todos los nodos con una profundidad de uno en un estado expandido. Tenga en cuenta que cuando se expande el nodo raíz, sus nodos secundarios está expandidos. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Book.xml.  
  
 [!code-aspx-csharp[TreeNodeExpanded#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeExpanded/CS/treenodeexpandedcs.aspx#1)]
 [!code-aspx-vb[TreeNodeExpanded#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeExpanded/VB/treenodeexpandedvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ExpandDepth" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.ExpandAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.CollapseAll" />
      </Docs>
    </Member>
    <Member MemberName="ImageToolTip">
      <MemberSignature Language="C#" Value="public string ImageToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ImageToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageToolTip As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImageToolTip { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ImageToolTip : string with get, set" Usage="System.Web.UI.WebControls.TreeNode.ImageToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto de información sobre herramientas para la imagen mostrada al lado de un nodo.</summary>
        <value>El texto de información sobre herramientas para la imagen mostrada al lado de un nodo. El valor predeterminado es una cadena vacía (""), lo que indica que no se ha establecido esta propiedad.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se muestra una imagen junto a un nodo (cuando la <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> propiedad se establece), use el <xref:System.Web.UI.WebControls.TreeNode.ImageToolTip%2A> propiedad para especificar la información sobre herramientas aparece cuando el usuario coloca el puntero del mouse sobre la imagen. El texto que especifique proporciona dispositivos de tecnología de asistencia con una descripción de la imagen que puede usarse para hacer que el control sea más accesible.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
 El valor de esta propiedad, cuando se establece, pueden guardar automáticamente en un archivo de recursos utilizando una herramienta de diseñador. Para obtener más información, consulte <xref:System.ComponentModel.LocalizableAttribute> y [globalización y localización](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.ImageToolTip%2A> propiedad para especificar el texto de información sobre herramientas para una imagen que aparece junto a un nodo. En este ejemplo funcione correctamente, debe proporcionar sus propias imágenes.  
  
 [!code-aspx-csharp[TreeNodeImageToolTip#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeImageToolTip/CS/treenodeimagetooltipcs.aspx#1)]
 [!code-aspx-vb[TreeNodeImageToolTip#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeImageToolTip/VB/treenodeimagetooltipvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ImageUrl">
      <MemberSignature Language="C#" Value="public string ImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ImageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property ImageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ImageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ImageUrl : string with get, set" Usage="System.Web.UI.WebControls.TreeNode.ImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la dirección URL de una imagen que se muestra al lado del nodo.</summary>
        <value>La dirección URL de una imagen personalizada que se muestra al lado del nodo. El valor predeterminado es una cadena vacía (""), lo que indica que esta propiedad no está establecida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> propiedad para especificar una imagen personalizada para el nodo actual en el <xref:System.Web.UI.WebControls.TreeView> control. Esta imagen se muestra al lado del nodo y puede estar en cualquier formato de archivo (.jpg, .gif, .bmp etc.), siempre que el explorador del cliente admita ese formato.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.ImageUrl%2A> propiedad para proporcionar una imagen personalizada para un nodo. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Book.xml.  
  
 [!code-aspx-csharp[TreeViewTreeNodeDataBound#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewTreeNodeDataBound/CS/treeviewtreenodedataboundcs.aspx#1)]
 [!code-aspx-vb[TreeViewTreeNodeDataBound#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewTreeNodeDataBound/VB/treeviewtreenodedataboundvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ImageSet" />
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsTrackingViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTrackingViewState : bool" Usage="System.Web.UI.WebControls.TreeNode.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el nodo está guardando los cambios en su estado de vista.</summary>
        <value>Es <see langword="true" /> si el control está marcado para guardar su estado; en caso contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member LoadViewState : obj -&gt; unit&#xA;override this.LoadViewState : obj -&gt; unit" Usage="treeNode.LoadViewState state" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Object" /> que representa el estado del nodo.</param>
        <summary>Carga el estado de vista guardado previamente del nodo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.TreeNode.LoadViewState%2A> es un método auxiliar que se usa para cargar el estado de vista guardado previamente del nodo  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="NavigateUrl">
      <MemberSignature Language="C#" Value="public string NavigateUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NavigateUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
      <MemberSignature Language="VB.NET" Value="Public Property NavigateUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NavigateUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NavigateUrl : string with get, set" Usage="System.Web.UI.WebControls.TreeNode.NavigateUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la dirección URL destino cuando se hace clic en el nodo.</summary>
        <value>La dirección URL de destino cuando se hace clic en el nodo. El valor predeterminado es una cadena vacía (""), lo que indica que esta propiedad no está establecida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El texto de un nodo puede estar en uno de dos modos: modo de selección o modo de exploración. De forma predeterminada, un nodo está en modo de selección. Para poner un nodo en modo de exploración, establezca el nodo <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> propiedad en un valor distinto de una cadena vacía.  
  
 Cuando un nodo está en modo de exploración, se deshabilitan todos los eventos de selección para ese nodo. Haga clic en el nodo en modo de exploración, se vincula al usuario a la dirección URL especificada. Opcionalmente, puede establecer el <xref:System.Web.UI.WebControls.TreeNode.Target%2A> propiedad para especificar la ventana o el marco en el que se va a mostrar el contenido vinculado.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo configurar los marcos para el ejemplo de código siguiente.  
  
 [!code-aspx-csharp[TreeViewFrameSet#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameSet/CS/framecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameSet#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameSet/VB/framevb.aspx#1)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> propiedad para especificar la dirección URL del vínculo cuando se hace clic en el nodo. En este ejemplo se utiliza en el conjunto de marcos del ejemplo anterior para mostrar una tabla de contenido.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Target" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.SelectAction" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNode Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNode Parent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNode ^ Parent { System::Web::UI::WebControls::TreeNode ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Web.UI.WebControls.TreeNode" Usage="System.Web.UI.WebControls.TreeNode.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nodo primario del nodo actual.</summary>
        <value>Un objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que representa el nodo primario del nodo actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNode.Parent%2A> propiedad devuelve un <xref:System.Web.UI.WebControls.TreeNode> objeto que representa el nodo primario del nodo actual. Normalmente se usa para determinar el nodo primario o para tener acceso a las propiedades del nodo primario.  
  
> [!NOTE]
>  Un nodo raíz no tiene un nodo primario.  
  
 Para obtener acceso a los nodos secundarios del nodo actual, use el <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Parent%2A> propiedad para tener acceso a la <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad del nodo primario del nodo actual.  
  
 [!code-aspx-csharp[TreeNodeParent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeParent/CS/treenodeparentcs.aspx#1)]
 [!code-aspx-vb[TreeNodeParent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeParent/VB/treenodeparentvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="PopulateOnDemand">
      <MemberSignature Language="C#" Value="public bool PopulateOnDemand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PopulateOnDemand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.PopulateOnDemand" />
      <MemberSignature Language="VB.NET" Value="Public Property PopulateOnDemand As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PopulateOnDemand { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PopulateOnDemand : bool with get, set" Usage="System.Web.UI.WebControls.TreeNode.PopulateOnDemand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el nodo se rellena dinámicamente.</summary>
        <value>Es <see langword="true" /> para rellenar dinámicamente el nodo; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A veces, no es práctico estáticamente predefinir la estructura de árbol debido al tamaño de los datos o el contenido personalizado que depende proporcionados por el usuario. Por este motivo, el <xref:System.Web.UI.WebControls.TreeView> control admite el llenado de nodos dinámico. Cuando un nodo <xref:System.Web.UI.WebControls.TreeNode.PopulateOnDemand%2A> propiedad está establecida en `true`, ese nodo se rellena en tiempo de ejecución a través de un evento de postback cuando se expande el nodo. Para rellenar un nodo dinámicamente, se debe definir un método de control de eventos que rellena el nodo para el <xref:System.Web.UI.WebControls.TreeView.TreeNodePopulate> eventos.  
  
 Exploradores admitidos también pueden aprovechar las ventajas de llenado de nodos en el cliente. Cuando se habilita, esto permite la <xref:System.Web.UI.WebControls.TreeView> control para rellenar dinámicamente un nodo en el cliente cuando se expande el nodo, lo que evita la necesidad de enviar datos al servidor. Para obtener más información sobre el llenado de nodos de cliente, consulte <xref:System.Web.UI.WebControls.TreeView.PopulateNodesFromClient%2A>.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.PopulateOnDemand%2A> propiedad para indicar que un nodo se rellena dinámicamente.  
  
 [!code-aspx-csharp[TreeViewPopulateNodesFromClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/CS/treeviewpopulatenodesfromclientcs.aspx#1)]
 [!code-aspx-vb[TreeViewPopulateNodesFromClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/VB/treeviewpopulatenodesfromclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="E:System.Web.UI.WebControls.TreeView.TreeNodePopulate" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.PopulateNodesFromClient" />
      </Docs>
    </Member>
    <Member MemberName="RenderPostText">
      <MemberSignature Language="C#" Value="protected virtual void RenderPostText (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RenderPostText(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.RenderPostText(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RenderPostText (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RenderPostText(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member RenderPostText : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.RenderPostText : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="treeNode.RenderPostText writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> que representa el flujo de salida utilizado para escribir contenido en una página web.</param>
        <summary>Permite a los desarrolladores de controles agregar una representación adicional al nodo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método puede reemplazarse por los programadores de controles para agregar una representación adicional después de que se represente el nodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.RenderPreText(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderPreText">
      <MemberSignature Language="C#" Value="protected virtual void RenderPreText (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RenderPreText(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.RenderPreText(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RenderPreText (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RenderPreText(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member RenderPreText : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.RenderPreText : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="treeNode.RenderPreText writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> que representa el flujo de salida utilizado para escribir contenido en una página web.</param>
        <summary>Permite a los desarrolladores de controles agregar una representación adicional al nodo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método puede reemplazarse por los programadores de controles para agregar una representación adicional antes de que se represente el nodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.RenderPreText(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="abstract member SaveViewState : unit -&gt; obj&#xA;override this.SaveViewState : unit -&gt; obj" Usage="treeNode.SaveViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Guarda el estado de vista actual del nodo.</summary>
        <returns>Un objeto <see cref="T:System.Object" /> que contiene el estado guardado del nodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNode.SaveViewState%2A> método es un método auxiliar llamado por el nodo para guardar su estado.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="treeNode.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Selecciona el nodo actual del control <see cref="T:System.Web.UI.WebControls.TreeView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Select%2A> método para seleccionar el nodo actual en el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 **Tenga en cuenta** como alternativa, también puede seleccionar el nodo actual estableciendo la <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> propiedad `true`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Select%2A> método para seleccionar un nodo en el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeSelected2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeSelected2/CS/treenodeselected2cs.aspx#1)]
 [!code-aspx-vb[TreeNodeSelected2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeSelected2/VB/treenodeselected2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Selected" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.SelectedNode" />
      </Docs>
    </Member>
    <Member MemberName="SelectAction">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNodeSelectAction SelectAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.TreeNodeSelectAction SelectAction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.SelectAction" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectAction As TreeNodeSelectAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::TreeNodeSelectAction SelectAction { System::Web::UI::WebControls::TreeNodeSelectAction get(); void set(System::Web::UI::WebControls::TreeNodeSelectAction value); };" />
      <MemberSignature Language="F#" Value="member this.SelectAction : System.Web.UI.WebControls.TreeNodeSelectAction with get, set" Usage="System.Web.UI.WebControls.TreeNode.SelectAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNodeSelectAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el evento o eventos que se generan cuando se selecciona un nodo.</summary>
        <value>Uno de los valores de <see cref="T:System.Web.UI.WebControls.TreeNodeSelectAction" />. El valor predeterminado es <see langword="TreeNodeSelectAction.Select" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El texto de un nodo en el <xref:System.Web.UI.WebControls.TreeView> control puede estar en uno de dos modos: modo de selección o modo de exploración. De forma predeterminada, un nodo está en modo de selección. Para poner un nodo en modo de exploración, establezca el nodo <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> propiedad en un valor distinto de una cadena vacía (""). Para poner un nodo en modo de selección, establezca el nodo <xref:System.Web.UI.WebControls.TreeNode.NavigateUrl%2A> propiedad en una cadena vacía.  
  
> [!NOTE]
>  Cuando un nodo está en modo de exploración, se deshabilitan eventos de selección para ese nodo. Al hacer clic en un nodo se dirige al usuario a la dirección URL especificada, en lugar de enviar la página al servidor y cuando se genera un evento.  
  
 Cuando un nodo está en modo de selección, utilice el <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A> propiedad para especificar qué evento o eventos se generan cuando se selecciona un nodo. En la siguiente tabla se enumeran las opciones disponibles.  
  
|Acción de selección|Descripción|  
|----------------------|-----------------|  
|`TreeNodeSelectAction.Expand`|Alterna el nodo entre expandido y contraído. Genera el <xref:System.Web.UI.WebControls.TreeView.TreeNodeExpanded> eventos o <xref:System.Web.UI.WebControls.TreeView.TreeNodeCollapsed> eventos según corresponda.|  
|`TreeNodeSelectAction.None`|No provoca ningún evento cuando se selecciona un nodo.|  
|`TreeNodeSelectAction.Select`|Genera el evento <xref:System.Web.UI.WebControls.TreeView.SelectedNodeChanged> cuando se selecciona un nodo.|  
|`TreeNodeSelectAction.SelectExpand`|Genera tanto la <xref:System.Web.UI.WebControls.TreeView.SelectedNodeChanged> y <xref:System.Web.UI.WebControls.TreeView.TreeNodeExpanded> eventos cuando se selecciona un nodo. Solo se expanden los nodos, nunca se contraen.|  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.TreeView.HoverNodeStyle%2A> propiedad no se representa para un nodo con su <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A> propiedad establecida en `TreeNodeSelectAction.None`.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.SelectAction%2A> propiedad para especificar qué evento se desencadena cuando se hace clic en un nodo.  
  
 [!code-aspx-csharp[TreeViewPopulateNodesFromClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/CS/treeviewpopulatenodesfromclientcs.aspx#1)]
 [!code-aspx-vb[TreeViewPopulateNodesFromClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/VB/treeviewpopulatenodesfromclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNodeSelectAction" />
        <altmember cref="E:System.Web.UI.WebControls.TreeView.SelectedNodeChanged" />
        <altmember cref="E:System.Web.UI.WebControls.TreeView.TreeNodeExpanded" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Property Selected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Selected { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Selected : bool with get, set" Usage="System.Web.UI.WebControls.TreeNode.Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el nodo está seleccionado.</summary>
        <value>Es <see langword="true" /> si el nodo está seleccionado; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> propiedad para especificar o determinar si el nodo está seleccionado.  
  
> [!NOTE]
>  Aunque la propiedad se puede usar para determinar si el nodo está seleccionado, es más habitual utilizar la <xref:System.Web.UI.WebControls.TreeView.SelectedNode%2A> propiedad.  
  
 Un único nodo puede seleccionarse a la vez en el <xref:System.Web.UI.WebControls.TreeView> controlar cuando se usa esta propiedad.  
  
> [!NOTE]
>  Como alternativa, también puede seleccionar el nodo mediante el <xref:System.Web.UI.WebControls.TreeNode.Select%2A> método.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Selected%2A> propiedad para seleccionar un nodo en el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeSelected2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeSelected2/CS/treenodeselected2cs.aspx#1)]
 [!code-aspx-vb[TreeNodeSelected2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeSelected2/VB/treenodeselected2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Select" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.SelectedNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ShowCheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="ShowCheckBox">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowCheckBox { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; ShowCheckBox" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ShowCheckBox" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowCheckBox As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; ShowCheckBox { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.ShowCheckBox : Nullable&lt;bool&gt; with get, set" Usage="System.Web.UI.WebControls.TreeNode.ShowCheckBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Nullable`1&lt;System.Boolean&gt;), "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se muestra una casilla al lado del nodo.</summary>
        <value>Es <see langword="true" /> para mostrar la casilla; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeView> control permite mostrar una casilla de verificación junto a la imagen de un nodo. Use la <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> propiedad para mostrar u ocultar la casilla de verificación para el nodo actual.  
  
 Aunque la <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> propiedad puede utilizarse para mostrar casillas de verificación, es más habitual utilizar la <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A?displayProperty=nameWithType> propiedad de la <xref:System.Web.UI.WebControls.TreeView> control. El <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A?displayProperty=nameWithType> propiedad, sin embargo, afecta a cada tipo de nodo especificado por la propiedad; por lo tanto, la <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A?displayProperty=nameWithType> propiedad se utiliza a menudo para reemplazar esta configuración para un nodo individual.  
  
 Puesto que la <xref:System.Web.UI.WebControls.TreeView.ShowCheckBoxes%2A?displayProperty=nameWithType> es una propiedad de tres estados, el siguiente fragmento de código de C# produce un error de compilación:  
  
```  
protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)  
{  
if (TreeView1.Nodes[0].Expanded)  
{  
// some work here   
}  
}  
```  
  
 Aunque VB.Net convierte implícitamente el `Boolean` valor a un `NullableBoolean`, C# no lo hace. Por lo tanto, es recomendable comprobar explícitamente el estado de la propiedad. Por ejemplo, los siguientes ejemplos de código en Visual Basic y C# probar explícitamente el valor de la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad.  
  
 El siguiente ejemplo de código de Visual Basic comprueba explícitamente el valor de la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad. En este ejemplo se comprueba si el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad está establecida en `True`; por lo tanto, `Nothing` y `False` pasar explícitamente el `If` instrucción.  
  
```  
If TreeView1.Nodes(0).Expanded = True Then 'some work hereEnd IF  
```  
  
 Este ejemplo de código de C# comprueba explícitamente el valor de la <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad. En este ejemplo se comprueba si el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad está establecida en `True`; por lo tanto, `Null` y `False` pasar explícitamente el `If` instrucción.  
  
```  
if( TreeView1.Nodes[0].Expanded == true ) { //some work here}  
```  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.ShowCheckBox%2A> propiedad mediante programación, mostrar y ocultar la casilla de verificación para un nodo en el <xref:System.Web.UI.WebControls.TreeView> control. En este ejemplo funcione correctamente, debe copiar los datos XML de ejemplo siguientes en un archivo denominado Book.xml.  
  
 [!code-aspx-csharp[TreeNodeShowCheckBox#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeShowCheckBox/CS/treenodeshowcheckboxcs.aspx#1)]
 [!code-aspx-vb[TreeNodeShowCheckBox#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeShowCheckBox/VB/treenodeshowcheckboxvb.aspx#1)]  
  
 El código siguiente es datos XML de ejemplo para el ejemplo anterior.  
  
```  
<Book Title="Book Title">  
    <Chapter Heading="Chapter 1">  
        <Section Heading="Section 1">  
        </Section>  
        <Section Heading="Section 2">  
        </Section>  
    </Chapter>  
    <Chapter Heading="Chapter 2">  
        <Section Heading="Section 1">  
        </Section>  
    </Chapter>  
</Book>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.ShowCheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia del objeto <see cref="T:System.Web.UI.WebControls.TreeNode" />.</summary>
        <returns>
          <see cref="T:System.Object" /> que representa una copia del objeto <see cref="T:System.Web.UI.WebControls.TreeNode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNode.System%23ICloneable%23Clone%2A> método lo usa el <xref:System.Web.UI.WebControls.TreeNode> clase para realizar una copia de sí mismo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ICloneable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsTrackingViewState As Boolean Implements IStateManager.IsTrackingViewState" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IStateManager.IsTrackingViewState { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.TreeNode.System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IStateManager.IsTrackingViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Para una descripción de este miembro, vea <see cref="P:System.Web.UI.IStateManager.IsTrackingViewState" />.</summary>
        <value>Un valor que indica si el nodo está guardando los cambios en su estado de vista.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Se puede utilizar solo cuando la <xref:System.Web.UI.WebControls.TreeNode> instancia se convierte en el <xref:System.Web.UI.IStateManager> interfaz.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IStateManager" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (state As Object) Implements IStateManager.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.LoadViewState(System::Object ^ state) = System::Web::UI::IStateManager::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.LoadViewState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">Un objeto <see cref="T:System.Object" /> que contiene los valores del estado de vista guardados.</param>
        <summary>Carga el estado de vista previamente guardado del nodo.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Function SaveViewState () As Object Implements IStateManager.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Web.UI.IStateManager.SaveViewState() = System::Web::UI::IStateManager::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.SaveViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Guarda los cambios del estado de vista en un objeto <see cref="T:System.Object" />.</summary>
        <returns>
          <see cref="T:System.Object" /> que contiene los cambios de estado de la vista.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.System#Web#UI#IStateManager#TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Sub TrackViewState () Implements IStateManager.TrackViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IStateManager.TrackViewState() = System::Web::UI::IStateManager::TrackViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica al objeto <see cref="T:System.Web.UI.WebControls.TreeNode" /> que efectúe el seguimiento de los cambios de su estado de vista.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de llamar a este método en un control de servidor, el <xref:System.Web.UI.Control.IsTrackingViewState%2A> propiedad devuelve `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Target { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Target : string with get, set" Usage="System.Web.UI.WebControls.TreeNode.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ventana o el marco de destino donde se mostrará el contenido de una página Web asociada a un nodo.</summary>
        <value>Ventana o marco de destino en que se debe mostrar el contenido de página web vinculado. Los valores deben empezar por una letra entre la A y la Z (sin distinción entre mayúsculas y minúsculas), salvo ciertos valores especiales que empiezan por un carácter de subrayado, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor del objetivo </term><description> descripción </description></listheader><item><term><see langword="_blank" /></term><description> presenta el contenido en una nueva ventana sin marcos.  </description></item><item><term><see langword="_parent" /></term><description> Presenta el contenido en el elemento primario inmediato del conjunto de marcos.  </description></item><item><term><see langword="_search" /></term><description> Presenta el contenido en el panel de búsqueda.  </description></item><item><term><see langword="_self" /></term><description> Presenta el contenido en el marco con el foco.  </description></item><item><term><see langword="_top" /></term><description> Presenta el contenido en una ventana completa sin marcos.  </description></item></list><block subset="none" type="note"><para> Compruebe la documentación del explorador para determinar si el <see langword="_search" /> se admite el valor. Por ejemplo, Microsoft Internet Explorer 5.0 y versiones posteriores admiten la <see langword="_search" /> valor de destino.  </para></block>  El valor predeterminado es una cadena vacía (""), que actualiza la ventana o marco con el foco.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Target%2A> propiedad para especificar la ventana o el marco en el que se va a mostrar el contenido Web vinculado a un nodo cuando se hace clic en ese nodo.  
  
> [!NOTE]
>  Configuración de esta propiedad reemplaza la <xref:System.Web.UI.WebControls.TreeView.Target%2A> propiedad de la <xref:System.Web.UI.WebControls.TreeView> control.  
  
> [!NOTE]
>  El <xref:System.Web.UI.WebControls.TreeNode.Target%2A> propiedad se representa como un `target` atributo. El `target` atributo `anchor` elementos no se permite en la definición de tipo de documento XHTML 1.1. No establezca la <xref:System.Web.UI.WebControls.TreeNode.Target%2A> propiedad si el resultado representado para el <xref:System.Web.UI.WebControls.TreeNode> objeto debe ser compatible con 1.1 XHTML. Para obtener más información, consulte [estándares de XHTML en Visual Studio y ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
>   
>  Al crear páginas Web accesibles, se recomienda evitar el uso de la <xref:System.Web.UI.WebControls.TreeNode.Target%2A> propiedad para dirigirse a otra ventana. Para obtener más información, consulte [NIB: accesibilidad en ASP.NET](http://msdn.microsoft.com/library/9b5f3e05-e88d-4248-a5f4-9e64850fa0ae).  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo configurar los marcos para el ejemplo siguiente.  
  
 [!code-aspx-csharp[TreeViewFrameSet#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameSet/CS/framecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameSet#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameSet/VB/framevb.aspx#1)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Target%2A> propiedad para especificar el marco en el que se va a mostrar el contenido vinculado. En este ejemplo se utiliza en el conjunto de marcos del ejemplo anterior para mostrar una tabla de contenido.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Target" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.NavigateUrl" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Web.UI.WebControls.TreeNode.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto mostrado para el nodo en un control <see cref="T:System.Web.UI.WebControls.TreeView" />.</summary>
        <value>El texto que se muestra para el nodo en el control <see cref="T:System.Web.UI.WebControls.TreeView" />. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad para especificar o determinar el texto que se muestra para el nodo en el <xref:System.Web.UI.WebControls.TreeView> control.  
  
> [!NOTE]
>  Si el <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad contiene `null`, `get` descriptor de acceso devuelve el valor de la <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad. Si el <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad, a su vez, contiene `null`, <xref:System.String.Empty> se devuelve.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
 El valor de esta propiedad, cuando se establece, pueden guardar automáticamente en un archivo de recursos utilizando una herramienta de diseñador. Para obtener más información, consulte <xref:System.ComponentModel.LocalizableAttribute> y [globalización y localización](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad para especificar el texto de un nodo.  
  
 [!code-aspx-csharp[TreeViewFrameExample#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewFrameExample/CS/treeviewframecs.aspx#1)]
 [!code-aspx-vb[TreeViewFrameExample#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewFrameExample/VB/treeviewframevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Value" />
      </Docs>
    </Member>
    <Member MemberName="ToggleExpandState">
      <MemberSignature Language="C#" Value="public void ToggleExpandState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToggleExpandState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.ToggleExpandState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ToggleExpandState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToggleExpandState();" />
      <MemberSignature Language="F#" Value="member this.ToggleExpandState : unit -&gt; unit" Usage="treeNode.ToggleExpandState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Alterna entre el estado expandido y contraído del nodo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.ToggleExpandState%2A> método para alternar entre expandido y un estado contraído para el nodo. Por ejemplo, si el nodo está contraído, al llamar a la <xref:System.Web.UI.WebControls.TreeNode.ToggleExpandState%2A> método expande el nodo y viceversa.  
  
> [!NOTE]
>  Como alternativa, puede establecer el <xref:System.Web.UI.WebControls.TreeNode.Expanded%2A> propiedad directamente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.ToggleExpandState%2A> método para alternar entre expandido y un estado contraído para el nodo raíz de un <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeToggleExpandState#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeToggleExpandState/CS/treenodetoggleexpandstatecs.aspx#1)]
 [!code-aspx-vb[TreeNodeToggleExpandState#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeToggleExpandState/VB/treenodetoggleexpandstatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Expanded" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Collapse" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.CollapseAll" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.Expand" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNode.ExpandAll" />
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ToolTip { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : string with get, set" Usage="System.Web.UI.WebControls.TreeNode.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto de la información sobre herramientas para el nodo.</summary>
        <value>El texto de la información sobre herramientas del nodo. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.WebControls.TreeNode.ToolTip%2A> propiedad para especificar el texto de información sobre herramientas para el nodo. El texto del elemento ToolTip se muestra cuando el puntero del mouse se sitúa sobre el nodo.  
  
 El valor de esta propiedad, cuando se establece, pueden guardar automáticamente en un archivo de recursos utilizando una herramienta de diseñador. Para obtener más información, consulte <xref:System.ComponentModel.LocalizableAttribute> y [globalización y localización](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.ToolTip%2A> propiedad para proporcionar información sobre herramientas para los nodos en el <xref:System.Web.UI.WebControls.TreeView> control.  
  
 [!code-aspx-csharp[TreeNodeToolTip#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeToolTip/CS/treenodetooltipcs.aspx#1)]
 [!code-aspx-vb[TreeNodeToolTip#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeToolTip/VB/treenodetooltipvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ImageToolTip" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNode.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void TrackViewState();" />
      <MemberSignature Language="F#" Value="member this.TrackViewState : unit -&gt; unit" Usage="treeNode.TrackViewState " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IStateManager.TrackViewState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marca el punto en el que debe comenzar el seguimiento y el almacenamiento de los cambios del estado de vista realizados en el nodo.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : string with get, set" Usage="System.Web.UI.WebControls.TreeNode.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que no se muestra en pantalla y que se utiliza para almacenar datos adicionales sobre el nodo, tales como los datos utilizados para controlar los eventos de postback.</summary>
        <value>Datos complementarios, no visibles en pantalla, sobre el nodo. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad se utiliza para complementar la <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad mediante el almacenamiento de datos adicionales asociados al nodo. Este valor no se muestra en el control y se suele utilizar para almacenar los datos de control de eventos de devolución de datos.  
  
> [!NOTE]
>  Si el <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad contiene `null`, `get` descriptor de acceso devuelve el valor de la <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad. Si el <xref:System.Web.UI.WebControls.TreeNode.Text%2A> propiedad, a su vez, contiene `null`, <xref:System.String.Empty> se devuelve.  
  
> [!NOTE]
>  Nodos del mismo nivel deben tener un valor único para la <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad; el <xref:System.Web.UI.WebControls.TreeView> control no puede distinguir entre distintos nodos del mismo nivel que tienen el mismo valor. En este escenario, si el usuario hace clic en un nodo que tiene un valor duplicado, el nodo que aparece en primer lugar en el <xref:System.Web.UI.WebControls.TreeView> control está seleccionado.  
  
 El valor de esta propiedad se almacena en estado de vista.  
  
 El valor de esta propiedad, cuando se establece, pueden guardar automáticamente en un archivo de recursos utilizando una herramienta de diseñador. Para obtener más información, consulte <xref:System.ComponentModel.LocalizableAttribute> y [globalización y localización](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad para almacenar el campo de clave.  
  
 [!code-aspx-csharp[TreeViewPopulateNodesFromClient#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/CS/treeviewpopulatenodesfromclientcs.aspx#1)]
 [!code-aspx-vb[TreeViewPopulateNodesFromClient#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPopulateNodesFromClient/VB/treeviewpopulatenodesfromclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.Text" />
      </Docs>
    </Member>
    <Member MemberName="ValuePath">
      <MemberSignature Language="C#" Value="public string ValuePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValuePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNode.ValuePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValuePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ValuePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValuePath : string" Usage="System.Web.UI.WebControls.TreeNode.ValuePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ruta de acceso desde el nodo raíz hasta el nodo actual.</summary>
        <value>Una lista separada por delimitador de valores de nodo que forman una ruta de acceso del nodo raíz al nodo actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> propiedad contiene una lista separada por delimitador de valores de los nodos que forman una ruta de acceso desde el nodo raíz al nodo actual. Use la <xref:System.Web.UI.WebControls.TreeView.PathSeparator%2A> propiedad para especificar el carácter delimitador utilizado para separar los valores de nodo. Este valor se utiliza normalmente al analizar la lista de los valores individuales, o para pasar como argumento a la <xref:System.Web.UI.WebControls.TreeView.FindNode%2A> método de la <xref:System.Web.UI.WebControls.TreeView> clase.  
  
 Dependiendo del valor mostrado en el <xref:System.Web.UI.WebControls.TreeView> (control), el carácter delimitador posible que deba cambiarse para evitar cualquier conflicto. Por ejemplo, si establece el carácter delimitador en una coma, el valor mostrado no debería contener ninguna coma; en caso contrario, no se puede analizar con precisión el <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> propiedad.  
  
> [!NOTE]
>  Nodos del mismo nivel deben tener un valor único para la <xref:System.Web.UI.WebControls.TreeNode.Value%2A> propiedad; el <xref:System.Web.UI.WebControls.TreeView> control no puede distinguir entre distintos nodos del mismo nivel que tienen el mismo valor. En este escenario, si el usuario hace clic en un nodo que tiene un valor duplicado, el nodo que aparece en primer lugar en el <xref:System.Web.UI.WebControls.TreeView> control está seleccionado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo analizar la <xref:System.Web.UI.WebControls.TreeNode.ValuePath%2A> propiedad.  
  
 [!code-aspx-csharp[TreeViewPathSeparator2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeViewPathSeparator2/CS/treeviewpathseparatorcs.aspx#1)]
 [!code-aspx-vb[TreeViewPathSeparator2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeViewPathSeparator2/VB/treeviewpathseparatorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.PathSeparator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.FindNode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>