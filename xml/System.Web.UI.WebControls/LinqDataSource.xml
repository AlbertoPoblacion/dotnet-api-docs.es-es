<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43113d93d80de9936c4290c834d8d861c9f352d4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36581617" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite el uso de Language-Integrated Query (LINQ) en una página web ASP.NET a través de texto de marcado para recuperar y modificar los datos de un objeto de datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En este tema:  
  
-   [Introducción](#introduction)  
  
-   [Orden de las operaciones](#order_of_operations)  
  
-   [Ordenar datos](#ordering_data)  
  
-   [Agrupación de datos](#grouping_data)  
  
-   [Modificaciones de datos](#data_modifications)  
  
-   [Evaluación de valores en tiempo de ejecución](#evaluating_value_at_run_time)  
  
-   [Trabajar con procedimientos almacenados](#working_with_stored_procedures)  
  
-   [Sintaxis declarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduction  
 Language-Integrated Query (LINQ) es una sintaxis de consulta que define un conjunto de operadores de consulta que permiten operaciones de recorrido, filtro y proyección se expresen de forma declarativa en ninguno. Lenguaje de programación basado en NET. El objeto de datos puede ser una colección de datos en memoria o un objeto que representa los datos de una base de datos. También puede recuperar o modificar los datos sin tener que escribir comandos SQL para cada operación.  
  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control le permite usar LINQ en una página Web ASP.NET estableciendo propiedades en texto de marcado. El <xref:System.Web.UI.WebControls.LinqDataSource> control usa LINQ to SQL para generar automáticamente los comandos de datos. Para obtener más información acerca de LINQ to SQL, vea [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Cuando se va a recuperar datos de una colección de datos en memoria, establecer el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad a la clase que contiene la colección de datos. Establece el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad a la propiedad o campo que devuelve la colección de datos. Por ejemplo, podría tener una clase denominada `Person` que contiene una propiedad denominada `FavoriteCities` que devuelve una matriz de valores de cadena. En ese caso, establezca el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad `Person` y establezca el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad `FavoriteCities`.  
  
 Para consultar una base de datos, primero debe crear las clases de entidad que representan la base de datos y sus tablas. Puede usar el [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] o la utilidad SqlMetal.exe para generar estas clases. A continuación, establezca el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad a la clase que representa la base de datos y establecer el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad a la propiedad que representa la tabla de base de datos.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>Orden de las operaciones  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control aplica las operaciones de datos en el orden siguiente:  
  
1.  Donde (especificar los registros de datos para devolver).  
  
2.  Order By (ordenación).  
  
3.  Group By (registros de datos agregados que comparten valores).  
  
4.  Ordenar grupos por (ordenar agrupan datos).  
  
5.  Seleccione esta opción (especificar qué campos o propiedades que se devolverán).  
  
6.  Auto-sort (ordenar registros de datos mediante una propiedad que el usuario ha seleccionado).  
  
7.  Auto-page (recuperación de un subconjunto de registros de datos que se han seleccionado por el usuario).  
  
 Puede agregar condiciones a la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad para filtrar los registros de datos que se devuelven desde una consulta. Si el <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad no está establecida, el <xref:System.Web.UI.WebControls.LinqDataSource> control recupera todos los registros del objeto de datos.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>Ordenar datos  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad para especificar los nombres de propiedades de los datos devueltos para ordenar por.  
  
> [!NOTE]
>  Cuando se usa el <xref:System.Web.UI.WebControls.LinqDataSource> controlar con [!INCLUDE[ss2k](~/includes/ss2k-md.md)] o [!INCLUDE[ssEW](~/includes/ssew-md.md)] y <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propiedad está establecida en `true`, debe proporcionar un valor en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad. De forma predeterminada, el <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propiedad es `true`. Si asigna un valor a la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad, también debe incluir todas las columnas de identidad en la lista de propiedades que se devuelve en la consulta.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>Agrupar datos  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad para especificar qué propiedades se utilizan para consolidar los registros de datos que tienen los mismos valores. Cuando se agrupan los datos, puede incluir `Key` y `It`, que se crean dinámicamente las propiedades, en la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. El `Key` propiedad hace referencia a los valores de la propiedad o propiedades que se usaron para agrupar los datos. Por ejemplo, si agrupa por una propiedad denominada `Category`, `Key` propiedad contendrá todos los valores únicos en la `Category` propiedad. El `It` propiedad hace referencia a una colección de registros individuales de una agrupación de datos. También puede iterar por la `It` propiedad que se va a recuperar los registros individuales que se han consolidado en la operación de agrupación. Por ejemplo, si agrupa por una propiedad denominada `Category`, `It` propiedad contiene todos los registros individuales que comparten un valor común en la `Category` propiedad.  
  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propiedad para especificar las propiedades que se utilizará para ordenar los datos agrupados. Al agrupar los datos, la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad especifica cómo se ordenan los registros individuales dentro de los datos agrupados.  
  
 De forma predeterminada, el <xref:System.Web.UI.WebControls.LinqDataSource> control recupera valores para todas las propiedades de un objeto de datos. Usa el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad para especificar las propiedades para devolver si desea trabajar con un subconjunto de propiedades disponibles. La operación de selección se aplica después de Where, Order By y Group By operaciones. Por lo tanto, si crea un nombre de alias en una cláusula Select, el alias no está disponible en las demás cláusulas.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>Modificaciones de datos  
 Puede especificar si las modificaciones de datos se habilitan mediante la <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, y <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> propiedades. La interfaz de usuario para modificar los datos de un <xref:System.Web.UI.WebControls.LinqDataSource> control normalmente se proporciona a través de un control enlazado a datos, como un <xref:System.Web.UI.WebControls.DetailsView> control. Además de la configuración <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, o <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> a `true`, las condiciones siguientes son necesarios para habilitar las modificaciones de datos automática:  
  
-   El <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad no se puede asignar un valor.  
  
-   El <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad no se puede asignar un valor.  
  
-   La clase que se asigna a la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad debe derivarse de <xref:System.Data.Linq.DataContext>.  
  
-   La propiedad que se asigna a la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad debe derivarse de <xref:System.Data.Linq.Table%601>.  
  
 Puede restringir qué propiedades se muestran en un control enlazado a datos de dos maneras. Puede establecer la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad a un subconjunto de propiedades, también puede definir los campos de un control enlazado a datos mediante la adición de <xref:System.Web.UI.WebControls.DataControlField> controles. Sin embargo, si establece la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad, significa que no se puede habilitar las operaciones de eliminación, inserción y actualización automática. Si desea habilitar las modificaciones de datos automáticas mientras trabaja con un subconjunto de propiedades disponibles, no establezca la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. En su lugar, recuperar todas las propiedades del objeto de datos y administrar los que se muestran utilizando el control enlazado a datos. Cuando se usa el <xref:System.Web.UI.WebControls.DetailsView> control o la <xref:System.Web.UI.WebControls.GridView> (control), también debe establecer el <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> o <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> propiedades para `false`. Esto impide que el control enlazado a datos incluya automáticamente botones para editar y eliminar los datos. Los valores que no se muestran en el control enlazado a datos se almacenan en estado de vista. Se pasan sin cambios al origen de datos cuando se realiza la actualización de datos.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>Evaluación de valores en tiempo de ejecución  
 Si tiene que evaluar los valores en tiempo de ejecución para la ordenación, filtrado, o valores de agrupación, puede agregar parámetros a la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, o <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colecciones.  
  
 Si desea especificar los valores predeterminados, puede agregar parámetros a la <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> colección.  
  
 Si desea examinar o modificar los valores antes de que se ejecute la operación de datos, puede controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, o <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. También puede controlar estos eventos para cancelar la operación de datos o para examinar los errores de validación que se produjo cuando se establecen propiedades en la clase de datos basándose en la entrada del usuario.  
  
 Para examinar los valores de una vez finalizada la operación de datos, controlar el <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, o <xref:System.Web.UI.WebControls.LinqDataSource.Updated> eventos.  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>Trabajar con procedimientos almacenados  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource> control para recuperar datos de un procedimiento almacenado mediante la creación de un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos. En el evento controlador, se llama al método en la clase de contexto de datos que representa el procedimiento almacenado y establecer el resultado en la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propiedad de la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> objeto. Si desea habilitar actualización automática, insert y las operaciones de eliminación de los datos, el tipo que se devuelve del método debe coincidir con el tipo que se especifica en el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad. Para obtener más información acerca de cómo crear métodos de contexto de datos, vea [Cómo: métodos de DataContext crear asignados a procedimientos almacenados y funciones (Object Relational Designer)](http://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintaxis declarativa  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control que recupera datos de una clase de entidad denominada `Products`. La clase de entidad se ha generado mediante la [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] o la utilidad SqlMetal.exe. El <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad se establece para devolver sólo los registros que tienen un valor en el `Price` propiedad mayor que 50. A <xref:System.Web.UI.WebControls.GridView> control se enlaza a la <xref:System.Web.UI.WebControls.LinqDataSource> control para mostrar los datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control que permite a los usuarios actualizar, eliminar e insertar registros en el origen de datos. A <xref:System.Web.UI.WebControls.DetailsView> control se enlaza a la <xref:System.Web.UI.WebControls.LinqDataSource> controlar y permite a los usuarios ver y modificar los datos. Tenga en cuenta que no hay comandos SQL necesarios para seleccionar, actualizar, eliminar o insertar los registros.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> basados en eventos que establece el objeto de datos en el valor de la página Web.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control que es configurado para el grupo por dos columnas. El `Key` propiedad hace referencia a un objeto que tiene dos propiedades, `ProductCategory` y `Color`. El objeto representado por `It` es ha cambiado el nombre (alias) `Products`. Cambiado `Products` objeto contiene una colección de los registros individuales de una agrupación. Cada instancia contendrá todas las columnas de la `Products` tabla.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 En el ejemplo siguiente se muestra dos <xref:System.Web.UI.WebControls.ListView> controles que muestren los datos de la <xref:System.Web.UI.WebControls.LinqDataSource> control en el ejemplo anterior. Una <xref:System.Web.UI.WebControls.ListView> control muestra los datos agrupados y el otro <xref:System.Web.UI.WebControls.ListView> control muestra los nombres individuales de los productos que pertenecen a ese grupo. El control enlazado a datos anidado <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> propiedad está establecida en `Products`, que es el alias de la `It` objeto.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crea de forma dinámica una cláusula Order By basándose en valores de la colección <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />.</summary>
        <value>
          <see langword="true" /> Si el <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> control crea la cláusula Order By; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> propiedad `true`, el <xref:System.Web.UI.WebControls.LinqDataSource> control crea dinámicamente una cláusula Order By que se basa en los valores de la <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección. El <xref:System.Web.UI.WebControls.LinqDataSource> control ordena los datos por el primer parámetro y, a continuación, además, ordena los datos para cada parámetro adicional. Parámetros que contienen `null` o un valor vacío no se incluyen en la cláusula Order By.  
  
 No establezca la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad cuando la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> se establece en `true`, porque el analizador crea dinámicamente la cláusula Order By. El <xref:System.Web.UI.WebControls.LinqDataSource> control produce una excepción si el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> está establecido en `true` y <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> se asigna valores de propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> controlar con el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> establecido en `true`. Se incluye un parámetro en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección que ordena los datos en función de la propiedad de nombre que un usuario selecciona de una <xref:System.Web.UI.WebControls.DropDownList> control.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> crea dinámicamente una cláusula Where según los valores definidos en la colección <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
        <value>Es <see langword="true" /> si el control <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> va a crear la cláusula Where; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propiedad `true`, el <xref:System.Web.UI.WebControls.LinqDataSource> control crea dinámicamente la donde cláusula de los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección. Cada parámetro que se agrega a la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> la colección debe tener su <xref:System.Web.UI.WebControls.Parameter.Name%2A> propiedad establecida en un valor que coincide con una propiedad del objeto de datos que se está consultando. Generado automáticamente donde cláusula comprobará si el valor especificado en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección es igual al valor de la propiedad correspondiente en el objeto de datos. Si proporciona más de un parámetro, los parámetros se vinculan con una operación lógica `AND` operación. Parámetros que contienen `null` o un valor vacío no se incluyen en Where cláusula.  
  
 Generado automáticamente <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> cláusula puede comprobar sólo la igualdad y puede vincular parámetros solo con el `AND` operación. No establezca la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propiedad `true` si tiene que agregar una condición que no comprobar la igualdad o si tiene que relacionar los parámetros con el `OR` operación. Puede realizar estas tareas mediante el establecimiento la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propiedad `false` y agregar marcadores de posición en la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad para cada parámetro en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección. En el <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad, cada nombre de marcador de posición con el símbolo @.  
  
 No se establece la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad cuando la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propiedad es `true`, porque el analizador crea dinámicamente la Where cláusula. El <xref:System.Web.UI.WebControls.LinqDataSource> control produce una excepción si el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propiedad es `true` y <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> se asigna valores de propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> controlar con el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> establecido en `true`. A <xref:System.Web.UI.WebControls.GridView> control se enlaza a la <xref:System.Web.UI.WebControls.LinqDataSource> control para mostrar los datos que se devuelven de la consulta. Un <xref:System.Web.UI.WebControls.DropDownList> control incluyen que se rellena con tres valores. Se incluye un parámetro en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección con el nombre establecido en `Category,` que coincide con una de las propiedades del objeto de datos. Su <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> propiedad se establece en el identificador de la <xref:System.Web.UI.WebControls.DropDownList> control. El <xref:System.Web.UI.WebControls.LinqDataSource> control crea automáticamente el <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad para filtrar los registros en función del valor que el usuario selecciona en el <xref:System.Web.UI.WebControls.DropDownList> control. La consulta devuelve los registros cuya `Category` propiedad coincide con el valor que el usuario ha seleccionado en el <xref:System.Web.UI.WebControls.DropDownList> control.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> admite la navegación entre las secciones de datos en tiempo de ejecución.</summary>
        <value>
          <see langword="true" /> si el usuario puede navegar por los datos; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propiedad `true` para habilitar la paginación en el <xref:System.Web.UI.WebControls.LinqDataSource> control. Para permitir que el usuario para paginar a través de los datos, conectar un control enlazado a datos que proporciona la interfaz para que la paginación la <xref:System.Web.UI.WebControls.LinqDataSource> control. Cuando el <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propiedad está establecida en `true`, el <xref:System.Web.UI.WebControls.LinqDataSource> control recupera solo los registros suficientes para una página en el control enlazado a datos. Usa el <xref:System.Linq.Enumerable.Skip%2A> y <xref:System.Linq.Enumerable.Take%2A> métodos para recuperar los registros de la página actual.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> controlar con el <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propiedad establecida en `true` y un <xref:System.Web.UI.WebControls.GridView> control que está enlazado a la <xref:System.Web.UI.WebControls.LinqDataSource> control. El <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> propiedad de la <xref:System.Web.UI.WebControls.GridView> control se establece en `true` para proporcionar la interfaz que permite a la página de usuarios a través de los datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> permite ordenar los datos en tiempo de ejecución.</summary>
        <value>Es <see langword="true" /> si el usuario puede ordenar los datos; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control admite dos métodos para ordenar los datos. Puede usar el <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propiedad para habilitar la ordenación de tiempo de ejecución o se puede establecer el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad para definir la ordenación en tiempo de diseño.  
  
 Establecer el <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propiedad `true` para habilitar la ordenación en una <xref:System.Web.UI.WebControls.LinqDataSource> control que se basa en la expresión de ordenación de un control enlazado a datos. El control enlazado a datos proporciona la interfaz para permitir al usuario seleccionar en tiempo de ejecución qué propiedad que se utilizará para la ordenación.  
  
 Puede establecer mediante programación el orden en que se devuelven datos estableciendo el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad a la propiedad o propiedades que se usan para la ordenación. Cuando el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad se establece en una propiedad y el <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propiedad es `true`, la expresión de ordenación del control enlazado a datos se aplica después de la expresión en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad. Por lo tanto, esto determina la ordenación final de los datos.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> controlar con el <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propiedad establecida en `true` y un <xref:System.Web.UI.WebControls.GridView> control que está enlazado a la <xref:System.Web.UI.WebControls.LinqDataSource> control. El <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> propiedad de la <xref:System.Web.UI.WebControls.GridView> control se establece en `true` para proporcionar la interfaz que permite a los usuarios ordenar los datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de crearse una instancia del objeto de tipo de contexto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> eventos para examinar el objeto de tipo de contexto o examinar las excepciones que se producen mientras se crea el objeto. Recuperar el objeto de tipo de contexto de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propiedad de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto que está asociado a este evento. Recuperar la excepción que se produjo durante la operación de datos desde el <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad.  
  
 El objeto de tipo de contexto se crea durante la select, update, insert y las operaciones de eliminación y se reutiliza a lo largo de la solicitud.  
  
 Hay una vez cuando no se genera el evento. Esto es cuando se establece mediante programación el <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propiedad a un objeto durante la <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos. Una condición adicional es que cualquiera de los valores originales no tienen que se almacenará en el estado de vista o el objeto en el <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propiedad implementa el <xref:System.Data.Linq.ITable> interfaz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce antes de crearse una instancia del objeto de tipo de contexto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Web.UI.WebControls.LinqDataSource> control crea una instancia del tipo que se especifica en el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad. El <xref:System.Web.UI.WebControls.LinqDataSource> control llama al constructor predeterminado del objeto de contexto de datos para crear una instancia del objeto. Es posible que deba utilizar un constructor no predeterminado o tiene que crear un objeto que es diferente de la especificada en el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad. En ese caso, debe controlar el <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> eventos y crear manualmente el objeto de contexto de datos.  
  
 El objeto de tipo de contexto se crea durante select, update, insert y las operaciones de eliminación.  
  
 Hay una vez cuando no se genera el evento. Esto es cuando se establece mediante programación el <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propiedad a un objeto en un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos. Una condición adicional es que cualquiera de los valores originales no tienen que se almacenará en el estado de vista o el objeto en el <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> propiedad implementa el <xref:System.Data.Linq.ITable> interfaz.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear el objeto de contexto de datos mediante un constructor no predeterminado durante la <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> eventos. El código asigna el objeto a la <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> propiedad.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce antes de desechar el objeto de tipo de contexto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> eventos para eliminar el objeto manualmente o para realizar operaciones de limpieza específica del objeto antes de que se destruya el objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del tipo que contiene la propiedad cuyo valor tiene los datos que desea recuperar.</summary>
        <value>Nombre de la clase de la que se van a recuperar datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se usa el <xref:System.Web.UI.WebControls.LinqDataSource> controlar para recuperar datos de una colección de datos en memoria o una base de datos, debe especificar dos propiedades. El primero es una clase de contexto de datos que representa el origen de datos. El segundo es una propiedad de la clase de contexto de datos que contiene los datos. Establece el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad en el nombre de la clase de contexto de datos y establezca la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad a la colección de datos que contiene los datos.  
  
 Por ejemplo, cuando se recuperan datos de una base de datos, establezca la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad en el nombre de la clase que representa la base de datos. Establecer el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad a la propiedad que representa la tabla en la base de datos. Para generar clases a partir de una base de datos, use la [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] o la utilidad SqlMetal.exe para generar automáticamente esas clases.  
  
 Cuando se recuperan datos de una recolección de datos en memoria como una matriz, establecer el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad en el nombre de la clase que contiene la propiedad de matriz. A continuación, establezca el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad a la propiedad que obtiene la matriz.  
  
 Para habilitar la actualización automática, insertar o eliminar operaciones a través de la <xref:System.Web.UI.WebControls.LinqDataSource> controlar, la clase asignada a la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad debe derivarse de <xref:System.Data.Linq.DataContext>. Además, la propiedad se asigna a la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad debe derivarse de <xref:System.Data.Linq.Table%601>. Si no necesita habilitar la actualización automática, insertar, o las operaciones de eliminación, puede asignar el nombre de cualquier tipo de clase para el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad.  
  
 Para obtener información acerca de cómo seleccionar datos de una instancia de una clase, consulte el <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad a una clase que contiene una matriz de cadenas. También muestra cómo establecer la propiedad en una clase (generada por el [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]) que representa una base de datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 La clase denominada `ExampleDataContext` que representa la tabla de base de datos no se muestra en este ejemplo. En este ejemplo funcione, debe crear esta clase mediante la adición de una clase de LINQ To SQL con nombre Example.dbml y arrastre una tabla denominada Movie hasta el [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Una clase denominada `ExampleDataContext` con una propiedad denominada `Movies` se genera.  
  
 En el ejemplo siguiente se muestra la clase denominada `MovieLibrary` que se hace referencia en el <xref:System.Web.UI.WebControls.LinqDataSource> control.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una vista consultable.</summary>
        <returns>Vista consultable.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> que está asociada a este control.</summary>
        <returns>Objeto que actúa como interfaz para los controles enlazados a datos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para proporcionar una vista personalizada, puede invalidar este método en una clase derivada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Valores de clave de fila para los registros que se van a eliminar.</param>
        <param name="oldValues">Valores de fila que se evalúan para detectar conflictos entre los datos.</param>
        <summary>Realiza una operación de eliminación.</summary>
        <returns>Número de registros afectados por la operación de eliminación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por lo general, no es necesario llamar a la <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> método desde el código. Cuando se usa un <xref:System.Web.UI.WebControls.LinqDataSource> control con un control enlazado a datos, el control enlazado a datos llamará automáticamente el <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> método cuando el usuario realice la acción que se va a eliminar un registro. Llama de forma explícita el <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> método cuando desea crear su propio proceso para eliminar datos. Por ejemplo, puede llamar a la <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> método al que desea eliminar un registro en función de un evento fuera del control enlazado a datos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar cuando se ha completado una operación de eliminación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> evento para detectar las excepciones de la operación de eliminación, o para examinar los parámetros de salida una vez finalizada la operación. Puede recuperar los parámetros de salida de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto que se pasa a controladores de eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>La clase <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> no emplea esta propiedad.</summary>
        <value>Colección de parámetros.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar antes de una operación de eliminación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> eventos para validar el objeto que se va a eliminar, para examinar los errores de validación de datos de la clase de datos, para cambiar un valor antes de la operación de eliminación o cancelar la operación de eliminación. El <xref:System.Web.UI.WebControls.LinqDataSource> control pasa un <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> objeto a controladores de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> eventos. La <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> objeto contiene los datos que se eliminarán y permite cancelar la operación de eliminación. Si los datos de clase inicia un <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> excepción, el <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> objeto contiene esa excepción en el <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> propiedad.  
  
 Si se produce una excepción en un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> eventos, debe controlar la excepción en ese controlador de eventos. La excepción no se pasará a un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> eventos (a través de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto). El <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad contiene solo las excepciones que se producen después de la <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> eventos. El código cancela la operación de eliminación en función de una propiedad en el <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> propiedad y un valor de la página Web. En el ejemplo, cuando la `OnSale` propiedad está establecida en `true`, el usuario debe seleccionar un <xref:System.Web.UI.WebControls.CheckBox> control para confirmar que un registro debe eliminarse.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los registros de datos se pueden eliminar a través del control <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> si se habilitan las operaciones de eliminación automática; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> propiedad `true` cuando desee permitir a los usuarios eliminar un registro de datos a través de la <xref:System.Web.UI.WebControls.LinqDataSource> control. Cuando <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> es `true`, el <xref:System.Web.UI.WebControls.LinqDataSource> control usa LINQ to SQL para crear automáticamente el comando para eliminar los datos. Debe incluir una interfaz que permite a los usuarios seleccionar un registro para eliminar, como un <xref:System.Web.UI.WebControls.DetailsView> control.  
  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control no admite las operaciones de eliminación automática cuando el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> se establece la propiedad. En ese caso, el <xref:System.Web.UI.WebControls.LinqDataSource> control produce una excepción si se intenta una operación de eliminación.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control cuya <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> establecido en `true`. Un <xref:System.Web.UI.WebControls.DetailsView> control muestra los datos y crea un botón que permite a los usuarios eliminar un registro de datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los registros de datos se pueden insertar a través del control <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> si se habilitan las operaciones de inserción automática; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> propiedad `true` cuando desee permitir a los usuarios insertar un nuevo registro de datos a través de la <xref:System.Web.UI.WebControls.LinqDataSource> control. Cuando <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> es `true`, el <xref:System.Web.UI.WebControls.LinqDataSource> control usa LINQ to SQL para crear automáticamente el comando para insertar los datos. Debe incluir una interfaz que permite a los usuarios insertar un nuevo registro, como un <xref:System.Web.UI.WebControls.DetailsView> control.  
  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control no admite operaciones de inserción automática cuando el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> se establece la propiedad. En ese caso, el <xref:System.Web.UI.WebControls.LinqDataSource> control produce una excepción si se intenta una operación de inserción.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control cuya <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> establecido en `true`. Un <xref:System.Web.UI.WebControls.DetailsView> control muestra los datos y muestra un botón que activa el control de modo que los usuarios pueden crear y guardar un nuevo registro de inserción.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor que indica si se realiza un seguimiento de los cambios en el objeto de contexto de datos.</summary>
        <value>Es <see langword="true" /> si se realiza el seguimiento de los cambios en el objeto de contexto de datos; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> propiedad solo se utiliza al seleccionar los datos de un objeto de contexto de datos de LINQ To SQL.  
  
 Cuando estés interactuando con datos de solo lectura, el establecimiento de la <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> propiedad `false` mejora el rendimiento porque no se almacena en caché los datos para determinar si ha cambiado. Sin embargo, también deshabilita la ejecución de consultas en diferido. Esta propiedad debe establecerse en `true` si desea usar la ejecución de consultas en diferido.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los registros de datos se pueden actualizar a través del control <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>
          <see langword="true" /> si se habilitan las operaciones de actualización automática; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> propiedad `true` cuando desee permitir a los usuarios actualizar un registro de datos mediante el <xref:System.Web.UI.WebControls.LinqDataSource> control. Cuando <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> es `true`, el <xref:System.Web.UI.WebControls.LinqDataSource> control usa LINQ to SQL para crear automáticamente el comando para actualizar los datos. Debe incluir una interfaz que permite a los usuarios actualizar un registro, como un <xref:System.Web.UI.WebControls.DetailsView> control.  
  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control no admite operaciones de actualización automática cuando el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad o <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> se establece la propiedad. En ese caso, el <xref:System.Web.UI.WebControls.LinqDataSource> control produce una excepción si se intenta una operación de actualización.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control cuya <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> establecido en `true`. Un <xref:System.Web.UI.WebControls.DetailsView> control muestra los datos y crea un botón que permite a los usuarios actualizar un registro de datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica qué propiedades se utilizan para agrupar los datos recuperados.</summary>
        <value>Una cadena que se utiliza para crear la cláusula Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad para especificar qué propiedades se utilizan para consolidar los registros de datos que tienen los mismos valores. Por ejemplo, si establece la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad `Name`, todos los registros en la consulta que tienen el mismo `Name` valor de la propiedad se devuelven como un único registro consolidado.  
  
 Puede asignar más de una propiedad a la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad incluyendo todas las propiedades de la `new` función y separar cada propiedad con una coma. Por ejemplo, para agrupar por las propiedades `Name` y, a continuación, `Category`, establezca el <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad `new(Name, Category)`.  
  
 Los valores de la propiedad que se utilizan para la agrupación se devuelven a través de una propiedad generada denominada `Key`. Incluye el `Key` propiedad en el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad para recuperar los valores agrupados. Puede establecer la `Key` propiedad a un alias mediante el uso de la `As` (palabra clave), pero no es necesario utilizar un alias. Por ejemplo, puede establecer la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad a una propiedad denominada `Category`. Puede recuperar los valores consolidados de la `Category` propiedad estableciendo el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad `new(Key As ProductCategory)`.  
  
 Puede tener acceso a los registros individuales de una agrupación mediante la inclusión de la `It` propiedad en el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. El `It` propiedad contiene una colección de registros que comparten un valor en la propiedad agrupada. También puede iterar por la `It` propiedad que se va a recuperar los registros individuales.  
  
 El <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad se suele utilizar con métodos de agregación. Puede usar los siguientes métodos de agregación:  
  
-   `Count()`  
  
-   `Average(` *Columna* `)`  
  
-   `Sum(` *Columna* `)`  
  
-   `Max(` *Columna* `)`  
  
-   `Min(` *Columna* `)`  
  
-   `Where(` *Condición* `)`  
  
-   `Any()`  
  
-   `All(` *Condición* `)`  
  
 Para obtener más información, consulte [NIB: información general sobre el Control de servidor Web LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) y [Cómo: agrupar y agregar datos utilizando el LinqDataSource Control](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control que agrupa los datos devueltos por una propiedad denominada `Category`. Devuelve los valores compartidos y calcula el precio medio para los registros agrupados.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control que es configurado para el grupo por dos columnas. El `Key` propiedad hace referencia a un objeto que tiene dos propiedades, `ProductCategory` y `Color`. El objeto representado por `It` se cambia el nombre `Products`. Cambiado `Products` objeto contiene una colección de los registros individuales de una agrupación, y cada instancia contiene todas las columnas de la tabla Products.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 En el ejemplo siguiente se muestra dos <xref:System.Web.UI.WebControls.ListView> controles para mostrar los datos desde el <xref:System.Web.UI.WebControls.LinqDataSource> control en el ejemplo anterior. Una <xref:System.Web.UI.WebControls.ListView> control muestra los datos agrupados y el otro <xref:System.Web.UI.WebControls.ListView> control muestra los nombres individuales de los productos que pertenecen a ese grupo. El control enlazado a datos anidado <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> propiedad está establecida en `Products`, que es el alias de la `It` objeto.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de parámetros que se usan para crear la cláusula Group By.</summary>
        <value>Los parámetros que se utilizan para crear la cláusula Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control utiliza los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> colección para crear la cláusula Group By en tiempo de ejecución. Normalmente no usan el <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> colección para agrupar los datos. En su lugar, puede usar el <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad. Usa el <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> colección únicamente cuando un valor en la cláusula Group By se debe establecer en tiempo de ejecución y ese valor no es un nombre de propiedad. Por ejemplo, use la <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> colección para agrupar los datos en función de si el `LastName` propiedad en los registros de datos es igual a un valor proporcionado por el usuario.  
  
 Si desea agrupar los datos por una propiedad y esa propiedad no tiene que establecerse en tiempo de ejecución, puede definir la propiedad de agrupación en el <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad. Por ejemplo devolver valores de una tabla de base de datos agrupadas por `LastName`, establezca <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> en "LastName" sin ningún parámetro. Si desea agrupar los datos dinámicamente por una propiedad, cree un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos y personalizar el <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad según sea necesario.  
  
 No se puede asignar el nombre de una propiedad como el valor de un parámetro en el <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> colección. Agregar parámetros a la <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> colección cuando desee agregar una condición a la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad que se debe establecer en tiempo de ejecución.  
  
 Para establecer valores en el <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> recopilación, asigne un nombre a cada parámetro y, a continuación, agregue un marcador de posición en la <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad para ese parámetro con nombre. En la cláusula Group By, anteponga cada nombre de parámetro con el símbolo @.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">Valores de fila que se van a insertar en el origen de datos.</param>
        <summary>Realiza una operación de inserción.</summary>
        <returns>Número de filas afectadas por la inserción.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por lo general, no es necesario llamar a la <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> método desde el código. El control enlazado a datos llamará automáticamente el <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> método cuando el usuario realice la acción que se va a insertar un nuevo registro. Llama de forma explícita el <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> método cuando desea crear su propio proceso para insertar datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo insertar mediante programación un nuevo registro en el origen de datos después de que el usuario hace clic en un botón. El código pasa un <xref:System.Collections.Specialized.ListDictionary> valores de objeto que contiene el valor predeterminado para el <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> método.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 En el ejemplo siguiente se muestra el marcado para el ejemplo anterior.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar cuando se termina una operación de inserción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> evento para detectar las excepciones de la operación de inserción o para examinar los valores de una vez finalizada la operación de inserción. Puede recuperar los nuevos valores a través de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto que se pasa a controladores de eventos. Por ejemplo, puede usar el <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto que se va a recuperar la propiedad de identidad generada por una base de datos para un nuevo registro de datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> eventos que comprueba las excepciones y recupera la propiedad de identidad para el nuevo registro.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar antes de una operación de inserción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> eventos para validar el objeto que se va a insertar, examinar los errores de validación de datos de la clase de datos, para cambiar un valor antes de la operación de inserción, o para cancelar la operación de inserción. La <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> objeto pasado a controladores de eventos para este evento contiene el nuevo objeto a insertar en el origen de datos.  
  
 Si se produce un error de validación durante la operación de inserción, la <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> objeto contiene las excepciones de validación que se producen por la clase de datos. Se produce un error de validación si un valor que se va a insertar no coincide con el tipo de la propiedad en la clase de datos, o si no supera una comprobación de validación personalizada. En un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> eventos, puede recuperar las excepciones de validación y tome las medidas adecuadas.  
  
 Si se produce una excepción en un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> eventos, debe controlar la excepción en ese controlador de eventos. La excepción no se pasará a un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> eventos (a través de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto). El <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad contiene solo las excepciones que se producen después de la <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> eventos que modifica los datos antes de la operación de inserción. El objeto desde el <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> propiedad se convierte en un tipo denominado `Product`. El `DateModified` propiedad de la `Product` objeto se establece en la fecha y hora actuales.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> eventos que recupera las excepciones de validación.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 En el ejemplo anterior se recuperan las excepciones de validación. Podría producirse una excepción si un valor no coincide con el tipo de la propiedad. También podría producirse por una comprobación personalizada como el que se muestra en el ejemplo siguiente. El `OnAgeChanging` método comprueba que el número para el `Age` propiedad no es negativa.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de parámetros que se usan durante una operación de inserción.</summary>
        <value>Parámetros que se utilizan durante una operación de inserción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por lo general se pasan los valores que son necesarios para una operación de inserción a la <xref:System.Web.UI.WebControls.LinqDataSource> control por el control enlazado a datos. Especificar parámetros de inserción cuando desea proporcionar un valor predeterminado de valor o definen si se deben convertir los valores vacíos `null`. No es necesario proporcionar un parámetro para cada valor que se van a insertar, solo para los valores que deben ser administrados cuando el usuario no proporciona un valor.  
  
 Los valores que se proporcionan en el <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> colección sirven únicamente para los campos que se definen en el origen de datos pero que no están enlazados en el control de datos. Por ejemplo, imagine que una tabla de base de datos tiene columnas que se denominan nombre, dirección y código postal, pero un <xref:System.Web.UI.WebControls.ListView> control que está enlazado a la tabla está enlazado únicamente a los campos de nombre y la dirección. Los valores de la <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> colección se usará únicamente para el campo PostalCode. No se utilizará para el campo de nombre y la dirección. Esto es cierto incluso si se especifica ningún valor para esos campos. Si los campos de control enlazado a datos genera de forma automática para todos los campos de los datos de origen, ningún valor de la <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> se usará la colección.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un <xref:System.Web.UI.WebControls.LinqDataSource> control con un parámetro que proporciona un valor predeterminado en el <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> colección. Si el usuario no proporciona un valor para el `Category` propiedad, el valor predeterminado proporcionado por el parámetro se guarda en la base de datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Datos del evento.</param>
        <summary>Inicializa el objeto <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnload : EventArgs -&gt; unit&#xA;override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Web.UI.Control.Unload" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica qué campos se utilizan para ordenar los datos recuperados.</summary>
        <value>Una cadena que se utiliza para crear la cláusula Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad para especificar las propiedades de los datos devueltos a utilizar para ordenar. La propiedad para ordenar los datos debe existir en el origen de datos original, pero no tiene que se incluirá en el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. Puede agregar un espacio y `Ascending`, `ASC`, `Descending`, o `DESC` a una propiedad en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> cadena para especificar cómo se devuelven los datos ordenados.  
  
 Puede proporcionar más de una propiedad en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad separando cada propiedad con una coma. Por ejemplo, para ordenar por las propiedades denominadas `LastName` y `FirstName`, establezca el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad en "LastName, FirstName".  
  
> [!NOTE]
>  Cuando se usa el <xref:System.Web.UI.WebControls.LinqDataSource> controlar con [!INCLUDE[ss2k](~/includes/ss2k-md.md)] o [!INCLUDE[ssEW](~/includes/ssew-md.md)] y <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propiedad está establecida en `true`, debe proporcionar un valor en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad. De forma predeterminada, el <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> propiedad es `true`. Si asigna un valor a la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad, también debe incluir todas las columnas de identidad en la lista de propiedades que se devuelve en la consulta.  
  
 Si el <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> propiedad está establecida en `true`, un control enlazado a datos puede pasar una expresión de ordenación a la <xref:System.Web.UI.WebControls.LinqDataSource> control en tiempo de ejecución. El <xref:System.Web.UI.WebControls.LinqDataSource> control aplicará la expresión de ordenación del control enlazado a datos después de aplicar el <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad. Por lo tanto, los datos se devuelven según la expresión de ordenación del control enlazado a datos.  
  
   
  
## Examples  
 El ejemplo siguiente devuelve los datos en orden alfabético inverso basado en valores de la `Category` propiedad.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de parámetros que se usan para crear la cláusula Order By.</summary>
        <value>Los parámetros que se usan para crear la cláusula Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control utiliza los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección para crear la cláusula Order By en tiempo de ejecución. Normalmente establece el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> propiedad `true` al agregar parámetros a la <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección. Cuando el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> propiedad está establecida en `true`, cada parámetro en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección se agrega a la cláusula Order By de la secuencia que se especifican en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección. Cuando el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> propiedad es `true`, no es necesario que los parámetros se denomina porque se aplican en secuencia y no se hacen coincidir con un marcador de posición.  
  
 Si no tiene que establecer un valor en tiempo de ejecución en la cláusula Order By, no es necesario usar el <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección. Puede definir los campos que se usarán para ordenar los datos de la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad. Por ejemplo devolver valores de una tabla de base de datos ordenados por `LastName`, establezca <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> en "LastName" sin ningún parámetro.  
  
 Puede establecer parámetros la <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección y coinciden con los parámetros de marcadores de posición en la <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> propiedad, pero este enfoque tiene una aplicación limitada. Cuando se usa este enfoque, los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección no puede representar un nombre de columna. Puede establecer un parámetro en un valor y, a continuación, comparar ese valor con valores de una propiedad. Por ejemplo, puede ordenar los datos en función de si los valores de una propiedad son menores que el valor de tiempo de ejecución representado por el parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un control <xref:System.Web.UI.WebControls.LinqDataSource> con la propiedad <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> establecida en `true`. Se incluye un parámetro en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> colección que ordena los datos en función de la propiedad de nombre que un usuario selecciona de una <xref:System.Web.UI.WebControls.DropDownList> control.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece los campos que se utilizan para ordenar los datos agrupados.</summary>
        <value>Una cadena que se utiliza para crear la cláusula Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propiedad para especificar cómo se ordenan los grupos de datos. Por ejemplo, puede agrupar por la `CategoryID` propiedad y, a continuación, ordenar cada identificador de categoría Agrupar por el promedio de la `Price` propiedad.  
  
 Puede establecer el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propiedad solo cuando se agrupan los datos. Si establece la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propiedad sin establecer el <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> propiedad, el <xref:System.Web.UI.WebControls.LinqDataSource> control produce una excepción.  
  
 La propiedad que se usa para ordenar los datos debe ser una propiedad que se usa para agrupar los datos, o el resultado de una función de agregación en los datos agrupados. Para especificar cómo se ordenan los datos, puede agregar un espacio y la cadena "Ascendente", "ASC", "Descending" o "DESC" a un nombre de propiedad en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> cadena.  
  
 Puede especificar más de una propiedad en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propiedad. Separe cada propiedad con una coma.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo agrupar los datos mediante dos propiedades y cómo ordenar los datos agrupados mediante una de esas propiedades. Los datos de una tabla denominada `Products` se agrupan mediante el uso de propiedades denominadas `CategoryID` y `Discontinued`. Los datos agrupados se ordenan por el `CategoryID` propiedad.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 En el ejemplo siguiente se muestra cómo agrupar los datos mediante el uso de una propiedad y cómo se ordenan según los resultados de una función de agregación. Los datos de la `Products` tabla está agrupada mediante el `CategoryID` propiedad. Se ordenan según el promedio de la `UnitPrice` propiedad dentro de cada grupo.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de parámetros que se usan para crear la cláusula Order Groups By.</summary>
        <value>Los parámetros que se utilizan para crear la cláusula Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control utiliza los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> colección para crear la cláusula Order Groups By en tiempo de ejecución.  
  
 Agregar valores a la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> colección solo cuando se debe establecer valores en tiempo de ejecución en la cláusula Order Groups By. Puede definir los campos que se usan para ordenar los datos mediante el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propiedad.  
  
 Puede establecer parámetros la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> colección y coinciden con los parámetros de marcadores de posición en la <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> propiedad. Sin embargo, cuando usa este enfoque, los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> colección no puede representar un nombre de columna; deben representar valores. Puede establecer un parámetro en un valor y, a continuación, comparar ese valor a una propiedad. Por ejemplo, puede ordenar los datos en función de si los valores de una propiedad son menores que el valor de tiempo de ejecución representado por el parámetro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las propiedades y los valores calculados que se incluyen en los datos recuperados.</summary>
        <value>Cadena que se utiliza para crear la cláusula Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no establece la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad, el <xref:System.Web.UI.WebControls.LinqDataSource> control recupera todas las propiedades (columnas de datos) del objeto de datos. Usa el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad para recuperar un subconjunto de propiedades del objeto o para calcular nuevos valores cuando se recuperan los datos.  
  
 Especificar las propiedades que se recuperarán estableciendo la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad a los nombres de las propiedades que se van a incluir en los datos devueltos.  
  
 Si recupera un subconjunto de propiedades del objeto de datos, el <xref:System.Web.UI.WebControls.LinqDataSource> control crea dinámicamente una clase que contiene solo las propiedades que se especifican en el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. Una clase también se crea dinámicamente si se calculan propiedades que no son propiedades del objeto de datos. En estos casos, el objeto devuelto por la consulta no es una instancia de la clase que se especifica en el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad. En su lugar, debe utilizar el `new` método en el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad para indicar que la consulta devuelve una nueva clase. Por ejemplo, para devolver sólo los `FirstName` y `LastName` las propiedades de un objeto que contiene más de estas propiedades, establezca la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad `new(FirstName, LastName)`. El <xref:System.Web.UI.WebControls.LinqDataSource> control creará dinámicamente la nueva clase que especificó en el `new` método.  
  
 Puede usar el `As` palabra clave que se va a asignar un alias a un valor seleccionado. Si asigna un alias, debe incluir las propiedades de un alias en la `new` método. Cualquier control enlazado a datos que se enlaza a los resultados de la <xref:System.Web.UI.WebControls.LinqDataSource> control debe hacer referencia a la propiedad por el alias. Por ejemplo, si establece la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, el control enlazado a datos puede tener acceso a dos propiedades, `SalesRegion` y `RevenueThousands`.  
  
 Usa el `new` funcionando en el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad de acuerdo con las condiciones que se muestran en la tabla siguiente.  
  
|Select|Usar de nuevo|Ejemplo|  
|------------|----------------|-------------|  
|Una sola propiedad.|`new` no es necesario.|`Select="Category"`|  
|Varias propiedades.|`new` necesita.|`Select="new(Cateogry, Name)"`|  
|Uno o varias propiedades que tienen un alias.|`new` necesita.|`Select="new(Category As CategoryGroup)"`|  
  
 Si desea habilitar las modificaciones de datos automática, pero no desea mostrar todas las propiedades del objeto de datos, no establezca la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. En su lugar, administre la presentación a través del control enlazado a datos. Cuando se usa el <xref:System.Web.UI.WebControls.DetailsView> control o la <xref:System.Web.UI.WebControls.GridView> (control), también debe establecer el <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> o <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> propiedad `false`. Los valores que no se muestran en el control enlazado a datos se almacenan en estado de vista. Se pasan sin cambios al origen de datos cuando se realiza la actualización de datos.  
  
 Al agrupar los datos en la consulta, puede incluir los métodos de agregación en la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. Puede usar los siguientes métodos de agregación:  
  
-   `Count()`  
  
-   `Average(` *Columna* `)`  
  
-   `Sum(` *Columna* `)`  
  
-   `Max(` *Columna* `)`  
  
-   `Min(` *Columna* `)`  
  
-   `Where(` *Condición* `)`  
  
-   `Any()`  
  
-   `All(` *Condición* `)`  
  
 Para obtener más información, consulte [NIB: información general sobre el Control de servidor Web LinqDataSource](http://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) y [Cómo: agrupar y agregar datos utilizando el LinqDataSource Control](http://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
 Cuando se agrupan los datos, puede incluir `Key` y `It`, que se crean dinámicamente las propiedades, en la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. El `Key` propiedad hace referencia a los valores de la propiedad o propiedades que se usaron para agrupar los datos. Por ejemplo, si agrupa por una propiedad denominada `Category`, `Key` propiedad contendrá cada valor único en el `Category` propiedad. El `It` propiedad hace referencia a una colección de registros individuales de una agrupación de datos. También puede iterar por la `It` propiedad que se va a recuperar los registros individuales que se han consolidado en la operación de agrupación. Por ejemplo, si agrupa por una propiedad denominada `Category`, `It` propiedad contiene todos los registros individuales que comparten un valor común en la `Category` propiedad.  
  
 Si incluye el `It` palabra clave en el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad cuando se agrupan datos, debe asignar un alias a la `It` (palabra clave). El <xref:System.Web.UI.WebControls.LinqDataSource> control iniciará una excepción si `It` no tiene un alias. Puede asignar un alias a la `Key` palabra clave, pero esto no es necesario.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad a un subconjunto de propiedades del objeto de datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 En el ejemplo siguiente se muestra cómo recuperar valores de una propiedad que se ha utilizado para agrupar los datos y para recuperar la media para los registros agrupados. El `Key` palabra clave contiene la propiedad que se ha utilizado para agrupar los datos. En este ejemplo, `Key` contendrá los valores compartidos desde el `ProductCategory` propiedad.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar cuando se termina una operación de recuperación de datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Selected> eventos para detectar las excepciones de la operación de recuperación de datos o para examinar el objeto de datos una vez finalizada la operación de recuperación. El objeto está disponible desde la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto que se pasa a controladores de eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar antes de una operación de recuperación de datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos para realizar las tareas siguientes:  
  
-   Modificar los parámetros para la recuperación de datos.  
  
-   Generar la consulta mediante programación.  
  
-   Modifique los valores para ordenar o paginar.  
  
-   Realizar una ordenación personalizada o paginación.  
  
-   Cancelar la operación de recuperación de datos.  
  
 La <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> objeto que se pasa a controladores de eventos para este evento contiene los parámetros para la operación de recuperación de datos. Puede modificar los parámetros en la <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> controlador de eventos antes de ejecutar la consulta, o puede crear un nuevo conjunto de resultados y asignarlo a la <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propiedad.  
  
 La posibilidad de implementar personalizadas de ordenación o paginación en los controladores para este evento puede estar limitado por el control que está enlazado a la <xref:System.Web.UI.WebControls.LinqDataSource>. Por ejemplo, cuando el encabezado de columna de un <xref:System.Web.UI.WebControls.GridView> se hace clic en el control, el control realiza la ordenación automática que podría invalidar el orden que se establezca en el evento controlador.  
  
 Si se produce una excepción en un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos, debe controlar la excepción en ese controlador de eventos. La excepción no se pasará a un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selected> eventos (a través de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto). El <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad contiene solo las excepciones que se producen después de la <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos. El controlador crea una consulta que recupera los valores de una matriz de valores de cadena en la página Web.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 En el ejemplo siguiente se muestra cómo asignar el <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propiedad al objeto que se devuelve desde un método que representa un procedimiento almacenado.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de parámetros que se usan durante una operación de recuperación de datos.</summary>
        <value>Parámetros que se utilizan para crear la cláusula Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control utiliza los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> colección para crear la cláusula Select en tiempo de ejecución. Agregar parámetros a la <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> colección cuando desea usar valores de tiempo de ejecución en la cláusula Select. Por ejemplo, puede agregar un parámetro a la <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> colección para representar una propiedad en el perfil del usuario. A continuación, puede usar esa propiedad y un valor del origen de datos para calcular un nuevo valor.  
  
 Si no tiene que establecer un valor en tiempo de ejecución en la cláusula Select, no es necesario usar el <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> colección. Puede definir las propiedades que se van a recuperar en la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad. Por ejemplo, para devolver el `FirstName` y `LastName` valores de una tabla de base de datos, establecer <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> en "FirstName, LastName" sin ningún parámetro.  
  
 Para establecer valores en el <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> colección, agregar un marcador de posición en la <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad para el parámetro con nombre. En la cláusula Select, incluya delante de cada nombre de parámetro con el símbolo @.  
  
 No se puede usar un parámetro en el <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> colección para representar un nombre de propiedad. Para establecer dinámicamente el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad en el nombre de una propiedad, cree un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> eventos y personalizar el <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> propiedad según sea necesario.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar un valor proporcionado por el usuario para calcular un valor en los datos devueltos. El usuario puede escribir un valor en el cuadro de texto que representa el número de días de fabricación. Ese valor se divide por un valor de una base de datos que representa el número de días para fabricar un producto. El valor devuelto indica cuántos productos se pueden fabricar durante el número de días especificado. La entrada del usuario se incluye en el comando Select a través de la <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> colección.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los datos del origen de datos deberían almacenarse en el estado de vista para asegurarse de que otro proceso no ha cambiado los datos antes de actualizarlos o eliminarlos.</summary>
        <value>
          <see langword="true" /> si los valores van a almacenarse en el estado de vista; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, al actualizar y eliminar operaciones se han habilitado, el <xref:System.Web.UI.WebControls.LinqDataSource> control almacena los valores originales para todos los registros en la vista de estado. El <xref:System.Web.UI.WebControls.LinqDataSource> control almacena valores de todas las claves principales y todas las propiedades no marcadas con `UpdateCheck.Never` en el `Column` atributo. Establece el `UpdateCheck` propiedad de la `Column` de atributo en el [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].  
  
 Antes de LINQ to SQL actualiza o elimina datos, comprueba los valores de estado de vista con los valores actuales del origen de datos. Si los valores no coinciden, el registro de origen de datos ha cambiado. En ese caso, LINQ to SQL inicia una excepción y no continúe con la actualización o la operación de eliminación. Para obtener más información acerca de LINQ to SQL, vea [LINQ to SQL](http://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Almacenar los valores originales en la vista estado puede hacer que el tamaño de página llegar a ser innecesariamente grandes y puede exponer datos confidenciales a un usuario malintencionado. Puede deshabilitar el almacenamiento de valores de estado de vista estableciendo la <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> propiedad `false`. Si lo hace, debe proporcionar su propia manera de asegurarse de que los datos no ha cambiado. Si establece la <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> propiedad `false`, los valores originales no se conservan en el estado de vista para el control enlazado a datos. En ese caso, LINQ to SQL no puede comprobar la integridad de los datos. LINQ to SQL iniciará una excepción que indica un conflicto de datos, incluso si los datos del origen de datos no ha cambiado realmente.  
  
 Si el origen de datos subyacente contiene un campo de marca de tiempo que se actualiza automáticamente durante una actualización, puede almacenar ese valor en estado de vista. En ese caso, se establece la propiedad de marca de tiempo en la clase de entidad en `IsVersion=true` y todas las propiedades se establecen en `UpdateCheck.Never`. Dado que un campo de marca de tiempo se actualiza automáticamente la base de datos cada vez que cambian de esos datos en ese registro, LINQ to SQL determina de ese valor si los datos han cambiado. Esto ayuda a reducir el tamaño del estado de vista, y no se exponen ninguna datos confidenciales. LINQ to SQL comprobará la coherencia de datos comparando el valor de marca de tiempo en la vista estado con el valor de marca de tiempo en la base de datos. Para obtener más información, consulte [Tutorial: usar una marca de tiempo con el LinqDataSource Control para comprobar la integridad de datos](http://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Web.DynamicData.IDynamicDataSource.ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Para obtener una descripción de este miembro, vea <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Tipo que está asociado a la clase.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Web.UI.WebControls.LinqDataSource> se convierte en una interfaz <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System.Web.DynamicData.IDynamicDataSource.EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Para obtener una descripción de este miembro, vea <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Nombre de la entidad.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Web.UI.WebControls.LinqDataSource> se convierte en una interfaz <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de la propiedad o campo de la clase de contexto de datos que representa una recolección de datos.</summary>
        <value>Cadena que contiene el nombre de la propiedad que contiene la colección de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad en el nombre de la propiedad o campo que representa los datos que se van a recuperar. Cuando se conecta a una tabla de base de datos, el nombre de la propiedad suele ser el mismo que el nombre de la tabla. Cuando se conecta a una colección de datos en memoria, establecer el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad en el nombre de la propiedad o campo que devuelve la colección de datos.  
  
 Puede asignar una propiedad que devuelve cualquier tipo para el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad para las operaciones de recuperación. Si el objeto representado por la propiedad no implementa <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource> control ajustará automáticamente el objeto en una instancia de un <xref:System.Collections.IEnumerable> objeto.  
  
 Para habilitar la actualización automática, insertar o eliminar operaciones, la clase que se asigna a la <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> propiedad debe derivarse de <xref:System.Data.Linq.DataContext> y la propiedad que se asigna a la <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad debe derivarse de <xref:System.Data.Linq.Table%601>.  
  
 Para obtener información acerca de cómo seleccionar datos de una instancia de una clase, consulte el <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra dos <xref:System.Web.UI.WebControls.LinqDataSource> controles. En una <xref:System.Web.UI.WebControls.LinqDataSource> (control), el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad se establece en una propiedad en una clase. Esta propiedad devuelve una matriz de cadenas. En los demás <xref:System.Web.UI.WebControls.LinqDataSource> (control), el <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> propiedad se establece en una propiedad que representa una tabla de base de datos.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 La clase denominada `ExampleDataContext` que representa la tabla de base de datos no se muestra en este ejemplo. Para que este ejemplo funcione, debe crear esta clase agrega un LINQ to SQL class Example.dbml con nombre y arrastre una tabla denominada Movie hasta el [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Una clase denominada `ExampleDataContext` con una propiedad denominada `Movies` se genera.  
  
 En el ejemplo siguiente se muestra la clase denominada `MovieLibrary` que se hace referencia en el <xref:System.Web.UI.WebControls.LinqDataSource> control.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Valores de clave de fila para los registros que se van a actualizar.</param>
        <param name="values">Valores de fila que se van a actualizar en el origen de datos.</param>
        <param name="oldValues">Valores de fila que se evalúan para detectar conflictos entre los datos.</param>
        <summary>Realiza una operación de actualización.</summary>
        <returns>Número de registros afectados por la operación de actualización.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por lo general, no es necesario llamar a la <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> método desde el código. El control enlazado a datos llamará automáticamente el <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> método cuando el usuario realice la acción que se va a actualizar un registro. Llama de forma explícita el <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> método cuando desea crear su propio proceso de actualización de datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo actualizar mediante programación un registro en el origen de datos después de que el usuario hace clic en un botón. El código pasa un <xref:System.Collections.Specialized.ListDictionary> objeto que contiene el valor de clave, un <xref:System.Collections.Specialized.ListDictionary> objeto que contiene los valores originales, y un <xref:System.Collections.Specialized.ListDictionary> objeto que contiene los nuevos valores para el <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> método.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 En el ejemplo siguiente se muestra el marcado para el ejemplo anterior.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar cuando se termina una operación de actualización.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Updated> evento para detectar las excepciones de la operación de actualización o para examinar los valores de parámetros de salida una vez finalizada la operación de actualización. Los parámetros de salida están disponibles en la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto que se pasa a controladores de eventos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>La clase <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> no emplea esta colección.</summary>
        <value>Colección de parámetros.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tiene lugar antes de una operación de actualización.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controlar la <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos para validar el objeto que se actualiza, para examinar los errores de validación de datos de la clase de datos, para cambiar un valor antes de la operación de actualización, o para cancelar la operación de actualización. La <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> objeto que se pasa a controladores de eventos contiene el objeto original y el objeto actualizado.  
  
 Si se produce un error de validación durante la operación de actualización, la <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> objeto contiene las excepciones de validación que se producen por la clase de datos. Se produce un error de validación si un valor que se actualizarán no coincide con el tipo de la propiedad en la clase de datos, o si no supera una comprobación de validación personalizada. En un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos, puede recuperar las excepciones de validación y tome las medidas adecuadas.  
  
 Si se produce una excepción en un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos, debe controlar la excepción en ese controlador de eventos. La excepción no se pasará a un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Updated> eventos (a través de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad de la <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> objeto). El <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> propiedad contiene solo las excepciones que se producen después de la <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos. El código compara las propiedades de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> propiedad y el <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propiedad para ver si ha cambiado un valor. Si el valor ha cambiado, un valor de la <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> propiedad está establecida en `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 En el ejemplo siguiente se muestra un controlador de eventos para el <xref:System.Web.UI.WebControls.LinqDataSource.Updating> eventos que recupera las excepciones de validación.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 En el ejemplo anterior se recuperan las excepciones de validación. Podría producirse una excepción si un valor no coincide con el tipo de la propiedad. También podría producirse por una comprobación personalizada como el que se muestra en el ejemplo siguiente. El `OnAgeChanging` método comprueba que el número para el `Age` propiedad no es negativa.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica qué condiciones deben cumplirse para que un registro se incluya en los datos recuperados.</summary>
        <value>Cadena que se utiliza para crear la cláusula Where.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad para especificar las condiciones para el registro que se va a devolver desde una consulta. La sintaxis de la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad es igual que la sintaxis de una cláusula Where de LINQ en C#.  
  
 Especifique una expresión que da como resultado un valor booleano, y si la expresión se evalúa como `true` para una fila determinada, la fila se incluye en el conjunto de resultados. Las expresiones se componen de nombres de columna, operadores de comparación y valores para comparar, tal como se muestra en el ejemplo siguiente:  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 Para especificar varias expresiones vinculadas por lógica `AND` o `OR` operadores, use `&&` como un operador lógico AND y `||` como un operador OR lógico, tal como se muestra en el ejemplo siguiente:  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 Si desea probar una propiedad con un valor de cadena literal, el valor de cadena literal debe incluirse entre comillas dobles. Para hacer esto en el marcado, incluya la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> valor de la cláusula en comillas simples, como se muestra en el ejemplo siguiente:  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 Para probar con un valor de cadena literal en el código, utilice caracteres de escape que son adecuados para el idioma que está utilizando para insertar comillas dobles, como se muestra en el ejemplo siguiente:  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 Si desea comprobar si una cadena es mayor o menor que otra cadena, debe utilizar métodos de la <xref:System.String> clase en lugar de usar `<` o `>` operadores entre el nombre de columna y el valor de cadena. En los ejemplos siguientes muestran cómo seleccionar las filas que tienen valores de categoría que son menores que, menor o igual que, mayor que, o mayor o igual que "Sports":  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 También puede usar otros métodos de la <xref:System.String> de la clase, como <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, y <xref:System.String.Contains%2A>. Para obtener más información sobre cómo comparar cadenas, vea [comparar cadenas](~/docs/standard/base-types/comparing.md). Para obtener más información sobre dónde sintaxis de la cláusula, vea [operadores de C#](http://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) y [donde cláusula](~/docs/csharp/language-reference/keywords/where-clause.md).  
  
 Además de filtrar según valores estáticos que se definen cuando se crea la página Web, puede filtrar según valores dinámicos que se evalúan en tiempo de ejecución. En ese caso, se incluyen un parámetro con nombre en el <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad que actúa como un marcador de posición para el valor. A continuación, agregue un parámetro que tiene el mismo nombre para el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección.  
  
 Como alternativa, puede establecer la <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propiedad `true` y defina los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección. Cuando el <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> propiedad es `true`, no es necesario incluir los parámetros con nombre en el <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad. En su lugar, el <xref:System.Web.UI.WebControls.LinqDataSource> control genera automáticamente Where cláusula de los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> propiedad.  
  
 Para obtener más información acerca de cómo filtrar los datos, vea [Tutorial: seleccionar y filtrar un subconjunto de datos con los controles LinqDataSource y GridView](http://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo filtrar los datos devueltos desde una consulta basada en una condición estática.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 En el ejemplo siguiente se muestra cómo filtrar los datos según un valor proporcionado por el usuario en tiempo de ejecución. En este ejemplo un <xref:System.Web.UI.WebControls.DropDownList> control y un <xref:System.Web.UI.WebControls.GridView> control se muestran en la página. Cuando el usuario selecciona uno de los valores en el <xref:System.Web.UI.WebControls.DropDownList> (control), el <xref:System.Web.UI.WebControls.LinqDataSource> selecciona el control de la `Products` tabla únicamente las filas que tienen `UserPrice` valores iguales al valor seleccionado. El <xref:System.Web.UI.WebControls.GridView> control, a continuación, muestra los datos filtrados.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de parámetros que se utiliza para crear la cláusula Where.</summary>
        <value>Colección de parámetros que se usan para crear la cláusula Where en la propiedad <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.LinqDataSource> control utiliza los parámetros en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección para crear la donde cláusula en tiempo de ejecución. Agregar parámetros a la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección cuando desea establecer mediante programación una o varias de las condiciones en Where cláusula. Por ejemplo, podría buscar una tabla de base de datos para los registros cuyo apellido igual que el valor de un <xref:System.Web.UI.WebControls.TextBox> control. En ese caso, agregue un parámetro a la <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección para el valor del cuadro de texto.  
  
 Si no tiene que establecer un valor en tiempo de ejecución en la donde cláusula, no es necesario usar el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección. Puede definir los campos que se van a recuperar en la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad. Por ejemplo, para devolver valores de una tabla de base de datos donde `LastName` es igual a "Adams" en el marcado, establezca la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad `'LastName = "Adams"'` sin ningún parámetro.  
  
 Para establecer valores en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> recopilación, asigne un nombre a cada parámetro y, a continuación, agregue un marcador de posición en la <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> propiedad para ese parámetro. En, donde la cláusula, cada nombre de parámetro con el símbolo @.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección para la creación dinámica Where cláusula. El <xref:System.Web.UI.WebControls.LinqDataSource> control devuelve todos los registros con un valor en el `Price` columna que es mayor que el valor seleccionado por el usuario en un <xref:System.Web.UI.WebControls.DropDownList> control.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>