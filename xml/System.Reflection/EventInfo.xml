<Type Name="EventInfo" FullName="System.Reflection.EventInfo">
  <TypeSignature Language="C#" Value="public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit EventInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.EventInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventInfo&#xA;Inherits MemberInfo&#xA;Implements _EventInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_EventInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EventInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4c2e4-101">Detecta los atributos de un evento y proporciona acceso a sus metadatos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-101">Discovers the attributes of an event and provides access to event metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-102">Use la <xref:System.Reflection.EventInfo> (clase) para inspeccionar los eventos y enlazar controladores de eventos, como se muestra en el código de ejemplo para el <xref:System.Reflection.EventInfo.AddEventHandler%2A> método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-102">Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c2e4-103"><xref:System.Reflection.EventInfo> no está pensado para usarse para generar eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-103"><xref:System.Reflection.EventInfo> is not intended to be used to raise events.</span></span> <span data-ttu-id="4c2e4-104">Un objeto provoca eventos tal y como indica su estado interno.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-104">An object raises events as dictated by its internal state.</span></span>  
  
 <span data-ttu-id="4c2e4-105">Eventos se usan con los delegados.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-105">Events are used with delegates.</span></span> <span data-ttu-id="4c2e4-106">Un agente de escucha de eventos crea una instancia de un delegado de controlador de eventos que se invoca cuando el evento es desencadenado por un origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-106">An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</span></span> <span data-ttu-id="4c2e4-107">Para conectarse al origen del evento, el agente de escucha de eventos agrega a este delegado a la lista de invocación en el origen.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-107">In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</span></span> <span data-ttu-id="4c2e4-108">Cuando se produzca el evento, se llama al método invoke del delegado de controlador de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-108">When the event is raised, the invoke method of the event-handler delegate is called.</span></span> <span data-ttu-id="4c2e4-109">Se admiten las notificaciones de eventos de multidifusión y difusión única.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-109">Both multicast and single-cast event notifications are supported.</span></span> <span data-ttu-id="4c2e4-110">El `Add` y `Remove` métodos, así como la clase de delegado de controlador de eventos asociados a un evento, debe marcarse en los metadatos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-110">The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</span></span>  
  
 <span data-ttu-id="4c2e4-111">Los delegados son punteros a función orientada a objetos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-111">Delegates are object-oriented function pointers.</span></span> <span data-ttu-id="4c2e4-112">En C o C++, un puntero a función es una referencia a un método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-112">In C or C++, a function pointer is a reference to a method.</span></span> <span data-ttu-id="4c2e4-113">A diferencia de puntero de función de C o C++, un delegado contiene dos referencias: una referencia a un método y una referencia a un objeto que admite el método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-113">In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</span></span> <span data-ttu-id="4c2e4-114">Los delegados pueden invocar un método sin conocer el tipo de clase que declara o hereda el método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-114">Delegates can invoke a method without knowing the class type that declares or inherits the method.</span></span> <span data-ttu-id="4c2e4-115">Los delegados solo necesitan conocer la lista de tipo y un parámetro devuelta del método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-115">Delegates need only know the return type and parameter list of the method.</span></span>  
  
 <span data-ttu-id="4c2e4-116">El modelo de eventos funciona igualmente bien para los delegados de multidifusión y difusión única.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-116">The event model works equally well for single-cast and multicast delegates.</span></span> <span data-ttu-id="4c2e4-117">Cuando invoke del delegado se llama al método, solo un único objeto tendrá un método llamado en ella.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-117">When the delegate's invoke method is called, only a single object will have a method called on it.</span></span> <span data-ttu-id="4c2e4-118">Un modificador de multidifusión puede aplicarse a una declaración de delegado, lo que permite varios métodos que se llamará cuando se llama al método invoke del delegado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-118">A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</span></span>  
  
 <span data-ttu-id="4c2e4-119">Al llamar a <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> en `EventInfo` cuando el `inherit` parámetro de `GetCustomAttributes` es `true` , no se recorre la jerarquía de tipos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-119">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="4c2e4-120">Use <xref:System.Attribute?displayProperty=nameWithType> para heredar los atributos personalizados.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-120">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c2e4-121">El código siguiente obtiene una <xref:System.Reflection.EventInfo> de objeto para el <xref:System.Windows.Forms.Control.Click> eventos de la <xref:System.Windows.Forms.Button> clase.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-121">The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="4c2e4-122">de plena confianza para los herederos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-122">for full trust for inheritors.</span></span> <span data-ttu-id="4c2e4-123">Esta clase no puede heredarse mediante código de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-123">This class cannot be inherited by partially trusted code.</span></span></permission>
    <threadsafe><span data-ttu-id="4c2e4-124">Este tipo es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-124">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="4c2e4-125">Al heredar de <see langword="EventInfo" />, debe reemplazar los miembros siguientes: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, y <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-125">When you inherit from <see langword="EventInfo" />, you must override the following members: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, and <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span></span></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c2e4-126">Inicializa una nueva instancia de la clase <see langword="EventInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-126">Initializes a new instance of the <see langword="EventInfo" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-127">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-127">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-128">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-128">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public virtual void AddEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="4c2e4-129">Origen del evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-129">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="4c2e4-130">Encapsula el método o métodos que se invocarán cuando el parámetro de destino provoque el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-130">Encapsulates a method or methods to be invoked when the event is raised by the target.</span></span></param>
        <summary><span data-ttu-id="4c2e4-131">Agrega un controlador de eventos a un origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-131">Adds an event handler to an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-132">Este método intenta agregar un delegado para sincronizar el evento en el objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-132">This method attempts to add a delegate to synchronize the event on the target object.</span></span>  
  
 <span data-ttu-id="4c2e4-133">Cada vez que el evento es desencadenado por el parámetro de destino, el método o métodos que encapsula el controlador se invocará.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-133">Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c2e4-134">En el ejemplo de código siguiente se muestra cómo cargar un ensamblado, crear una instancia de un tipo desde el ensamblado, crear un controlador de eventos con un ensamblado dinámico y enlazar el controlador de eventos dinámicos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-134">The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler.</span></span> <span data-ttu-id="4c2e4-135">Todas las acciones se realizan mediante el enlace de tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-135">All actions are performed using late binding.</span></span>  
  
 <span data-ttu-id="4c2e4-136">El ejemplo de código carga System.dll y crea una instancia de la <xref:System.Timers.Timer?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-136">The code example loads System.dll and creates an instance of the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="4c2e4-137">El ejemplo se utiliza la <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> método para obtener el <xref:System.Timers.Timer.Elapsed> eventos y el <xref:System.Reflection.EventInfo.EventHandlerType%2A> propiedad que se va a obtener el tipo de delegado para el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-137">The example uses the <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.</span></span>  
  
 <span data-ttu-id="4c2e4-138">El ejemplo de código obtiene un <xref:System.Reflection.MethodInfo> para el `Invoke` método del tipo de delegado y desde el <xref:System.Reflection.MethodInfo> Obtiene la firma del delegado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-138">The code example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type, and from the <xref:System.Reflection.MethodInfo> obtains the signature of the delegate.</span></span> <span data-ttu-id="4c2e4-139">El ejemplo de código, a continuación, crea un ensamblado dinámico con un módulo que contiene un solo tipo denominado `Handler`y asigna al tipo un `static` método (`Shared` método en Visual Basic) denominado `DynamicHandler` que se usará para controlar el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-139">The code example then creates a dynamic assembly with one module containing a single type named `Handler`, and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that will be used to handle the event.</span></span>  
  
 <span data-ttu-id="4c2e4-140">Después de crea el tipo dinámico, el ejemplo de código obtiene un <xref:System.Reflection.MethodInfo> para el método finalizado y se utiliza para crear una instancia de delegado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-140">After the dynamic type is created, the code example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance.</span></span> <span data-ttu-id="4c2e4-141">Esta instancia se pasa a la <xref:System.Reflection.EventInfo.AddEventHandler%2A> método para enlazar el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-141">This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event.</span></span> <span data-ttu-id="4c2e4-142">A continuación, el programa se detiene para permitir que se produzca el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-142">The program then pauses to allow the event to be raised.</span></span>  
  
 [!code-cpp[AddEventHandler#1](~/samples/snippets/cpp/VS_Snippets_CLR/AddEventHandler/cpp/source.cpp#1)]
 [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs#1)]
 [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c2e4-143">El evento no posee un descriptor de acceso <see langword="add" /> público.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-143">The event does not have a public <see langword="add" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c2e4-144">No se puede utilizar el controlador que se pasó.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-144">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="4c2e4-145">En [.NET para aplicaciones de la Tienda Windows](http://go.microsoft.com/fwlink/?LinkID=247912) o la [Biblioteca de clases portable](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), capture en su lugar la excepción de clase base, <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-145">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="4c2e4-146">El llamador no tiene permiso de acceso a este miembro.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-146">The caller does not have access permission to the member.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="4c2e4-147">En [.NET para aplicaciones de la Tienda Windows](http://go.microsoft.com/fwlink/?LinkID=247912) o la [Biblioteca de clases portable](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), capture <see cref="T:System.Exception" /> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-147">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="4c2e4-148">El parámetro <paramref name="target" /> es <see langword="null" /> y el evento no es estático.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-148">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
 <span data-ttu-id="4c2e4-149">O bien</span><span class="sxs-lookup"><span data-stu-id="4c2e4-149">-or-</span></span>  
  
 <span data-ttu-id="4c2e4-150"><see cref="T:System.Reflection.EventInfo" /> no está declarado en el destino.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-150">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-151">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-151">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-152">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-152">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="AddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo AddMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo AddMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.AddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ AddMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-153">Obtiene el objeto <see cref="T:System.Reflection.MethodInfo" /> para el método <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> del evento, incluidos los métodos privados.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-153">Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="4c2e4-154">El objeto <see cref="T:System.Reflection.MethodInfo" /> para el método <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-154">The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-155">Esta propiedad es el equivalente de llamar al método el <xref:System.Reflection.EventInfo.GetAddMethod%2A> con un valor de `true`.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-155">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.EventAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As EventAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::EventAttributes Attributes { System::Reflection::EventAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-156">Obtiene los atributos de este evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-156">Gets the attributes for this event.</span></span></summary>
        <value><span data-ttu-id="4c2e4-157">Atributos de sólo lectura de este evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-157">The read-only attributes for this event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-158">Los atributos se devuelven en un entero de 4 bytes que representa un mapa de bits de los atributos establecidos para el evento que reflejado por esta instancia.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-158">The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="4c2e4-159">Objeto que se va a comparar con esta instancia o <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-159">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="4c2e4-160">Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-160">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="4c2e4-161">Es <see langword="true" /> si <paramref name="obj" /> es igual al tipo y valor de esta instancia; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-161"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerType">
      <MemberSignature Language="C#" Value="public virtual Type EventHandlerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EventHandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventHandlerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EventHandlerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.EventHandlerType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-162">Obtiene el objeto <see langword="Type" /> del controlador de eventos subyacente asociado a este evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-162">Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</span></span></summary>
        <value><span data-ttu-id="4c2e4-163">Objeto <see langword="Type" /> de sólo lectura que representa el controlador de eventos delegado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-163">A read-only <see langword="Type" /> object representing the delegate event handler.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c2e4-164">En el ejemplo siguiente se usa el <xref:System.Reflection.EventInfo.EventHandlerType%2A> propiedad para detectar el tipo de delegado de un evento y mostrar sus tipos de parámetro.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-164">The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.</span></span>  
  
 <span data-ttu-id="4c2e4-165">En el ejemplo se define un delegado denominado `MyDelegate` y un evento denominado `ev` de tipo `MyDelegate`.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-165">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="4c2e4-166">El código en el `Main` método detecta la firma del evento obteniendo el tipo de delegado del evento, obtener el `Invoke` método para el tipo de delegado y, a continuación, recuperar y mostrar los parámetros.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-166">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4c2e4-167">El llamador no dispone del permiso requerido.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-167">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAddMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c2e4-168">Devuelve el método utilizado para agregar un delegado de controlador de eventos al origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-168">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetAddMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c2e4-169">Devuelve el método utilizado para agregar un delegado de controlador de eventos al origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-169">Returns the method used to add an event handler delegate to the event source.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-170">Objeto <see cref="T:System.Reflection.MethodInfo" /> que representa al método utilizado para agregar un delegado de controlador de eventos al origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-170">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-171">`GetAddMethod` Inicializa y agrega el evento subscribe (método).</span><span class="sxs-lookup"><span data-stu-id="4c2e4-171">`GetAddMethod` initializes and adds the event subscribe method.</span></span> <span data-ttu-id="4c2e4-172">El `AddEventHandler` método se utiliza para agregar un delegado de controlador de eventos a la lista de invocación de un origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-172">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c2e4-173">Normalmente, el método tiene la siguiente firma:</span><span class="sxs-lookup"><span data-stu-id="4c2e4-173">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-174">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-174">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-175">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-175">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAddMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetAddMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="4c2e4-176"><see langword="true" /> si se pueden devolver métodos no públicos; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-176"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4c2e4-177">Al reemplazarse en una clase derivada, recupera el objeto <see langword="MethodInfo" /> para el método <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> del evento, especificando si se deben devolver métodos no públicos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-177">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-178">Objeto <see cref="T:System.Reflection.MethodInfo" /> que representa al método utilizado para agregar un delegado de controlador de eventos al origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-178">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-179">El `GetAddMethod` inicializa y agrega el evento subscribe (método) como un valor booleano.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-179">The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value.</span></span> <span data-ttu-id="4c2e4-180">El `AddEventHandler` método se utiliza para agregar un delegado de controlador de eventos a la lista de invocación de un origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-180">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c2e4-181">Normalmente, el método tiene la siguiente firma:</span><span class="sxs-lookup"><span data-stu-id="4c2e4-181">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="4c2e4-182"><paramref name="nonPublic" /> es <see langword="true" />, el método utilizado para agregar un delegado de controlador de eventos no es público y el llamador no tiene permiso para reflejar métodos que no sean públicos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-182"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-183">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-183">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-184">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-184">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c2e4-185">Devuelve el código hash de esta instancia.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-185">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-186">Código hash de un entero de 32 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-186">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetOtherMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c2e4-187">Devuelve los métodos que se asociaron a un evento en MSIL mediante la directiva <see langword=".other" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-187">Returns the methods that were associated with an event in MSIL using the <see langword=".other" /> directive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetOtherMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOtherMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c2e4-188">Devuelve los métodos públicos que se han asociado a un evento en los metadatos mediante la directiva <see langword=".other" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-188">Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-189">Matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representan los métodos públicos que se han asociado al evento en los metadatos mediante la directiva <see langword=".other" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-189">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="4c2e4-190">Si no existe ningún método público, se devolverá una matriz vacía.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-190">If there are no such public methods, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-191">Los metadatos de un evento pueden asociar los cuatro tipos de métodos con el evento:</span><span class="sxs-lookup"><span data-stu-id="4c2e4-191">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="4c2e4-192">El `.addon` directiva especifica el método usado para agregar controladores de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-192">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="4c2e4-193">Use la <xref:System.Reflection.EventInfo.GetAddMethod%2A> método para recuperar un <xref:System.Reflection.EventInfo> para ese método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-193">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="4c2e4-194">El `.removeon` directiva especifica el método utilizado para separar los controladores de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-194">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="4c2e4-195">Use la <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> método para recuperar un <xref:System.Reflection.EventInfo> para ese método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-195">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="4c2e4-196">El `.fire` directiva especifica el método utilizado para generar el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-196">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="4c2e4-197">Use la <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> método para recuperar un <xref:System.Reflection.EventInfo> para ese método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-197">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="4c2e4-198">El `.other` directiva especifica cualquier otro método asociado al evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-198">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="4c2e4-199">Use la <xref:System.Reflection.EventInfo.GetOtherMethods%2A> método para recuperar una matriz de <xref:System.Reflection.EventInfo> objetos para mostrar solo esos métodos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-199">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="4c2e4-200">Los métodos asociados a un evento mediante el `.other` directiva no tiene ninguna importancia especial para el tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-200">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="4c2e4-201">Los compiladores de C# y Visual Basic no usan el `.other` directiva.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-201">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOtherMethods (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="4c2e4-202"><see langword="true" /> para incluir métodos no públicos; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-202"><see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4c2e4-203">Devuelve los métodos que se han asociado a un evento en los metadatos mediante la directiva <see langword=".other" />, especificando si se deben incluir métodos no públicos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-203">Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-204">Matriz de objetos <see cref="T:System.Reflection.EventInfo" /> que representan los métodos que se han asociado a un evento en los metadatos mediante la directiva <see langword=".other" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-204">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive.</span></span> <span data-ttu-id="4c2e4-205">Si no hay métodos que cumplan la especificación, se devolverá una matriz vacía.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-205">If there are no methods matching the specification, an empty array is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-206">Los metadatos de un evento pueden asociar los cuatro tipos de métodos con el evento:</span><span class="sxs-lookup"><span data-stu-id="4c2e4-206">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="4c2e4-207">El `.addon` directiva especifica el método usado para agregar controladores de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-207">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="4c2e4-208">Use la <xref:System.Reflection.EventInfo.GetAddMethod%2A> método para recuperar un <xref:System.Reflection.EventInfo> para ese método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-208">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="4c2e4-209">El `.removeon` directiva especifica el método utilizado para separar los controladores de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-209">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="4c2e4-210">Use la <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> método para recuperar un <xref:System.Reflection.EventInfo> para este método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-210">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="4c2e4-211">El `.fire` directiva especifica el método utilizado para generar el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-211">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="4c2e4-212">Use la <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> método para recuperar un <xref:System.Reflection.EventInfo> para este método.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-212">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="4c2e4-213">El `.other` directiva especifica cualquier otro método asociado al evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-213">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="4c2e4-214">Use la <xref:System.Reflection.EventInfo.GetOtherMethods%2A> método para recuperar una matriz de <xref:System.Reflection.EventInfo> objetos para mostrar solo esos métodos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-214">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="4c2e4-215">Los métodos asociados a un evento mediante el `.other` directiva no tiene ninguna importancia especial para el tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-215">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="4c2e4-216">Los compiladores de C# y Visual Basic no usan el `.other` directiva.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-216">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="4c2e4-217">Este método no está implementado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-217">This method is not implemented.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRaiseMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c2e4-218">Devuelve el método al que se llama cuando se genera el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-218">Returns the method that is called when the event is raised.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRaiseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRaiseMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRaiseMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c2e4-219">Devuelve el método al que se llama cuando se genera el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-219">Returns the method that is called when the event is raised.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-220">Método al que se llama cuando se genera el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-220">The method that is called when the event is raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-221">Este método normalmente devuelve `null` para los eventos declarados con C# `event` palabra clave o Visual Basic `Event` palabra clave.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-221">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="4c2e4-222">Esto es porque los compiladores de Visual Basic y C# no generan este tipo de método de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-222">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-223">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-223">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-224">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-224">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRaiseMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRaiseMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="4c2e4-225"><see langword="true" /> si se pueden devolver métodos no públicos; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-225"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4c2e4-226">Al invalidarse en una clase derivada, devuelve el método al que se llama cuando se genera el evento, especificando si devolver métodos no públicos o no.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-226">When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-227">Objeto <see langword="MethodInfo" /> al que se llamó cuando se provocó el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-227">A <see langword="MethodInfo" /> object that was called when the event was raised.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-228">Este método normalmente devuelve `null` para los eventos declarados con C# `event` palabra clave o Visual Basic `Event` palabra clave.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-228">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="4c2e4-229">Esto es porque los compiladores de Visual Basic y C# no generan este tipo de método de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-229">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="4c2e4-230"><paramref name="nonPublic" /> es <see langword="true" />, el método utilizado para agregar un delegado de controlador de eventos no es público y el llamador no tiene permiso para reflejar métodos que no sean públicos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-230"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-231">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-231">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-232">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-232">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRemoveMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c2e4-233">Devuelve el método utilizado para quitar un delegado de controlador de eventos del origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-233">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRemoveMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoveMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRemoveMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c2e4-234">Devuelve el método utilizado para quitar un delegado de controlador de eventos del origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-234">Returns the method used to remove an event handler delegate from the event source.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-235">Objeto <see cref="T:System.Reflection.MethodInfo" /> que representa al método utilizado para quitar un delegado de controlador de eventos del origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-235">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c2e4-236">Normalmente, el método tiene la siguiente firma:</span><span class="sxs-lookup"><span data-stu-id="4c2e4-236">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-237">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-238">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRemoveMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRemoveMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="4c2e4-239"><see langword="true" /> si se pueden devolver métodos no públicos; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-239"><see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="4c2e4-240">Al invalidarse en una clase derivada, recupera el objeto <see langword="MethodInfo" /> para quitar un método del evento, especificando si devuelve métodos no públicos o no.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-240">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-241">Objeto <see cref="T:System.Reflection.MethodInfo" /> que representa al método utilizado para quitar un delegado de controlador de eventos del origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-241">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c2e4-242">Normalmente, el método tiene la siguiente firma:</span><span class="sxs-lookup"><span data-stu-id="4c2e4-242">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="4c2e4-243"><paramref name="nonPublic" /> es <see langword="true" />, el método utilizado para agregar un delegado de controlador de eventos no es público y el llamador no tiene permiso para reflejar métodos que no sean públicos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-243"><paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-244">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-244">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-245">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-245">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsMulticast">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticast" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMulticast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMulticast { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsMulticast</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-246">Obtiene un valor que indica si el evento es multidifusión.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-246">Gets a value indicating whether the event is multicast.</span></span></summary>
        <value>
          <span data-ttu-id="4c2e4-247"><see langword="true" /> si el delegado es una instancia de delegado multidifusión; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-247"><see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4c2e4-248">El llamador no dispone del permiso requerido.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-248">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-249">Obtiene un valor que indica si <see langword="EventInfo" /> tiene un nombre con un significado especial.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-249">Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</span></span></summary>
        <value>
          <span data-ttu-id="4c2e4-250"><see langword="true" /> si este evento tiene un nombre especial; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-250"><see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-251">Esta propiedad determina si el nombre del evento tiene un significado especial.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-251">This property determines whether the event's name has a special meaning.</span></span> <span data-ttu-id="4c2e4-252">Los nombres que comienzan por o contengan un carácter de subrayado (_), los descriptores de acceso de propiedad y métodos de sobrecarga de operadores son ejemplos de nombres que pueden requerir un tratamiento especial por parte de algunos compiladores.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-252">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventAttributes" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-253">Obtiene un valor <see cref="T:System.Reflection.MemberTypes" /> que indica que este miembro es un evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-253">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></summary>
        <value><span data-ttu-id="4c2e4-254">Valor <see cref="T:System.Reflection.MemberTypes" /> que indica que este miembro es un evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-254">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-255">Esta propiedad invalida <xref:System.Reflection.MemberInfo.MemberType%2A>.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-255">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="4c2e4-256">Por lo tanto, cuando se examina un conjunto de <xref:System.Reflection.MemberInfo> objetos, por ejemplo, la matriz devuelta por <xref:System.Type.GetMembers%2A> : el <xref:System.Reflection.MemberInfo.MemberType%2A> propiedad devuelve <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> solo cuando un miembro determinado es un evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-256">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> only when a given member is an event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4c2e4-257">Primer objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-257">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="4c2e4-258">Segundo objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-258">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="4c2e4-259">Indica si dos objetos <see cref="T:System.Reflection.EventInfo" /> son iguales.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-259">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="4c2e4-260"><see langword="true" /> si <paramref name="left" /> es igual a <paramref name="right" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-260"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="4c2e4-261">Primer objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-261">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="4c2e4-262">Segundo objeto que se va a comparar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-262">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="4c2e4-263">Indica si dos objetos <see cref="T:System.Reflection.EventInfo" /> no son iguales.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-263">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</span></span></summary>
        <returns>
          <span data-ttu-id="4c2e4-264">Es <see langword="true" /> si <paramref name="left" /> no es igual a <paramref name="right" />; en caso contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-264"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RaiseMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RaiseMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RaiseMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RaiseMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-265">Obtiene el método al que se llama cuando se provoca el evento, incluidos los métodos no públicos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-265">Gets the method that is called when the event is raised, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="4c2e4-266">Método al que se llama cuando se genera el evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-266">The method that is called when the event is raised.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-267">Esta propiedad es el equivalente de llamar al método el <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> con un valor de `true`.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-267">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public virtual void RemoveEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="4c2e4-268">Origen del evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-268">The event source.</span></span></param>
        <param name="handler"><span data-ttu-id="4c2e4-269">Delegado que se va a disociar de los eventos provocados por el destino.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-269">The delegate to be disassociated from the events raised by target.</span></span></param>
        <summary><span data-ttu-id="4c2e4-270">Quita un controlador de eventos del origen de eventos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-270">Removes an event handler from an event source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-271">Este método intenta quitar al delegado que puede sincronizar este evento en el objeto de destino.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-271">This method attempts to remove the delegate that may synchronize this event on the target object.</span></span>  
  
 <span data-ttu-id="4c2e4-272">Cuando se genera un evento por destino, el método o métodos que encapsula `handler` ya no se invocará.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-272">When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c2e4-273">El evento no posee un descriptor de acceso <see langword="remove" /> público.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-273">The event does not have a public <see langword="remove" /> accessor.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4c2e4-274">No se puede utilizar el controlador que se pasó.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-274">The handler that was passed in cannot be used.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="4c2e4-275">En [.NET para aplicaciones de la Tienda Windows](http://go.microsoft.com/fwlink/?LinkID=247912) o la [Biblioteca de clases portable](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), capture <see cref="T:System.Exception" /> en su lugar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-275">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="4c2e4-276">El parámetro <paramref name="target" /> es <see langword="null" /> y el evento no es estático.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-276">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span></span>  
  
 <span data-ttu-id="4c2e4-277">O bien</span><span class="sxs-lookup"><span data-stu-id="4c2e4-277">-or-</span></span>  
  
 <span data-ttu-id="4c2e4-278"><see cref="T:System.Reflection.EventInfo" /> no está declarado en el destino.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-278">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span></span></exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>  
 <span data-ttu-id="4c2e4-279">En [.NET para aplicaciones de la Tienda Windows](http://go.microsoft.com/fwlink/?LinkID=247912) o la [Biblioteca de clases portable](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), capture en su lugar la excepción de clase base, <see cref="T:System.MemberAccessException" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-279">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="4c2e4-280">El llamador no tiene permiso de acceso a este miembro.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-280">The caller does not have access permission to the member.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="4c2e4-281">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-281">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span> <span data-ttu-id="4c2e4-282">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-282">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span></span></permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RemoveMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RemoveMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoveMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RemoveMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c2e4-283">Obtiene el objeto <see langword="MethodInfo" /> para quitar un método del evento, incluidos los métodos privados.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-283">Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</span></span></summary>
        <value><span data-ttu-id="4c2e4-284">Objeto <see langword="MethodInfo" /> para quitar un método del evento.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-284">The <see langword="MethodInfo" /> object for removing a method of the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-285">Esta propiedad es el equivalente de llamar al método el <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> con un valor de `true`.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-285">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EventInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EventInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="4c2e4-286">Reservado para un uso futuro.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-286">Reserved for future use.</span></span> <span data-ttu-id="4c2e4-287">Debe ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-287">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="4c2e4-288">Matriz que se pasa con los nombres que se van a asignar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-288">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="4c2e4-289">Número de nombres que se van a asignar.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-289">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="4c2e4-290">Contexto de configuración regional en el que se van a interpretar los nombres.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-290">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="4c2e4-291">Matriz asignada por quien realiza la llamada que recibe los id. que corresponden a los nombres.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-291">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="4c2e4-292">Asigna un conjunto de nombres a un conjunto correspondiente de identificadores de envío.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-292">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-293">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-293">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4c2e4-294">Para obtener más información sobre `IDispatch::GetIDsOfNames`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-294">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="4c2e4-295">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-295">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetType">
      <MemberSignature Language="C#" Value="Type _EventInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._EventInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _EventInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._EventInfo.GetType() = System::Runtime::InteropServices::_EventInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c2e4-296">Devuelve un objeto <c>T:System.Type</c> que representa el tipo <see cref="T:System.Reflection.EventInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-296">Returns a <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></summary>
        <returns><span data-ttu-id="4c2e4-297">Objeto <c>T:System.Type</c> que representa el tipo <see cref="T:System.Reflection.EventInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-297">A <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EventInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="4c2e4-298">Información de tipos que se va a devolver.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-298">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="4c2e4-299">Identificador de la configuración regional de la información de tipo.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-299">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="4c2e4-300">Recibe un puntero al objeto de información de tipo solicitado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-300">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="4c2e4-301">Recupera la información de tipo de un objeto, que se puede utilizar después para obtener la información de tipo de una interfaz.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-301">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-302">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4c2e4-303">Para obtener más información sobre `IDispatch::GetTypeInfo`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-303">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="4c2e4-304">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-304">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EventInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="4c2e4-305">Señala a una ubicación que recibe el número de interfaces de información de tipo proporcionado por el objeto.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-305">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="4c2e4-306">Recupera el número de interfaces de información de tipo que proporciona un objeto (0 ó 1).</span><span class="sxs-lookup"><span data-stu-id="4c2e4-306">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-307">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-307">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4c2e4-308">Para obtener más información sobre `IDispatch::GetTypeInfoCount`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-308">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="4c2e4-309">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-309">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.Invoke">
      <MemberSignature Language="C#" Value="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EventInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EventInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="4c2e4-310">Identifica el miembro.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-310">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="4c2e4-311">Reservado para un uso futuro.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-311">Reserved for future use.</span></span> <span data-ttu-id="4c2e4-312">Debe ser IID_NULL.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-312">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="4c2e4-313">Contexto de la configuración regional en que se interpretan los argumentos.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-313">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="4c2e4-314">Marcas que describen el contexto de la llamada.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-314">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="4c2e4-315">Puntero a una estructura que contiene una matriz de argumentos, una matriz de valores DISPID de argumento para argumentos con nombre y recuentos del número de elementos de cada matriz.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-315">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="4c2e4-316">Puntero a la ubicación donde se va a almacenar el resultado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-316">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="4c2e4-317">Puntero a una estructura que contiene información de excepciones.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-317">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="4c2e4-318">Índice del primer argumento que tiene un error.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-318">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="4c2e4-319">Proporciona acceso a las propiedades y los métodos expuestos por un objeto.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-319">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c2e4-320">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-320">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="4c2e4-321">Para obtener más información sobre `IDispatch::Invoke`, vea MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-321">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="4c2e4-322">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <c>IDispatch</c> de COM.</span><span class="sxs-lookup"><span data-stu-id="4c2e4-322">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>