<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeDelegator.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53f1922063931e1db44dfd00544b163b8a8fb3913.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f1922063931e1db44dfd00544b163b8a8fb3913</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Wraps a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object and delegates methods to that <ph id="ph2">&lt;see langword="Type" /&gt;</ph>.</source>
          <target state="translated">Engloba un objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> y delega los métodos en ese <ph id="ph2">&lt;see langword="Type" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>.</source>
          <target state="translated">Derivar de este tipo e invalidar solo aquellos miembros que se deben proporcionar personalización en, además de los miembros que son requeridos por el programa y aún no está implementados por <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source><ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> and implements most of the properties and methods of <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> se deriva de <ph id="ph2">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> e implementa la mayoría de las propiedades y métodos de <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>For each member it implements, <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> automatically delegates to the corresponding member of an internal <ph id="ph2">&lt;xref:System.Type&gt;</ph> object, which is supplied as an argument to the constructor.</source>
          <target state="translated">Para cada miembro implementa, <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> automáticamente delega en el miembro correspondiente de un interno <ph id="ph2">&lt;xref:System.Type&gt;</ph> objeto, que se proporciona como un argumento al constructor.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>This internal <ph id="ph1">&lt;xref:System.Type&gt;</ph> object is exposed to deriving classes by the <ph id="ph2">`protected`</ph><ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field.</source>
          <target state="translated">Este interno <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto se expone al derivar clases por el <ph id="ph2">`protected`</ph> <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> campo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>Some members of <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> have implementations even though the members themselves are simply inherited from <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">Algunos miembros de <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> tienen implementaciones aunque los miembros propiamente dichos simplemente se heredan de <ph id="ph2">&lt;xref:System.Type&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>In these cases, the implementation is provided by an overridden <ph id="ph1">`protected`</ph> method that has a name that ends in "Impl".</source>
          <target state="translated">En estos casos, se proporciona la implementación por un invalidado <ph id="ph1">`protected`</ph> método que tiene un nombre que termina en "Impl".</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>For example, the implementation for all overloads of the <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetMethods%2A&gt;</ph> method is supplied by the overridden <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;</ph> method.</source>
          <target state="translated">Por ejemplo, la implementación de todas las sobrecargas de la <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetMethods%2A&gt;</ph> método se proporciona por el invalidado <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The implementation for inherited properties such as <ph id="ph1">&lt;xref:System.Type.IsPublic%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Type.IsNestedAssembly%2A&gt;</ph> is provided by the overridden <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;</ph> method.</source>
          <target state="translated">La implementación para hereda propiedades como <ph id="ph1">&lt;xref:System.Type.IsPublic%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Type.IsNestedAssembly%2A&gt;</ph> se proporciona mediante el invalidado <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>Deriving classes can provide a public constructor that takes a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object as its parameter and simply passes that object to the <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;</ph> constructor, or can set the internal <ph id="ph3">&lt;xref:System.Type&gt;</ph> object in some other way.</source>
          <target state="translated">Las clases derivadas pueden proporcionar un constructor público que toma una <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto como parámetro y simplemente pasa ese objeto a la <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;</ph> constructor, o puede establecer interna <ph id="ph3">&lt;xref:System.Type&gt;</ph> objeto de alguna otra manera.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>If a deriving class uses a member that is not implemented by <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>, it must override that member and provide an implementation.</source>
          <target state="translated">Si una clase derivada utiliza un miembro que no implementa <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>, debe reemplazar ese miembro y proporcionar una implementación.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The simplest implementation is to call the corresponding member on the internal <ph id="ph1">&lt;xref:System.Type&gt;</ph> object exposed by the <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field, but you can provide any implementation your application requires.</source>
          <target state="translated">La implementación más sencilla consiste en llamar al miembro correspondiente en el fax interno <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto expuesto por el <ph id="ph2">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> campo, pero puede proporcionar cualquier implementación de la aplicación requiere.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType&gt;</ph> constructor).</source>
          <target state="translated">No es necesario reemplazar estos miembros si no se utiliza la aplicación o biblioteca de funciones de las llamadas de la aplicación (por ejemplo, mediante el <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=nameWithType&gt;</ph> constructor).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The following virtual methods (<ph id="ph1">`Overridable`</ph> methods in Visual Basic) of <ph id="ph2">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.MakeByRefType%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.MakePointerType%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Type.GetEnumNames%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.GetEnumValues%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Type.GetTypeCodeImpl%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Type.IsEnumDefined%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Type.IsEquivalentTo%2A&gt;</ph>.</source>
          <target state="translated">Los siguientes métodos virtuales (<ph id="ph1">`Overridable`</ph> métodos en Visual Basic) de <ph id="ph2">&lt;xref:System.Type&gt;</ph> no implementa <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.MakeByRefType%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.MakePointerType%2A&gt;</ph> , <ph id="ph11">&lt;xref:System.Type.GetEnumNames%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.GetEnumValues%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Type.GetTypeCodeImpl%2A&gt;</ph>, <ph id="ph15">&lt;xref:System.Type.IsEnumDefined%2A&gt;</ph>, <ph id="ph16">&lt;xref:System.Type.IsEquivalentTo%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeDelegator">
          <source>The following virtual properties (<ph id="ph1">`Overridable`</ph> properties in Visual Basic) of <ph id="ph2">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.ContainsGenericParameters%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.IsSecurityTransparent%2A&gt;</ph>.</source>
          <target state="translated">Las siguientes propiedades virtuales (<ph id="ph1">`Overridable`</ph> propiedades en Visual Basic) de <ph id="ph2">&lt;xref:System.Type&gt;</ph> no implementa <ph id="ph3">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id="ph4">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Type.ContainsGenericParameters%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Type.IsSecurityTransparent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> class with default properties.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> con propiedades predeterminadas.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source>The instance of the class <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that encapsulates the call to the method of an object.</source>
          <target state="translated">Instancia de la clase <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que encapsula la llamada al método de un objeto.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> class specifying the encapsulating instance.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> especificando la instancia de encapsulamiento.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source>This constructor is called from a class to generate a delegate based upon the <ph id="ph1">`Type`</ph> object for the class defining the method.</source>
          <target state="translated">Se llama a este constructor desde una clase para generar un delegado basado en el <ph id="ph1">`Type`</ph> objeto para la clase que define el método.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
          <source><ph id="ph1">&lt;paramref name="delegatingType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegatingType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>Gets the assembly of the implemented type.</source>
          <target state="translated">Obtiene el ensamblado del tipo implementado.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> object representing the assembly of the implemented type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Assembly" /&gt;</ph> que representa al ensamblado del tipo implementado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>Assemblies are the deployment units in the common language runtime.</source>
          <target state="translated">Los ensamblados son las unidades de implementación en common language runtime.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.</source>
          <target state="translated">Ensamblados de establecen el espacio de nombres para resolver las solicitudes y determinan qué recursos se exponen externamente y que sean accesibles desde dentro del ensamblado.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Assembly">
          <source>The common language runtime can determine and locate the assembly for any running object.</source>
          <target state="translated">Common language runtime puede determinar y ubicar el ensamblado de cualquier objeto en ejecución.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
          <source>Gets the assembly's fully qualified name.</source>
          <target state="translated">Obtiene el nombre completo del ensamblado.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the assembly's fully qualified name.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph> contiene el nombre completo del ensamblado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>Gets the base type for the current type.</source>
          <target state="translated">Obtiene el tipo base para el tipo actual.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>The base type for a type.</source>
          <target state="translated">Tipo base para un tipo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>The base type is the type from which this type directly inherits.</source>
          <target state="translated">El tipo base es el tipo del que hereda directamente este tipo.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>Since the <ph id="ph1">&lt;xref:System.Object&gt;</ph> class type is the ultimate base class of all the other types, it is the only type that does not have a base type.</source>
          <target state="translated">Puesto que la <ph id="ph1">&lt;xref:System.Object&gt;</ph> tipo de clase es la clase base fundamental de todos los otros tipos, es el único tipo que no tiene un tipo base.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.BaseType">
          <source>In this case, <ph id="ph1">`null`</ph> is returned as the base type of the <ph id="ph2">`Object`</ph> type.</source>
          <target state="translated">En este caso, <ph id="ph1">`null`</ph> se devuelve como el tipo base de la <ph id="ph2">`Object`</ph> tipo.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.FullName">
          <source>Gets the fully qualified name of the implemented type.</source>
          <target state="translated">Obtiene el nombre completo del tipo implementado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.FullName">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the type's fully qualified name.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph> contiene el nombre completo del tipo.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.FullName">
          <source>A string containing the fully qualified name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">Una cadena que contiene el nombre completo del elemento actual <ph id="ph1">`TypeDelegator`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
          <source>Gets the attributes assigned to the <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Obtiene los atributos asignados al <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
          <source>A <ph id="ph1">&lt;see langword="TypeAttributes" /&gt;</ph> object representing the implementation attribute flags.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="TypeAttributes" /&gt;</ph> que representa a las marcas del atributo de implementación.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
          <source>This method can be used to determine if the <ph id="ph1">`TypeDelegator`</ph> is abstract, public, and so on.</source>
          <target state="translated">Este método puede utilizarse para determinar si la <ph id="ph1">`TypeDelegator`</ph> es abstracto, público y así sucesivamente.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Objeto que permite el enlace, la conversión de tipos de argumentos, la invocación de miembros y la recuperación de objetos <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> mediante la reflexión.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usará el enlazador predeterminado.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The calling conventions.</source>
          <target state="translated">Convenciones de llamadas.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing a list of the parameter number, order, and types.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="Type" /&gt;</ph> que contiene una lista del número, el orden y los tipos de parámetros.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Types cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>; use an appropriate <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph> method or an empty array to search for a method without parameters.</source>
          <target state="translated">Los tipos no pueden ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>; utilice un método <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph> apropiado o una matriz vacía para buscar un método sin parámetros.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> having the same length as the <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> que tiene la misma longitud que la matriz <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept> cuyos elementos representan los atributos asociados a los parámetros del método que se va a obtener.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Gets the constructor that implemented the <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Obtiene el constructor que implementó el <ph id="ph1">&lt;see langword="TypeDelegator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> object for the method that matches the specified criteria, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a match cannot be found.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> para el método que coincide con los criterios especificados, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si no se encuentra ninguna coincidencia.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated">El <ph id="ph1">`callConvention`</ph> parámetro indica la convención de llamada para el punto de entrada.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If no calling convention is specified, a default <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> value of <ph id="ph2">`Standard`</ph> is used.</source>
          <target state="translated">Si no se especifica ninguna convención de llamada, valor predeterminado es <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> valo <ph id="ph2">`Standard`</ph> se utiliza.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> objects representing constructors defined for the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve una matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.ConstructorInfo" /&gt;</ph> que representan los constructores definidos para el tipo englobado por el objeto <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> containing the specified constructors defined for this class.</source>
          <target state="translated">Una matriz de tipo <ph id="ph1">&lt;see langword="ConstructorInfo" /&gt;</ph> contiene los constructores especificados definidos para esta clase.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>If no constructors are defined, an empty array is returned.</source>
          <target state="translated">Si no se definen constructores, se devuelve una matriz vacía.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.</source>
          <target state="translated">Dependiendo del valor del parámetro especificado, se devolverán sólo los constructores públicos o bien tanto los públicos como los no públicos.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
          <source>Class initializers are available only through <ph id="ph1">`GetMember`</ph>, <ph id="ph2">`GetMembers`</ph>, <ph id="ph3">`FindMembers`</ph>, and <ph id="ph4">`GetConstructors`</ph>.</source>
          <target state="translated">Inicializadores de clase sólo están disponibles mediante <ph id="ph1">`GetMember`</ph>, <ph id="ph2">`GetMembers`</ph>, <ph id="ph3">`FindMembers`</ph>, y <ph id="ph4">`GetConstructors`</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Returns all the custom attributes defined for this type.</source>
          <target state="translated">Devuelve todos los atributos personalizados definidos para este tipo.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">Especifica si se debe realizar una búsqueda en la cadena de herencia de este tipo con el fin de encontrar los atributos.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.</source>
          <target state="translated">Devuelve todos los atributos personalizados definidos para este tipo, indicando si se debe buscar la cadena de herencia del tipo.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>An array of objects containing all the custom attributes defined for this type.</source>
          <target state="translated">Matriz de objetos que contiene todos los atributos personalizados definidos para este tipo.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">No se puede cargar un tipo de atributo personalizado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">Matriz de atributos personalizados identificados según el tipo.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">Especifica si se debe realizar una búsqueda en la cadena de herencia de este tipo con el fin de encontrar los atributos.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns an array of custom attributes identified by type.</source>
          <target state="translated">Devuelve una matriz de atributos personalizados identificados según el tipo.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of objects containing the custom attributes defined in this type that match the <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> parameter, specifying whether to search the type's inheritance chain, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no custom attributes are defined on this type.</source>
          <target state="translated">Matriz de objetos que contiene los atributos personalizados definidos en este tipo y que coinciden con el parámetro <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph>, indicando si se debe buscar la cadena de herencia del tipo o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si no se definen atributos personalizados en este tipo.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">No se puede cargar un tipo de atributo personalizado.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetElementType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object encompassed or referred to by the current array, pointer or ByRef.</source>
          <target state="translated">Devuelve el <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> del objeto englobado o al que hace referencia la matriz, el puntero o la ByRef actual.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetElementType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object encompassed or referred to by the current array, pointer or <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph>, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the current <ph id="ph4">&lt;see cref="T:System.Type" /&gt;</ph> is not an array, a pointer or a <ph id="ph5">&lt;see langword="ByRef" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> del objeto englobado o al que se hace referencia según la matriz, puntero o <ph id="ph2">&lt;see langword="ByRef" /&gt;</ph> actual, o <ph id="ph3">&lt;see langword="null" /&gt;</ph> si el <ph id="ph4">&lt;see cref="T:System.Type" /&gt;</ph> actual no es una matriz, un puntero o un <ph id="ph5">&lt;see langword="ByRef" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The name of the event to get.</source>
          <target state="translated">Nombre del evento que se va a obtener.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>Returns the specified event.</source>
          <target state="translated">Devuelve el evento especificado.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> object representing the event declared or inherited by this type with the specified name.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> que representa al evento declarado o heredado por este tipo con el nombre especificado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>This method returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no such event is found.</source>
          <target state="translated">Este método devuelve <ph id="ph1">&lt;see langword="null" /&gt;</ph> si no se encuentra tal evento.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.<ph id="ph3">`IgnoreCase`</ph>, the case of the <ph id="ph4">`name`</ph> parameter is ignored.</source>
          <target state="translated">Si <ph id="ph1">`bindingAttr`</ph> es <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.<ph id="ph3">`IgnoreCase`</ph>, el caso de los <ph id="ph4">`name`</ph> parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeDelegator">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing all the public events declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve una matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> que representa a los eventos públicos declarados o heredados por el <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing all the public events declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve una matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> que representa a los eventos públicos declarados o heredados por el <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents">
          <source>Returns an array of type <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> containing all the events declared or inherited by the current type.</source>
          <target state="translated">Devuelve una matriz de tipo <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> que contiene todos los eventos declarados o heredados por el tipo actual.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">Si no existe ningún evento, se devolverá una matriz vacía.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>Returns the events specified in <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> that are declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve todos los eventos especificados en <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> que son declarados o heredados por el objeto <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> containing the events specified in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> que contiene los eventos especificados en <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
          <source>If there are no events, an empty array is returned.</source>
          <target state="translated">Si no existe ningún evento, se devolverá una matriz vacía.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The name of the field to find.</source>
          <target state="translated">Nombre del campo para buscar.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field with the specified name.</source>
          <target state="translated">Devuelve un objeto <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> que representa al campo con el nombre especificado.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> object representing the field declared or inherited by this <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> with the specified name.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> que representa el campo declarado o heredado por este <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> con el nombre especificado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no such field is found.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see langword="null" /&gt;</ph> si no se encuentra tal campo.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic para devolver todos los campos públicos y no públicos.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>Use <ph id="ph1">`BindingFlags.IgnoreCase`</ph> to ignore the case of the fields, as the search is case-sensitive by default.</source>
          <target state="translated">Use <ph id="ph1">`BindingFlags.IgnoreCase`</ph> para omitir el caso de los campos, como la búsqueda no distingue entre mayúsculas y minúsculas de forma predeterminada.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects representing the data fields defined for the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve una matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> que representan los campos de datos definidos para el tipo englobado por el objeto <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> containing the fields declared or inherited by the current <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> que contiene los campos declarados o heredados por el <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>An empty array is returned if there are no matched fields.</source>
          <target state="translated">Si los campos no coinciden, se devuelve una matriz vacía.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.GetFields%2A&gt;</ph> método no devuelve campos en un orden determinado, como alfabético o el orden de declaración.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>Your code must not depend on the order in which fields are returned, because that order can vary.</source>
          <target state="translated">El código no debe depender del orden en que se devuelven los campos, porque ese orden puede variar.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
          <source>Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.</source>
          <target state="translated">Use a <ph id="ph1">`bindingAttr`</ph> of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic para devolver todos los campos públicos y no públicos.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>The fully qualified name of the interface implemented by the current class.</source>
          <target state="translated">Nombre completo de la interfaz implementada por la clase actual.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the case is to be ignored; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el caso se va a omitir; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>Returns the specified interface implemented by the type wrapped by the current <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve la interfaz especificada implementada por el tipo englobado por el <ph id="ph1">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> que representa a la interfaz implementada por la clase actual (directa o indirectamente) con el nombre completo que coincide con el nombre especificado.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>If no interface that matches name is found, null is returned.</source>
          <target state="translated">Si no se encuentra ninguna interfaz cuyo nombre coincida, se devuelve null.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the interface to retrieve a mapping of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> de la interfaz de la que se va a recuperar una asignación.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>Returns an interface mapping for the specified interface type.</source>
          <target state="translated">Devuelve una asignación de interfaz para el tipo de interfaz especificado.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.InterfaceMapping" /&gt;</ph> object representing the interface mapping for <ph id="ph2">&lt;paramref name="interfaceType" /&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Reflection.InterfaceMapping" /&gt;</ph> que representa la asignación de interfaz de <ph id="ph2">&lt;paramref name="interfaceType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
          <source>The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.</source>
          <target state="translated">El mapa de interfaz indica cómo se asigna una interfaz a los métodos reales de una clase que implementa esa interfaz.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaces">
          <source>Returns all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">Devuelve todas las interfaces implementadas en la clase actual y sus clases base.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaces">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing all the interfaces implemented on the current class and its base classes.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="Type" /&gt;</ph> que contiene todas las interfaces implementadas en la clase actual y sus clases base.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetInterfaces">
          <source>If none are defined, an empty array is returned.</source>
          <target state="translated">Si no hay ninguna definida, se devuelve una matriz vacía.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The name of the member to get.</source>
          <target state="translated">Nombre del miembro que se va a obtener.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The type of members to get.</source>
          <target state="translated">Tipo de miembros que se van a obtener.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <ph id="ph1">&lt;paramref name="name" /&gt;</ph>, <ph id="ph2">&lt;paramref name="type" /&gt;</ph>, and <ph id="ph3">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Devuelve miembros (propiedades, métodos, constructores, campos, eventos y tipos anidados) especificados por los <ph id="ph1">&lt;paramref name="name" /&gt;</ph>, <ph id="ph2">&lt;paramref name="type" /&gt;</ph> y <ph id="ph3">&lt;paramref name="bindingAttr" /&gt;</ph> dados.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> containing all the members of the current class and its base class meeting the specified criteria.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> que contiene todos los miembros de la clase actual y su clase base, cumpliendo con los criterios especificados.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.</source>
          <target state="translated">If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic, se considerarán todos los miembros.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">Si no hay ninguna coincidencia, se devuelve una matriz vacía.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>Returns members specified by <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph>.</source>
          <target state="translated">Devuelve miembros especificados por <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> containing all the members of the current class and its base classes that meet the <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph> filter.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> que contiene todos los miembros de la clase actual y sus clases base que cuentan con el filtro <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.</source>
          <target state="translated">If <ph id="ph1">`bindingAttr`</ph> is <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph>. NonPublic, se considerarán todos los miembros.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
          <source>If there are no matches, an empty array is returned.</source>
          <target state="translated">Si no hay ninguna coincidencia, se devuelve una matriz vacía.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The method name.</source>
          <target state="translated">El nombre del método.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects using reflection.</source>
          <target state="translated">Objeto que permite el enlace, la conversión de tipos de argumentos, la invocación de miembros y la recuperación de objetos <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> mediante la reflexión.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usará el enlazador predeterminado.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The calling conventions.</source>
          <target state="translated">Convenciones de llamadas.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing a list of the parameter number, order, and types.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="Type" /&gt;</ph> que contiene una lista del número, el orden y los tipos de parámetros.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Types cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>; use an appropriate <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph> method or an empty array to search for a method without parameters.</source>
          <target state="translated">Los tipos no pueden ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>; utilice un método <ph id="ph2">&lt;see langword="GetMethod" /&gt;</ph> apropiado o una matriz vacía para buscar un método sin parámetros.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> having the same length as the <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="ParameterModifier" /&gt;</ph> que tiene la misma longitud que la matriz <bpt id="p1">&lt;c&gt;</bpt>types<ept id="p1">&lt;/c&gt;</ept> cuyos elementos representan los atributos asociados a los parámetros del método que se va a obtener.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</source>
          <target state="translated">Busca el método especificado cuyos parámetros coincidan con los tipos y modificadores de argumentos especificados, usando las restricciones de enlace indicadas y la convención de llamada especificada.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A <ph id="ph1">&lt;see langword="MethodInfoInfo" /&gt;</ph> object for the implementation method that matches the specified criteria, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a match cannot be found.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="MethodInfoInfo" /&gt;</ph> para el método de implementación que coincide con los criterios especificados o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si no se encuentra ninguna coincidencia.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The <ph id="ph1">`callConvention`</ph> parameter indicates the calling convention for the entry point.</source>
          <target state="translated">El <ph id="ph1">`callConvention`</ph> parámetro indica la convención de llamada para el punto de entrada.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If no <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> is specified, a default <ph id="ph2">`CallingConventions`</ph> value of <ph id="ph3">`Standard`</ph> is used.</source>
          <target state="translated">Si no hay ningún <ph id="ph1">&lt;xref:System.Reflection.CallingConventions&gt;</ph> se especifica, valor predeterminado es <ph id="ph2">`CallingConventions`</ph> valo <ph id="ph3">`Standard`</ph> se utiliza.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects representing specified methods of the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve una matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> que representan métodos especificados del tipo englobado por el objeto <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> objects representing the methods defined on this <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> que representa a los métodos definidos en este <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The nested type's name.</source>
          <target state="translated">Nombre del tipo anidado.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>Returns a nested type specified by <ph id="ph1">&lt;paramref name="name" /&gt;</ph> and in <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph> that are declared or inherited by the type represented by the current <ph id="ph3">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve un tipo anidado especificado por <ph id="ph1">&lt;paramref name="name" /&gt;</ph> y en <ph id="ph2">&lt;paramref name="bindingAttr" /&gt;</ph> que son declarados o heredados por el objeto <ph id="ph3">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>A <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the nested type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="Type" /&gt;</ph> que representa al tipo anidado.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>Returns the nested types specified in <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> that are declared or inherited by the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve todos los tipos anidados especificados en <ph id="ph1">&lt;paramref name="bindingAttr" /&gt;</ph> que son declarados o heredados por el tipo englobado por el objeto <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
          <source>An array of type <ph id="ph1">&lt;see langword="Type" /&gt;</ph> containing the nested types.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="Type" /&gt;</ph> que contiene los tipos anidados.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>Returns an array of <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects representing properties of the type wrapped by the current <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Devuelve una matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> que representan propiedades del tipo englobado por el objeto <ph id="ph2">&lt;see cref="T:System.Reflection.TypeDelegator" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
          <source>An array of <ph id="ph1">&lt;see langword="PropertyInfo" /&gt;</ph> objects representing properties defined on this <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see langword="PropertyInfo" /&gt;</ph> que representa a las propiedades definidas en este <ph id="ph2">&lt;see langword="TypeDelegator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The property to get.</source>
          <target state="translated">Propiedad que se va a obtener.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A bitmask that affects the way in which the search is conducted.</source>
          <target state="translated">Máscara de bits que afecta al modo de realizar la búsqueda.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The value is a combination of zero or more bit flags from <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</source>
          <target state="translated">El valor es una combinación de cero o más marcas de bits de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects via reflection.</source>
          <target state="translated">Objeto que habilita el enlace, la conversión de tipos de argumentos, las llamadas a miembros y la recuperación de objetos <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> mediante reflexión.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usará el enlazador predeterminado.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>See <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">Vea <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The return type of the property.</source>
          <target state="translated">Tipo de valor devuelto de la propiedad.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A list of parameter types.</source>
          <target state="translated">Lista de tipos de parámetros.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>The list represents the number, order, and types of the parameters.</source>
          <target state="translated">La lista representa el número, la orden y los tipos de parámetros.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>Types cannot be null; use an appropriate <ph id="ph1">&lt;see langword="GetMethod" /&gt;</ph> method or an empty array to search for a method without parameters.</source>
          <target state="translated">Los tipos no pueden ser null; utilice un método <ph id="ph1">&lt;see langword="GetMethod" /&gt;</ph> apropiado o una matriz vacía para buscar un método sin parámetros.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.</source>
          <target state="translated">Matriz de la misma longitud que los tipos con elementos que representan a los atributos asociados a los parámetros del método que se va a obtener.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</source>
          <target state="translated">Cuando se invalida en una clase derivada, busca la propiedad especificada cuyos parámetros coincidan con los tipos y modificadores de argumentos especificados, usando las restricciones de enlace especificadas.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> object for the property that matches the specified criteria, or null if a match cannot be found.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> para la propiedad que coincide con los criterios especificados o null si no se encuentra ninguna coincidencia.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>Gets the GUID (globally unique identifier) of the implemented type.</source>
          <target state="translated">Obtiene el GUID (identificador global único) del tipo implementado.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>A GUID.</source>
          <target state="translated">Un GUID.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.</source>
          <target state="translated">El GUID (identificador único global) es una cadena de identificación exclusiva de 128 bits utilizada para identificar una clase o una interfaz.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.GUID">
          <source>It is primarily useful for interoperability between the Microsoft .NET Framework and COM.</source>
          <target state="translated">Es útil principalmente para la interoperabilidad entre Microsoft .NET Framework y COM.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
          <source>Gets a value indicating whether the current <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> encompasses or refers to another type; that is, whether the current <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is an array, a pointer or a ByRef.</source>
          <target state="translated">Obtiene un valor que indica si el objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> actual engloba o hace referencia a otro tipo; es decir, si el objeto <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> actual es una matriz, un puntero o un ByRef.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is an array, a pointer or a ByRef; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> es una matriz, un puntero o un ByRef; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The name of the member to invoke.</source>
          <target state="translated">Nombre del miembro que se va a invocar.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This may be a constructor, method, property, or field.</source>
          <target state="translated">Este puede ser un constructor, método, propiedad o campo.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If an empty string ("") is passed, the default member is invoked.</source>
          <target state="translated">Si se pasa una cadena vacía (""), se invoca al miembro predeterminado.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The invocation attribute.</source>
          <target state="translated">Atributo de invocación.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This must be one of the following <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> : <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Debe ser uno de los valores siguientes: <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>: <ph id="ph2">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph3">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph4">&lt;see langword="Static" /&gt;</ph>, <ph id="ph5">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph7">&lt;see langword="GetProperty" /&gt;</ph> o <ph id="ph8">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A suitable invocation attribute must be specified.</source>
          <target state="translated">Debe especificarse un atributo de invocación apropiado.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If a static member is to be invoked, the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag must be set.</source>
          <target state="translated">Si se va a invocar a un miembro estático, se debe establecer la marca <ph id="ph1">&lt;see langword="Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> objects via reflection.</source>
          <target state="translated">Objeto que habilita el enlace, la conversión de tipos de argumentos, las llamadas a miembros y la recuperación de objetos <ph id="ph1">&lt;see langword="MemberInfo" /&gt;</ph> mediante reflexión.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usará el enlazador predeterminado.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>See <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">Vea <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The object on which to invoke the specified member.</source>
          <target state="translated">Objeto donde debe invocarse al miembro especificado.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of type <ph id="ph1">&lt;see langword="Object" /&gt;</ph> that contains the number, order, and type of the parameters of the member to be invoked.</source>
          <target state="translated">Esta matriz de tipo <ph id="ph1">&lt;see langword="Object" /&gt;</ph> contiene el número, orden y tipo de los parámetros del miembro al que se va a invocar.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> contains an uninitialized <ph id="ph1">&lt;see langword="Object" /&gt;</ph>, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> contiene un elemento <ph id="ph1">&lt;see langword="Object" /&gt;</ph> no inicializado, se trata como vacío, que, con el enlazador predeterminado, puede ampliarse a 0; 0,0 o a una cadena.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterModifer" /&gt;</ph> that is the same length as <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>, with elements that represent the attributes associated with the arguments of the member to be invoked.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="ParameterModifer" /&gt;</ph> que tiene la misma longitud que <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> con elementos que representan los atributos asociados a los argumentos del miembro al que se va a invocar.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A parameter has attributes associated with it in the member's signature.</source>
          <target state="translated">Un parámetro tiene atributos asociados a él en la firma del miembro.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>For ByRef, use <ph id="ph1">&lt;see langword="ParameterModifer.ByRef" /&gt;</ph>, and for none, use <ph id="ph2">&lt;see langword="ParameterModifer.None" /&gt;</ph>.</source>
          <target state="translated">Para ByRef, utilice <ph id="ph1">&lt;see langword="ParameterModifer.ByRef" /&gt;</ph>, y para ninguno, utilice <ph id="ph2">&lt;see langword="ParameterModifer.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The default binder does exact matching on these.</source>
          <target state="translated">El enlazador predeterminado hace que ambos coincidan exactamente.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Attributes such as <ph id="ph1">&lt;see langword="In" /&gt;</ph> and <ph id="ph2">&lt;see langword="InOut" /&gt;</ph> are not used in binding, and can be viewed using <ph id="ph3">&lt;see langword="ParameterInfo" /&gt;</ph>.</source>
          <target state="translated">Los atributos como <ph id="ph1">&lt;see langword="In" /&gt;</ph> y <ph id="ph2">&lt;see langword="InOut" /&gt;</ph> no se utilizan para enlazar y se pueden ver mediante <ph id="ph3">&lt;see langword="ParameterInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An instance of <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">Instancia de <ph id="ph1">&lt;see langword="CultureInfo" /&gt;</ph> usada para regir la conversión de tipos.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>This is necessary, for example, to convert a string that represents 1000 to a <ph id="ph1">&lt;see langword="Double" /&gt;</ph> value, since 1000 is represented differently by different cultures.</source>
          <target state="translated">Esto es necesario, por ejemplo, para convertir una cadena que representa 1000 en un valor <ph id="ph1">&lt;see langword="Double" /&gt;</ph>, puesto que 1000 se representa de forma diferente en distintas referencias culturales.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> for the current thread's <ph id="ph3">&lt;see langword="CultureInfo" /&gt;</ph> is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>culture<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usa el elemento <ph id="ph2">&lt;see langword="CultureInfo" /&gt;</ph> del elemento <ph id="ph3">&lt;see langword="CultureInfo" /&gt;</ph> del subproceso actual.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An array of type <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing parameter names that match up, starting at element zero, with the <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept> array.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="String" /&gt;</ph> que contiene nombres de parámetro que coinciden, a partir del elemento cero, con la matriz <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>There must be no holes in the array.</source>
          <target state="translated">No debe haber lagunas en la matriz.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source><ph id="ph1">&lt;see langword="Length" /&gt;</ph> is greater than <bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Length" /&gt;</ph> es mayor que <bpt id="p1">&lt;c&gt;</bpt>namedParameters<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source><ph id="ph1">&lt;see langword="Length" /&gt;</ph>, the remaining parameters are filled in order.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Length" /&gt;</ph>, el resto de parámetros se rellenan en orden.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Invokes the specified member.</source>
          <target state="translated">Invoca el miembro especificado.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.</source>
          <target state="translated">El método que se va a invocar debe ser accesible y proporcionar la coincidencia más específica con la lista de argumentos dada, bajo las restricciones del enlazador y los atributos de invocación indicados.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> representing the return value of the invoked member.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Object" /&gt;</ph> que representa el valor devuelto del miembro invocado.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>A method will be invoked if both the following conditions are true:</source>
          <target state="translated">Un método se invocará si se cumplen las dos condiciones siguientes:</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).</source>
          <target state="translated">El número de parámetros en la declaración del método es igual al número de argumentos en la lista de argumentos especificada (a menos que se definan argumentos predeterminados en el miembro).</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The type of each arguments can be converted by the binder to the type of the parameter.</source>
          <target state="translated">El tipo de cada argumento se puede convertir por el enlazador al tipo del parámetro.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The binder will find all the matching methods.</source>
          <target state="translated">El enlazador encontrará todos los métodos de búsqueda de coincidencias.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>These methods are found based upon the type of binding requested (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>, <ph id="ph2">`BindingFlags.GetProperties`</ph>, and so on).</source>
          <target state="translated">Estos métodos se encuentran en función del tipo de enlace que se solicite (<ph id="ph1">`BindingFlags.MethodInvoke`</ph>, <ph id="ph2">`BindingFlags.GetProperties`</ph>, y así sucesivamente).</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</source>
          <target state="translated">El conjunto de métodos se filtra por el nombre, número de argumentos y un conjunto de modificadores de búsqueda definidos en el enlazador.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>After the method is selected, it will be invoked.</source>
          <target state="translated">Después de selecciona el método, se invocará.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Accessibility is checked at that point.</source>
          <target state="translated">En ese momento se comprueba la accesibilidad.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</source>
          <target state="translated">La búsqueda puede controlar qué conjunto de métodos que se buscan basándose en el atributo de accesibilidad asociado al método.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType&gt;</ph> method is responsible for selecting the method to be invoked.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType&gt;</ph> método es responsable de seleccionar el método que se debe invocar.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The default binder selects the most specific match.</source>
          <target state="translated">El enlazador predeterminado selecciona a la coincidencia más específica.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Se omiten las restricciones de acceso de código de plena confianza.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</source>
          <target state="translated">Es decir, propiedades, métodos, campos y constructores privados son accesibles y se invocan mediante la reflexión siempre que el código es de plena confianza.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>Currently, <ph id="ph1">`InvokeMember`</ph> performs the Microsoft .NET Framework reflection semantics for every type of object.</source>
          <target state="translated">Actualmente, <ph id="ph1">`InvokeMember`</ph> realiza la semántica de reflexión de Microsoft .NET Framework para cada tipo de objeto.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>If the member specified by name is an array and the <ph id="ph1">`BindingFlags.GetField`</ph> flag is set on <ph id="ph2">`invokeAttr`</ph>, the <ph id="ph3">`args`</ph> array specifies the elements whose values are to be returned.</source>
          <target state="translated">Si el miembro especificado por su nombre es una matriz y el <ph id="ph1">`BindingFlags.GetField`</ph> marca se establece en <ph id="ph2">`invokeAttr`</ph>, el <ph id="ph3">`args`</ph> matriz especifica los elementos cuyos valores se va a devolver.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>For example, the following call through <ph id="ph1">`Type`</ph> object <ph id="ph2">`t`</ph> returns the value of the first element of the string array MyArray, which is a member of the calling object:</source>
          <target state="translated">Por ejemplo, la siguiente llamada a través de <ph id="ph1">`Type`</ph> objeto <ph id="ph2">`t`</ph> devuelve el valor del primer elemento de la matriz de cadena MyArray, que es un miembro del objeto que realiza la llamada:</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>You can use <ph id="ph1">`InvokeMember`</ph> to set one or more elements of a member array.</source>
          <target state="translated">Puede utilizar <ph id="ph1">`InvokeMember`</ph> para establecer uno o más elementos de una matriz de miembros.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>All elements are set to the same value.</source>
          <target state="translated">Todos los elementos se establecen en el mismo valor.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>The <ph id="ph1">`args`</ph> array must be formatted as follows:</source>
          <target state="translated">El <ph id="ph1">`args`</ph> matriz debe tener el formato siguiente:</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
          <source>For example, to set the first member of MyArray from the previous example, the syntax is as follows:</source>
          <target state="translated">Por ejemplo, para establecer al primer miembro de MyArray del ejemplo anterior, la sintaxis es la siguiente:</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsArrayImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is an array.</source>
          <target state="translated">Devuelve un valor que indica si <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> es una matriz.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsArrayImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is an array; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> es una matriz; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>The type to check.</source>
          <target state="translated">Tipo que se va a comprobar.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Returns a value that indicates whether the specified type can be assigned to this type.</source>
          <target state="translated">Devuelve un valor que indica si el tipo especificado se puede asignar a este tipo.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified type can be assigned to this type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el tipo especificado puede asignarse a este tipo; si no, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsByRefImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is passed by reference.</source>
          <target state="translated">Devuelve un valor que indica si <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> se pasa por referencia.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsByRefImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is passed by reference; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> se pasa por referencia; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is a COM object.</source>
          <target state="translated">Devuelve un valor que indica si <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> es un objeto COM.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is a COM object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> es un objeto COM; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
          <source>Gets a value that indicates whether this object represents a constructed generic type.</source>
          <target state="translated">Obtiene un valor que indica si este objeto representa un tipo genérico construido.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this object represents a constructed generic type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si este objeto representa una definición de tipo genérico construido; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>Specifies whether to search this type's inheritance chain to find the attributes.</source>
          <target state="translated">Especifica si se debe realizar una búsqueda en la cadena de herencia de este tipo con el fin de encontrar los atributos.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>An array of custom attributes identified by type.</source>
          <target state="translated">Matriz de atributos personalizados identificados según el tipo.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>Indicates whether a custom attribute identified by <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is defined.</source>
          <target state="translated">Indica si se ha definido un atributo personalizado identificado mediante el objeto <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a custom attribute identified by <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph> is defined; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si está definido el atributo personalizado identificado por el <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
          <source>The custom attribute type cannot be loaded.</source>
          <target state="translated">No se puede cargar el tipo de atributo personalizado.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPointerImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is a pointer.</source>
          <target state="translated">Devuelve un valor que indica si <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> es un puntero.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPointerImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is a pointer; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> es un puntero; de lo contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
          <source>Returns a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> is one of the primitive types.</source>
          <target state="translated">Devuelve un valor que indica si <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> es uno de los tipos primitivos.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> is one of the primitive types; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> es uno de los tipos primitivos; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
          <source>Returns a value that indicates whether the type is a value type; that is, not a class or an interface.</source>
          <target state="translated">Devuelve un valor que indica si el tipo es un tipo de valor; es decir, ni una clase ni una interfaz.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a value type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el tipo es un tipo de valor; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>Gets a value that identifies this entity in metadata.</source>
          <target state="translated">Obtiene un valor que identifica esta entidad en metadatos.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>A value which, in combination with the module, uniquely identifies this entity in metadata.</source>
          <target state="translated">Un valor que, en combinación con el módulo, identifica de manera única esta entidad en metadatos.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>The tokens obtained using this property can be passed to the unmanaged reflection API.</source>
          <target state="translated">Los tokens obtenidos mediante esta propiedad se pueden pasar a la API de reflexión no administrada.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.MetadataToken">
          <source>For more information, see <bpt id="p1">[</bpt>Unmanaged Reflection API<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>API de reflexión no administrada<ept id="p1">](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Module">
          <source>Gets the module that contains the implemented type.</source>
          <target state="translated">Obtiene el módulo que contiene el tipo implementado.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Module">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> object representing the module of the implemented type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> que representa al módulo del tipo implementado.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Module">
          <source>A module is a loadable unit that can contain type declarations and implementations.</source>
          <target state="translated">Un módulo es una unidad cargable que puede contener declaraciones de tipos y las implementaciones.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Module">
          <source>Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.</source>
          <target state="translated">Los módulos contienen información suficiente para habilitar common language runtime buscar todos los bits de implementación cuando se carga el módulo.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Name">
          <source>Gets the name of the implemented type, with the path removed.</source>
          <target state="translated">Obtiene el nombre del tipo implementado, sin la ruta de acceso.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the type's non-qualified name.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph> contiene el nombre no completo del tipo.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>A string containing the name of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">Cadena que contiene el nombre del objeto <ph id="ph1">`TypeDelegator`</ph> actual.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>Only the simple name, not the fully qualified name, is returned.</source>
          <target state="translated">Se devuelve solo el nombre sencillo, no el nombre completo.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Name">
          <source>To get the name and the path, use <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;</ph>.</source>
          <target state="translated">Para obtener el nombre y la ruta de acceso, use <ph id="ph1">&lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>Gets the namespace of the implemented type.</source>
          <target state="translated">Obtiene el espacio de nombres del tipo implementado.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>A <ph id="ph1">&lt;see langword="String" /&gt;</ph> containing the type's namespace.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="String" /&gt;</ph> contiene el espacio de nombres del tipo.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>This property gets a string containing the namespace of the current <ph id="ph1">`TypeDelegator`</ph>.</source>
          <target state="translated">Esta propiedad obtiene una cadena que contiene el espacio de nombres del elemento actual <ph id="ph1">`TypeDelegator`</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.Namespace">
          <source>For example, if the <ph id="ph1">`TypeDelegator`</ph> is <ph id="ph2">&lt;xref:System.Reflection.TypeFilter&gt;</ph>, the returned namespace is <ph id="ph3">&lt;xref:System.Reflection&gt;</ph>.</source>
          <target state="translated">Por ejemplo, si la <ph id="ph1">`TypeDelegator`</ph> es <ph id="ph2">&lt;xref:System.Reflection.TypeFilter&gt;</ph>, el espacio de nombres devuelto es <ph id="ph3">&lt;xref:System.Reflection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>Gets a handle to the internal metadata representation of an implemented type.</source>
          <target state="translated">Obtiene un identificador para la representación de metadatos interna de un tipo implementado.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>A <ph id="ph1">&lt;see langword="RuntimeTypeHandle" /&gt;</ph> object.</source>
          <target state="translated">Un objeto <ph id="ph1">&lt;see langword="RuntimeTypeHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>A type handle is a unique integer value associated with each type.</source>
          <target state="translated">Un identificador de tipo es un valor entero único asociado a cada tipo.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.TypeHandle">
          <source>The handle is unique during the runtime.</source>
          <target state="translated">El identificador es único durante el tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="F:System.Reflection.TypeDelegator.typeImpl">
          <source>A value indicating type information.</source>
          <target state="translated">Valor que indica información acerca del tipo.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> that represents the implemented type.</source>
          <target state="translated">Obtiene el <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> subyacente que representa al tipo implementado.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
          <source>The underlying type.</source>
          <target state="translated">Tipo subyacente.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>