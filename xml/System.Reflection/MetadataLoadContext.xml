<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9aaf43973195666dd08ebb47e5dd2fc7f8617f14" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="64996706" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa un universo de objetos de tipo cargado de solo inspección cerrado. Cada MetadataLoadContext puede tener sus propias reglas de enlace y está aislada de todas las demás MetadataLoadContexts.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

Un `MetadataLoadContext` actúa como un diccionario que se enlaza a los nombres de ensamblado <xref:System.Reflection.Assembly> instancias que se cargaron previamente en el contexto o la necesidad de que se cargue.

Los ensamblados se tratan estrictamente como metadatos. No hay ninguna restricción sobre la carga de ensamblados en función de la plataforma de destino, la arquitectura de CPU o el tamaño del puntero. No hay ninguna restricción en el ensamblado que se designa como el ensamblado principal (**mscorlib**).

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">Instancia de <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</param>
        <param name="coreAssemblyName">El nombre del ensamblado que contiene los tipos principales como <see cref="T:System.Object" />. Normalmente, esto sería "mscorlib".</param>
        <summary>Crea un nuevo objeto <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el ensamblado que indica el ensamblado del sistema"" que aloja los tipos conocidos, como <see cref="T:System.Int32" />.</summary>
        <value>Instancia de <see cref="T:System.Reflection.Assembly" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

El ensamblado principal se trata de manera diferente a otros ensamblados porque las referencias a estos tipos conocidos no incluyen la referencia de ensamblado, a diferencia de los tipos normales.
            
Normalmente, este ensamblado se denomina "mscorlib" o "netstandard". Si no se encuentra el ensamblado principal, el valor será `null`, y muchos otros métodos de reflexión, incluidas aquellas que analizan las firmas de método, se producirá una excepción.
            
El `CoreAssembly` viene determinada por pasar la `coreAssemblyName` parámetro pasado a la <xref:System.Reflection.MetadataAssemblyResolver> constructor a la <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> método.

Si no hay ningún `coreAssemblyName` argumento se especificó en el constructor de <xref:System.Reflection.MetadataLoadContext>, a continuación, se usan los valores predeterminados, como "mscorlib", "System.Runtime" y "netstandard".
            
No es necesario que el ensamblado principal designado contienen directamente los tipos principales. Puede escribirlas reenvía a otros ensamblados. Por lo tanto, es perfectamente admisible que se usará la fachada mscorlib como el ensamblado principal designado.
            
Tenga en cuenta que <xref:System.Runtime> no es un ensamblado de core ideal porque excluye algunos de los tipos de atributos personalizados de pseudo relacionadas con la interoperabilidad, como <xref:System.Runtime.InteropServices.DllImportAttribute>. Sin embargo, se puede utilizar si no tiene ningún interés en esos atributos. La API CustomAttributes omitirá estos atributos si el ensamblado principal no incluye los tipos necesarios.
            
No se carga el ensamblado principal hasta que sea necesario. Las siguientes API no desencadenan la búsqueda para el ensamblado principal:

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>
            
Si no se encuentra un ensamblado principal o si el ensamblado principal no tiene tipos, esto afectará el comportamiento de la <xref:System.Reflection.MetadataLoadContext> como sigue:
            
* Las API que necesitan para analizar las firmas o TypeSpec y devolver los resultados como <xref:System.Type> objetos iniciará una excepción. Por ejemplo:

 * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
 * System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
 * <xref:System.Type.BaseType?displayProperty-nameWithType>
 * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>
            
* Las API que necesitan comparar tipos a tipos conocidos principales no iniciará una excepción y la comparación se evaluará como `false`. Por ejemplo, si no especifica un ensamblado principal, <xref:System.Type.IsPrimitive> devolverá `false` para todo, incluso tipos denominados <xref:System.Int32>. De forma similar, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> devolverá <xref:System.TypeCode.Object> para todo.
            
* Si una entidad de metadatos establece marcas que se muestran como un atributo personalizado pseudo-nombre, y el ensamblado principal no contiene el tipo de atributo personalizado pseudo-nombre, el constructor es necesario o cualquiera de los tipos de parámetro del constructor, el <xref:System.Reflection.MetadataLoadContext> no se iniciará. Omitirá el atributo personalizado desarrollado en la lista de atributos devueltos.
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera los recursos nativos (por ejemplo, bloqueos de archivos en archivos de ensamblado).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Tras la eliminación, no es seguro usar cualquiera <xref:System.Reflection.Assembly> objetos dispensados por la <xref:System.Reflection.MetadataLoadContext> o todos los objetos de reflexión dispensar aquellos <xref:System.Reflection.Assembly> objetos.

Aunque los objetos proporcionan por el <xref:System.Reflection.MetadataLoadContext> esforzarse producir una <xref:System.ObjectDisposedException>, esto no está garantizado.

Algunas API puede devolver fija o de datos anteriormente almacenados en caché. Obtener acceso a objetos *durante* un <xref:System.Reflection.MetadataLoadContext.Dispose%2A> llamada al método puede provocar una infracción de acceso no administrado y failfast.
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una instantánea de los ensamblados que se han cargado en atómica el <see cref="T:System.Reflection.MetadataLoadContext" />.</summary>
        <returns>Una colección enumerable de <see xref="T:System.Reflection.Assembly" /> objetos.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Instancia de <see cref="T:System.Reflection.AssemblyName" />.</param>
        <summary>Resuelve el nombre del ensamblado proporcionado a un ensamblado. Si un ensamblado previamente enlazado a este nombre, se devuelve ese ensamblado. En caso contrario, el <see cref="T:System.Reflection.MetadataLoadContext" /> llama especificado <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns>Instancia de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Tenga en cuenta que el comportamiento de este método coincide con el comportamiento de la <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> solucionar el evento, pero no coincide con el comportamiento de <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>. (Este último interrumpe sin generar su evento resolve.)
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Devuelve la resolución <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Un <see cref="T:System.String" /> que representa el nombre del ensamblado.</param>
        <summary>Resuelve el nombre del ensamblado proporcionado a un ensamblado. Si un ensamblado previamente enlazado a este nombre, se devuelve ese ensamblado. En caso contrario, el <see cref="T:System.Reflection.MetadataLoadContext" /> llama especificado <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</summary>
        <returns>Instancia de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
Tenga en cuenta que el comportamiento de este método coincide con el comportamiento de <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> solucionar el evento, pero no coincide con el comportamiento de < xxref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType >. (Este último interrumpe sin generar su evento resolve.)
]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Devuelve la resolución <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath">Un <see cref="T:System.String" /> que representa la ruta de acceso al ensamblado.</param>
        <summary>Carga un ensamblado desde una ruta de acceso específica en el disco y el nombre del ensamblado se enlaza a él en el <see cref="T:System.Reflection.MetadataLoadContext" />. Si un ensamblado anterior con el mismo nombre ya se cargó en el <see cref="T:System.Reflection.MetadataLoadContext" />, se devolverá el ensamblado anterior.</summary>
        <returns>Instancia de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Los dos ensamblados no tienen el mismo Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly">Un <see cref="T:System.Byte[]" /> que contiene un ensamblado.</param>
        <summary>Carga un ensamblado desde una matriz de bytes y el nombre del ensamblado se enlaza a él en el <see cref="T:System.Reflection.MetadataLoadContext" />. Si un ensamblado anterior con el mismo nombre ya se cargó en el <see cref="T:System.Reflection.MetadataLoadContext" />, se devolverá el ensamblado anterior.</summary>
        <returns>Instancia de <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">Los dos ensamblados no tienen el mismo Mvid.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly">Un <see cref="T:System.IO.Stream" /> que contiene un ensamblado.</param>
        <summary>Carga un ensamblado desde una secuencia y el nombre del ensamblado se enlaza a él en el <see cref="T:System.Reflection.MetadataLoadContext" />. Si un ensamblado anterior con el mismo nombre ya se cargó en el <see cref="T:System.Reflection.MetadataLoadContext" />, se devolverá el ensamblado anterior.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> El <xref:System.Reflection.MetadataLoadContext> toma posesión de la <xref:System.IO.Stream> pasan a este método. El propietario original no debe mutar su posición, desechar el <xref:System.IO.Stream>, o se supone que su posición permanecerá sin cambios.

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">Los dos ensamblados no tienen el mismo Mvid.</exception>
      </Docs>
    </Member>
  </Members>
</Type>