<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FieldAttributes.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e8bf52b4f1fa66ade72084eab3513fc567da3417.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8bf52b4f1fa66ade72084eab3513fc567da3417</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldAttributes">
          <source>Specifies flags that describe the attributes of a field.</source>
          <target state="translated">Especifica los marcadores que describen los atributos de un campo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source><ph id="ph1">`FieldAttributes`</ph> uses the value from <ph id="ph2">`FieldAccessMask`</ph> to mask off only the parts of the attribute value that pertain to the accessibility.</source>
          <target state="translated"><ph id="ph1">`FieldAttributes`</ph> usa el valor de <ph id="ph2">`FieldAccessMask`</ph> para enmascarar sólo las partes del valor del atributo que corresponden a la accesibilidad.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>For example, the following code determines if <ph id="ph1">`Attributes`</ph> has the public bit set.</source>
          <target state="translated">Por ejemplo, el código siguiente determina si <ph id="ph1">`Attributes`</ph> tiene el bit público conjunto.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>To get the <ph id="ph1">`FieldAttributes`</ph>, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para obtener la <ph id="ph1">`FieldAttributes`</ph>, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`FieldInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`Attributes`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`FieldInfo`</ph>, obtener el <ph id="ph2">`Attributes`</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>The enumerated value is a number representing the bitwise OR of the attributes implemented on the field.</source>
          <target state="translated">El valor enumerado es un número que representa la operación OR bit a bit de los atributos implementados en el campo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>In this example, three fields are built and the <ph id="ph1">`FieldAttributes`</ph> values are displayed.</source>
          <target state="translated">En este ejemplo, se generan tres campos y <ph id="ph1">`FieldAttributes`</ph> se muestran los valores.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>A <ph id="ph1">`FieldAttributes`</ph> value can contain more than one attribute, for example, both <ph id="ph2">`Public`</ph> and <ph id="ph3">`Literal`</ph>, as shown in the third field.</source>
          <target state="translated">A <ph id="ph1">`FieldAttributes`</ph> valor puede contener más de un atributo, por ejemplo, <ph id="ph2">`Public`</ph> y <ph id="ph3">`Literal`</ph>, tal y como se muestra en el tercer campo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Assembly">
          <source>Specifies that the field is accessible throughout the assembly.</source>
          <target state="translated">Especifica que se puede obtener acceso al campo en todo el ensamblado.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FamANDAssem">
          <source>Specifies that the field is accessible only by subtypes in this assembly.</source>
          <target state="translated">Especifica que sólo los subtipos de este ensamblado pueden obtener acceso al campo en cuestión.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Family">
          <source>Specifies that the field is accessible only by type and subtypes.</source>
          <target state="translated">Especifica que sólo se puede obtener acceso al campo mediante tipos y subtipos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FamORAssem">
          <source>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</source>
          <target state="translated">Especifica que se puede obtener acceso al campo mediante subtipos en cualquier parte, así como en todo el ensamblado.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FieldAccessMask">
          <source>Specifies the access level of a given field.</source>
          <target state="translated">Especifica el nivel de acceso de un campo dado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasDefault">
          <source>Specifies that the field has a default value.</source>
          <target state="translated">Especifica que el campo tiene un valor predeterminado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldMarshal">
          <source>Specifies that the field has marshaling information.</source>
          <target state="translated">Especifica que el campo contiene información de cálculo de referencias.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldRVA">
          <source>Specifies that the field has a relative virtual address (RVA).</source>
          <target state="translated">Especifica que el campo tiene una dirección relativa virtual (RVA).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldRVA">
          <source>The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</source>
          <target state="translated">La RVA es la ubicación del cuerpo del método que se encuentra en la imagen principal, como por ejemplo, una dirección relativa al principio del archivo de imagen donde se encuentra.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.InitOnly">
          <source>Specifies that the field is initialized only, and can be set only in the body of a constructor.</source>
          <target state="translated">Especifica que solo se inicializa el campo y solo se puede establecer en el cuerpo de un constructor.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Literal">
          <source>Specifies that the field's value is a compile-time (static or early bound) constant.</source>
          <target state="translated">Especifica que el valor del campo es una constante (estática o de enlace en tiempo de diseño) en tiempo de compilación.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Literal">
          <source>Any attempt to set it throws a <ph id="ph1">&lt;see cref="T:System.FieldAccessException" /&gt;</ph>.</source>
          <target state="translated">Cualquier intento de establecerlo produce una <ph id="ph1">&lt;see cref="T:System.FieldAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.NotSerialized">
          <source>Specifies that the field does not have to be serialized when the type is remoted.</source>
          <target state="translated">Especifica que no es necesario serializar el campo cuando el tipo tiene acceso remoto.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.PinvokeImpl">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para un uso futuro.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Private">
          <source>Specifies that the field is accessible only by the parent type.</source>
          <target state="translated">Especifica que sólo se puede obtener acceso al campo mediante los tipos principales.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.PrivateScope">
          <source>Specifies that the field cannot be referenced.</source>
          <target state="translated">Indica que no se pueden crear referencias al campo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Public">
          <source>Specifies that the field is accessible by any member for whom this scope is visible.</source>
          <target state="translated">Especifica que cualquier miembro, para el cual este ámbito sea visible, puede obtener acceso al campo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.ReservedMask">
          <source>Reserved.</source>
          <target state="translated">Reservado.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.RTSpecialName">
          <source>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</source>
          <target state="translated">Especifica que Common Language Runtime (API de metadatos internas) debe comprobar la codificación de nombres.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.SpecialName">
          <source>Specifies a special method, with the name describing how the method is special.</source>
          <target state="translated">Especifica un método especial y su nombre describe en qué sentido es especial dicho método.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Static">
          <source>Specifies that the field represents the defined type, or else it is per-instance.</source>
          <target state="translated">Especifica que el campo representa el tipo definido, o bien es un ejemplo.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>