<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PropertyInfo.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72b939962265f23522134c898a9c30b909307cd2e0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b939962265f23522134c898a9c30b909307cd2e0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Discovers the attributes of a property and provides access to property metadata.</source>
          <target state="translated">Detecta los atributos de una propiedad y proporciona acceso a sus metadatos.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties are logically the same as fields.</source>
          <target state="translated">Las propiedades son lógicamente, como campos.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>A property is a named aspect of an object's state whose value is typically accessible through <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors.</source>
          <target state="translated">Una propiedad es un aspecto con nombre del estado de un objeto cuyo valor es suele ser accesible a través de <ph id="ph1">`get`</ph> y <ph id="ph2">`set`</ph> descriptores de acceso.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Properties may be read-only, in which case a set routine is not supported.</source>
          <target state="translated">Propiedades pueden ser de solo lectura, en cuyo caso no se admite una rutina de conjunto.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>To determine whether a property is <ph id="ph1">`static`</ph>, you must obtain the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph3">`get`</ph> or <ph id="ph4">`set`</ph> accessor, by calling the <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> or the <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> method, and examine its <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> property.</source>
          <target state="translated">Para determinar si una propiedad es <ph id="ph1">`static`</ph>, debe obtener el <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> para el <ph id="ph3">`get`</ph> o <ph id="ph4">`set`</ph> descriptor de acceso, mediante una llamada a la <ph id="ph5">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A&gt;</ph> o <ph id="ph6">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A&gt;</ph> método y examinar su <ph id="ph7">&lt;xref:System.Reflection.MethodBase.IsStatic%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Several methods in this class assume that the <ph id="ph1">`get`</ph> accessor and <ph id="ph2">`set`</ph> accessor methods of a property have certain formats.</source>
          <target state="translated">Varios métodos de esta clase asume que el <ph id="ph1">`get`</ph> descriptor de acceso y <ph id="ph2">`set`</ph> métodos de descriptor de acceso de una propiedad tienen un formato determinado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The signatures of the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must match the following convention:</source>
          <target state="translated">Las firmas de los <ph id="ph1">`get`</ph> y <ph id="ph2">`set`</ph> métodos deben coincidir con la convención siguiente:</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The return type of the <ph id="ph1">`get`</ph> method and the last argument of the <ph id="ph2">`set`</ph> method must be identical.</source>
          <target state="translated">El tipo de valor devuelto de la <ph id="ph1">`get`</ph> método y el último argumento de la <ph id="ph2">`set`</ph> método debe ser idéntico.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This is the type of the property.</source>
          <target state="translated">Este es el tipo de la propiedad.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>The <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> methods must have the same number, type, and order of indices.</source>
          <target state="translated">El <ph id="ph1">`get`</ph> y <ph id="ph2">`set`</ph> métodos deben tener el mismo número, tipo y orden de índices.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>If this format is not followed, the behavior of the <ph id="ph1">`GetValue`</ph> and <ph id="ph2">`SetValue`</ph> methods is undefined.</source>
          <target state="translated">Si no se sigue este formato, el comportamiento de la <ph id="ph1">`GetValue`</ph> y <ph id="ph2">`SetValue`</ph> métodos es indefinido.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`PropertyInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">Al llamar a <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> en <ph id="ph2">`PropertyInfo`</ph> cuando el <ph id="ph3">`inherit`</ph> parámetro de <ph id="ph4">`GetCustomAttributes`</ph> es <ph id="ph5">`true`</ph> , no se recorre la jerarquía de tipos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> para heredar los atributos personalizados.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">Este ejemplo muestra cómo usar varias clases de reflexión para analizar los metadatos contenidos en un ensamblado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This example generates about 55,000 lines of data, which you can redirect to a text file at the command prompt, as follows: <bpt id="p1">**</bpt>example.exe &gt; propertyinfo.txt<ept id="p1">**</ept></source>
          <target state="translated">Este ejemplo genera aproximadamente 55.000 líneas de datos, que puede redirigir a un archivo de texto en el símbolo del sistema, como se indica a continuación: <bpt id="p1">**</bpt>example.exe &gt; infopropiedad.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">de plena confianza para los herederos.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">Esta clase no puede heredarse mediante código de confianza parcial.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>This type is thread safe.</source>
          <target state="translated">Este tipo es seguro para la ejecución de subprocesos.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.PropertyInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</source>
          <target state="translated">Al heredar de <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, debe reemplazar los miembros siguientes: <ph id="ph2">&lt;see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /&gt;</ph>, <ph id="ph4">&lt;see cref="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)" /&gt;</ph>, <ph id="ph5">&lt;see cref="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)" /&gt;</ph>, <ph id="ph6">&lt;see cref="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)" /&gt;</ph>, y <ph id="ph7">&lt;see cref="M:System.Reflection.PropertyInfo.GetIndexParameters" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Gets the attributes for this property.</source>
          <target state="translated">Obtiene los atributos de esta propiedad.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes of this property.</source>
          <target state="translated">Atributos de esta propiedad.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property returns the attributes associated with the property represented by this <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propiedad devuelve los atributos asociados a la propiedad representada por este <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>The attributes are primarily modifiers applied by a compiler when creating a property; they indicate whether a property is the default property, a <ph id="ph1">`SpecialName`</ph> property, and so on.</source>
          <target state="translated">Los atributos son principalmente los modificadores que se aplican mediante un compilador al crear una propiedad; indican si una propiedad es la propiedad predeterminada, una <ph id="ph1">`SpecialName`</ph> propiedad y así sucesivamente.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Note that, for almost all properties found in types in the .NET Framework class library, the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property is <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Tenga en cuenta que, para casi todas las propiedades que se encuentran en los tipos en la biblioteca de clases de .NET Framework, el valor de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propiedad es <ph id="ph2">&lt;xref:System.Reflection.PropertyAttributes.None?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>In most cases, you probably want to retrieve the custom attributes associated with a property.</source>
          <target state="translated">En la mayoría de los casos, probablemente desee recuperar los atributos personalizados asociados a una propiedad.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To do this, retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> property, or call one of the overloads of the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method.</source>
          <target state="translated">Para ello, recuperar el valor de la <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.CustomAttributes%2A&gt;</ph> propiedad o llamada a una de las sobrecargas de los <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>To get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property:</source>
          <target state="translated">Para obtener la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propiedad:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type to which the property belongs.</source>
          <target state="translated">Obtener un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el tipo al que pertenece la propiedad.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Get the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object by calling an overload of the <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Obtener la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto mediante una llamada a una sobrecarga de la <ph id="ph2">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>Retrieve the property's attributes from the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">Recuperar los atributos de la propiedad de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.Attributes%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.Attributes">
          <source>You can define the attributes of a property for a type created dynamically using reflection emit by calling an overload of the <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> method and supplying a value for the <ph id="ph2">`attributes`</ph> argument.</source>
          <target state="translated">Puede definir los atributos de una propiedad para un tipo creado dinámicamente mediante la reflexión emitir mediante una llamada a una sobrecarga de la <ph id="ph1">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A&gt;</ph> método y proporcionar un valor para el <ph id="ph2">`attributes`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>Gets a value indicating whether the property can be read.</source>
          <target state="translated">Obtiene un valor que indica si se puede leer la propiedad.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si se puede leer esta propiedad; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>If the property does not have a <ph id="ph1">`get`</ph> accessor, it cannot be read.</source>
          <target state="translated">Si la propiedad no tiene un <ph id="ph1">`get`</ph> descriptor de acceso, no se puede leer.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>To get the <ph id="ph1">`CanRead`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para obtener la <ph id="ph1">`CanRead`</ph> propiedad, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`CanRead`</ph> value.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, obtener el <ph id="ph2">`CanRead`</ph> valor.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The following example defines two properties.</source>
          <target state="translated">El siguiente ejemplo define dos propiedades.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The first property is readable and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">La primera propiedad es legible y <ph id="ph1">`CanRead`</ph> propiedad es <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanRead">
          <source>The second property is not readable (there is no get accessor), and the <ph id="ph1">`CanRead`</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">La segunda propiedad no es legible (no hay ningún descriptor de acceso get) y el <ph id="ph1">`CanRead`</ph> propiedad es <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Gets a value indicating whether the property can be written to.</source>
          <target state="translated">Obtiene un valor que indica si se puede escribir en la propiedad.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property can be written to; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si se puede escribir en esta propiedad; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> returns <ph id="ph2">`true`</ph> if the property has a <ph id="ph3">`set`</ph> accessor, even if the accessor is <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (or <ph id="ph6">`Friend`</ph> in Visual Basic), or <ph id="ph7">`protected`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> Devuelve <ph id="ph2">`true`</ph> si la propiedad tiene un <ph id="ph3">`set`</ph> descriptor de acceso, incluso si el descriptor de acceso está <ph id="ph4">`private`</ph>, <ph id="ph5">`internal`</ph> (o <ph id="ph6">`Friend`</ph> en Visual Basic), o <ph id="ph7">`protected`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>If the property does not have a <ph id="ph1">`set`</ph> accessor, the method returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Si la propiedad no tiene un <ph id="ph1">`set`</ph> descriptor de acceso, el método devuelve <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>To get the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property:</source>
          <target state="translated">Para obtener el valor de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> propiedad:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Get the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object of the type that includes the property.</source>
          <target state="translated">Obtener la <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto del tipo que incluye la propiedad.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Call the <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> to get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property.</source>
          <target state="translated">Llame a la <ph id="ph1">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> para obtener la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto que representa la propiedad.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">Recuperar el valor de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.CanWrite%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The following example defines two properties.</source>
          <target state="translated">El siguiente ejemplo define dos propiedades.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The first property is writable and the <ph id="ph1">`CanWrite`</ph> property is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">La primera propiedad es grabable y <ph id="ph1">`CanWrite`</ph> propiedad es <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.CanWrite">
          <source>The second property is not writable (there is no <ph id="ph1">`set`</ph> accessor), and the <ph id="ph2">`CanWrite`</ph> property is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">La segunda propiedad no es grabable (no hay ningún <ph id="ph1">`set`</ph> descriptor de acceso) y el <ph id="ph2">`CanWrite`</ph> propiedad es <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que se va a comparar con esta instancia o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> es igual al tipo y valor de esta instancia; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns an array of the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors on this property.</source>
          <target state="translated">Devuelve una matriz de los descriptores de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> y <ph id="ph2">&lt;see langword="set" /&gt;</ph> en esta propiedad.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Returns an array whose elements reflect the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Devuelve una matriz cuyos elementos reflejan los descriptores de acceso públicos <ph id="ph1">&lt;see langword="get" /&gt;</ph> y <ph id="ph2">&lt;see langword="set" /&gt;</ph> de la propiedad que refleja la instancia actual.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> objects that reflect the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> and <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance, if found; otherwise, this method returns an array with zero (0) elements.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> que refleja los descriptores de acceso públicos <ph id="ph2">&lt;see langword="get" /&gt;</ph> y <ph id="ph3">&lt;see langword="set" /&gt;</ph> de la propiedad que refleja la instancia actual, si se encuentran; en caso contrario, este método devuelve una matriz con cero (0) elementos.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Para llamar a la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> método:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Obtener un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa la clase.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Type&gt;</ph> de objetos, obtener la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto, llame a la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>The following example retrieves the public accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">En el ejemplo siguiente se recuperan los descriptores de acceso públicos de la <ph id="ph1">`ClassWithProperty.Caption`</ph> propiedad y muestra información acerca de ellos.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">También se llama el <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> método establecedor para establecer el valor de propiedad y el captador se recuperará el valor de propiedad.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Indicates whether non-public methods should be returned in the returned array.</source>
          <target state="translated">Indica si se deben devolver métodos no públicos en la matriz devuelta.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods are to be included; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si los métodos no públicos deben incluirse; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Returns an array whose elements reflect the public and, if specified, non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Devuelve una matriz cuyos elementos reflejan los descriptores de acceso públicos y, si se especifica, no públicos, <ph id="ph1">&lt;see langword="get" /&gt;</ph> y <ph id="ph2">&lt;see langword="set" /&gt;</ph> de la propiedad que refleja la instancia actual.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>An array whose elements reflect the <ph id="ph1">&lt;see langword="get" /&gt;</ph> and <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessors of the property reflected by the current instance.</source>
          <target state="translated">Matriz cuyos elementos reflejan los descriptores de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> y <ph id="ph2">&lt;see langword="set" /&gt;</ph> de la propiedad que refleja la instancia actual.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, this array contains public and non-public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>, esta matriz contiene los descriptores de acceso públicos y no públicos <ph id="ph3">&lt;see langword="get" /&gt;</ph> y <ph id="ph4">&lt;see langword="set" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph>, this array contains only public <ph id="ph3">&lt;see langword="get" /&gt;</ph> and <ph id="ph4">&lt;see langword="set" /&gt;</ph> accessors.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph2">&lt;see langword="false" /&gt;</ph>, esta matriz contiene solo los descriptores de acceso públicos <ph id="ph3">&lt;see langword="get" /&gt;</ph> y <ph id="ph4">&lt;see langword="set" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>If no accessors with the specified visibility are found, this method returns an array with zero (0) elements.</source>
          <target state="translated">Si no se encuentran descriptores de acceso con la visibilidad especificada, este método devuelve una matriz con cero (0) elementos.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>To call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method:</source>
          <target state="translated">Para llamar a la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> método:</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Obtener un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa la clase.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Type&gt;</ph> de objetos, obtener la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto, llame a la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetAccessors%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>The following example retrieves the accessors of the <ph id="ph1">`ClassWithProperty.Caption`</ph> property and displays information about them.</source>
          <target state="translated">En el ejemplo siguiente se recuperan los descriptores de acceso de la <ph id="ph1">`ClassWithProperty.Caption`</ph> propiedad y muestra información acerca de ellos.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>It also calls the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> method of the setter to set the property value and of the getter to retrieve the property value.</source>
          <target state="translated">También se llama el <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%2A&gt;</ph> método establecedor para establecer el valor de propiedad y el captador se recuperará el valor de propiedad.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Devuelve un valor literal asociado a la propiedad mediante un compilador.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que contiene el valor literal asociado a la propiedad.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si el valor literal es un tipo de clase con un valor de elemento de cero, el valor devuelto es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Este método se proporciona para los diseñadores de compiladores administrados y analizadores de código.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Do not use this method in the reflection-only context, because it might cause code to execute.</source>
          <target state="translated">No utilice este método en el contexto de solo reflexión, porque es posible que el código se ejecute.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> method instead.</source>
          <target state="translated">Use el método <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetRawConstantValue%2A&gt;</ph> en su lugar.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">En los metadatos no administrado, la tabla Constant se utiliza para almacenar valores constantes para campos, parámetros y propiedades.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Información constante no afecta directamente al comportamiento en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">Los compiladores inspeccionan esta información en tiempo de compilación, al importar los metadatos.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Si se utiliza, el valor de una constante se incrusta en la secuencia de lenguaje intermedio (MSIL) de Microsoft que el compilador emite.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">No hay ninguna instrucción MSIL que puede utilizarse para tener acceso a la tabla Constant en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Para obtener más información sobre valores constantes y la tabla de constantes, consulte la documentación de ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentación está disponible en línea; vea <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">La tabla de constantes de metadatos no administrados no contiene un valor de constante para la propiedad actual.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">El tipo del valor no es uno de los tipos permitidos por la Common Language Specification (CLS).</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetConstantValue">
          <source>See the ECMA Partition II specification, Metadata.</source>
          <target state="translated">Consulte la especificación de ECMA Partition II, metadatos.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> que representa el descriptor de acceso <ph id="ph2">&lt;see langword="get" /&gt;</ph> de esta propiedad.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Devuelve el descriptor de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> público de esta propiedad.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public or does not exist.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> que representa el descriptor de acceso <ph id="ph2">&lt;see langword="get" /&gt;</ph> público de esta propiedad, o <ph id="ph3">&lt;see langword="null" /&gt;</ph> si el descriptor de acceso <ph id="ph4">&lt;see langword="get" /&gt;</ph> no es público o no existe.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetGetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se trata de un método útil que proporciona una implementación del abstracto <ph id="ph1">`GetGetMethod`</ph> método con el <ph id="ph2">`nonPublic`</ph> parámetro establecido en <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`GetGetMethod`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use el <ph id="ph2">`GetGetMethod`</ph> método.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Indicates whether a non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor should be returned.</source>
          <target state="translated">Indica si un descriptor de acceso no público <ph id="ph1">&lt;see langword="get" /&gt;</ph> se debe devolver.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se debe devolver un descriptor de acceso no público; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the public or non-public <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, devuelve el descriptor de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> público o no público de esta propiedad.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor for this property, if <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> que representa el descriptor de acceso <ph id="ph2">&lt;see langword="get" /&gt;</ph> de esta propiedad si <ph id="ph3">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> if <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph3">&lt;see langword="false" /&gt;</ph> and the <ph id="ph4">&lt;see langword="get" /&gt;</ph> accessor is non-public, or if <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph6">&lt;see langword="true" /&gt;</ph> but no <ph id="ph7">&lt;see langword="get" /&gt;</ph> accessors exist.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see langword="null" /&gt;</ph> si <ph id="ph2">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph3">&lt;see langword="false" /&gt;</ph> y el descriptor de acceso <ph id="ph4">&lt;see langword="get" /&gt;</ph> es no público, o si <ph id="ph5">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph6">&lt;see langword="true" /&gt;</ph> pero no existe ningún descriptor de acceso <ph id="ph7">&lt;see langword="get" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>This property is the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> representing the get accessor.</source>
          <target state="translated">Esta propiedad es el <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> que representa el descriptor de acceso get.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetGetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`GetGetMethod`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">`GetGetMethod`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use el <ph id="ph2">`GetGetMethod`</ph> método.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The following example displays the public or non-public <ph id="ph1">`get`</ph> accessor for the specified property.</source>
          <target state="translated">En el ejemplo siguiente se muestra el público o no público <ph id="ph1">`get`</ph> descriptor de acceso para la propiedad especificada.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">El método solicitado no es público y el autor de llamada no tiene <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> para reflejar en este método no público.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Devuelve el código hash de esta instancia.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Código hash de un entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>When overridden in a derived class, returns an array of all the index parameters for the property.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, devuelve una matriz de todos los parámetros de índice de la propiedad.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>An array of type <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> containing the parameters for the indexes.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see langword="ParameterInfo" /&gt;</ph> que contiene los parámetros de los índices.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>If the property is not indexed, the array has 0 (zero) elements.</source>
          <target state="translated">Si la propiedad no se indiza, la matriz tiene 0 (cero) elementos.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Extract any required parameter information from the returned array.</source>
          <target state="translated">Extraer información de parámetro necesario de la matriz devuelta.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>To use the <ph id="ph1">`GetIndexParameters`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`GetIndexParameters`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetIndexParameters`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, use el <ph id="ph2">`GetIndexParameters`</ph> método.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>The following example displays the index parameters of the specified property.</source>
          <target state="translated">En el ejemplo siguiente se muestra los parámetros de índice de la propiedad especificada.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetIndexParameters">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Obtiene el descriptor de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> de esta propiedad.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.GetMethod">
          <source>The <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Descriptor de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> de esta propiedad.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>Returns an array of types representing the optional custom modifiers of the property.</source>
          <target state="translated">Devuelve una matriz de tipos que representan los modificadores personalizados opcionales de la propiedad.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que identifican los modificadores personalizados opcionales de la propiedad actual, como <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> se proporcionan métodos para los diseñadores de compiladores administrados.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Para obtener más información sobre los modificadores personalizados, vea <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> y relacionados con las clases en el <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> espacio de nombres y la especificación de metadatos en la documentación de ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentación está disponible en línea; vea <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the property by a compiler.</source>
          <target state="translated">Devuelve un valor literal asociado a la propiedad mediante un compilador.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que contiene el valor literal asociado a la propiedad.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si el valor literal es un tipo de clase con un valor de elemento de cero, el valor devuelto es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">Este método se proporciona para los diseñadores de compiladores administrados y analizadores de código.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">Este método puede utilizarse en el contexto de ejecución y el contexto de solo reflexión.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">En los metadatos no administrado, la tabla Constant se utiliza para almacenar valores constantes para campos, parámetros y propiedades.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">Información constante no afecta directamente al comportamiento en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">Los compiladores inspeccionan esta información en tiempo de compilación, al importar los metadatos.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">Si se utiliza, el valor de una constante se incrusta en la secuencia de lenguaje intermedio (MSIL) de Microsoft que el compilador emite.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">No hay ninguna instrucción MSIL que puede utilizarse para tener acceso a la tabla Constant en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">Para obtener más información sobre valores constantes y la tabla de constantes, consulte la documentación de ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentación está disponible en línea; vea <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current property.</source>
          <target state="translated">La tabla de constantes de metadatos no administrados no contiene un valor de constante para la propiedad actual.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">El tipo del valor no es uno de los tipos permitidos por la Common Language Specification (CLS).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification, Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">Vea la especificación de ECMA Partition II, formato lógico de metadatos: otras estructuras, tipos de elementos usados en las firmas.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>Returns an array of types representing the required custom modifiers of the property.</source>
          <target state="translated">Devuelve una matriz de tipos que representan los modificadores personalizados necesarios de la propiedad.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que identifican los modificadores personalizados necesarios de la propiedad actual, como <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetOptionalCustomModifiers%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetRequiredCustomModifiers%2A&gt;</ph> se proporcionan métodos para los diseñadores de compiladores administrados.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">Para obtener más información sobre los modificadores personalizados, vea <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> y relacionados con las clases en el <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> espacio de nombres y la especificación de metadatos en la documentación de ECMA Partition II.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">La documentación está disponible en línea; vea <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> representing the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> que representa el descriptor de acceso <ph id="ph2">&lt;see langword="set" /&gt;</ph> de esta propiedad.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Returns the public <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Devuelve el descriptor de acceso <ph id="ph1">&lt;see langword="set" /&gt;</ph> público de esta propiedad.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object representing the <ph id="ph2">&lt;see langword="Set" /&gt;</ph> method for this property if the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public, or <ph id="ph4">&lt;see langword="null" /&gt;</ph> if the <ph id="ph5">&lt;see langword="set" /&gt;</ph> accessor is not public.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> que representa el método <ph id="ph2">&lt;see langword="Set" /&gt;</ph> de esta propiedad si el descriptor de acceso <ph id="ph3">&lt;see langword="set" /&gt;</ph> es público, o <ph id="ph4">&lt;see langword="null" /&gt;</ph> si el descriptor de acceso <ph id="ph5">&lt;see langword="set" /&gt;</ph> no es público.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetSetMethod`</ph> method with the <ph id="ph2">`nonPublic`</ph> parameter set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se trata de un método útil que proporciona una implementación del abstracto <ph id="ph1">`GetSetMethod`</ph> método con el <ph id="ph2">`nonPublic`</ph> parámetro establecido en <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`GetSetMethod`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, use el <ph id="ph2">`GetSetMethod`</ph> método.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Indicates whether the accessor should be returned if it is non-public.</source>
          <target state="translated">Indica si se debe devolver el descriptor de acceso si es no público.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a non-public accessor is to be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se debe devolver un descriptor de acceso no público; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, devuelve el descriptor de acceso <ph id="ph1">&lt;see langword="set" /&gt;</ph> de esta propiedad.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>This property's <ph id="ph1">&lt;see langword="Set" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">El método <ph id="ph1">&lt;see langword="Set" /&gt;</ph> de esta propiedad, o <ph id="ph2">&lt;see langword="null" /&gt;</ph>, como se muestra en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condition</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Condición</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> The <ph id="ph5">&lt;see langword="Set" /&gt;</ph> method for this property.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Método <ph id="ph5">&lt;see langword="Set" /&gt;</ph> de esta propiedad.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is public.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> El descriptor de acceso <ph id="ph3">&lt;see langword="set" /&gt;</ph> es público.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph> y el descriptor de acceso <ph id="ph3">&lt;see langword="set" /&gt;</ph> no es público.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph7">&lt;see langword="true" /&gt;</ph>, but the property is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="null" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph><ph id="ph6">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph7">&lt;see langword="true" /&gt;</ph>, pero la propiedad es de solo lectura.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="false" /&gt;</ph> and the <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor is non-public.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> es <ph id="ph2">&lt;see langword="false" /&gt;</ph> y el descriptor de acceso <ph id="ph3">&lt;see langword="set" /&gt;</ph> no es público.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>There is no <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">No hay descriptor de acceso <ph id="ph1">&lt;see langword="set" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>To use the <ph id="ph1">`GetSetMethod`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`GetSetMethod`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetSetMethod`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, use el <ph id="ph2">`GetSetMethod`</ph> método.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The following example displays the <ph id="ph1">`set`</ph> accessor for the specified property.</source>
          <target state="translated">En el ejemplo siguiente se muestra el <ph id="ph1">`set`</ph> descriptor de acceso para la propiedad especificada.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>The requested method is non-public and the caller does not have <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> to reflect on this non-public method.</source>
          <target state="translated">El método solicitado no es público y el autor de llamada no tiene <ph id="ph1">&lt;see cref="T:System.Security.Permissions.ReflectionPermission" /&gt;</ph> para reflejar en este método no público.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Devuelve el valor de propiedad de un objeto especificado.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Objeto cuyo valor de propiedad se va a devolver.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>Returns the property value of a specified object.</source>
          <target state="translated">Devuelve el valor de propiedad de un objeto especificado.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The property value of the specified object.</source>
          <target state="translated">Valor de propiedad del objeto especificado.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> overload to retrieve the value of a non-indexed property; if you try to retrieve the value of an indexed property, the method throws a <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> exception.</source>
          <target state="translated">Se llama a la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%29&gt;</ph> sobrecarga para recuperar el valor de una propiedad no indizadas; si se intenta recuperar el valor de una propiedad indizada, el método produce una <ph id="ph2">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>You can determine whether a property is indexed or not by calling the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Puede determinar si una propiedad está indizada o no mediante una llamada a la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>If the length of the returned <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> array is zero, the property is not indexed.</source>
          <target state="translated">Si la longitud de devuelto <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> matriz es cero, la propiedad no está indizada.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parameter set to <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, the <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> set to <ph id="ph5">`null`</ph>, the object array of index values set to <ph id="ph6">`null`</ph>, and the <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> set to <ph id="ph8">`null`</ph>.</source>
          <target state="translated">Se trata de un método útil que proporciona una implementación del abstracto <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> método con el <ph id="ph2">&lt;xref:System.Reflection.BindingFlags&gt;</ph> parámetro establecido en <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph>, el <ph id="ph4">&lt;xref:System.Reflection.Binder&gt;</ph> establecido en <ph id="ph5">`null`</ph>, el objeto de matriz de valores de índice establecido en <ph id="ph6">`null`</ph>y el <ph id="ph7">&lt;xref:System.Globalization.CultureInfo&gt;</ph> establecido en <ph id="ph8">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The following example defines a <ph id="ph1">`Planet`</ph> class that has two properties: <ph id="ph2">`Name`</ph>, the name of the planet; and <ph id="ph3">`Distance`</ph>, the planet's distance from Earth.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`Planet`</ph> clase que tiene dos propiedades: <ph id="ph2">`Name`</ph>, el nombre del planeta; y <ph id="ph3">`Distance`</ph>, distancia del planeta desde la tierra.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
          <source>The example instantiates a <ph id="ph1">`Planet`</ph> object that represents the planet Jupiter and passes it to a <ph id="ph2">`GetPropertyValues`</ph> method that displays information about the properties and uses the <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> method to get the value of each <ph id="ph4">`Planet`</ph> property.</source>
          <target state="translated">El ejemplo crea un <ph id="ph1">`Planet`</ph> objeto que representa el planeta Jupiter y lo pasa a un <ph id="ph2">`GetPropertyValues`</ph> método que muestra información sobre las propiedades y los utiliza el <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetValue%2A&gt;</ph> método para obtener el valor de cada <ph id="ph4">`Planet`</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Objeto cuyo valor de propiedad se va a devolver.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valores de índice opcionales para propiedades indizadas.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The indexes of indexed properties are zero-based.</source>
          <target state="translated">Los índices de las propiedades indizadas son de base cero.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Este valor debe ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para propiedades no indizadas.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Returns the property value of a specified object with optional index values for indexed properties.</source>
          <target state="translated">Devuelve el valor de propiedad de un objeto especificado con valores de índice opcionales para las propiedades indizadas.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property value of the specified object.</source>
          <target state="translated">Valor de propiedad del objeto especificado.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar si una propiedad está indizada, use la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>This is a convenience method that provides an implementation for the abstract <ph id="ph1">`GetValue`</ph> method with a <ph id="ph2">`BindingFlags`</ph> parameter of <ph id="ph3">`Default`</ph>, the <ph id="ph4">`Binder`</ph> set to <ph id="ph5">`null`</ph>, and the <ph id="ph6">`CultureInfo`</ph> set to <ph id="ph7">`null`</ph>.</source>
          <target state="translated">Se trata de un método útil que proporciona una implementación del abstracto <ph id="ph1">`GetValue`</ph> método con un <ph id="ph2">`BindingFlags`</ph> parámetro de <ph id="ph3">`Default`</ph>, el <ph id="ph4">`Binder`</ph> establecido en <ph id="ph5">`null`</ph>y el <ph id="ph6">`CultureInfo`</ph> establecido en <ph id="ph7">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Como las propiedades estáticas pertenecen al tipo, los objetos no individuales, obtener propiedades estáticas pasando <ph id="ph1">`null`</ph> como argumento del objeto.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Por ejemplo, utilice el código siguiente para obtener el método estático <ph id="ph1">`CurrentCulture`</ph> propiedad de <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`GetValue`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, use el <ph id="ph2">`GetValue`</ph> método.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este método se puede utilizar para tener acceso a miembros no públicos si se ha concedido el autor de llamada <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> marca y, si el conjunto de permisos de los miembros no públicos se restringe al llamador conceda conjunto o un subconjunto de los mismos.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>consideraciones de seguridad para la reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The following example shows how to get the value of an indexed property.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo obtener el valor de una propiedad indizada.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> property is the default property (the indexer in C#) of the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.String.Chars%2A?displayProperty=nameWithType&gt;</ph> es la propiedad predeterminada (el indizador en C#) de la <ph id="ph2">&lt;xref:System.String&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no contiene el tipo de argumentos necesario.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">No se encuentra el descriptor de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> de la propiedad.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">En <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET para aplicaciones de la Tienda Windows<ept id="p1">&lt;/see&gt;</ept> o la <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Biblioteca de clases portable<ept id="p2">&lt;/see&gt;</ept>, capture <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> en su lugar.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia pero <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">El número de parámetros de <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no coincide con el número de parámetros que toma la propiedad indexada.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">En <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET para aplicaciones de la Tienda Windows<ept id="p1">&lt;/see&gt;</ept> o la <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Biblioteca de clases portable<ept id="p2">&lt;/see&gt;</ept>, capture en su lugar la excepción de clase base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Error al recuperar el valor de la propiedad.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Por ejemplo, un valor de índice especificado para una propiedad indizada está fuera del intervalo.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indica el motivo del error.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be returned.</source>
          <target state="translated">Objeto cuyo valor de propiedad se va a devolver.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, and <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Una combinación bit a bit de los miembros de enumeración siguientes que especifican el atributo de invocación: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> y <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">Debe especificarse un atributo de invocación apropiado.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Por ejemplo, para llamar a un miembro estático, establezca la marca <ph id="ph1">&lt;see langword="Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Objeto que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> mediante reflexión.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usará el enlazador predeterminado.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valores de índice opcionales para propiedades indizadas.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Este valor debe ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para propiedades no indizadas.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Referencia cultural para la que se va a localizar el recurso.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Si no se encuentra el recurso correspondiente a esta referencia cultural, se llamará sucesivamente a la propiedad <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> para buscar una coincidencia.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Si este valor es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, la información específica de la referencia cultural se obtiene de la propiedad <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, returns the property value of a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, devuelve el valor de propiedad de un objeto especificado que tiene el enlace, el índice y la información específica de la referencia cultural especificados.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property value of the specified object.</source>
          <target state="translated">Valor de propiedad del objeto especificado.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar si una propiedad está indizada, use la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Because static properties belong to the type, not individual objects, get static properties by passing <ph id="ph1">`null`</ph> as the object argument.</source>
          <target state="translated">Como las propiedades estáticas pertenecen al tipo, los objetos no individuales, obtener propiedades estáticas pasando <ph id="ph1">`null`</ph> como argumento del objeto.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, use the following code to get the static <ph id="ph1">`CurrentCulture`</ph> property of <ph id="ph2">`CultureInfo`</ph> :</source>
          <target state="translated">Por ejemplo, utilice el código siguiente para obtener el método estático <ph id="ph1">`CurrentCulture`</ph> propiedad de <ph id="ph2">`CultureInfo`</ph> :</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`GetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`GetValue`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`GetValue`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, use el <ph id="ph2">`GetValue`</ph> método.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este método se puede utilizar para tener acceso a miembros no públicos si se ha concedido el autor de llamada <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> marca y, si el conjunto de permisos de los miembros no públicos se restringe al llamador conceda conjunto o un subconjunto de los mismos.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>consideraciones de seguridad para la reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no contiene el tipo de argumentos necesario.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor is not found.</source>
          <target state="translated">No se encuentra el descriptor de acceso <ph id="ph1">&lt;see langword="get" /&gt;</ph> de la propiedad.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia pero <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">El número de parámetros de <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no coincide con el número de parámetros que toma la propiedad indexada.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while retrieving the property value.</source>
          <target state="translated">Error al recuperar el valor de la propiedad.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Por ejemplo, un valor de índice especificado para una propiedad indizada está fuera del intervalo.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indica el motivo del error.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>Gets a value indicating whether the property is the special name.</source>
          <target state="translated">Obtiene un valor que indica si la propiedad es el nombre especial.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this property is the special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si esta propiedad es el nombre especial; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>The <ph id="ph1">`SpecialName`</ph> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).</source>
          <target state="translated">El <ph id="ph1">`SpecialName`</ph> bit se establece para marcar los miembros que se tratan de una manera especial por parte de algunos compiladores (por ejemplo, los descriptores de acceso de propiedades y métodos de sobrecarga de operadores).</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>To get the <ph id="ph1">`IsSpecialName`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para obtener la <ph id="ph1">`IsSpecialName`</ph> propiedad, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.IsSpecialName">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`IsSpecialName`</ph> value.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, obtener el <ph id="ph2">`IsSpecialName`</ph> valor.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">Obtiene un valor <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> que indica que este miembro es una propiedad.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a property.</source>
          <target state="translated">Valor <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> que indica que este miembro es una propiedad.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">Esta propiedad invalida <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> only when a given member is a property.</source>
          <target state="translated">Por lo tanto, cuando se examina un conjunto de <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objetos, por ejemplo, la matriz devuelta por <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> : el <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> propiedad devuelve <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Property&gt;</ph> solo cuando un miembro dado es una propiedad.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source><ph id="ph1">`MemberType`</ph> is a derived class of <ph id="ph2">`MemberInfo`</ph> and specifies the type of member this is.</source>
          <target state="translated"><ph id="ph1">`MemberType`</ph> es una clase derivada de <ph id="ph2">`MemberInfo`</ph> y especifica el tipo de miembro.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Member types are constructors, properties, fields, and methods.</source>
          <target state="translated">Tipos de miembro son constructores, propiedades, campos y métodos.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>Since this is a <ph id="ph1">`PropertyInfo`</ph> property, the returned type is a property.</source>
          <target state="translated">Puesto que se trata de un <ph id="ph1">`PropertyInfo`</ph> , el tipo de valor devuelto es una propiedad.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>To get the <ph id="ph1">`MemberType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para obtener la <ph id="ph1">`MemberType`</ph> propiedad, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, get the <ph id="ph2">`MemberType`</ph> value.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, obtener el <ph id="ph2">`MemberType`</ph> valor.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.MemberType">
          <source>The following example displays the type of the specified member.</source>
          <target state="translated">En el ejemplo siguiente se muestra el tipo del miembro especificado.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Primer objeto que se va a comparar.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Segundo objeto que se va a comparar.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">Indica si dos objetos <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> son iguales.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> es igual a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; en caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The first object to compare.</source>
          <target state="translated">Primer objeto que se va a comparar.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>The second object to compare.</source>
          <target state="translated">Segundo objeto que se va a comparar.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">Indica si dos objetos <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> no son iguales.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> no es igual a <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; en caso contrario, es <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Gets the type of this property.</source>
          <target state="translated">Obtiene el tipo de esta propiedad.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The type of this property.</source>
          <target state="translated">Tipo de esta propiedad.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>To determine the type of a particular property, do the following:</source>
          <target state="translated">Para determinar el tipo de una propiedad determinada, haga lo siguiente:</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the type (the class or structure) that contains the property.</source>
          <target state="translated">Obtener un <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el tipo (la clase o estructura) que contiene la propiedad.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>If you are working with an object (an instance of a type), you can call its <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> method.</source>
          <target state="translated">Si está trabajando con un objeto (una instancia de un tipo), puede llamar a su <ph id="ph1">&lt;xref:System.Object.GetType%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.</source>
          <target state="translated">En caso contrario, puede usar el operador de C# o el operador de Visual Basic, como en el ejemplo se muestra.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Get a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property in which you're interested.</source>
          <target state="translated">Obtener un <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto que representa la propiedad en el que está interesado.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>You can do this by getting an array of all properties from the <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> method and then iterating the elements in the array, or you can retrieve the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the property directly by calling the <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> method and specifying the property name.</source>
          <target state="translated">Puede hacerlo mediante la obtención de una matriz de todas las propiedades de la <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=nameWithType&gt;</ph> método y, a continuación, recorrer en iteración los elementos de la matriz, o se pueden recuperar el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto que representa la propiedad directamente mediante una llamada a la <ph id="ph3">&lt;xref:System.Type.GetProperty%2A?displayProperty=nameWithType&gt;</ph> método y especificando el nombre de propiedad.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>Retrieve the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> property from the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Recuperar el valor de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.PropertyType%2A&gt;</ph> propiedad desde el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>The following example defines an <ph id="ph1">`Employee`</ph> class that has five properties.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`Employee`</ph> clase que tiene cinco propiedades.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.PropertyType">
          <source>It then uses retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objects that represent those properties and displays the name and type of each.</source>
          <target state="translated">, A continuación, utiliza recupera una matriz de <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objetos que representan las propiedades y muestran el nombre y el tipo de cada uno.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property.</source>
          <target state="translated">Obtiene el descriptor de acceso <ph id="ph1">&lt;see langword="set" /&gt;</ph> de esta propiedad.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>The <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor for this property, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the property is read-only.</source>
          <target state="translated">El <ph id="ph1">&lt;see langword="set" /&gt;</ph> descriptor de acceso para esta propiedad, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si la propiedad es de solo lectura.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.PropertyInfo.SetMethod">
          <source>Retrieving the value of the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> property is equivalent to calling the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> method with a value of <ph id="ph3">`true`</ph> for the <ph id="ph4">`nonPublic`</ph> argument.</source>
          <target state="translated">Recuperación del valor de la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetMethod%2A&gt;</ph> propiedad es equivalente a llamar a la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%28System.Boolean%29&gt;</ph> método con un valor de <ph id="ph3">`true`</ph> para el <ph id="ph4">`nonPublic`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="T:System.Reflection.PropertyInfo">
          <source>Sets the property value for a specified object.</source>
          <target state="translated">Establece el valor de propiedad para un objeto especificado.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Objeto cuyo valor de propiedad se va a establecer.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The new property value.</source>
          <target state="translated">Nuevo valor de propiedad.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Sets the property value of a specified object.</source>
          <target state="translated">Establece el valor de propiedad de un objeto especificado.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> overload sets the value of a non-indexed property.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> sobrecarga establece el valor de una propiedad no indizadas.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To determine whether a property is indexed, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar si una propiedad está indizada, llame a la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To set the value of an indexed property, call the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> overload.</source>
          <target state="translated">Para establecer el valor de una propiedad indizada, llame a la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Object%5B%5D%29&gt;</ph> de sobrecarga.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>If the property type of this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, the property will be set to the default value for that type.</source>
          <target state="translated">Si la propiedad tipo de este <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto es un tipo de valor y <ph id="ph2">`value`</ph> es <ph id="ph3">`null`</ph>, la propiedad se establecerá en el valor predeterminado para ese tipo.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> for <ph id="ph7">`Object[]`</ph>, and <ph id="ph8">`null`</ph> for <ph id="ph9">`CultureInfo`</ph>.</source>
          <target state="translated">Se trata de un método útil que llama a la implementación en tiempo de ejecución del resumen <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> método, especifica <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> para el <ph id="ph3">`BindingFlags`</ph> parámetro, <ph id="ph4">`null`</ph> para <ph id="ph5">`Binder`</ph>, <ph id="ph6">`null`</ph> para <ph id="ph7">`Object[]`</ph>, y <ph id="ph8">`null`</ph> para <ph id="ph9">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Para usar el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> método, obtenga primero un <ph id="ph2">&lt;xref:System.Type&gt;</ph> objeto que representa la clase.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Type&gt;</ph>, obtener el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object, call the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto, llame a la <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este método se puede utilizar para tener acceso a miembros no públicos si se ha concedido el autor de llamada <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> marca y, si el conjunto de permisos de los miembros no públicos se restringe al llamador conceda conjunto o un subconjunto de los mismos.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>consideraciones de seguridad para la reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with one <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic) and one instance property.</source>
          <target state="translated">En el ejemplo siguiente se declara una clase denominada <ph id="ph1">`Example`</ph> con una <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> en Visual Basic) y la propiedad de una instancia.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> method to change the original property values and displays the original and final values.</source>
          <target state="translated">El ejemplo se utiliza la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%29&gt;</ph> método para cambiar la propiedad original y que muestra los valores originales y finales.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">No se encuentra el descriptor de acceso <ph id="ph1">&lt;see langword="set" /&gt;</ph> de la propiedad.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no se puede convertir al tipo de <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">En <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET para aplicaciones de la Tienda Windows<ept id="p1">&lt;/see&gt;</ept> o la <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Biblioteca de clases portable<ept id="p2">&lt;/see&gt;</ept>, capture <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> en su lugar.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> does not match the target type, or a property is an instance property but <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El tipo de <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> no coincide con el tipo de destino o una propiedad es una propiedad de instancia, pero <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">En <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET para aplicaciones de la Tienda Windows<ept id="p1">&lt;/see&gt;</ept> o la <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Biblioteca de clases portable<ept id="p2">&lt;/see&gt;</ept>, capture en su lugar la excepción de clase base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Error al establecer el valor de la propiedad.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indica el motivo del error.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object whose property value will be set.</source>
          <target state="translated">Objeto cuyo valor de propiedad se va a establecer.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The new property value.</source>
          <target state="translated">Nuevo valor de propiedad.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valores de índice opcionales para propiedades indizadas.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Este valor debe ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para propiedades no indizadas.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Sets the property value of a specified object with optional index values for index properties.</source>
          <target state="translated">Establece el valor de propiedad de un objeto especificado con valores de índice opcionales para las propiedades del índice.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Si este <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto es un tipo de valor y <ph id="ph2">`value`</ph> es <ph id="ph3">`null`</ph>, la propiedad se establecerá en el valor predeterminado para ese tipo.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar si una propiedad está indizada, use la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>This is a convenience method that calls the runtime implementation of the abstract <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method, specifying <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`BindingFlags`</ph> parameter, <ph id="ph4">`null`</ph> for <ph id="ph5">`Binder`</ph>, and <ph id="ph6">`null`</ph> for <ph id="ph7">`CultureInfo`</ph>.</source>
          <target state="translated">Se trata de un método útil que llama a la implementación en tiempo de ejecución del resumen <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%28System.Object%2CSystem.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> método, especifica <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Default?displayProperty=nameWithType&gt;</ph> para el <ph id="ph3">`BindingFlags`</ph> parámetro, <ph id="ph4">`null`</ph> para <ph id="ph5">`Binder`</ph>, y <ph id="ph6">`null`</ph> para <ph id="ph7">`CultureInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method, first get a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object that represents the class.</source>
          <target state="translated">Para usar el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> método, obtenga primero un <ph id="ph2">&lt;xref:System.Type&gt;</ph> objeto que representa la clase.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Type&gt;</ph>, get the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Type&gt;</ph>, obtener el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>From the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph>, use el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este método se puede utilizar para tener acceso a miembros no públicos si se ha concedido el autor de llamada <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> marca y, si el conjunto de permisos de los miembros no públicos se restringe al llamador conceda conjunto o un subconjunto de los mismos.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>consideraciones de seguridad para la reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example defines a class named <ph id="ph1">`TestClass`</ph> that has a read-write property named <ph id="ph2">`Caption`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase denominada <ph id="ph1">`TestClass`</ph> que tiene una propiedad de lectura y escritura denominada <ph id="ph2">`Caption`</ph>.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>It  displays the default value of the <ph id="ph1">`Caption`</ph> property, calls the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the property value, and displays the result.</source>
          <target state="translated">Muestra el valor predeterminado de la <ph id="ph1">`Caption`</ph> propiedad, llama el <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> método para cambiar el valor de propiedad y se muestra el resultado.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Note that, because the <ph id="ph1">`Caption`</ph> property is not a parameter array, the <ph id="ph2">`index`</ph> argument is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Tenga en cuenta que, dado el <ph id="ph1">`Caption`</ph> propiedad no es una matriz de parámetros, el <ph id="ph2">`index`</ph> argumento es <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The following example declares a class named <ph id="ph1">`Example`</ph> with three properties: a <ph id="ph2">`static`</ph> property (<ph id="ph3">`Shared`</ph> in Visual Basic), an instance property, and an indexed instance property.</source>
          <target state="translated">En el ejemplo siguiente se declara una clase denominada <ph id="ph1">`Example`</ph> con tres propiedades: una <ph id="ph2">`static`</ph> propiedad (<ph id="ph3">`Shared`</ph> en Visual Basic), una propiedad de instancia y una propiedad de instancia indizada.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> method to change the default values of the properties and displays the original and final values.</source>
          <target state="translated">El ejemplo se utiliza la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.SetValue%2A&gt;</ph> método para cambiar los valores predeterminados de las propiedades y muestra los valores originales y finales.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The name that is used to search for an indexed instance property with reflection is different depending on the language and on attributes applied to the property.</source>
          <target state="translated">El nombre que se utiliza para buscar una propiedad de instancia indizada con reflexión es diferente según el idioma y de los atributos aplicados a la propiedad.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In Visual Basic, the property name is always used to search for the property with reflection.</source>
          <target state="translated">En Visual Basic, el nombre de propiedad siempre se utiliza para buscar la propiedad con reflexión.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">`Default`</ph> keyword to make the property a default indexed property, in which case you can omit the name when accessing the property, as in this example.</source>
          <target state="translated">Puede usar el <ph id="ph1">`Default`</ph> propiedad indizada de palabra clave para convertir un valor predeterminado de la propiedad, en cuyo caso se puede omitir el nombre al obtener acceso a la propiedad, como en este ejemplo.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can also use the property name.</source>
          <target state="translated">También puede utilizar el nombre de propiedad.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C#, the indexed instance property is a default property called an indexer, and the name is never used when accessing the property in code.</source>
          <target state="translated">En C#, la propiedad de instancia indizada es una propiedad predeterminada denominada indizador y nunca se usa el nombre al obtener acceso a la propiedad en el código.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>By default, the name of the property is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection.</source>
          <target state="translated">De forma predeterminada, es el nombre de la propiedad <ph id="ph1">`Item`</ph>, y se debe utilizar ese nombre cuando busque la propiedad con reflexión.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the indexer a different name.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> atributo para asignar el indizador un nombre diferente.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In this example, the name is <ph id="ph1">`IndexedInstanceProperty`</ph>.</source>
          <target state="translated">En este ejemplo, el nombre es <ph id="ph1">`IndexedInstanceProperty`</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In C++, the <ph id="ph1">`default`</ph> specifier can be used to make an indexed property a default indexed property (class indexer).</source>
          <target state="translated">En C++, el <ph id="ph1">`default`</ph> especificador puede usarse para convertir una propiedad indizada predeterminada (indizador de clase) de la propiedad indizada.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In that case, the name of the property by default is <ph id="ph1">`Item`</ph>, and you must use that name when you search for the property with reflection, as in this example.</source>
          <target state="translated">En ese caso, el nombre de la propiedad predeterminada es <ph id="ph1">`Item`</ph>, y se debe utilizar ese nombre cuando busque la propiedad con reflexión, como en este ejemplo.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> attribute to give the class indexer a different name in reflection, but you cannot use that name to access the property in code.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IndexerNameAttribute&gt;</ph> atributo para dar el indizador de clase un nombre diferente en la reflexión, pero no se puede utilizar ese nombre para tener acceso a la propiedad en el código.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An indexed property that is not a class indexer is accessed using its name, both in code and in reflection.</source>
          <target state="translated">Se tiene acceso a una propiedad indizada que no sea un indizador de clase utilizando su nombre, en el código y en la reflexión.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no contiene el tipo de argumentos necesario.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">No se encuentra el descriptor de acceso <ph id="ph1">&lt;see langword="set" /&gt;</ph> de la propiedad.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no se puede convertir al tipo de <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated">En <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET para aplicaciones de la Tienda Windows<ept id="p1">&lt;/see&gt;</ept> o la <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Biblioteca de clases portable<ept id="p2">&lt;/see&gt;</ept>, capture <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> en su lugar.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia pero <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">El número de parámetros de <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no coincide con el número de parámetros que toma la propiedad indexada.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>In the <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET for Windows Store apps<ept id="p1">&lt;/see&gt;</ept> or the <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Portable Class Library<ept id="p2">&lt;/see&gt;</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated">En <bpt id="p1">&lt;see href="https://msdn.microsoft.com/library/windows/apps/br230232(v=vs.110).aspx"&gt;</bpt>.NET para aplicaciones de la Tienda Windows<ept id="p1">&lt;/see&gt;</ept> o la <bpt id="p2">&lt;see href="~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md"&gt;</bpt>Biblioteca de clases portable<ept id="p2">&lt;/see&gt;</ept>, capture en su lugar la excepción de clase base, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Error al configurar el valor de la propiedad.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Por ejemplo, un valor de índice especificado para una propiedad indexada está fuera del intervalo.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indica el motivo del error.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object whose property value will be set.</source>
          <target state="translated">Objeto cuyo valor de propiedad se va a establecer.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The new property value.</source>
          <target state="translated">Nuevo valor de propiedad.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of the following enumeration members that specify the invocation attribute: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph>, or <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</source>
          <target state="translated">Una combinación bit a bit de los miembros de enumeración siguientes que especifican el atributo de invocación: <ph id="ph1">&lt;see langword="InvokeMethod" /&gt;</ph>, <ph id="ph2">&lt;see langword="CreateInstance" /&gt;</ph>, <ph id="ph3">&lt;see langword="Static" /&gt;</ph>, <ph id="ph4">&lt;see langword="GetField" /&gt;</ph>, <ph id="ph5">&lt;see langword="SetField" /&gt;</ph>, <ph id="ph6">&lt;see langword="GetProperty" /&gt;</ph> o <ph id="ph7">&lt;see langword="SetProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>You must specify a suitable invocation attribute.</source>
          <target state="translated">Debe especificarse un atributo de invocación apropiado.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, to invoke a static member, set the <ph id="ph1">&lt;see langword="Static" /&gt;</ph> flag.</source>
          <target state="translated">Por ejemplo, para llamar a un miembro estático, establezca la marca <ph id="ph1">&lt;see langword="Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Objeto que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> mediante reflexión.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usará el enlazador predeterminado.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Optional index values for indexed properties.</source>
          <target state="translated">Valores de índice opcionales para propiedades indizadas.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This value should be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for non-indexed properties.</source>
          <target state="translated">Este valor debe ser <ph id="ph1">&lt;see langword="null" /&gt;</ph> para propiedades no indizadas.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The culture for which the resource is to be localized.</source>
          <target state="translated">Referencia cultural para la que se va a localizar el recurso.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resource is not localized for this culture, the <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> property will be called successively in search of a match.</source>
          <target state="translated">Si no se encuentra el recurso correspondiente a esta referencia cultural, se llamará sucesivamente a la propiedad <ph id="ph1">&lt;see cref="P:System.Globalization.CultureInfo.Parent" /&gt;</ph> para buscar una coincidencia.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the culture-specific information is obtained from the <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph> property.</source>
          <target state="translated">Si este valor es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, la información específica de la referencia cultural se obtiene de la propiedad <ph id="ph2">&lt;see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the property value for a specified object that has the specified binding, index, and culture-specific information.</source>
          <target state="translated">Cuando se reemplaza en una clase derivada, establece el valor de propiedad para un objeto especificado que tiene el enlace, el índice y la información específica de la referencia cultural especificados.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object is a value type and <ph id="ph2">`value`</ph> is <ph id="ph3">`null`</ph>, then the property will be set to the default value for that type.</source>
          <target state="translated">Si este <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> objeto es un tipo de valor y <ph id="ph2">`value`</ph> es <ph id="ph3">`null`</ph>, la propiedad se establecerá en el valor predeterminado para ese tipo.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To determine whether a property is indexed, use the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar si una propiedad está indizada, use la <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetIndexParameters%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the resulting array has 0 (zero) elements, the property is not indexed.</source>
          <target state="translated">Si la matriz resultante tiene 0 (cero) elementos, la propiedad no está indizado.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">Se omiten las restricciones de acceso de código de plena confianza.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked via Reflection whenever the code is fully trusted.</source>
          <target state="translated">Es decir, las propiedades, métodos, campos y constructores privados se pueden acceso e invocar mediante reflexión siempre que el código es de plena confianza.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use the <ph id="ph1">`SetValue`</ph> method, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">Para usar el <ph id="ph1">`SetValue`</ph> método, primero hay que obtener la clase <ph id="ph2">`Type`</ph>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`PropertyInfo`</ph>.</source>
          <target state="translated">Desde el <ph id="ph1">`Type`</ph>, obtener el <ph id="ph2">`PropertyInfo`</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>From the <ph id="ph1">`PropertyInfo`</ph>, use the <ph id="ph2">`SetValue`</ph> method.</source>
          <target state="translated">Desde el <ph id="ph1">`PropertyInfo`</ph>, use el <ph id="ph2">`SetValue`</ph> método.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este método se puede utilizar para tener acceso a miembros no públicos si se ha concedido el autor de llamada <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> marca y, si el conjunto de permisos de los miembros no públicos se restringe al llamador conceda conjunto o un subconjunto de los mismos.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>consideraciones de seguridad para la reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="index" /&gt;</ph> array does not contain the type of arguments needed.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no contiene el tipo de argumentos necesario.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The property's <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor is not found.</source>
          <target state="translated">No se encuentra el descriptor de acceso <ph id="ph1">&lt;see langword="set" /&gt;</ph> de la propiedad.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted to the type of <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no se puede convertir al tipo de <ph id="ph2">&lt;see cref="P:System.Reflection.PropertyInfo.PropertyType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The object does not match the target type, or a property is an instance property but <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El objeto no coincide con el tipo de destino o una propiedad es una propiedad de instancia, pero <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of parameters in <ph id="ph1">&lt;paramref name="index" /&gt;</ph> does not match the number of parameters the indexed property takes.</source>
          <target state="translated">El número de parámetros de <ph id="ph1">&lt;paramref name="index" /&gt;</ph> no coincide con el número de parámetros que toma la propiedad indexada.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>There was an illegal attempt to access a private or protected method inside a class.</source>
          <target state="translated">Hubo un intento no válido de obtener acceso a un método privado o protegido dentro de una clase.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An error occurred while setting the property value.</source>
          <target state="translated">Error al configurar el valor de la propiedad.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, an index value specified for an indexed property is out of range.</source>
          <target state="translated">Por ejemplo, un valor de índice especificado para una propiedad indexada está fuera del intervalo.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> property indicates the reason for the error.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Exception.InnerException" /&gt;</ph> indica el motivo del error.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">Cuando se invoca en tiempo de ejecución a través de mecanismos como <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para un uso futuro.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Debe ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">Matriz que se pasa con los nombres que se van a asignar.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">Número de nombres que se van a asignar.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">Contexto de configuración regional en el que se van a interpretar los nombres.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">Matriz asignada por el llamador que recibe los identificadores que corresponden a los nombres.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">Asigna un conjunto de nombres a un conjunto correspondiente de identificadores de envío.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obtener más información sobre <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, vea MSDN Library.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> de COM.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">Obtiene un objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo de <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">Información de tipos que se va a devolver.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">Identificador de la configuración regional de la información de tipo.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">Recibe un puntero al objeto de información de tipo solicitado.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">Recupera la información de tipo de un objeto, que se puede usar después para obtener la información de tipo de una interfaz.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obtener más información sobre <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, vea MSDN Library.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> de COM.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">Señala a una ubicación que recibe el número de interfaces de información de tipo proporcionado por el objeto.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">Recupera el número de interfaces de información de tipo que proporciona un objeto (0 ó 1).</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obtener más información sobre <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, vea MSDN Library.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> de COM.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">Identifica el miembro.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">Reservado para un uso futuro.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">Debe ser IID_NULL.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">Contexto de la configuración regional en que se interpretan los argumentos.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">Marcas que describen el contexto de la llamada.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">Puntero a una estructura que contiene una matriz de argumentos, una matriz de valores DISPID de argumento para argumentos con nombre y recuentos del número de elementos de cada matriz.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">Puntero a la ubicación donde se va a almacenar el resultado.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">Puntero a una estructura que contiene información de excepciones.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">Índice del primer argumento que tiene un error.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">Proporciona acceso a las propiedades y los métodos expuestos por un objeto.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">Este método es para el acceso a las clases administradas desde código no administrado y no se debe llamar desde código administrado.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">Para obtener más información sobre <ph id="ph1">`IDispatch::Invoke`</ph>, vea MSDN Library.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.PropertyInfo.System#Runtime#InteropServices#_PropertyInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">No se admite el acceso enlazado en tiempo de ejecución mediante la interfaz <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> de COM.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>