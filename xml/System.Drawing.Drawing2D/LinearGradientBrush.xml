<Type Name="LinearGradientBrush" FullName="System.Drawing.Drawing2D.LinearGradientBrush">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34ef7af9aaab2223e69cf15a9ad1de33406eb517" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410499" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LinearGradientBrush : System.Drawing.Brush" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LinearGradientBrush extends System.Drawing.Brush" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.LinearGradientBrush" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LinearGradientBrush&#xA;Inherits Brush" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinearGradientBrush sealed : System::Drawing::Brush" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Drawing.Brush</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Encapsula un <see cref="T:System.Drawing.Brush" /> con un degradado lineal. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase encapsula degradados de dos colores y degradados con varios colores personalizados.  
  
 Todos los degradados lineales se definen a lo largo de una línea especificada por el ancho de un rectángulo o por dos puntos.  
  
 De forma predeterminada, un degradado lineal de dos colores es una mezcla lineal horizontal equilibrada desde el color inicial al color final a lo largo de la línea especificada. Personalizar el patrón de mezcla con la <xref:System.Drawing.Drawing2D.Blend> (clase), el <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A> métodos, o la <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A> métodos. Personalice la dirección del degradado especificando la <xref:System.Drawing.Drawing2D.LinearGradientMode> enumeración o el ángulo en el constructor.  
  
 Use la <xref:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors%2A> propiedad para crear un degradado de varios colores.  
  
 El <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform%2A> propiedad especifica una transformación geométrica local aplicada al degradado.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una horizontal <xref:System.Drawing.Drawing2D.LinearGradientBrush>; los componentes de color cambian linealmente al pasar de una coordenada horizontal de 0 a una coordenada horizontal de 200. Por ejemplo, un punto cuya primera coordenada está comprendido entre 0 y 200 tendrá un componente azul que está comprendido entre 0 y 255. Este ejemplo está diseñado para su uso con Windows Forms. El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere el <xref:System.Windows.Forms.PaintEventArgs> `e`, que es un parámetro de <xref:System.Windows.Forms.PaintEventHandler>.  
  
 [!code-csharp[System.Drawing.UsingaGradientBrush#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.UsingaGradientBrush/CS/Class1.cs#21)]
 [!code-vb[System.Drawing.UsingaGradientBrush#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.UsingaGradientBrush/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> con los puntos y colores especificados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Point point1, System.Drawing.Point point2, System.Drawing.Color color1, System.Drawing.Color color2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Point point1, valuetype System.Drawing.Point point2, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As Point, point2 As Point, color1 As Color, color2 As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Point point1, System::Drawing::Point point2, System::Drawing::Color color1, System::Drawing::Color color2);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Drawing.Point" />
        <Parameter Name="point2" Type="System.Drawing.Point" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="point1">Estructura <see cref="T:System.Drawing.Point" /> que representa el punto inicial del degradado lineal.</param>
        <param name="point2">Estructura <see cref="T:System.Drawing.Point" /> que representa el extremo del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado lineal.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado lineal.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> con los puntos y colores especificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.PointF point1, System.Drawing.PointF point2, System.Drawing.Color color1, System.Drawing.Color color2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.PointF point1, valuetype System.Drawing.PointF point2, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As PointF, point2 As PointF, color1 As Color, color2 As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::PointF point1, System::Drawing::PointF point2, System::Drawing::Color color1, System::Drawing::Color color2);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Drawing.PointF" />
        <Parameter Name="point2" Type="System.Drawing.PointF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="point1">Estructura <see cref="T:System.Drawing.PointF" /> que representa el punto inicial del degradado lineal.</param>
        <param name="point2">Estructura <see cref="T:System.Drawing.PointF" /> que representa el extremo del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado lineal.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado lineal.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> con los puntos y colores especificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, valuetype System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, System::Drawing::Drawing2D::LinearGradientMode linearGradientMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="linearGradientMode" Type="System.Drawing.Drawing2D.LinearGradientMode" />
      </Parameters>
      <Docs>
        <param name="rect">Estructura <see cref="T:System.Drawing.Rectangle" /> que especifica los límites del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado.</param>
        <param name="linearGradientMode">Elemento de la enumeración <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> que especifica la orientación del degradado. La orientación determina los puntos inicial y final del degradado. Por ejemplo, <see langword="LinearGradientMode.ForwardDiagonal" /> especifica que el punto inicial es la esquina superior izquierda del rectángulo y el final, la inferior derecha.</param>
        <summary>Encapsula una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> basada en un rectángulo, los colores inicial y final, y la orientación.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As Rectangle, color1 As Color, color2 As Color, angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">Estructura <see cref="T:System.Drawing.Rectangle" /> que especifica los límites del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado.</param>
        <param name="angle">Ángulo de la línea de orientación del degradado, expresado en grados en el sentido de las agujas del reloj desde el eje x.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> basada en un rectángulo, los colores inicial y final, y un ángulo de orientación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los puntos a lo largo de cualquier línea perpendicular a la línea de orientación son del mismo color.  
  
 La línea inicial es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea inicial son del color inicial. La línea final es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea final son del color final.  
  
 El ángulo de la línea de orientación determina las esquinas atravesar las líneas iniciales y finales. Por ejemplo, si el ángulo está comprendido entre 0 y 90 grados, la línea inicial pasa a través de la esquina superior izquierda y la línea final pasa a través de la esquina inferior derecha.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, valuetype System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, System::Drawing::Drawing2D::LinearGradientMode linearGradientMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="linearGradientMode" Type="System.Drawing.Drawing2D.LinearGradientMode" />
      </Parameters>
      <Docs>
        <param name="rect">Estructura <see cref="T:System.Drawing.RectangleF" /> que especifica los límites del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado.</param>
        <param name="linearGradientMode">Elemento de la enumeración <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> que especifica la orientación del degradado. La orientación determina los puntos inicial y final del degradado. Por ejemplo, <see langword="LinearGradientMode.ForwardDiagonal" /> especifica que el punto inicial es la esquina superior izquierda del rectángulo y el final, la inferior derecha.</param>
        <summary>Crea una nueva instancia de <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> basada en un rectángulo, los colores inicial y final, y un modo de orientación.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As RectangleF, color1 As Color, color2 As Color, angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">Estructura <see cref="T:System.Drawing.RectangleF" /> que especifica los límites del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado.</param>
        <param name="angle">Ángulo de la línea de orientación del degradado, expresado en grados en el sentido de las agujas del reloj desde el eje x.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> basada en un rectángulo, los colores inicial y final, y un ángulo de orientación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los puntos a lo largo de cualquier línea perpendicular a la línea de orientación son del mismo color.  
  
 La línea inicial es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea inicial son del color inicial. La línea final es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea final son del color final.  
  
 El ángulo de la línea de orientación determina las esquinas atravesar las líneas iniciales y finales. Por ejemplo, si el ángulo está comprendido entre 0 y 90 grados, la línea inicial pasa a través de la esquina superior izquierda y la línea final pasa a través de la esquina inferior derecha.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle, bool isAngleScaleable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As Rectangle, color1 As Color, color2 As Color, angle As Single, isAngleScaleable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle, bool isAngleScaleable);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="isAngleScaleable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">Estructura <see cref="T:System.Drawing.Rectangle" /> que especifica los límites del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado.</param>
        <param name="angle">Ángulo de la línea de orientación del degradado, expresado en grados en el sentido de las agujas del reloj desde el eje x.</param>
        <param name="isAngleScaleable">Se establece en <see langword="true" /> para especificar que el ángulo se ve afectado por la transformación asociada a este objeto <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />; en caso contrario, se establece en <see langword="false" />.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> basada en un rectángulo, los colores inicial y final, y un ángulo de orientación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los puntos a lo largo de cualquier línea perpendicular a la línea de orientación son del mismo color.  
  
 La línea inicial es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea inicial son del color inicial. La línea final es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea final son del color final.  
  
 El ángulo de la línea de orientación determina las esquinas atravesar las líneas iniciales y finales. Por ejemplo, si el ángulo está comprendido entre 0 y 90 grados, la línea inicial pasa a través de la esquina superior izquierda y la línea final pasa a través de la esquina inferior derecha.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle, bool isAngleScaleable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As RectangleF, color1 As Color, color2 As Color, angle As Single, isAngleScaleable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle, bool isAngleScaleable);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="isAngleScaleable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">Estructura <see cref="T:System.Drawing.RectangleF" /> que especifica los límites del degradado lineal.</param>
        <param name="color1">Estructura <see cref="T:System.Drawing.Color" /> que representa el color inicial del degradado.</param>
        <param name="color2">Estructura <see cref="T:System.Drawing.Color" /> que representa el color final del degradado.</param>
        <param name="angle">Ángulo de la línea de orientación del degradado, expresado en grados en el sentido de las agujas del reloj desde el eje x.</param>
        <param name="isAngleScaleable">Se establece en <see langword="true" /> para especificar que el ángulo se ve afectado por la transformación asociada a este objeto <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />; en caso contrario, se establece en <see langword="false" />.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> basada en un rectángulo, los colores inicial y final, y un ángulo de orientación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los puntos a lo largo de cualquier línea perpendicular a la línea de orientación son del mismo color.  
  
 La línea inicial es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea inicial son del color inicial. La línea final es perpendicular a la línea de orientación y pasa a través de uno de los vértices del rectángulo. Todos los puntos de la línea final son del color final.  
  
 El ángulo de la línea de orientación determina las esquinas atravesar las líneas iniciales y finales. Por ejemplo, si el ángulo está comprendido entre 0 y 90 grados, la línea inicial pasa a través de la esquina superior izquierda y la línea final pasa a través de la esquina inferior derecha.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blend">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Blend Blend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Blend Blend" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Blend" />
      <MemberSignature Language="VB.NET" Value="Public Property Blend As Blend" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Blend ^ Blend { System::Drawing::Drawing2D::Blend ^ get(); void set(System::Drawing::Drawing2D::Blend ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Blend</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un <see cref="T:System.Drawing.Drawing2D.Blend" /> que especifica las posiciones y factores que definen una disminución personalizada del degradado.</summary>
        <value>Un objeto <see cref="T:System.Drawing.Drawing2D.Blend" /> que representa una disminución personalizada del degradado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Drawing2D.Blend> contiene las matrices correspondientes de las posiciones y los factores de mezcla. Los factores de mezcla especifican los porcentajes de los colores inicial y final de color que desea utilizar en la posición correspondiente. Las posiciones se proporcionan como un porcentaje de la distancia a lo largo de la línea de degradado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia exacta de este objeto <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />.</summary>
        <returns>
          <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> que crea este método, convertido en objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código realiza las siguientes acciones:  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Dibuja una elipse en la pantalla con este pincel.  
  
-   Clones el <xref:System.Drawing.Drawing2D.LinearGradientBrush> (`clonedLGBrush`).  
  
-   Dibuja una elipse en la pantalla directamente debajo de la primera elipse, con el pincel duplicado.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaCorrection">
      <MemberSignature Language="C#" Value="public bool GammaCorrection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GammaCorrection" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection" />
      <MemberSignature Language="VB.NET" Value="Public Property GammaCorrection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GammaCorrection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se habilitó la corrección gamma para este <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />.</summary>
        <value>El valor es <see langword="true" /> si la corrección gamma está habilitada para este objeto <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />; en caso contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationColors">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.ColorBlend InterpolationColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.ColorBlend InterpolationColors" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationColors As ColorBlend" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::ColorBlend ^ InterpolationColors { System::Drawing::Drawing2D::ColorBlend ^ get(); void set(System::Drawing::Drawing2D::ColorBlend ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.ColorBlend</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un <see cref="T:System.Drawing.Drawing2D.ColorBlend" /> que define un degradado lineal de varios colores.</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.ColorBlend" /> que define un degradado lineal de varios colores.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Drawing2D.ColorBlend> contiene las matrices correspondientes de colores y posiciones. Las posiciones son valores entre 0 y 1 que especifica el porcentaje de la distancia a lo largo de la línea de degradado donde está ubicado el color correspondiente.  
  
 Al establecer esta propiedad, crea un degradado de varios colores con un color en cada posición a lo largo de la línea de degradado. Al establecer esta propiedad anula todos los valores anteriores de color, posición y disminución de este <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinearColors">
      <MemberSignature Language="C#" Value="public System.Drawing.Color[] LinearColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color[] LinearColors" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.LinearColors" />
      <MemberSignature Language="VB.NET" Value="Public Property LinearColors As Color()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Drawing::Color&gt; ^ LinearColors { cli::array &lt;System::Drawing::Color&gt; ^ get(); void set(cli::array &lt;System::Drawing::Color&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece los colores inicial y final del degradado.</summary>
        <value>Matriz de dos estructuras <see cref="T:System.Drawing.Color" /> que representa los colores inicial y final del degradado.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Multiplica la <see cref="T:System.Drawing.Drawing2D.Matrix" /> que representa la trasformación geométrica local de este <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> por el <see cref="T:System.Drawing.Drawing2D.Matrix" /> anteponiéndole el <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <see cref="T:System.Drawing.Drawing2D.Matrix" /> por el que se va a multiplicar la transformación geométrica.</param>
        <summary>Multiplica la <see cref="T:System.Drawing.Drawing2D.Matrix" /> que representa la trasformación geométrica local de este <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> por el <see cref="T:System.Drawing.Drawing2D.Matrix" /> anteponiéndole el <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Para obtener un ejemplo, consulta <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">
          <see cref="T:System.Drawing.Drawing2D.Matrix" /> por el que se va a multiplicar la transformación geométrica.</param>
        <param name="order">
          <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica en qué orden se multiplican las dos matrices.</param>
        <summary>Multiplica la <see cref="T:System.Drawing.Drawing2D.Matrix" /> que representa la transformación geométrica local de este <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> por la <see cref="T:System.Drawing.Drawing2D.Matrix" /> especificada, en el orden indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código realiza las siguientes acciones:  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Dibuja una elipse en la pantalla con este pincel.  
  
-   Llamadas a la <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A> método para transformar la <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Dibuja una elipse en la pantalla directamente debajo de la primera elipse, con el pincel transformado.  
  
 Tenga en cuenta que la elipse inferior se ajusta en dirección horizontal y que el degradado se ajusta para que coincida con la nueva forma.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF Rectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF Rectangle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Rectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rectangle As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF Rectangle { System::Drawing::RectangleF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un área rectangular que define los puntos inicial y final del degradado.</summary>
        <value>Estructura <see cref="T:System.Drawing.RectangleF" /> que especifica los puntos inicial y final del degradado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El lado izquierdo del rectángulo especifica el punto inicial del degradado lineal y el lado derecho del rectángulo especifica el punto de conexión.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restablece la propiedad <see cref="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" /> en identidad.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código realiza las siguientes acciones:  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Dibuja una elipse en la pantalla con este pincel.  
  
-   Llamadas a la <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A> método para transformar la <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Dibuja una elipse en la pantalla directamente debajo de la primera elipse, con el pincel transformado.  
  
-   Restablece la transformación.  
  
-   Dibuja una tercera elipse en la pantalla siguiente, las dos primeras.  
  
 Tenga en cuenta que la elipse más baja se dibuja del mismo tamaño que el primero y que, debido a la llamada a la <xref:System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform%2A> método, el degradado se ha reducido para que coincida con.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gira la transformación geométrica local la cantidad especificada. Este método antepone la rotación a la transformación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Ángulo de rotación.</param>
        <summary>Gira la transformación geométrica local la cantidad especificada. Este método antepone la rotación a la transformación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Para obtener un ejemplo, consulta <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Ángulo de rotación.</param>
        <param name="order">
          <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica si la matriz de rotación se agrega delante o detrás.</param>
        <summary>Gira la transformación geométrica local la cantidad especificada y en el orden especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Dibuja una elipse en la pantalla con este pincel.  
  
-   Gira la <xref:System.Drawing.Drawing2D.LinearGradientBrush> 45 grados mediante una llamada a la <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A> método.  
  
-   Dibuja una elipse en la pantalla directamente debajo de la primera elipse, con el pincel girado.  
  
 Observe que el degradado de la elipse inferior está en un ángulo de 45 grados en el eje x de la elipse superior. Observe también que una llamada a la <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> método se usa para justificar el borde izquierdo del relleno de degradado con el borde izquierdo de la elipse inferior.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cambia el tamaño de la transformación geométrica local en las cantidades especificadas. Este método antepone la matriz de escala a la transformación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Cantidad por la que se va a ajustar el tamaño de la transformación en la dirección del eje x.</param>
        <param name="sy">Cantidad por la que se va a ajustar el tamaño de la transformación en la dirección del eje y.</param>
        <summary>Cambia el tamaño de la transformación geométrica local en las cantidades especificadas. Este método antepone la matriz de escala a la transformación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Para obtener un ejemplo, consulta <xref:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Cantidad por la que se va a ajustar el tamaño de la transformación en la dirección del eje x.</param>
        <param name="sy">Cantidad por la que se va a ajustar el tamaño de la transformación en la dirección del eje y.</param>
        <param name="order">
          <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> que especifica si la matriz de transformación de escala se agrega delante o detrás.</param>
        <summary>Cambia el tamaño de la transformación geométrica local en las cantidades y en el orden especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código realiza las siguientes acciones:  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Dibuja una elipse en la pantalla con este pincel.  
  
-   Escalas el <xref:System.Drawing.Drawing2D.LinearGradientBrush> por un factor de dos en el eje x.  
  
-   Dibuja una elipse en la pantalla directamente debajo de la primera elipse, con el tamaño del pincel.  
  
 Tenga en cuenta que el degradado de la elipse inferior se ajusta en un factor de dos. Observe también que una llamada a la <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> método se usa para justificar el borde izquierdo del relleno de degradado con el borde izquierdo de la elipse.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBlendTriangularShape">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un degradado lineal con un color central y una disminución lineal hacia un único color en ambos extremos.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBlendTriangularShape">
      <MemberSignature Language="C#" Value="public void SetBlendTriangularShape (float focus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBlendTriangularShape(float32 focus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBlendTriangularShape (focus As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBlendTriangularShape(float focus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Un valor comprendido entre 0 y 1 que especifica el centro del degradado (el punto en que el degradado está formado sólo por el color final).</param>
        <summary>Crea un degradado lineal con un color central y una disminución lineal hacia un único color en ambos extremos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método especifica un `focus`, que es el punto donde el degradado está formado solo por el color final. El `focus` parámetro representa una ubicación como una proporción de la distancia a lo largo de la línea de degradado. El degradado disminuye hasta el color inicial linealmente a ambos lados.  
  
   
  
## Examples  
 Para obtener un ejemplo, consulta <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlendTriangularShape">
      <MemberSignature Language="C#" Value="public void SetBlendTriangularShape (float focus, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBlendTriangularShape(float32 focus, float32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBlendTriangularShape (focus As Single, scale As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBlendTriangularShape(float focus, float scale);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Un valor comprendido entre 0 y 1 que especifica el centro del degradado (el punto en que el degradado está formado sólo por el color final).</param>
        <param name="scale">Valor comprendido entre 0 y 1 que especifica la rapidez con que los colores se degradan del color inicial a <c>focus</c> (color final).</param>
        <summary>Crea un degradado lineal con un color central y una disminución lineal hacia un único color en ambos extremos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método especifica un `focus`, que es el punto donde el degradado está formado solo por el color final. El `focus` parámetro representa una ubicación como una proporción de la distancia a lo largo de la línea de degradado. El degradado disminuye hasta el color inicial linealmente a ambos lados.  
  
   
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código realiza las siguientes acciones:  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Usa este pincel para dibujar una elipse en la pantalla que tiene una transición lineal, de izquierda a derecha de colores.  
  
-   Transforma el <xref:System.Drawing.Drawing2D.LinearGradientBrush> en una forma triangular con el pico en el centro.  
  
-   Dibuja una segunda elipse en la pantalla con el pincel transformado.  
  
 Tenga en cuenta que el degradado de la elipse inferior realiza la transición de azul a rojo y, a continuación, espera a azul.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSigmaBellShape">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una disminución de degradado basada en una curva en forma de campana.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSigmaBellShape">
      <MemberSignature Language="C#" Value="public void SetSigmaBellShape (float focus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSigmaBellShape(float32 focus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSigmaBellShape (focus As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSigmaBellShape(float focus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Un valor comprendido entre 0 y 1 que especifica el centro del degradado (el punto en el que el color inicial y el color final se mezclan uniformemente).</param>
        <summary>Crea una disminución de degradado basada en una curva en forma de campana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método especifica un `focus`, que es el punto donde el degradado está formado solo por el color final. El `focus` parámetro representa una ubicación como una proporción de la distancia a lo largo de la línea de degradado. El degradado disminuye hasta el color inicial basándose en una forma de curva de campana (distribución normal) a ambos lados.  
  
   
  
## Examples  
 Para obtener un ejemplo, vea <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A>`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSigmaBellShape">
      <MemberSignature Language="C#" Value="public void SetSigmaBellShape (float focus, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSigmaBellShape(float32 focus, float32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSigmaBellShape (focus As Single, scale As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSigmaBellShape(float focus, float scale);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Un valor comprendido entre 0 y 1 que especifica el centro del degradado (el punto en que el degradado está formado sólo por el color final).</param>
        <param name="scale">Valor comprendido entre 0 y 1 que especifica la rapidez con que los colores se degradan desde <c>focus</c>.</param>
        <summary>Crea una disminución de degradado basada en una curva en forma de campana.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método especifica un `focus`, que es el punto donde el degradado está formado solo por el color final. El `focus` parámetro representa una ubicación como una proporción de la distancia a lo largo de la línea de degradado. El degradado disminuye hasta el color inicial basándose en una forma de curva de campana (distribución normal) a ambos lados.  
  
   
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código realiza las siguientes acciones:  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Usa este pincel para dibujar una elipse en la pantalla que tiene una transición lineal, de izquierda a derecha de colores.  
  
-   Transforma el <xref:System.Drawing.Drawing2D.LinearGradientBrush> para disponer de una curva en forma de campana con el pico en el centro.  
  
-   Dibuja una segunda elipse en la pantalla con el pincel en forma de campana.  
  
 Tenga en cuenta que el degradado de la elipse inferior realiza la transición de azul a rojo y, a continuación, espera a azul.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una copia de <see cref="T:System.Drawing.Drawing2D.Matrix" /> que define una transformación geométrica local para este objeto de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />.</summary>
        <value>Una copia de la clase <see cref="T:System.Drawing.Drawing2D.Matrix" /> que define una transformación geométrica que sólo se aplica a los rellenos dibujados con un objeto de la clase <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una transformación geométrica se puede utilizar para traducir, escalar, girar o sesgar el relleno de degradado. Dado que la matriz devuelta y por la <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform%2A> propiedad es una copia de la transformación geométrica del pincel, debe eliminar de la matriz cuando ya no lo necesite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte la transformación geométrica local en las dimensiones especificadas. Este método antepone la conversión a la transformación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">El valor de la conversión en X.</param>
        <param name="dy">El valor de la conversión en Y.</param>
        <summary>Convierte la transformación geométrica local en las dimensiones especificadas. Este método antepone la conversión a la transformación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Para obtener un ejemplo, consulta <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">El valor de la conversión en X.</param>
        <param name="dy">El valor de la conversión en Y.</param>
        <param name="order">El orden (antes o después) en que se va a aplicar la conversión.</param>
        <summary>Convierte la transformación geométrica local en las dimensiones especificadas en el orden indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código está diseñado para su uso con Windows Forms y requiere <xref:System.Windows.Forms.PaintEventArgs> `e`, un <xref:System.Windows.Forms.Form.OnPaint%2A> objeto de evento. El código realiza las siguientes acciones:  
  
-   Crea un nuevo <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Usa este pincel para dibujar un rectángulo en la pantalla que tiene una transición lineal, de izquierda a derecha de colores.  
  
-   Gira el <xref:System.Drawing.Drawing2D.LinearGradientBrush> 90 grados y ajusta el tamaño del degradado.  
  
-   Dibuja el rectángulo, con el degradado girado y escalado, en la pantalla.  
  
-   Convierte el rectángulo de modo que tenga un degradado lineal ejecutándose de arriba a abajo.  
  
-   Dibuja el rectángulo convertido en la pantalla.  
  
 Observe que hay tres rectángulos muestra uno superior que muestra de izquierda a derecha degradado, uno intermedio que muestra el degradado girado y escalado y el inferior muestra el degradado final convertido.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.WrapMode WrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.WrapMode WrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.WrapMode" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapMode As WrapMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::WrapMode WrapMode { System::Drawing::Drawing2D::WrapMode get(); void set(System::Drawing::Drawing2D::WrapMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.WrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una enumeración <see cref="T:System.Drawing.Drawing2D.WrapMode" /> que indica el modo de ajuste de este <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />.</summary>
        <value>
          <see cref="T:System.Drawing.Drawing2D.WrapMode" /> que especifica cómo se colocan en mosaico los rellenos dibujados con este <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>