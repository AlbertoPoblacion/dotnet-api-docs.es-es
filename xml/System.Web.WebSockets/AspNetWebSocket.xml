<Type Name="AspNetWebSocket" FullName="System.Web.WebSockets.AspNetWebSocket">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce786eeab65f79e5a02d0423e3a411f553228941" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36375482" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AspNetWebSocket extends System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="DocId" Value="T:System.Web.WebSockets.AspNetWebSocket" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AspNetWebSocket&#xA;Inherits WebSocket" />
  <TypeSignature Language="C++ CLI" Value="public ref class AspNetWebSocket sealed : System::Net::WebSockets::WebSocket" />
  <TypeSignature Language="F#" Value="type AspNetWebSocket = class&#xA;    inherit WebSocket" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebSockets.WebSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa una conexión dúplex completa en tiempo real entre un servidor web y un cliente en una aplicación ASP.NET.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Abort();" />
      <MemberSignature Language="F#" Value="abstract member Abort : unit -&gt; unit&#xA;override this.Abort : unit -&gt; unit" Usage="aspNetWebSocket.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancela cualquier operación de E/S pendiente en el objeto de <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> y establece el estado del objeto de modo que no pueda usarse para iniciar operaciones de E/S adicionales.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de la <xref:System.Web.WebSockets.AspNetWebSocket.Abort%2A> ha llamado al método, todavía puede acceder a las propiedades y métodos que implican las operaciones de E/S.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se había desechado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member CloseAsync : System.Net.WebSockets.WebSocketCloseStatus * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CloseAsync : System.Net.WebSockets.WebSocketCloseStatus * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="aspNetWebSocket.CloseAsync (closeStatus, statusDescription, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Código de estado de la operación de cierre.</param>
        <param name="statusDescription">Mensaje de estado de la operación de cierre.</param>
        <param name="cancellationToken">Objeto que cancela una operación pendiente.</param>
        <summary>Envía un mensaje asincrónico a un cliente para cerrar la conexión. Si el servidor inicia la solicitud para cerrar la conexión, el método espera a que el cliente confirme la solicitud antes de volver.</summary>
        <returns>Referencia a la operación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> y <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> métodos de las solicitudes iniciadas por el cliente e iniciadas por el servidor cerrar un <xref:System.Web.WebSockets.AspNetWebSocket> conexión. Los dos métodos de controlan las solicitudes iniciadas por el cliente de la misma forma: después de que el cliente envía un mensaje al servidor para cerrar la conexión, el servidor llama a uno de estos métodos y envía una confirmación al cliente y, a continuación, el método devuelve.  
  
 Para las solicitudes iniciadas por el servidor, los dos métodos funcionan de manera diferente. El <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> método envía un mensaje al cliente para cerrar la conexión, espera una respuesta y, a continuación, se devuelve. El servidor no espera datos adicionales enviados por el cliente. En cambio, el <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> método envía un mensaje al cliente para cerrar la conexión y vuelve sin esperar una respuesta. Después de que el método vuelve, puede llamar a la <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> método y controlar la confirmación que envía el cliente o datos adicionales.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> se había desechado anteriormente.</exception>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> es encuentra en un estado de anulación.  
  
O bien 
Las operaciones de envío no están disponibles.  
  
O bien 
Las operaciones de recepción no están disponibles.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseOutputAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseOutputAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseOutputAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member CloseOutputAsync : System.Net.WebSockets.WebSocketCloseStatus * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CloseOutputAsync : System.Net.WebSockets.WebSocketCloseStatus * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="aspNetWebSocket.CloseOutputAsync (closeStatus, statusDescription, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Código de estado de la operación de cierre.</param>
        <param name="statusDescription">Mensaje de estado de la operación de cierre.</param>
        <param name="cancellationToken">Objeto que cancela una operación pendiente.</param>
        <summary>Envía un mensaje asincrónico a un cliente para cerrar la conexión. Si el servidor inicia la solicitud para cerrar la conexión, el método vuelve sin esperar una respuesta.</summary>
        <returns>Referencia a la operación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> y <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> métodos de las solicitudes iniciadas por el cliente e iniciadas por el servidor cerrar un <xref:System.Web.WebSockets.AspNetWebSocket> conexión. Los dos métodos de controlan las solicitudes iniciadas por el cliente de la misma forma: después de que el cliente envía un mensaje al servidor para cerrar la conexión, el servidor llama a uno de estos métodos y envía una confirmación al cliente y, a continuación, el método devuelve.  
  
 Para las solicitudes iniciadas por el servidor, los dos métodos funcionan de manera diferente. El <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> método envía un mensaje al cliente para cerrar la conexión, espera una respuesta y, a continuación, se devuelve. El servidor no espera datos adicionales enviados por el cliente. En cambio, el <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> método envía un mensaje al cliente para cerrar la conexión y vuelve sin esperar una respuesta. Después de que el método vuelve, puede llamar a la <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> método y controlar la confirmación que envía el cliente o datos adicionales.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se había desechado anteriormente.</exception>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> es encuentra en un estado de anulación.  
  
O bien 
Las operaciones de envío no están disponibles.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatus">
      <MemberSignature Language="C#" Value="public override Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatus As Nullable(Of WebSocketCloseStatus)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; CloseStatus { Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CloseStatus : Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt;" Usage="System.Web.WebSockets.AspNetWebSocket.CloseStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un código de estado que indica por qué un objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> se ha cerrado.</summary>
        <value>Código de estado.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se había desechado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatusDescription">
      <MemberSignature Language="C#" Value="public override string CloseStatusDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseStatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatusDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CloseStatusDescription { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CloseStatusDescription : string" Usage="System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un mensaje de estado que explica por qué un objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> se ha cerrado.</summary>
        <value>El mensaje de estado.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se había desechado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="aspNetWebSocket.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos usados por un objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET llama automáticamente a la <xref:System.Web.WebSockets.AspNetWebSocket.Dispose%2A> método en un <xref:System.Web.WebSockets.AspNetWebSocket> objeto libere los recursos que permanecen después de que ha finalizado el código de ejecución.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync (ArraySegment&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::WebSockets::WebSocketReceiveResult ^&gt; ^ ReceiveAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveAsync : ArraySegment&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;&#xA;override this.ReceiveAsync : ArraySegment&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;" Usage="aspNetWebSocket.ReceiveAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Matriz que contiene el mensaje de datos.</param>
        <param name="cancellationToken">Objeto que cancela una operación pendiente.</param>
        <summary>Recibe un único fragmento de mensaje de un cliente remoto.</summary>
        <returns>Referencia a la tarea de recibir un mensaje.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> se había desechado anteriormente.</exception>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> es encuentra en un estado de anulación.  
  
O bien 
Las operaciones de recepción no están disponibles.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task SendAsync (ArraySegment&lt;byte&gt; buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task SendAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ SendAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member SendAsync : ArraySegment&lt;byte&gt; * System.Net.WebSockets.WebSocketMessageType * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SendAsync : ArraySegment&lt;byte&gt; * System.Net.WebSockets.WebSocketMessageType * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="aspNetWebSocket.SendAsync (buffer, messageType, endOfMessage, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="messageType" Type="System.Net.WebSockets.WebSocketMessageType" />
        <Parameter Name="endOfMessage" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Matriz que contiene el mensaje de datos.</param>
        <param name="messageType">El tipo de mensaje.</param>
        <param name="endOfMessage">
          <see langword="true" /> para indicar que un fragmento es el final de un mensaje completo; si no, <see langword="false" />.</param>
        <param name="cancellationToken">Objeto que cancela una operación pendiente.</param>
        <summary>Envía un único fragmento de mensaje a un cliente remoto.</summary>
        <returns>Referencia a la tarea de enviar un mensaje.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> ya se ha desechado.</exception>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> es encuentra en un estado de anulación.  
  
O bien 
Las operaciones de envío no están disponibles.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Net.WebSockets.WebSocketState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.WebSockets.WebSocketState State" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As WebSocketState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::WebSockets::WebSocketState State { System::Net::WebSockets::WebSocketState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Net.WebSockets.WebSocketState" Usage="System.Web.WebSockets.AspNetWebSocket.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebSockets.WebSocketState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica el estado abierto o cerrado de un objeto <see cref="T:System.Web.WebSockets.AspNetWebSocket" />.</summary>
        <value>El estado actual.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se había desechado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="SubProtocol">
      <MemberSignature Language="C#" Value="public override string SubProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.SubProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SubProtocol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SubProtocol { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SubProtocol : string" Usage="System.Web.WebSockets.AspNetWebSocket.SubProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de un protocolo específico de la aplicación que un cliente remoto y un servidor pueden usar para intercambiar datos en una conexión de <see cref="T:System.Web.WebSockets.AspNetWebSocket" />.</summary>
        <value>Nombre del protocolo.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se había desechado anteriormente.</exception>
      </Docs>
    </Member>
  </Members>
</Type>