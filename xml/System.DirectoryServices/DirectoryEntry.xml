<Type Name="DirectoryEntry" FullName="System.DirectoryServices.DirectoryEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68633a7107600f33cd86951e0b7abae38448384c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410519" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DirectoryEntry : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DirectoryEntry extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.DirectoryEntry" />
  <TypeSignature Language="VB.NET" Value="Public Class DirectoryEntry&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class DirectoryEntry : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.DirectoryServices.Design.DirectoryEntryConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.DirectoryServices.DSDescription("DirectoryEntryDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>La clase <see cref="T:System.DirectoryServices.DirectoryEntry" /> encapsula un nodo u objeto en la jerarquía de Active Directory Domain Services.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta clase para enlazar a objetos, o leer y actualizar atributos. <xref:System.DirectoryServices.DirectoryEntry>, junto con las clases auxiliares, proporciona compatibilidad para el ciclo de vida de los métodos de administración y la navegación. Estos incluyen crear, eliminar, cambiar el nombre, mover un nodo secundario y enumerar a los elementos secundarios. Después de modificar un nodo, debe confirmar los cambios en orden para que se guarden en el árbol. Para obtener más información, vea la propiedad <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>.  
  
 <xref:System.DirectoryServices.DirectoryEntry> puede utilizarse para tener acceso a las entradas regulares y la información de algunos, pero no todos, de las entradas de esquema.  
  
 La jerarquía de servicios de dominio de Active Directory contiene varios miles de nodos. Cada nodo representa un objeto, como una impresora de red o un usuario en un dominio. Las redes corporativas cambian constantemente a medida que se contratan nuevos empleados y se agregan objetos como impresoras de red y equipos. Tecnología de Active Directory Service Interfaces (ADSI) proporciona maneras de agregar mediante programación estos objetos en el árbol de directorios.  
  
 Para crear una entrada de directorio en la jerarquía, utilice la <xref:System.DirectoryServices.DirectoryEntry.Children%2A> propiedad. El <xref:System.DirectoryServices.DirectoryEntry.Children%2A> propiedad es una colección que proporciona un <xref:System.DirectoryServices.DirectoryEntries.Add%2A> método, a través del cual agrega un nodo a la colección directamente debajo del nodo primario que está enlazado actualmente. Al agregar un nodo a la colección, debe especificar un nombre para el nuevo nodo y el nombre de una plantilla de esquema que desee asociar al nodo. Por ejemplo, puede usar un esquema denominado "Equipo" para agregar nuevos equipos a la jerarquía.  
  
 Esta clase también contiene atributos almacenamiento en caché, lo que puede ser útil para optimizar el tráfico de red. Para usar el almacenamiento en caché de atributo, consulte el <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propiedad.  
  
 Las clases asociadas con el <xref:System.DirectoryServices.DirectoryEntry> componente se puede usar con cualquiera de los proveedores de servicios de los servicios de dominio de Active Directory. Algunos de los proveedores son Internet Information Services (IIS), Protocolo ligero de acceso a directorios (LDAP), servicio de directorio de NetWare de Novell (NDS) y WinNT.  
  
> [!NOTE]
>  Se supone que tiene un conocimiento general de los servicios de dominio de Active Directory antes de utilizar esta clase. Para obtener más información, consulte la <xref:System.DirectoryServices?displayProperty=nameWithType> información general del espacio de nombres.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
      <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />
    </permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (object adsObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object adsObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adsObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::Object ^ adsObject);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adsObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="adsObject">Nombre del objeto nativo de Active Directory Domain Services al que se va a enlazar.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DirectoryServices.DirectoryEntry" /> que enlaza al objeto nativo de Active Directory Domain Services especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor permite que un programa utilizar los métodos y propiedades de la <xref:System.DirectoryServices.DirectoryEntry> clase en un objeto nativo de servicios de dominio de Active Directory que implementa la interfaz de IAD mediante una API nativa. Para obtener más información acerca de la interfaz de IAD, vea el tema [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) en la biblioteca de MSDN en [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso en la que se va a enlazar <see cref="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String)" /> al directorio. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> se inicializa en este valor.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DirectoryServices.DirectoryEntry" /> que enlaza esta instancia al nodo de Active Directory Domain Services ubicado en la ruta de acceso especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se enlaza un <xref:System.DirectoryServices.DirectoryEntry> el objeto a la entrada de directorio en la ruta de acceso especificada y muestra el <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propiedad de cada entrada secundaria que se especifica mediante el nodo <xref:System.DirectoryServices.DirectoryEntry.Children%2A> propiedad.  
  
```vb  
Public Class PrintChildren  
  
    'Entry point which delegates to C-style main Private Function.  
    Public Overloads Shared Sub Main()  
        Main(System.Environment.GetCommandLineArgs())  
    End Sub  
  
    Overloads Public Shared Sub Main(args() As String)  
        Dim objDE As DirectoryEntry  
        Dim strPath As String = "LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com"  
        If args.Length > 0 Then  
            strPath = args(1)  
        End If   
        ' Create a new DirectoryEntry with the given path.  
        objDE = New DirectoryEntry(strPath)  
  
        Dim objChildDE As DirectoryEntry  
        For Each objChildDE In  objDE.Children  
            Console.WriteLine(objChildDE.Path)  
        Next objChildDE  
    End Sub 'Main  
End Class 'PrintChildren  
  
```  
  
```csharp  
public class PrintChildren{  
   public static void Main(String[] args)  
   {  
      DirectoryEntry objDE;  
      String strPath="LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com";  
      if(args.Length>0)strPath=args[1];  
  
      // Create a new DirectoryEntry with the given path.  
      objDE=new DirectoryEntry(strPath);  
  
      foreach(DirectoryEntry objChildDE in objDE.Children)  
        Console.WriteLine(objChildDE.Path);  
   }  
 }  
  
```  
  
```cpp#  
int main()  
{  
    String^ args[] = Environment::GetCommandLineArgs();  
    DirectoryEntry^ objDE;  
    String^ strPath = "LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com";  
    if(args->Length>1)  
    {  
        strPath=args[1];  
    }  
  
    // Create a new DirectoryEntry with the given path.  
    objDE = gcnew DirectoryEntry(strPath);  
  
    System::Collections::IEnumerator^ enum0 = objDE->Children->GetEnumerator();  
    while (enum0->MoveNext())  
    {  
        DirectoryEntry^ objChildDE = safe_cast<DirectoryEntry^>(enum0->Current);  
        Console::WriteLine(objChildDE->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path, string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, username As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path, System::String ^ username, System::String ^ password);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> se inicializa en este valor.</param>
        <param name="username">Nombre de usuario que se va a usar para autenticar el cliente. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> se inicializa en este valor.</param>
        <param name="password">Contraseña que se va a usar para autenticar el cliente. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.Password" /> se inicializa en este valor.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryEntry (string path, string username, string password, System.DirectoryServices.AuthenticationTypes authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string username, string password, valuetype System.DirectoryServices.AuthenticationTypes authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, username As String, password As String, authenticationType As AuthenticationTypes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DirectoryEntry(System::String ^ path, System::String ^ username, System::String ^ password, System::DirectoryServices::AuthenticationTypes authenticationType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="authenticationType" Type="System.DirectoryServices.AuthenticationTypes" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.Path" /> se inicializa en este valor.</param>
        <param name="username">Nombre de usuario que se va a usar para autenticar el cliente. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.Username" /> se inicializa en este valor.</param>
        <param name="password">Contraseña que se va a usar para autenticar el cliente. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.Password" /> se inicializa en este valor.</param>
        <param name="authenticationType">Uno de los valores de <see cref="T:System.DirectoryServices.AuthenticationTypes" />. La propiedad <see cref="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" /> se inicializa en este valor.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" />
        </permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Path" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Username" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Password" />
        <altmember cref="T:System.DirectoryServices.AuthenticationTypes" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationType">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.AuthenticationTypes AuthenticationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DirectoryServices.AuthenticationTypes AuthenticationType" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.AuthenticationType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationType As AuthenticationTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::AuthenticationTypes AuthenticationType { System::DirectoryServices::AuthenticationTypes get(); void set(System::DirectoryServices::AuthenticationTypes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSAuthenticationType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AuthenticationTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo de autenticación que se va a usar.</summary>
        <value>Uno de los valores de <see cref="T:System.DirectoryServices.AuthenticationTypes" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anteriores a [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], el valor predeterminado es <xref:System.DirectoryServices.AuthenticationTypes.None>. A partir de [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], el valor predeterminado es <xref:System.DirectoryServices.AuthenticationTypes.Secure>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AuthenticationTypes" />
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntries Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntries Children" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As DirectoryEntries" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntries ^ Children { System::DirectoryServices::DirectoryEntries ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSChildren")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntries</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las entradas secundarias de este nodo en la jerarquía de Active Directory Domain Services.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.DirectoryEntries" /> que contiene las entradas secundarias de este nodo en la jerarquía de Servicios de dominio de Active Directory.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las entradas secundarias son sólo los elementos secundarios inmediatos de este nodo.  
  
 Utilice esta propiedad para buscar, recuperar o crear una entrada de directorio en la jerarquía. Esta propiedad es una colección que, junto con las capacidades de iteración normales, proporciona un <xref:System.DirectoryServices.DirectoryEntries.Add%2A> método a través del cual agrega un nodo a la colección directamente debajo del nodo primario que está enlazado actualmente. Al agregar un nodo a la colección, debe especificar un nombre para el nuevo nodo y el nombre de una plantilla de esquema que desee asociar al nodo. Por ejemplo, puede usar un esquema denominado "Equipo" para agregar nuevos equipos a la jerarquía.  
  
> [!NOTE]
>  De forma predeterminada, se realizan cambios en una memoria caché de localmente. Después de modificar o agregar un nodo, debe llamar a la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> método para confirmar los cambios en orden para que se guarden en el árbol. Si se llama a <xref:System.DirectoryServices.DirectoryEntry.RefreshCache> antes de llamar a <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, se perderán los cambios no confirmados en la caché de propiedades. Para obtener más información, consulte el <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> y <xref:System.DirectoryServices.DirectoryEntry.RefreshCache> métodos y el <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para recuperar las entradas secundarias.</permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntries" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> y libera todos los recursos del sistema asociados a este componente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a este método para liberar recursos del sistema no administrado, sin tener que esperar para la recolección.  
  
 Después de una llamada a <xref:System.DirectoryServices.DirectoryEntry.Close%2A>, cualquier operación en el <xref:System.DirectoryServices.DirectoryEntry> puede provocar excepciones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitChanges">
      <MemberSignature Language="C#" Value="public void CommitChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CommitChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Guarda los cambios que se realizan en una entrada de directorio en el almacén de directorios subyacente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, cambios en las propiedades se realizan localmente en una memoria caché y los valores de propiedad que debe leerse se almacenan en caché después de la primera lectura. Para obtener más información, vea <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>.  
  
 Los cambios realizados en la memoria caché incluyen cambios en las propiedades, así como llamadas a <xref:System.DirectoryServices.DirectoryEntries.Add%2A> (si se trata de la entrada recién creada).  
  
> [!CAUTION]
>  Si se llama a <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> antes de llamar a <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, se perderán los cambios no confirmados en la caché de propiedades.  
  
## <a name="security"></a>Seguridad  
  
-   Use la <xref:System.DirectoryServices.DirectoryServicesPermission> clase para leer, escribir, eliminar, cambiar y agregar a la jerarquía de servicios de dominio de Active Directory. Enumeración asociada: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess>.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para confirmar los cambios.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una copia de esta entrada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry CopyTo(class System.DirectoryServices.DirectoryEntry newParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (newParent As DirectoryEntry) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ CopyTo(System::DirectoryServices::DirectoryEntry ^ newParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="newParent">Nombre distintivo del objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que será el elemento primario de la copia que se va a crear.</param>
        <summary>Crea una copia de esta entrada como entrada secundaria de la entrada primaria especificada.</summary>
        <returns>Objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que representa la copia de esta entrada como elemento secundario del nuevo elemento primario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> es `true`, llame a <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> en el nuevo objeto para realizar la copia permanentes.  
  
 El proveedor de protocolo ligero de acceso a directorios (LDAP) no admite actualmente la <xref:System.DirectoryServices.DirectoryEntry.CopyTo%28System.DirectoryServices.DirectoryEntry%29> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.DirectoryServices.DirectoryEntry" /> que se ha especificado no es un contenedor.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para realizar una copia del elemento especificado <see cref="T:System.DirectoryServices.DirectoryEntry" /> objeto.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry CopyTo(class System.DirectoryServices.DirectoryEntry newParent, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (newParent As DirectoryEntry, newName As String) As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::DirectoryEntry ^ CopyTo(System::DirectoryServices::DirectoryEntry ^ newParent, System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newParent">DN del objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que será el elemento primario de la copia que se va a crear.</param>
        <param name="newName">Nombre de la copia de esta entrada.</param>
        <summary>Crea una copia de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> como elemento secundario del objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> primario, con el nuevo nombre especificado.</summary>
        <returns>Copia de esta entrada con otro nombre como entrada secundaria de la entrada primaria especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El proveedor de protocolo ligero de acceso a directorios (LDAP) no admite actualmente este método.  
  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> es `true`, llame a <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> en el nuevo objeto para realizar la copia permanentes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que se ha especificado no es un contenedor.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para realizar una copia de la entrada.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTree">
      <MemberSignature Language="C#" Value="public void DeleteTree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteTree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.DeleteTree" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteTree ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteTree();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina esta entrada y todo el subárbol de la jerarquía de Active Directory Domain Services.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De los proveedores de Interfaces de servicio de Active Directory (ADSI) proporcionado por el sistema, solo el Lightweight Directory Access Protocol (LDAP) actualmente es compatible con esta operación.  
  
> [!CAUTION]
>  La entrada y todo el subárbol se eliminan de la jerarquía de servicios de dominio de Active Directory.  
  
## <a name="security"></a>Seguridad  
  
-   Use <xref:System.DirectoryServices.DirectoryServicesPermission> para eliminar las entradas de la jerarquía de servicios de dominio de Active Directory. Enumeración asociada: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.DirectoryServices.DirectoryEntry" /> que se ha especificado no es un contenedor.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para eliminar la entrada y sus elementos secundarios.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos (que no sean de memoria) usados por el objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama a este método público <xref:System.ComponentModel.Component.Dispose%2A> método y <xref:System.Object.Finalize%2A> método. <xref:System.ComponentModel.Component.Dispose%2A> se invoca el protegido <xref:System.DirectoryServices.DirectoryEntry.Dispose%2A> método con el `disposing` parámetro establecido en `true`. <xref:System.Object.Finalize%2A> invoca <xref:System.ComponentModel.Component.Dispose%2A> con `disposing` establecido en `false`.  
  
 Cuando el `disposing` parámetro es `true`, este método libera todos los recursos retenidos por los objetos administrados que este <xref:System.DirectoryServices.DirectoryEntry> referencias a objetos. Este método invoca al método <xref:System.ComponentModel.Component.Dispose%2A> de cada uno de los objetos a los que se hace referencia.  
  
 Para obtener más información sobre la <xref:System.ComponentModel.Component.Dispose%2A> y <xref:System.Object.Finalize%2A> métodos, vea [reemplazar el método Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.ComponentModel.Component.Dispose" /> puede recibir varias llamadas de otros objetos. Al invalidar <see cref="M:System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see cref="M:System.ComponentModel.Component.Dispose" />. Para obtener más información sobre cómo implementar <see cref="M:System.ComponentModel.Component.Dispose" />, consulte [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</para>
        </block>
        <altmember cref="M:System.ComponentModel.Component.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (path As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso de la entrada que se va a comprobar.</param>
        <summary>Determina si la ruta de acceso especificada representa una entrada real en el servicio de directorio.</summary>
        <returns>
          Es <see langword="true" /> si la ruta de acceso especificada representa una entrada válida en el servicio de directorio; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se toma un argumento y determina si la ruta de acceso corresponde a válido <xref:System.DirectoryServices.DirectoryEntry>.  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
' Determine whether the given path is correct for the DirectoryEntry.  
If DirectoryEntry.Exists(myADSPath) Then  
   Console.WriteLine("The path {0} is valid",myADSPath)  
Else  
   Console.WriteLine("The path {0} is invalid",myADSPath)  
End If  
  
```  
  
```csharp  
string myADSPath ="LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Determine whether the given path is correct for the DirectoryEntry.  
if (DirectoryEntry.Exists(myADSPath))  
{  
    Console.WriteLine("The path {0} is valid",myADSPath);  
}  
    else  
{  
    Console.WriteLine("The path {0} is invalid",myADSPath);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
// Determine whether the given path is correct for the DirectoryEntry.  
if (DirectoryEntry::Exists(myADSPath))   
{  
    Console::WriteLine("The path {0} is valid", myADSPath);  
}   
else   
{  
    Console::WriteLine("The path {0} is invalid", myADSPath);  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guid">
      <MemberSignature Language="C#" Value="public Guid Guid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Guid" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Guid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guid As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Guid { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSGuid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el GUID del objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Estructura <see cref="T:System.Guid" /> que representa el GUID del objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se enlaza a un objeto de servicios de dominio de Active Directory, utilice el <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> y <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propiedades de la <xref:System.DirectoryServices.DirectoryEntry> clase. Este ejemplo obtiene el especificado por el usuario <xref:System.DirectoryServices.DirectoryEntry> y muestra su <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> y <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propiedades.  
  
```vb  
Dim myADSPath As [String] = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
' Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:" + myDirectoryEntry.Guid.ToString)  
Console.WriteLine("The Native GUID of the ADS" + "object:" + myDirectoryEntry.NativeGuid)  
  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:"+  
                  myDirectoryEntry.Guid);  
Console.WriteLine("The Native GUID of the ADS"+  
                  "object:"+myDirectoryEntry.NativeGuid);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console::WriteLine("The GUID of the ADS object: {0}", myDirectoryEntry->Guid);  
Console::WriteLine("The Native GUID of the ADS object: {0}",  
                   myDirectoryEntry->NativeGuid);  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (string methodName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(string methodName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (methodName As String, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::String ^ methodName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="methodName">Nombre del método que se va a invocar.</param>
        <param name="args">Matriz de tipo <see cref="T:System.Object" /> que contiene los argumentos del método que se va a invocar.</param>
        <summary>Llama a un método en el objeto nativo de Active Directory Domain Services.</summary>
        <returns>Valor devuelto por el método invocado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el valor devuelto del método nativo implementa la interfaz de IAD correspondiente <xref:System.DirectoryServices.DirectoryEntry> se devuelve. Para obtener más información acerca de la interfaz de IAD, vea el tema [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) en la biblioteca de MSDN en [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.DirectoryServicesCOMException">El método nativo inició una excepción <see cref="T:System.Runtime.InteropServices.COMException" />.</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">El método nativo inició una excepción <see cref="T:System.Reflection.TargetInvocationException" />. La propiedad <see cref="P:System.Exception.InnerException" /> contiene una excepción <see cref="T:System.Runtime.InteropServices.COMException" /> que contiene información sobre el error real.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para invocar el método.</permission>
      </Docs>
    </Member>
    <Member MemberName="InvokeGet">
      <MemberSignature Language="C#" Value="public object InvokeGet (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeGet(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeGet (propertyName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeGet(System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nombre de la propiedad que se va a obtener.</param>
        <summary>Obtiene una propiedad del objeto nativo de Active Directory Domain Services.</summary>
        <returns>Objeto que representa la propiedad solicitada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no debe usarse. El <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> propiedad se puede utilizar para tener acceso a las propiedades de la <xref:System.DirectoryServices.DirectoryEntry> objeto.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para obtener la propiedad del objeto nativo.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Properties" />
      </Docs>
    </Member>
    <Member MemberName="InvokeSet">
      <MemberSignature Language="C#" Value="public void InvokeSet (string propertyName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeSet(string propertyName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeSet (propertyName As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeSet(System::String ^ propertyName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyName">Nombre de la propiedad que se va a establecer.</param>
        <param name="args">Objeto de Active Directory Domain Services que se va a establecer.</param>
        <summary>Establece una propiedad en el objeto nativo de Active Directory Domain Services.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no debe usarse. El <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> propiedad se puede utilizar para tener acceso a las propiedades de la <xref:System.DirectoryServices.DirectoryEntry> objeto.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para establecer la propiedad en el objeto nativo.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Properties" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mueve este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.DirectoryServices.DirectoryEntry newParent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(class System.DirectoryServices.DirectoryEntry newParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (newParent As DirectoryEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::DirectoryServices::DirectoryEntry ^ newParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="newParent">Entrada primaria a la que desea mover esta entrada.</param>
        <summary>Mueve este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> al elemento primario especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> es `true`, llame a la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> método en el nuevo objeto para que el desplazamiento sea permanente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.DirectoryServices.DirectoryEntry" /> que se ha especificado no es un contenedor.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para mover la entrada.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.DirectoryServices.DirectoryEntry newParent, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(class System.DirectoryServices.DirectoryEntry newParent, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (newParent As DirectoryEntry, newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::DirectoryServices::DirectoryEntry ^ newParent, System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newParent" Type="System.DirectoryServices.DirectoryEntry" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newParent">Entrada primaria a la que desea mover esta entrada.</param>
        <param name="newName">Nuevo nombre de esta entrada.</param>
        <summary>Mueve este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> al elemento primario especificado y cambia su nombre por el valor especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> es `true`, llame a <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> en el nuevo objeto para que el desplazamiento sea permanente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.DirectoryServices.DirectoryEntry" /> que se ha especificado no es un contenedor.</exception>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre del objeto tal y como lo asignó el servicio de directorio subyacente.</summary>
        <value>Nombre del objeto tal y como lo asignó el servicio de directorio subyacente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este nombre, junto con <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>, permite distinguir esta entrada de sus entradas relacionadas y debe ser único entre sus elementos relacionados en cada contenedor.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.DirectoryServices.DirectoryEntry> para el nodo en los servicios de dominio de Active Directory. A continuación, muestra la <xref:System.DirectoryServices.DirectoryEntry.Name%2A> y <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propiedades de sus nodos secundarios.  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,  
           _DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
Console.WriteLine("DirectoryEntry Name :" + myDirectoryEntry.Name)  
Console.WriteLine(ControlChars.NewLine _  
        + "The child entries for this node in the Active Directory Domain Services hierarchy")  
  
Dim myDirectoryEntryChild As DirectoryEntry  
For Each myDirectoryEntryChild In  myDirectoryEntry.Children  
   Console.WriteLine(myDirectoryEntryChild.Path)  
Next myDirectoryEntryChild  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
Console.WriteLine("DirectoryEntry Name :"+ myDirectoryEntry.Name);  
Console.WriteLine("\nThe child entries for this node "+  
   "in the Active Directory Domain Services hierarchy");  
  
foreach(DirectoryEntry myDirectoryEntryChild in  
   myDirectoryEntry.Children)  
{  
   Console.WriteLine(myDirectoryEntryChild.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
Console::WriteLine("DirectoryEntry Name : {0}", myDirectoryEntry->Name);  
Console::WriteLine("\nThe child entries for this node in the Active Directory Domain Services hierarchy");  
  
Collections::IEnumerator^ myEnumerator = myDirectoryEntry->Children->GetEnumerator();  
while (myEnumerator->MoveNext())   
{  
    DirectoryEntry^ myDirectoryEntryChild = safe_cast<DirectoryEntry^>(myEnumerator->Current);  
    Console::WriteLine(myDirectoryEntryChild->Path);  
}  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para obtener el nombre.</permission>
      </Docs>
    </Member>
    <Member MemberName="NativeGuid">
      <MemberSignature Language="C#" Value="public string NativeGuid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeGuid" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.NativeGuid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeGuid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeGuid { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSNativeGuid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el GUID del objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> tal y como lo devolvió el proveedor.</summary>
        <value>Estructura <see cref="T:System.Guid" /> que representa el GUID del objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />, tal y como lo devolvió el proveedor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propiedad al enlazar un objeto en los servicios de dominio de Active Directory.  
  
> [!NOTE]
>  El proveedor de protocolo ligero de acceso a directorios (LDAP) devuelve el identificador único global de un <xref:System.DirectoryServices.DirectoryEntry> en un formato diferente que los servicios de Internet Information Server (IIS), servidor de directorio de NetWare de Novell (NDS) y WinNT proveedores.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> y <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propiedades de la <xref:System.DirectoryServices.DirectoryEntry> clase. Este ejemplo obtiene el especificado por el usuario <xref:System.DirectoryServices.DirectoryEntry> y muestra su <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> y <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> propiedades.  
  
```vb  
Dim myADSPath As [String] = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
  
' Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:" + myDirectoryEntry.Guid.ToString)  
Console.WriteLine("The Native GUID of the ADS" + "object:" +   
             myDirectoryEntry.NativeGuid)  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
             DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console.WriteLine("The GUID of the ADS object:"+  
                  myDirectoryEntry.Guid);  
Console.WriteLine("The Native GUID of the ADS"+  
                  "object:"+myDirectoryEntry.NativeGuid);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
  
// Display the Guid and NativeGuid.  
Console::WriteLine("The GUID of the ADS object: {0}", myDirectoryEntry->Guid));  
Console::WriteLine("The Native GUID of the ADS object: {0}",  
                   myDirectoryEntry->NativeGuid);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="NativeObject">
      <MemberSignature Language="C#" Value="public object NativeObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NativeObject" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.NativeObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NativeObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSNativeObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto nativo de interfaces de servicios de Active Directory (ADSI).</summary>
        <value>Objeto ADSI nativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta propiedad para convertir el objeto nativo de servicios de dominio de Active Directory, que implementa la interfaz de IAD, cuando desea utilizar una interfaz COM. Para obtener más información acerca de la interfaz de IAD, vea el tema [IAD](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) en la biblioteca de MSDN en [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp).  
  
 Este objeto es para escenarios avanzados que no se puede lograr con la <xref:System.DirectoryServices?displayProperty=nameWithType> clases independientes. Para usarla, debe importar una de las interfaces COM de la familia de IAD, a continuación, convierte esta propiedad en esa interfaz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectSecurity">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.ObjectSecurity" />
      <MemberSignature Language="VB.NET" Value="Public Property ObjectSecurity As ActiveDirectorySecurity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectorySecurity ^ ObjectSecurity { System::DirectoryServices::ActiveDirectorySecurity ^ get(); void set(System::DirectoryServices::ActiveDirectorySecurity ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSObjectSecurity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectorySecurity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el descriptor de seguridad para esta entrada.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectorySecurity" /> que representa el descriptor de seguridad para esta entrada de directorio.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
          <see cref="F:System.Security.Permissions.SecurityAction.Demand" /> se realiza cuando una aplicación establece el <see cref="P:System.DirectoryServices.DirectoryEntry.ObjectSecurity" /> propiedad, si la <see cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" /> propiedad es <see langword="false" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntryConfiguration Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntryConfiguration Options" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As DirectoryEntryConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntryConfiguration ^ Options { System::DirectoryServices::DirectoryEntryConfiguration ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSOptions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntryConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las opciones específicas del proveedor para esta entrada.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.DirectoryEntryConfiguration" /> que contiene las opciones específicas del proveedor para esta entrada.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para obtener las opciones.</permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntryConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntry Parent" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntry ^ Parent { System::DirectoryServices::DirectoryEntry ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSParent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el elemento primario de esta entrada en la jerarquía de Active Directory Domain Services.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que representa el elemento primario de esta entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo busca un determinado <xref:System.DirectoryServices.DirectoryEntry> y muestra el <xref:System.DirectoryServices.DirectoryEntry.Name%2A> y <xref:System.DirectoryServices.DirectoryEntry.Parent%2A> del resultado.  
  
```vb  
Dim myADSPath As String = _   
          "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
Console.WriteLine("Parent is :" + myDirectoryEntry.Parent.Path)  
  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
Console.WriteLine("Parent is :"+myDirectoryEntry.Parent.Path);  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
Console::WriteLine("Parent is :{0}", myDirectoryEntry->Parent->Path);  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para obtener al elemento primario.</permission>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password {  void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSPassword")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Establece la contraseña que se va a usar para autenticar el cliente.</summary>
        <value>Contraseña que se va a usar para autenticar el cliente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer la <xref:System.DirectoryServices.DirectoryEntry.Username%2A> y <xref:System.DirectoryServices.DirectoryEntry.Password%2A> propiedades para especificar credenciales alternativas con las que se va a obtener acceso a la información de los servicios de dominio de Active Directory. Cualquier otro <xref:System.DirectoryServices.DirectoryEntry> recuperar objetos de esta instancia (por ejemplo, mediante <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) se crean automáticamente con las mismas credenciales alternativas.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.DirectoryServices.DirectoryEntry.Username%2A> y <xref:System.DirectoryServices.DirectoryEntry.Password%2A> propiedades de la <xref:System.DirectoryServices.DirectoryEntry> clase. Este ejemplo obtiene el especificado por el usuario <xref:System.DirectoryServices.DirectoryEntry> y <xref:System.DirectoryServices.DirectoryEntry.Path%2A> de todos sus <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  
  
```vb  
Dim myADSPath As String = _  
      "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Create an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
myDirectoryEntry.Username = UserName  
myDirectoryEntry.Password = SecurelyStoredPassword  
  
' Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:")  
Dim myChildDirectoryEntry As DirectoryEntry  
For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
   Console.WriteLine(myChildDirectoryEntry.Path)  
Next myChildDirectoryEntry   
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,  
         DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry.Username = UserName;  
myDirectoryEntry.Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:");  
foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
   Console.WriteLine(myChildDirectoryEntry.Path);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  
myDirectoryEntry->Username = UserName;  
myDirectoryEntry->Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console::WriteLine("The Child ADS objects are:");  
Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
while (myEnum->MoveNext())   
{  
    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>  
             (myEnum->Current);  
    Console::WriteLine(myChildDirectoryEntry->Path);  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Username" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Ruta de acceso de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propiedad identifica de forma única esta entrada en un entorno de red. Esta entrada siempre puede recuperarse mediante este <xref:System.DirectoryServices.DirectoryEntry.Path%2A>.  
  
 Establecer el <xref:System.DirectoryServices.DirectoryEntry.Path%2A> recupera una nueva entrada del directorio almacenar; no cambia la ruta de acceso de la entrada enlazada actualmente.  
  
 Las clases asociadas con el <xref:System.DirectoryServices.DirectoryEntry> componente se puede usar con cualquiera de los proveedores de servicios de los servicios de dominio de Active Directory. Algunos de los proveedores son Internet Information Services (IIS), Protocolo ligero de acceso a directorios (LDAP), servicio de directorio de NetWare de Novell (NDS) y WinNT.  
  
> [!NOTE]
>  La sección de la <xref:System.DirectoryServices.DirectoryEntry.Path%2A> que identifica al proveedor (que precede a "://") distingue mayúsculas de minúsculas. Por ejemplo, "LDAP: / /" o "WinNT: / /".  
  
 La sintaxis de la <xref:System.DirectoryServices.DirectoryEntry.Path%2A> propiedad varía según el proveedor. Algunos escenarios comunes son los siguientes:  
  
 WinNT  
  
-   Conectarse a un grupo en un equipo. Por ejemplo, "WinNT **://\<nombre de dominio > /\<nombre_equipo > /\<nombre de grupo >**". Si se conecta a un equipo local, "WinNT: / /**\<nombre_equipo > /\<nombre de grupo >**".  
  
-   Conéctese a un usuario en un equipo. Por ejemplo, "WinNT: / /**\<nombre de dominio > /\<nombre_equipo > /\<nombre de usuario >**". Si se conecta a un equipo local, "WinNT: / /**\<nombre_equipo > /\<nombre de usuario >**".  
  
-   Conectarse a servicios en un equipo. Por ejemplo, "WinNT: / /**\<nombre de dominio > /\<nombre_equipo > /\<nombre del servicio >**". Si se conecta a un equipo local, "WinNT: / /**\<nombre_equipo > /\<nombre del servicio >**".  
  
-   Detectar todos los dominios de la red. Por ejemplo, "WinNT:" los dominios pueden encontrarse con una enumeración de los elementos secundarios de esta entrada.  
  
 LDAP  
  
-   Conectarse a un grupo en un dominio. Por ejemplo, "LDAP://CN=\<nombre de grupo >, CN =\<usuarios >, DC =\<componente de dominio >, DC =\<componente de dominio >,...".  
  
-   Conéctese a un usuario en un dominio. Por ejemplo, "LDAP://CN=\<nombre de usuario completo >, CN =\<usuarios >, DC =\<componente de dominio >, DC =\<componente de dominio >,...".  
  
-   Conectarse a equipos en un dominio. Por ejemplo, "LDAP://CN=\<nombre_equipo >, CN =\<equipos >, DC =\<componente de dominio >, DC =\<componente de dominio >,...".  
  
 IIS  
  
-   Conectarse a un directorio Web. Por ejemplo, "IIS://LocalHost/W3SVC/1/ROOT/\<nombre del directorio Web >".  
  
 Para enlazar con el dominio actual mediante LDAP, use la ruta de acceso "LDAP://RootDSE", a continuación, obtener el contexto de nomenclatura predeterminado y volver a enlazar la entrada. Por ejemplo:  
  
```csharp  
String str = ent.Properties["defaultNamingContext"][0];  
DirectoryEntry domain = new DirectoryEntry("LDAP://" + str);  
```  
  
 Para obtener más información, consulte la documentación de su proveedor y el tema [utilizando Active Directory Service Interfaces](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/using_adsi.asp) en la biblioteca de MSDN en [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.PropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.PropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::PropertyCollection ^ Properties { System::DirectoryServices::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSProperties")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las propiedades de Active Directory Domain Services para este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.PropertyCollection" /> que contiene las propiedades que se establecen en esta entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la propiedad no se inicializa, <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> llama a la interfaz ADSI [IADs:: Get](http://msdn2.microsoft.com/library/aa746347.aspx) método para recuperar el valor de la memoria caché. Si no se ha cargado el subordinado, [IADs:: Get](http://msdn2.microsoft.com/library/aa746347.aspx) llama implícitamente a [IADs::GetInfo](http://msdn2.microsoft.com/library/aa746349.aspx). Este método carga los valores de las propiedades compatibles que no se ha establecido en la caché desde el almacén de directorios subyacente. Las llamadas subsiguientes a <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> recupera los valores de propiedad sólo en caché. Para controlar la carga de caché de propiedades, llame a <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>.  
  
 **Tenga en cuenta** el <xref:System.DirectoryServices.DirectoryEntry.Properties%2A> propiedad no se admite para su uso con la extensión de cliente de Active Directory (DSClient) para [!INCLUDE[WinNt4Family](~/includes/winnt4family-md.md)].  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para recuperar las propiedades.</permission>
        <altmember cref="T:System.DirectoryServices.PropertyCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RefreshCache">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carga los valores de propiedad de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> en la caché de propiedades.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RefreshCache">
      <MemberSignature Language="C#" Value="public void RefreshCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshCache ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCache();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Carga los valores de propiedad de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> en la caché de propiedades.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Se perderán los cambios no confirmados en la caché de propiedades. Use la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> método para conservar los cambios en el almacén de directorio.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para actualizar la caché de propiedades.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="RefreshCache">
      <MemberSignature Language="C#" Value="public void RefreshCache (string[] propertyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RefreshCache(string[] propertyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub RefreshCache (propertyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RefreshCache(cli::array &lt;System::String ^&gt; ^ propertyNames);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="propertyNames">Matriz de las propiedades especificadas.</param>
        <summary>Carga los valores de las propiedades especificadas en la caché de propiedades.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Se perderán los cambios no confirmados en la caché de propiedades. Use <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> para conservar los cambios en el almacén de directorio.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para actualizar la caché de propiedades.</permission>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public void Rename (string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rename(string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntry.Rename(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (newName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rename(System::String ^ newName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newName">Nuevo nombre de la entrada.</param>
        <summary>Cambia el nombre de este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Esto afectará también a la ruta de acceso que se utiliza para hacer referencia a esta entrada.  
  
 Si <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> es `true`, asegúrese de llamar a la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> método en el nuevo objeto para que el desplazamiento sea permanente.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
      </Docs>
    </Member>
    <Member MemberName="SchemaClassName">
      <MemberSignature Language="C#" Value="public string SchemaClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaClassName" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.SchemaClassName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaClassName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SchemaClassName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSSchemaClassName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la clase de esquema para este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</summary>
        <value>Nombre de la clase de esquema para este objeto <see cref="T:System.DirectoryServices.DirectoryEntry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este es el mismo que el <xref:System.DirectoryServices.DirectoryEntry.Name%2A> propiedad de la <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> propiedad.  
  
 Un <xref:System.DirectoryServices.DirectoryEntry> esquema del objeto define sus propiedades y métodos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> y <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> propiedades de la <xref:System.DirectoryServices.DirectoryEntry> clase. Este ejemplo obtiene el especificado por el usuario <xref:System.DirectoryServices.DirectoryEntry> y se obtienen todos sus elementos secundarios si el <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> es un objeto contenedor.  El <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> es un objeto contenedor si el <xref:System.DirectoryServices.DirectoryEntry.Name%2A> de ese objeto es "contenedor".  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Creates an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
' Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName)  
  
' Gets the SchemaEntry of the ADS object.  
Dim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  
  
If String.Compare(mySchemaEntry.Name, "container") = 0 Then  
   Dim myChildDirectoryEntry As DirectoryEntry  
   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
      Console.WriteLine(myChildDirectoryEntry.Path)  
   Next  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName);  
  
// Gets the SchemaEntry of the ADS object.  
DirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  
  
if (string.Compare(mySchemaEntry.Name, "container") == 0)  
{  
   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
      Console.WriteLine(myChildDirectoryEntry.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console::WriteLine("Schema class name:{0}", myDirectoryEntry->SchemaClassName);  
  
// Gets the SchemaEntry of the ADS Object.  
DirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  
  
if (!String::Compare(mySchemaEntry->Name, "container"))   
{  
    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
    while (myEnum->MoveNext())   
    {  
        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
        Console::WriteLine(myChildDirectoryEntry->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para obtener el nombre del esquema.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.SchemaEntry" />
      </Docs>
    </Member>
    <Member MemberName="SchemaEntry">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry SchemaEntry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.DirectoryEntry SchemaEntry" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.SchemaEntry" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaEntry As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::DirectoryEntry ^ SchemaEntry { System::DirectoryServices::DirectoryEntry ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSSchemaEntry")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto de esquema para esta entrada.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que representa la clase de esquema para esta entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esquema de una entrada determina una lista de sus nombres de propiedad obligatorios y opcionales.  
  
 Puede utilizar esta propiedad para averiguar qué propiedades y métodos están disponibles en el objeto asociado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> y <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> propiedades de la <xref:System.DirectoryServices.DirectoryEntry> clase. Este ejemplo obtiene el especificado por el usuario <xref:System.DirectoryServices.DirectoryEntry> objeto y se obtienen todos sus elementos secundarios si el <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> es un objeto contenedor.  El <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> es un objeto contenedor si el <xref:System.DirectoryServices.DirectoryEntry.Name%2A> de ese objeto es "contenedor".  
  
```vb  
Dim myADSPath As String = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Creates an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  
  
' Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:" + myDirectoryEntry.SchemaClassName)  
  
' Gets the SchemaEntry of the ADS object.  
Dim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  
  
If String.Compare(mySchemaEntry.Name, "container") = 0 Then  
   Dim myChildDirectoryEntry As DirectoryEntry  
   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
      Console.WriteLine(myChildDirectoryEntry.Path)  
   Next  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console.WriteLine("Schema class name:"+myDirectoryEntry.SchemaClassName);  
  
// Gets the SchemaEntry of the ADS object.  
DirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  
  
if (string.Compare(mySchemaEntry.Name,"container") == 0)  
{  
   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
      Console.WriteLine(myChildDirectoryEntry.Path);  
}  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Creates an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  
  
// Display the 'SchemaClassName'.  
Console::WriteLine("Schema class name:{0}", myDirectoryEntry->SchemaClassName);  
  
// Gets the SchemaEntry of the ADS Object*.  
DirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  
  
if (!String::Compare(mySchemaEntry->Name, S"container"))   
{  
    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
    while (myEnum->MoveNext())   
    {  
        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
        Console::WriteLine(myChildDirectoryEntry->Path);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Para obtener el objeto de esquema.</permission>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.SchemaClassName" />
      </Docs>
    </Member>
    <Member MemberName="UsePropertyCache">
      <MemberSignature Language="C#" Value="public bool UsePropertyCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsePropertyCache" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.UsePropertyCache" />
      <MemberSignature Language="VB.NET" Value="Public Property UsePropertyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UsePropertyCache { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSUsePropertyCache")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si hay que confirmar la caché después de cada operación.</summary>
        <value>
          Es <see langword="true" /> si no es necesario confirmar la caché después de cada operación; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, cambios en las propiedades se realizan localmente en una memoria caché y los valores de propiedad que debe leerse se almacenan en caché después de la primera lectura. Cuando el <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propiedad es `true`, el acceso a la <xref:System.DirectoryServices.DirectoryEntry> propiedades del objeto es más rápido. Si se establece en `false` hará que la memoria caché se confirma después de cada operación.  
  
 Si el <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> propiedad es `true` y desea confirmar que se almacena en caché los cambios, llame a la <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> método. Para actualizar valores en la memoria caché después de realizar cambios en el directorio, llame a la <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> método.  
  
> [!CAUTION]
>  Si se llama a <xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A> antes de llamar a <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>, se perderán los cambios no confirmados en la caché de propiedades.  
  
> [!NOTE]
>  El proveedor de servicios de Internet Information Server (IIS) no es compatible con la confirmación de la caché después de cada operación.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.CommitChanges" />
        <altmember cref="M:System.DirectoryServices.DirectoryEntry.RefreshCache" />
      </Docs>
    </Member>
    <Member MemberName="Username">
      <MemberSignature Language="C#" Value="public string Username { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Username" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntry.Username" />
      <MemberSignature Language="VB.NET" Value="Public Property Username As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Username { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.DirectoryServices.DSDescription("DSUsername")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de usuario que se va a usar para autenticar el cliente.</summary>
        <value>Nombre de usuario que se va a usar para autenticar el cliente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer la <xref:System.DirectoryServices.DirectoryEntry.Username%2A> y <xref:System.DirectoryServices.DirectoryEntry.Password%2A> para especificar credenciales alternativas con las que se va a obtener acceso a la información de los servicios de dominio de Active Directory. Cualquier otro <xref:System.DirectoryServices.DirectoryEntry> recuperar objetos de esta instancia (por ejemplo, mediante <xref:System.DirectoryServices.DirectoryEntry.Children%2A>) se crean automáticamente con las mismas credenciales alternativas.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.DirectoryServices.DirectoryEntry.Username%2A> y <xref:System.DirectoryServices.DirectoryEntry.Password%2A> propiedades de la <xref:System.DirectoryServices.DirectoryEntry> clase. Este ejemplo obtiene el especificado por el usuario <xref:System.DirectoryServices.DirectoryEntry> y <xref:System.DirectoryServices.DirectoryEntry.Path%2A> de todos sus <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  
  
```vb  
Dim myADSPath As String = _  
      "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com"  
  
' Create an Instance of DirectoryEntry.  
Dim myDirectoryEntry As New DirectoryEntry(myADSPath)  
myDirectoryEntry.Username = UserName  
myDirectoryEntry.Password = SecurelyStoredPassword  
  
' Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:")  
Dim myChildDirectoryEntry As DirectoryEntry  
For Each myChildDirectoryEntry In  myDirectoryEntry.Children  
   Console.WriteLine(myChildDirectoryEntry.Path)  
Next myChildDirectoryEntry  
```  
  
```csharp  
String myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry.Username = UserName;  
myDirectoryEntry.Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console.WriteLine("The Child ADS objects are:");  
foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  
   Console.WriteLine(myChildDirectoryEntry.Path);  
  
```  
  
```cpp#  
String^ myADSPath = "LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com";  
  
// Create an Instance of DirectoryEntry.  
DirectoryEntry^ myDirectoryEntry = new DirectoryEntry(myADSPath);  
myDirectoryEntry->Username = UserName;  
myDirectoryEntry->Password = SecurelyStoredPassword;  
  
// Get the Child ADS objects.  
Console::WriteLine("The Child ADS objects are:");  
Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  
while (myEnum->MoveNext())   
{  
    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  
    Console::WriteLine(myChildDirectoryEntry->Path);  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DirectoryServices.DirectoryEntry.Password" />
      </Docs>
    </Member>
  </Members>
</Type>