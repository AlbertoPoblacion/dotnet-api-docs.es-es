<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3190022f4f0c8167570d4dfa17fea05691d4aa2b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429355" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents any time zone in the world.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una zona horaria es una región geográfica en la que se usa la misma hora.  
  
 El <xref:System.TimeZoneInfo> clase ofrece importantes mejoras sobre la <xref:System.TimeZone> (clase), que proporciona funcionalidad limitada.  
  
 La <xref:System.TimeZone> clase reconoce solo la zona horaria local y convierte las horas entre hora Universal coordinada (UTC) y la hora local. A <xref:System.TimeZoneInfo> objeto puede representar cualquier zona horaria y los métodos de la <xref:System.TimeZoneInfo> clase puede usarse para convertir la hora de una zona horaria en la hora correspondiente de cualquier otra zona horaria. Los miembros de la <xref:System.TimeZoneInfo> clase admiten las siguientes operaciones:  
  
-   Recuperar una zona horaria que ya está definida por el sistema operativo.  
  
-   Enumerar las zonas horarias que están disponibles en un sistema.  
  
-   Convertir horas entre zonas horarias diferentes.  
  
-   Crear una nueva zona horaria que ya no está definida por el sistema operativo.  
  
-   Al serializar una zona horaria para su recuperación posterior.  
  
> [!NOTE]
>  Una instancia de la <xref:System.TimeZoneInfo> clase es inmutable. Una vez que se ha creado una instancia de un objeto, no se puede modificar sus valores.  
  
 No se puede instanciar un <xref:System.TimeZoneInfo> objeto mediante el `new` palabra clave. En su lugar, debe llamar a uno de los miembros estáticos de la <xref:System.TimeZoneInfo> clase que se muestra en la tabla siguiente.  
  
|Nombre de miembro estático|Descripción|  
|------------------------|-----------------|  
|Método <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Crea una zona horaria personalizada a partir de los datos proporcionados por la aplicación.|  
|Método <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Crea una instancia de una zona horaria definida en el registro del sistema basado en el identificador de la zona.|  
|Método <xref:System.TimeZoneInfo.FromSerializedString%2A>|Deserializa un valor de cadena para volver a crear un previamente serializado <xref:System.TimeZoneInfo> objeto.|  
|Método <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Devuelve un enumerable <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.TimeZoneInfo> objetos que representan todas las zonas horarias que están disponibles en el sistema local.|  
|Propiedad <xref:System.TimeZoneInfo.Local%2A>|Crea una instancia de un <xref:System.TimeZoneInfo> objeto que representa la zona horaria local.|  
|Propiedad <xref:System.TimeZoneInfo.Utc%2A>|Crea una instancia de un <xref:System.TimeZoneInfo> objeto que representa la zona UTC.|  
  
 Puede usar el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método para crear una zona horaria que no está definida en el registro del sistema local. A continuación, puede usar el <xref:System.TimeZoneInfo.ToSerializedString%2A> propiedad que se va a guardar la información de zona horaria del objeto como una cadena, que se pueden almacenar en alguna forma que sea accesible a la aplicación. Puede usar el <xref:System.TimeZoneInfo.FromSerializedString%2A> volver al método para convertir una cadena serializada de un <xref:System.TimeZoneInfo> objeto.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</summary>
        <value>Objeto que indica la diferencia horaria entre la hora estándar de la zona horaria actual y la hora universal coordinada (hora UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo de tiempo devuelto por la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad puede oscilar entre 14 horas (para una zona horaria que va 14 horas por delante de la hora Universal coordinada (UTC)) y-14 horas (para una zona horaria que va 14 horas por detrás de la hora UTC). Zonas horarias que están por delante de UTC tienen un desplazamiento positivo; zonas horarias que están detrás de la hora UTC tienen una diferencia negativa.  
  
 El <xref:System.TimeZoneInfo.BaseUtcOffset%2A> valor se representa como un número entero de minutos. No puede incluir un número de fracciones de minutos.  
  
> [!NOTE]
>  Dado que <xref:System.TimeZoneInfo.BaseUtcOffset%2A> es una propiedad de la <xref:System.TimeZoneInfo> objeto en lugar de la <xref:System.TimeZoneInfo.AdjustmentRule> objeto, la <xref:System.TimeZoneInfo> clase aplica un único desplazamiento a la hora UTC a todos los ajustes de una zona horaria. Para reflejar una zona horaria que haya modificado su desplazamiento a la hora UTC, debe crear una nueva zona horaria con el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método.  
  
 El <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad difiere de la <xref:System.TimeZoneInfo.GetUtcOffset%2A> método de las maneras siguientes:  
  
-   El <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad devuelve la diferencia entre la hora UTC y la hora de la zona horaria estándar; la <xref:System.TimeZoneInfo.GetUtcOffset%2A> método devuelve la diferencia entre la hora UTC y la hora de la zona horaria en un momento determinado de tiempo.  
  
-   El <xref:System.TimeZoneInfo.GetUtcOffset%2A> método refleja la aplicación de las reglas de ajuste a la zona horaria actual; el <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad no es así.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad para mostrar la diferencia entre la hora local y la hora Universal coordinada (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears cached time zone data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los datos de zona horaria almacenados en memoria caché contiene datos en la zona horaria local, la zona de hora Universal coordinada (UTC) y cualquier zona horaria que se recupera mediante métodos como <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> y <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>.  
  
 Puede llamar a la <xref:System.TimeZoneInfo.ClearCachedData%2A> método para reducir la memoria dedicada a la memoria caché de la aplicación de la información de zona horaria ni para reflejar el hecho de que ha cambiado la zona horaria del sistema local.  
  
 No se recomienda almacenar las referencias a las zonas de hora UTC y locales. Después de llamar a la <xref:System.TimeZoneInfo.ClearCachedData%2A> (método), estas variables de objeto quedará sin definir <xref:System.TimeZoneInfo> objetos que ya no son referencias a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Por ejemplo, en el código siguiente, la segunda llamada a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método produce una <xref:System.ArgumentException> porque el `local` variable ya no se considera igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a time to the time in a particular time zone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time to the time in a particular time zone.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> método aplica a las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 Esta sobrecarga de la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método determina la zona horaria de origen del valor de la `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad, como se muestra en la tabla siguiente.  
  
|Valor de la propiedad Kind|Zona horaria de origen|Comportamiento del método|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Convierte la hora local en la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Convierte la hora Universal coordinada (UTC) en la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Supone que <xref:System.TimeZoneInfo.Local%2A>.|Convierte la hora local en la hora de `destinationTimeZone`.|  
  
 El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece como se muestra en la tabla siguiente.  
  
|Condición|Devuelve el valor de la propiedad Kind|  
|---------------|----------------------------------|  
|El valor de `destinationTimeZone` es <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|El valor de `destinationTimeZone` es <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Todos los demás valores de fecha y hora y zonas horarias de destino.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si el valor de la `dateTime` parámetro es una hora local ambigua, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora local no válida, este método produce una <xref:System.ArgumentException>.  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 También puede convertir a o a la hora UTC mediante una llamada a la <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> y <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> métodos.  
  
   
  
## Examples  
 En el ejemplo siguiente se convierte una matriz de valores de fecha y hora a veces en la zona horaria del este de Estados Unidos y Canadá. Muestra que la zona horaria de origen depende del <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad del origen de <xref:System.DateTime> valor. También muestra que el <xref:System.TimeZoneInfo.ConvertTime%2A> método toma en cuenta, los ajustes de zona horaria porque se produce un ajuste de zona horaria en el origen y el destino zonas horarias a las 2:00 A.M. en el 7 de noviembre de 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value of the <paramref name="dateTime" /> parameter represents an invalid time.</exception>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método reconoce sólo la regla de ajuste actual al realizar la conversión si <paramref name="dateTime" /> se trata como una hora local o si <paramref name="destinationTimeZone" /> es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede convertir con precisión veces durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to convert.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time to the time in a particular time zone.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> método aplica a las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 Esta sobrecarga difiere de las otras sobrecargas de la <xref:System.TimeZoneInfo.ConvertTime%2A> método aceptando un <xref:System.DateTimeOffset> valor como su primer parámetro. Esto identifica la fecha y hora como un desplazamiento de hora Universal coordinada (UTC) en lugar de la fecha y hora en una zona horaria determinada. Como resultado, el `dateTimeOffset` parámetro no puede representar una hora ambigua o una hora no válida.  
  
 Para convertir el `dateTimeOffset` valor en la hora de la zona horaria de destino, este método tiene en cuenta las reglas de ajuste en vigor en la zona horaria de destino.  
  
 Si la conversión de `dateTimeOffset` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se convierte una matriz de <xref:System.DateTimeOffset> valores para los tiempos de la zona horaria del este de Estados Unidos y Canadá. Ilustra que el <xref:System.TimeZoneInfo.ConvertTime%2A> método toma en cuenta, los ajustes de zona horaria porque se produce un ajuste de zona horaria en el origen y el destino zonas horarias a las 2:00 A.M. en el 7 de noviembre de 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método se aplica sólo la regla de ajuste actual para la conversión de zona horaria si <paramref name="dateTimeOffset" /> se trata como una hora local o si <paramref name="destinationTimeZone" /> es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede convertir con precisión veces durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZone">The time zone of <c>dateTime</c>.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time from one time zone to another.</summary>
        <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTime%2A> método aplica a las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro debe corresponder a la `sourceTimeZone` parámetro, tal como se muestra en la tabla siguiente.  
  
|Valor DateTime.Kind|valor sourceTimeZone|Comportamiento del método|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Es igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|No es igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Produce una <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Es igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|No es igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Produce una <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Cualquier.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
  
 También puede convertir a o desde la hora Universal coordinada (UTC) mediante una llamada a la <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> y <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> métodos.  
  
 El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece como se muestra en la tabla siguiente.  
  
|Condición|Devuelve el valor de la propiedad Kind|  
|---------------|----------------------------------|  
|El argumento `destinationTimeZone` es <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|El argumento `destinationTimeZone` es <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Todos los otros fecha y valores de hora, zonas horarias de origen y zonas horarias de destino.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si el valor de la `dateTime` parámetro es una hora ambigua en la zona horaria de origen, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora no válida en la zona horaria de origen, este método produce una <xref:System.ArgumentException>.  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 El <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> método inicie una excepción un <xref:System.ArgumentException> excepción si el <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad de la `dateTime` argumento es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> pero la `sourceTimeZone` el argumento no es <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Para determinar si la zona horaria de origen es la zona horaria local o la zona horaria universal, el método comprueba la igualdad de referencia en lugar de probar la igualdad de valores con el <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> método. Tenga en cuenta que <xref:System.TimeZoneInfo> objetos que representan la zona horaria local y que se recuperan mediante una llamada a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método no tienen igualdad referencial con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Además, <xref:System.TimeZoneInfo> objetos que representan los local o zona horaria universal y que se recuperan recorriendo en iteración la colección devuelta por la <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método no tienen igualdad referencial con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Como alternativa, puede llamar a la <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> método para convertir la hora estándar de Hawai en hora local.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Local" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="F:System.DateTimeKind.Local" />.  -or-  The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Utc" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  -or-  The <paramref name="dateTime" /> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="sourceTimeZone" /> parameter is <see langword="null" />.  -or-  The <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual al realizar la conversión si <paramref name="dateTime" /> se trata como una hora local, si <paramref name="sourceTimeZone" /> es <see cref="P:System.TimeZoneInfo.Local" />, o si <paramref name="destinationTimeZone" /> es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede convertir con precisión veces durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a time to the time in another time zone based on a time zone identifier.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método aplica a las reglas de ajuste en vigor en el `destinationTimeZoneId` zona horaria.  
  
 Esta sobrecarga es idéntica en gran medida a una llamada a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método, salvo que permite especificar la zona horaria de destino mediante su identificador en lugar de una referencia de objeto. Este método es más útil cuando se debe convertir una hora sin tener que recuperar el objeto de zona horaria que corresponde a él y no es necesario saber si el tiempo convertido es estándar o el horario de verano.  
  
 El <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> método determina la zona horaria de origen del valor de la `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad, como se muestra en la tabla siguiente.  
  
|Valor de la propiedad Kind|Zona horaria de origen|Comportamiento del método|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Convierte la hora local en la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Convierte la hora Universal coordinada (UTC) en la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Supone que <xref:System.TimeZoneInfo.Local%2A>.|Convierte la hora local en la hora de `destinationTimeZone`.|  
  
 El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece como se muestra en la tabla siguiente.  
  
|Condición|Devuelve el valor de la propiedad Kind|  
|---------------|----------------------------------|  
|El valor de `destinationTimeZone` es `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Cualquier otro `destinationTimeZone` valor.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si el valor de la `dateTime` parámetro es una hora local ambigua, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora local no válida, este método produce una <xref:System.ArgumentException>.  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 Este método recupera la zona horaria cuyo identificador se especifica mediante el `destinationTimeZoneId` parámetro desde el registro. No puede recuperar un objeto de zona horaria que se crea usando el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. El `destinationTimeZoneId` parámetro debe corresponder exactamente con la clave del registro de la zona horaria en longitud, pero no en los casos, una coincidencia correcta para que se produzca; es decir, la comparación de `destinationTimeZoneId` con zona horaria identificadores distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to convert.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método aplica a las reglas de ajuste en vigor en el `destinationTimeZoneId` zona horaria.  
  
 Esta sobrecarga equivale a llamar a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método, salvo que permite especificar la zona horaria de destino mediante su identificador en lugar de una referencia de objeto. Este método es más útil cuando se debe convertir una hora sin tener que recuperar el objeto de zona horaria que corresponde a él y no es necesario saber si el tiempo convertido es estándar o el horario de verano.  
  
 Dado que el `dateTimeOffset` parámetro representa una fecha y tiempo junto con ese tiempo de desplazamiento de hora Universal coordinada (UTC), no puede representar una hora ambigua o una hora no válida.  
  
 Este método recupera la zona horaria cuyo identificador se especifica mediante el `destinationTimeZoneId` parámetro desde el registro. No puede recuperar un objeto de zona horaria que se crea usando el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. El `destinationTimeZoneId` parámetro debe corresponder exactamente con la clave del registro de la zona horaria en longitud, pero no en los casos, una coincidencia correcta para que se produzca; es decir, la comparación de `destinationTimeZoneId` con zona horaria identificadores distingue mayúsculas de minúsculas.  
  
 Para convertir el `dateTimeOffset` valor en la hora de la zona horaria de destino, el método tiene en cuenta las reglas de ajuste en vigor en la zona horaria de destino.  
  
 Si la conversión de `dateTimeOffset` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZoneId">The identifier of the source time zone.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time from one time zone to another based on time zone identifiers.</summary>
        <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método aplica a las reglas de ajuste en vigor en el `destinationTimeZoneId` zona horaria.  
  
 Aunque es similar a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método, puede usar <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> para especificar las zonas horarias de origen y de destino mediante sus identificadores en lugar de sus <xref:System.TimeZoneInfo> objetos. Este método es más útil cuando se debe convertir una hora sin tener que recuperar el objeto de zona horaria que corresponde a él y no es necesario saber si el tiempo convertido es estándar o el horario de verano.  
  
 Este método recupera las zonas horarias cuyos identificadores son los `sourceTimeZoneId` y `destinationTimeZoneId` parámetros desde el registro. No puede recuperar objetos de zona horaria que se crean mediante el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método.  
  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro debe corresponder a la `sourceTimeZoneId` parámetro, tal como se muestra en la tabla siguiente.  
  
|Valor DateTime.Kind|valor sourceTimeZone|Comportamiento del método|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Es igual a `TimeZoneInfo.Utc.Id`.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|No es igual a `TimeZoneInfo.Utc.Id`.|Produce una <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Es igual a `TimeZoneInfo.Local.Id`.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|No es igual a `TimeZoneInfo.Local.Id`.|Produce una <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Cualquier.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
  
 Dado que se basa en las llamadas a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método realiza una búsqueda entre mayúsculas y minúsculas para buscar las zonas horarias que corresponden a `sourceTimeZoneId` y `destinationTimeZoneId`.  
  
 Si el valor de la `dateTime` parámetro es una hora ambigua en la zona horaria de origen, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora no válida en la zona horaria de origen, este método produce una <xref:System.ArgumentException>.  
  
 El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> a menos que la zona horaria de destino es la hora Universal coordinada (UTC), en cuyo caso se establece en <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> método para mostrar la hora que corresponde a la hora del sistema local en ocho ciudades del mundo.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter does not correspond to the source time zone.  -or-  <paramref name="dateTime" /> is an invalid time in the source time zone.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZoneId" /> is <see langword="null" />.  -or-  <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifiers were found, but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry keys that hold time zone data.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="sourceTimeZoneId" /> identifier was not found on the local system.  -or-  The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The Coordinated Universal Time (UTC).</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.</summary>
        <returns>The date and time in the destination time zone. Its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" /> if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Utc" />; otherwise, its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> método aplica a las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 El comportamiento exacto de este método depende del valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro, tal como se muestra en la tabla siguiente.  
  
|DateTime.Kind (propiedad)|Conversión|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Produce una <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte de hora Universal coordinada (UTC).|  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se convierte la hora Universal coordinada (UTC) en hora Central.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of <paramref name="dateTime" /> is <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método se aplica sólo la regla de ajuste actual para la conversión de zona horaria si <paramref name="destinationTimeZone" /> es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede convertir con precisión veces durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a date and time to Coordinated Universal Time (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <summary>Converts the specified date and time to Coordinated Universal Time (UTC).</summary>
        <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> value's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La conversión exacta realizada depende del valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro, tal como se muestra en la tabla siguiente.  
  
|DateTime.Kind (propiedad)|Conversión|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Convierte la hora local en hora Universal coordinada (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Se da por supuesto `dateTime` es la hora local y convierte la hora local a UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Devuelve `dateTime` sin cambios.|  
  
 Si `dateTime` corresponde a una hora local ambigua, este método supone que es la hora local estándar. Si `dateTime` corresponde a una hora local no válida, el método produce una <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Si del local del equipo actual zona horaria incluye varias reglas de ajuste, esta sobrecarga de la <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> método puede devolver resultados diferentes a los <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> y <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> métodos. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> siempre se aplica la regla de ajuste actual a la conversión de zona horaria, o no `dateTime` se encuentra dentro de su intervalo de fechas. Y cuando se ejecuta en [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> también se aplica la regla de ajuste actual a la conversión de zona horaria, o no `dateTime` se encuentra dentro de su intervalo de fechas.  
  
 Si el equivalente de UTC de `dateTime` es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o una versión posterior que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, respectivamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la conversión de valores de hora cuya <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, y <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, respectivamente. También muestra la conversión de horas ambiguas y no válidas.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> returns <see langword="true" />.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método se aplica sólo la regla de ajuste actual a la conversión de zona horaria. Como resultado, el método no puede convertir con precisión veces durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZone">The time zone of <c>dateTime</c>.</param>
        <summary>Converts the time in a specified time zone to Coordinated Universal Time (UTC).</summary>
        <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> object's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro es igual a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> y `sourceTimeZone` parámetro es igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, este método devuelve `dateTime` sin realizar ninguna conversión.  
  
 Si `dateTime` corresponde a una hora ambigua, este método supone que es la hora estándar de la zona horaria de origen. Si `dateTime` corresponde a una hora no válida, este método produce una <xref:System.ArgumentException>.  
  
 Si el equivalente de hora Universal coordinada (UTC) de `dateTime` es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o una versión posterior que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, respectivamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera la fecha actual del sistema local lo convierte en hora Universal coordinada (UTC), a continuación, lo convierte en la hora estándar de Tokio y finalmente se convierte de hora estándar de Tokio a UTC. Tenga en cuenta que las dos horas UTC son idénticas.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" />
          <see langword=".Kind" /> is <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  -or-  <paramref name="dateTime" /><see langword=".Kind" /> is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Local" />.  -or-  <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> returns <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], el método se aplica sólo la regla de ajuste actual para la conversión de zona horaria si <paramref name="sourceTimeZone" /> es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede convertir con precisión veces durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Defines a time zone that is not found on the local computer.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The name of the new time zone's standard time.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, and a standard time display name.</summary>
        <returns>The new time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> método es adecuado para la creación de una zona horaria que no tiene ajustes (es decir, una zona horaria que no admite el horario de verano). Para definir una zona horaria que incluye los ajustes del horario de verano, utilice el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método.  
  
 En la tabla siguiente muestra la relación entre los parámetros que se proporcionan para el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método y las propiedades de la <xref:System.TimeZoneInfo> objeto devueltos por la llamada al método.  
  
|Parámetro CreateCustomTimeZone|Propiedad TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Por lo general, nombre de hora estándar de la zona horaria y su identificador son los mismos. Sin embargo, la longitud del identificador de la zona horaria no debe superar los 32 caracteres. La cadena pasada a la `displayName` parámetro sigue un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), entre paréntesis. Esto va seguido de una cadena que identifica la zona horaria, o uno o más de las ciudades, regiones o países de la zona horaria, o ambos. Por ejemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una zona horaria personalizada para las regiones Mawson y Holme Bay de Antártida. A continuación, muestra el resultado de convertir la hora local en la hora de la nueva zona horaria.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The new time zone's standard time name.</param>
        <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
        <param name="adjustmentRules">An array that augments the base UTC offset for a particular period.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, and daylight saving time rules.</summary>
        <returns>A <see cref="T:System.TimeZoneInfo" /> object that represents the new time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método es adecuado para la creación de una zona horaria que admite el horario de verano. Para definir una zona horaria que no admite el horario de verano, utilice el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método.  
  
 En la tabla siguiente muestra la relación entre los parámetros que se proporcionan para el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método y los miembros de la <xref:System.TimeZoneInfo> objeto devueltos por la llamada al método.  
  
|Parámetro CreateCustomTimeZone|Miembro TimeZoneInfo|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Una matriz de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objetos devueltos por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método.|  
  
 Por lo general, nombre de hora estándar de la zona horaria y su identificador son los mismos. Sin embargo, la longitud del identificador de la zona horaria no debe superar los 32 caracteres. La cadena pasada a la `displayName` parámetro sigue un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), entre paréntesis. Esto va seguido de una cadena que identifica la zona horaria, o uno o más de las ciudades, regiones o países de la zona horaria, o ambos. Por ejemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 El `baseUtcOffset` parámetro define el desplazamiento de hora Universal coordinada (UTC) para todas las reglas de ajuste de la zona horaria de la zona horaria personalizada. En otras palabras, la <xref:System.TimeZoneInfo> modelo de objetos se supone que desplazamiento de la zona horaria a la hora UTC es constante a lo largo de la vida de la zona horaria y existe independientemente de determinadas reglas de ajuste. Para reflejar una zona horaria que haya cambiado su desplazamiento a la hora UTC, debe crear un nuevo objeto de zona horaria.  
  
 Las reglas de ajuste de una zona horaria se definen haciendo lo siguiente:  
  
1.  Una llamada a la <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> método para definir las horas inicial y final transición para cada regla de ajuste.  
  
2.  Llamar a la <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> método para cada regla de ajuste.  
  
3.  Asignar las reglas de ajuste a una matriz que se puede pasar como el `adjustmentRules` parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una zona horaria personalizada para la base Palmer y la Isla Amberes en Antártida. A continuación, convierte la hora local en la hora de la nueva zona horaria y muestra el resultado.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  -or-  The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  -or-  One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  -or-  A date can have multiple adjustment rules applied to it.  -or-  The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The standard time name of the new time zone.</param>
        <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
        <param name="adjustmentRules">An array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that augment the base UTC offset for a particular period.</param>
        <param name="disableDaylightSavingTime">
          <see langword="true" /> to discard any daylight saving time-related information present in <c>adjustmentRules</c> with the new object; otherwise, <see langword="false" />.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, daylight saving time rules, and a value that indicates whether the returned object reflects daylight saving time information.</summary>
        <returns>The new time zone. If the <paramref name="disableDaylightSavingTime" /> parameter is <see langword="true" />, the returned object has no daylight saving time data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta sobrecarga de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método para crear una zona horaria personalizada cuya compatibilidad para el horario de verano se puede determinar mediante condiciones en tiempo de ejecución.  
  
 En la tabla siguiente muestra la relación entre los parámetros que se proporcionan para el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método y los miembros de la <xref:System.TimeZoneInfo> objeto devueltos por la llamada al método.  
  
|Parámetro CreateCustomTimeZone|Propiedad TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Si `disableDaylightSavingTime` es `false`; <xref:System.String.Empty?displayProperty=nameWithType> si `disableDaylightSavingTime` es `true`.|  
|`adjustmentRules`|Una matriz de <xref:System.TimeZoneInfo.AdjustmentRule> objetos devueltos por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método si `disableDaylightSavingTime` es `false`; una matriz vacía devuelta por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método si `disableDaylightSavingTime` es `true`.|  
|`disableDaylightSavingTime`|No <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Por lo general, nombre de hora estándar de la zona horaria y su identificador son los mismos. Sin embargo, la longitud del identificador de la zona horaria no debe superar los 32 caracteres. La cadena pasada a la `displayName` parámetro sigue un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), entre paréntesis. Esto va seguido de una cadena que identifica la zona horaria, o uno o más de las ciudades, regiones o países de la zona horaria, o ambos. Por ejemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Las reglas de ajuste de una zona horaria se definen haciendo lo siguiente:  
  
1.  Una llamada a la <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> método para definir los inicial y final de las reglas de transición para cada regla de ajuste.  
  
2.  Llamar a la <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> método para cada regla de ajuste.  
  
3.  Asignar las reglas de ajuste a una matriz que se puede pasar como el `adjustmentRules` parámetro.  
  
 Si `disableDaylightSavingTime` parámetro es `false`, la operación de este método es idéntica a la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> de sobrecarga. Si `disableDaylightSavingTime` es `true`, el objeto devuelto no incluye ninguna regla de ajuste y un <xref:System.TimeZoneInfo.DaylightName%2A> propiedad cuyo valor es una cadena vacía.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una zona horaria personalizada para la base Palmer y la Isla Amberes en Antártida. Establece el `disableDaylightSavingTime` parámetro en la llamada a la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método `true`. A continuación, muestra el nombre del horario de verano de la nueva zona horaria, si hay alguno y el número de reglas de ajuste para confirmar que la nueva zona horaria no tiene ninguna información del horario de verano.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  -or-  The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  -or-  One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  -or-  A date can have multiple adjustment rules applied to it.  -or-  The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name for the current time zone's daylight saving time.</summary>
        <value>Nombre para mostrar del horario de verano de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre para mostrar se localiza en función de la referencia cultural instalada con el sistema operativo Windows.  
  
 A <xref:System.TimeZoneInfo.DaylightName%2A> propiedad cuyo valor no es <xref:System.String.Empty?displayProperty=nameWithType> o `null` no indica necesariamente que la zona horaria admite el horario de verano. Para determinar si la zona horaria admite el horario de verano, compruebe el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad.  
  
 En la mayoría de los casos, el <xref:System.TimeZoneInfo.DaylightName%2A> propiedad de las zonas horarias definidas en el registro no es <xref:System.String.Empty?displayProperty=nameWithType> o `null`. Sin embargo, el <xref:System.TimeZoneInfo.DaylightName%2A> propiedad de zonas horarias personalizadas se puede establecer en <xref:System.String.Empty?displayProperty=nameWithType>. Esto se produce cuando se crean las zonas horarias personalizadas mediante la <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga y la `disableDaylightSavingTime` parámetro es `true`. Por lo tanto, el código nunca debe asumir que el valor de la <xref:System.TimeZoneInfo.DaylightName%2A> propiedad no es `null` ni estar vacío.  
  
 El <xref:System.TimeZoneInfo.DaylightName%2A> propiedad es equivalente a la <xref:System.TimeZone.DaylightName%2A> propiedad de la <xref:System.TimeZone> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `DisplayDateWithTimeZoneName` que usa el <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar si se debe mostrar el nombre de hora estándar o el nombre del horario de verano de una zona horaria.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the general display name that represents the time zone.</summary>
        <value>Nombre para mostrar general de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre para mostrar se localiza en función de la referencia cultural instalada con el sistema operativo Windows.  
  
 Zona horaria nombres para mostrar para las zonas horarias del sistema Windows siguen un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), entre paréntesis. Para la hora Universal coordinada, el acrónimo GMT y sin desplazamiento se encierra entre paréntesis.  Esto va seguido de una cadena que identifica la zona horaria o uno o más de las ciudades, regiones o países de la zona horaria. Por ejemplo:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.TimeZoneInfo> objeto que representa la zona horaria local y genera su nombre para mostrar y el nombre de hora estándar así como el nombre del horario de verano. El resultado se muestra para un sistema de la zona horaria del Pacífico Zona horaria estándar del Pacífico.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether two <see cref="T:System.TimeZoneInfo" /> objects are equal.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">A second object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another object are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.TimeZoneInfo" /> object that is equal to the current instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método convierte o convierte `obj` a una <xref:System.TimeZoneInfo> de objeto y lo compara con la instancia actual. La prueba de igualdad se basa en una comparación de valores. Actual <xref:System.TimeZoneInfo> instancia y `obj` se consideran iguales en las siguientes condiciones:  
  
-   El tipo de tiempo de ejecución de `obj` es <xref:System.TimeZoneInfo>.  
  
-   Los dos objetos tienen el mismo <xref:System.TimeZoneInfo.Id%2A> valor de propiedad.  
  
-   Los dos objetos tienen las mismas reglas de ajuste.  
  
 Si `obj` es `null` este método devuelve `false`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.Equals%28System.Object%29> método para determinar si la zona horaria local es hora del Pacífico u hora.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">A second object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another <see cref="T:System.TimeZoneInfo" /> object are equal.</summary>
        <returns>
          <see langword="true" /> if the two <see cref="T:System.TimeZoneInfo" /> objects are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Igualdad se basa en una comparación de valores. Dos <xref:System.TimeZoneInfo> objetos se consideran iguales en las siguientes condiciones:  
  
-   El valor de sus <xref:System.TimeZoneInfo.Id%2A> propiedad es el mismo.  
  
-   Tienen las mismas reglas de ajuste.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Devuelve el valor booleano que es el resultado de la evaluación de la expresión siguiente:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Si el `other` parámetro es una variable <xref:System.TimeZoneInfo> objeto, este método devuelve `false`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> método para determinar si la zona horaria local es hora del Pacífico u hora.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The time zone identifier, which corresponds to the <see cref="P:System.TimeZoneInfo.Id" /> property.</param>
        <summary>Retrieves a <see cref="T:System.TimeZoneInfo" /> object from the registry based on its identifier.</summary>
        <returns>An object whose identifier is the value of the <paramref name="id" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `id` parámetro debe corresponder exactamente con la clave del registro de la zona horaria en longitud, pero no en los casos, una coincidencia correcta para que se produzca; es decir, la comparación de `id` con zona horaria identificadores distingue mayúsculas de minúsculas. Si desea recuperar los objetos de zona horaria basándose en coincidencias parciales, puede escribir procedimientos personalizados que funcionan con la colección de solo lectura de <xref:System.TimeZoneInfo> objetos devueltos por la <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método.  
  
 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> intenta hacer coincidir `id` a los nombres de las subclaves de la bifurcación de HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones del registro en Windows XP y Windows Vista. Esta bifurcación no contiene necesariamente una lista completa de identificadores de zona horaria. Si es necesario por una aplicación, puede crear una zona horaria determinada mediante una llamada a una de las sobrecargas de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método o mediante una llamada a <xref:System.TimeZoneInfo.FromSerializedString%2A> para deserializar una <xref:System.TimeZoneInfo> objeto que representa la zona horaria necesaria. Sin embargo, las zonas horarias creadas mediante estas llamadas al método no se incluyen en el registro y no se puede recuperar mediante el <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método. Puede tener acceso a estas zonas horarias personalizadas sólo a través de la referencia de objeto devuelta por la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> o <xref:System.TimeZoneInfo.FromSerializedString%2A> llamada al método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método para recuperar la zona horaria estándar de Tokio. Esto <xref:System.TimeZoneInfo> objeto, a continuación, se utiliza para convertir la hora local a la hora de Tokio y para determinar si es hora estándar de Tokio o del horario de verano de Tokio.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to hold information about the time zone.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The time zone identifier specified by <paramref name="id" /> was not found. This means that a registry key whose name matches <paramref name="id" /> does not exist, or that the key exists but does not contain any time zone data.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string representation of the serialized <see cref="T:System.TimeZoneInfo" /> object.</param>
        <summary>Deserializes a string to re-create an original serialized <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>The original serialized object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hay una alternativa a proporcionar todo el código necesario para crear una zona horaria que no se encuentra en el registro. Puede definir una zona horaria personalizada y, o bien usar la <xref:System.TimeZoneInfo.ToSerializedString%2A> método en un archivo ejecutable independiente o el programa de instalación de la aplicación para guardar la zona horaria como una cadena de uso. La aplicación, a continuación, puede recuperar esta cadena desde su ubicación de almacenamiento y crear instancias de él mediante el <xref:System.TimeZoneInfo.FromSerializedString%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se intenta recuperar la Antártida/Polo Sur zona horaria del sistema local. Si se produce un error, el código intenta recuperar la información sobre la zona horaria de un archivo de texto en el directorio de aplicación. Si se produce un error en este intento, el código crea la zona horaria y escribe información sobre la zona horaria en el archivo de texto.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> parameter is <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> parameter is a null string.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">The source parameter cannot be deserialized back into a <see cref="T:System.TimeZoneInfo" /> object.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that apply to the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>An array of objects for this time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método recupera una matriz de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objetos. Cada objeto de la matriz define la fecha efectiva de inicio y finalización de ese ajuste de zona horaria, así como su delta (la cantidad exacta de forma que el ajuste hace que cambie la hora). Además, dos propiedades devuelven <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> objetos que definen cuándo se produce cada transición anual del horario estándar de.  
  
 Si una zona horaria tiene varias reglas de ajuste, por lo general se ordenan de más antiguo (en el índice 0) a la versión más reciente (en el índice <xref:System.Array.Length%2A> – 1).  
  
 Si una zona horaria no tiene ninguna regla de ajuste, la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método devuelve una matriz vacía (una matriz cuya <xref:System.Array.Length%2A> es cero).  
  
 Las modificaciones en los elementos de la matriz devuelta por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método no se reflejan en las reglas de ajuste que pertenecen a una zona horaria determinada. Para modificar las reglas de ajuste de una zona horaria (como para reflejar su transición histórica hacia y desde el horario de verano) debe crear una nueva zona horaria con las reglas de ajuste adecuado, en lugar de modificar uno existente.  
  
   
  
## Examples  
 En el ejemplo siguiente se recuperan todas las zonas horarias definidas en el local system y muestra información completa sobre sus reglas de ajuste en la consola.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to make an in-memory copy of the adjustment rules.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
        <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento exacto de este método depende de la relación entre el <xref:System.DateTime.Kind%2A> propiedad y el <xref:System.TimeZoneInfo> objeto, como se muestra en la tabla siguiente.  
  
|Tipo de objeto TimeZoneInfo|Valor de la propiedad Kind|Comportamiento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Hora ambigua devuelve los desplazamientos de `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` a la hora local y, a continuación, devuelve los desplazamientos de hora ambigua para esa hora.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Cualquier valor.|Produce una <xref:System.ArgumentException>.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Local> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` a la zona horaria especificada y, a continuación, determina si esa hora es ambigua.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina si `dateTime` es ambiguo en la zona horaria especificada.|  
  
 El orden de <xref:System.TimeSpan> objetos en la matriz devuelta por este método no está definido. Sin embargo, puede determinar qué elemento representa un desplazamiento de hora estándar de la zona horaria comparando su valor con la zona horaria <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad. Para asignar una hora ambigua a la hora de una zona horaria estándar, consulte [Cómo: resolver horas ambiguas](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `ShowPossibleUtcTimes` que usa el <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> método para asignar una hora ambigua a su posible tiempo de espera de hora Universal coordinada (UTC) correspondiente.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 A continuación, se puede llamar al método utilizando código como el siguiente:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> is not an ambiguous time.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual al determinar si <paramref name="dateTime" /> es ambiguo si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede informar con exactitud los desplazamientos de hora ambigua para períodos anteriores a la regla de ajuste actual entrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time.</param>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
        <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento exacto de este método depende de la relación entre el <xref:System.DateTimeOffset.Offset%2A> propiedad de la `dateTimeOffset` parámetro y el <xref:System.TimeZoneInfo> objeto. Si el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad se corresponde con los desplazamientos posibles de la zona horaria actual de hora Universal coordinada (UTC) para la fecha y hora, el método devuelve los desplazamientos posibles. De lo contrario, convierte `dateTimeOffset` a la hora en la zona horaria actual y, a continuación, devuelve los posibles desplazamientos de esa fecha y hora.  
  
 El orden de <xref:System.TimeSpan> objetos en la matriz devuelta por este método no está definido. Sin embargo, puede determinar qué elemento representa un desplazamiento de hora estándar de la zona horaria comparando su valor con la zona horaria <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad. Para asignar una hora ambigua a la hora de una zona horaria estándar, consulte [Cómo: resolver horas ambiguas](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTimeOffset" /> is not an ambiguous time.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual al determinar si <paramref name="dateTimeOffset" /> es ambiguo si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede informar con exactitud los desplazamientos de hora ambigua para períodos anteriores a la regla de ajuste actual entrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
        <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener detalles adicionales sobre la <xref:System.TimeZoneInfo.GetHashCode%2A> método, consulte <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a sorted collection of all the time zones about which information is available on the local system.</summary>
        <returns>A read-only collection of <see cref="T:System.TimeZoneInfo" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método recupera toda la información de zona horaria disponible de las subclaves de la clave del registro HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones. Si no puede recuperar y analizar los valores de propiedades de cadena determinada del individuo correctamente <xref:System.TimeZoneInfo> objetos, este método establece su valor en una cadena vacía ("").  
  
> [!IMPORTANT]
>  El <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método devuelve una colección de <xref:System.TimeZoneInfo> objetos sólo para las zonas horarias definidas en el registro. No incluye las zonas horarias creadas utilizando las sobrecargas de los <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. Estos son accesibles únicamente a través de la referencia de objeto devuelta por el método de creación de la zona horaria.  
  
 La colección devuelta por este método se ordena por el desplazamiento de UTC y, para las zonas horarias que tienen el mismo desplazamiento de UTC, por el nombre para mostrar con la referencia cultural actual. Para obtener información sobre el nombre para mostrar, vea <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 El <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objeto devuelto por este método es compatible con la <xref:System.Collections.Generic.IEnumerable%601> interfaz, lo que significa que se puede recorrer en iteración utilizando el `foreach` (en C#) o `For Each…Next` (en Visual Basic) las instrucciones. Cada iteración del bucle proporciona la siguiente <xref:System.TimeZoneInfo> objeto de la colección.  
  
 La colección de <xref:System.TimeZoneInfo> objetos representa las zonas horarias definidas en el equipo local; no proporciona necesariamente información completa para todas las zonas horarias durante todos los períodos de tiempo. Si la aplicación requiere zonas horarias que no se encuentra en el equipo local, puede crear zonas horarias personalizadas mediante las sobrecargas de los <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. Para obtener más información, consulte [Cómo: crear zonas horarias sin reglas de ajuste](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) y [Cómo: crear zonas horarias con reglas de ajuste](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 También puede determinar si se define una zona horaria individual en el equipo local mediante una llamada a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método y proporcionar el identificador de la zona horaria que desea recuperar como parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera una colección de objetos de zona horaria que representan las zonas horarias definidas en un equipo y escribe información sobre ellas en un archivo de texto.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">There is insufficient memory to store all time zone information.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to read from the registry keys that contain time zone information.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to determine the offset for.</param>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
        <returns>An object that indicates the time difference between the two time zones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo de tiempo devuelto incluye las diferencias debido a la aplicación de reglas de ajuste a la zona horaria actual. Difiere de la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad, que devuelve la diferencia entre la hora Universal coordinada (UTC) y hora estándar de la zona horaria y, por lo tanto, no tiene reglas de ajuste en la cuenta.  
  
 Si el `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad no se corresponde con el objeto de zona horaria, este método realiza la conversión necesaria antes de devolver un resultado. Por ejemplo, esto puede ocurrir si el <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , pero el objeto de zona horaria no es la zona horaria local. Si `dateTime` es ambiguo, o si la hora convertida es ambigua, este método interpreta la hora ambigua como una hora estándar. Si `dateTime` no es válido, este método devuelve un <xref:System.TimeSpan> objeto que refleja la diferencia entre la hora UTC y la hora de la zona horaria estándar.  
  
 El <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> método es similar en operación a la <xref:System.TimeZone.GetUtcOffset%2A> método de la <xref:System.TimeZone> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> método con zonas horarias diferentes y valores de fecha que tienen diferentes <xref:System.DateTime.Kind%2A> valores de propiedad.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual al calcular el desplazamiento de UTC si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método puede no calcular con precisión la diferencia entre la hora local y la hora UTC en <paramref name="dateTime" />. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to determine the offset for.</param>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
        <returns>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo de tiempo devuelto incluye las diferencias debido a la aplicación de reglas de ajuste a la zona horaria actual. Difiere de la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad, que devuelve la diferencia entre la hora Universal coordinada (UTC) y hora estándar de la zona horaria y, por lo tanto, no tiene reglas de ajuste en la cuenta.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual al calcular el desplazamiento de UTC si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método puede no calcular con precisión la diferencia entre la hora local y la hora UTC en <paramref name="dateTimeOffset" />. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">A second object to compare with the current <see cref="T:System.TimeZoneInfo" /> object.</param>
        <summary>Indicates whether the current object and another <see cref="T:System.TimeZoneInfo" /> object have the same adjustment rules.</summary>
        <returns>
          <see langword="true" /> if the two time zones have identical adjustment rules and an identical base offset; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al igual que el <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> método, el <xref:System.TimeZoneInfo.HasSameRules%2A> método indica si dos zonas horarias tienen el mismo desplazamiento base (tal como se define por la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad) y las mismas reglas de ajuste. A diferencia de la <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> método <xref:System.TimeZoneInfo.HasSameRules%2A> no compara los identificadores de zona horaria (tal como se define por la <xref:System.TimeZoneInfo.Id%2A> propiedad).  
  
   
  
## Examples  
 Normalmente, un número de zonas horarias definidas en el registro tiene el mismo desplazamiento de hora Universal coordinada (UTC) y las mismas reglas de ajuste. En el ejemplo siguiente se muestra una lista de estas zonas horarias en la consola.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time zone identifier.</summary>
        <value>Identificador de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El identificador de zona horaria es una cadena de clave que identifica de forma única una zona horaria determinada. En Windows XP y Windows Vista, se corresponde con las subclaves de la bifurcación de HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time zona del registro. Se puede pasar como un parámetro a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método para recuperar una zona horaria determinada del registro.  
  
> [!IMPORTANT]
>  Aunque un nombre de clave en el registro de Windows puede tener un máximo de 255 caracteres, se recomienda que un identificador que se asigna a una zona horaria personalizada sea de 32 caracteres o menos. Mayor será el identificador, cuanto mayor sea la probabilidad de que un nombre de clave incorrecto será proporcionado al recuperarlos.  
  
 El valor de la <xref:System.TimeZoneInfo.Id%2A> propiedad suele ser, aunque no siempre, idéntica de la <xref:System.TimeZoneInfo.StandardName%2A> propiedad. El identificador de la zona horaria Universal coordinada es UTC.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el identificador de cada una de las zonas horarias definidas en el equipo local.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTime" /> parameter is ambiguous; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hora ambigua cae dentro de un intervalo de horas de la zona horaria actual. Esto significa que puede ser una hora estándar o una hora que es el resultado de la aplicación de una regla de ajuste. Por lo general, como horas ambiguas resultado cuando el reloj está configurado para devolver al horario estándar de horario de verano. Vea la sección ejemplo para ver una ilustración.  
  
 Hora Universal coordinada (UTC) no tiene ninguna hora ambigua; ninguna de ellas las zonas horarias que no admiten el horario de verano. Por lo tanto, se tienen estas zonas horarias sin reglas de ajuste y las llamadas a la <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> método siempre devuelven `false`.  
  
 Para las zonas horarias que observan el horario de verano, el comportamiento exacto de este método depende de la relación entre el <xref:System.DateTime.Kind%2A> propiedad y el <xref:System.TimeZoneInfo> objeto, como se muestra en la tabla siguiente.  
  
|Tipo de objeto TimeZoneInfo|Valor de la propiedad Kind|Comportamiento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina si el `dateTime` parámetro es ambiguo.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` a la hora local y, a continuación, determina si esa hora es ambigua.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Devuelve `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Si `dateTime` es ambiguo, se da por supuesto es una hora estándar, convierte a UTC y se devuelve `false`.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` en la hora de la zona horaria especificada y, a continuación, determina si esa hora es ambigua.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina si `dateTime` es ambiguo.|  
  
   
  
## Examples  
 En la zona horaria del Pacífico horario de verano finaliza a las 2:00 A.M. 4 de noviembre de 2007. En el ejemplo siguiente se pasa el tiempo a intervalos de un minuto desde las 12:59 A.M. 4 de noviembre de 2007, a las 2:01 A.M. 4 de noviembre de 2007, a la <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> método de una <xref:System.TimeZoneInfo> objeto que representa la zona horaria del Pacífico. La salida de la consola indica que todas las horas desde la 1:00 A.M. en el 4 de noviembre de 2007 a las 1:59 A.M. 4 de noviembre de 2007, son ambiguas.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede informar con exactitud si <paramref name="dateTime" /> es una hora ambigua para períodos anteriores a la regla de ajuste actual entrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time.</param>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is ambiguous in the current time zone; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hora ambigua cae dentro de un intervalo de horas de la zona horaria actual. Esto significa que puede ser una hora estándar o una hora que es el resultado de la aplicación de una regla de ajuste. Por lo general, como horas ambiguas resultado cuando el reloj está configurado para devolver al horario estándar de horario de verano. Hora Universal coordinada (UTC) no tiene ninguna hora ambigua; ninguna de ellas las zonas horarias que no admiten el horario de verano.  
  
 El comportamiento exacto del método depende de la relación entre el <xref:System.DateTimeOffset.Offset%2A> propiedad de la `dateTimeOffset` parámetro y la zona horaria actual. Si el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad es un posible desplazamiento de la hora UTC de la zona horaria actual, el método determina si esa fecha y hora es ambigua. De lo contrario, convierte `dateTimeOffset` en la hora de la zona horaria actual y, a continuación, determina si esa fecha y hora es ambigua.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede informar con exactitud si <paramref name="dateTimeOffset" /> es una hora ambigua para períodos anteriores a la regla de ajuste actual entrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the current <see cref="T:System.TimeZoneInfo" /> object's time zone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTime" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> se ve afectado por la relación entre la zona horaria representada por el <xref:System.TimeZoneInfo> objeto y el <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro, tal como se muestra en la tabla siguiente.  
  
|Objeto TimeZoneInfo|DateTime.Kind (propiedad)|Resultado|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Determina si `dateTime` corresponde al horario de verano.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Convierte `dateTime` de hora Universal coordinada (UTC) a la hora local y determina si es horario de verano.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Se da por supuesto que `dateTime` representa la hora local y determina si es horario de verano.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`o `DateTimeKind.Utc`|Devuelve `false` (hora UTC no admite horario de verano).|  
|Cualquier otro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Local`|Convierte la hora local a la hora equivalente de la <xref:System.TimeZoneInfo> del objeto y, a continuación, determina si el último es horario de verano.|  
|Cualquier otro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Utc`|Convierte la hora UTC a la hora equivalente de la <xref:System.TimeZoneInfo> del objeto y, a continuación, determina si el último es horario de verano.|  
|Cualquier otro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Unspecified`|Determina si `dateTime` corresponde al horario de verano.|  
  
 Si la zona horaria que representa el <xref:System.TimeZoneInfo> objeto no admite el horario de verano, el método siempre devuelve `false`. Un número de zonas horarias, incluida <xref:System.TimeZoneInfo.Utc%2A>, no se observa el horario de verano.  Para determinar si una zona horaria admite el horario de verano, recuperar el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad.  
  
 Si el `dateTime` parámetro especifica una hora ambigua de la zona de horaria del objeto actual, el <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método interpreta `dateTime` como hora estándar y devuelve `false` si su <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si el <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, este método seleccionará la hora ambigua correcta e indicar si se trata de un horario de verano.  
  
 Dado que la <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> método puede devolver `false` para una fecha y hora que es ambiguo (es decir, una fecha y hora que puede representar una hora estándar o un horario de verano en una zona horaria determinada), el <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> método se puede emparejar con la <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar si un tiempo puede ser un horario de verano. Dado que una hora ambigua es aquella que puede ser un horario de verano y una hora estándar, la <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> método puede llamarse en primer lugar para determinar si una fecha y hora pueden ser un horario de verano. Si el método devuelve `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método puede llamarse para determinar si la <xref:System.DateTime> valor es un horario de verano. En el ejemplo siguiente se muestra esta técnica.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Si el `dateTime` parámetro especifica una hora no válida, la llamada al método produce una <xref:System.ArgumentException> si el valor de la `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; en caso contrario, el método devuelve `false`.  
  
 Llame a la <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método para determinar si se debe usar una zona horaria <xref:System.TimeZoneInfo.StandardName%2A> valor o su <xref:System.TimeZoneInfo.DaylightName%2A> valor cuando se muestra el nombre de zona horaria. Vea la sección ejemplo para ver una ilustración.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `DisplayDateWithTimeZoneName` que usa el <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método para determinar si se debe mostrar el nombre de hora estándar o el nombre del horario de verano de una zona horaria.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede informar con exactitud si <paramref name="dateTime" /> es un horario de verano durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time value.</param>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> se ve afectado por la relación entre la zona horaria representada por el <xref:System.TimeZoneInfo> objeto y el <xref:System.DateTimeOffset.Offset%2A> propiedad de la `dateTimeOffset` parámetro. Si `dateTimeOffset` no corresponde al desplazamiento de la zona horaria actual de hora Universal coordinada (UTC), el método convierte que hora en la hora de la zona horaria actual. A continuación, determina si esa fecha y hora es horario de verano.  
  
 Si la zona horaria que representa el <xref:System.TimeZoneInfo> objeto no admite el horario de verano, el método siempre devuelve `false`. Para determinar si una zona horaria admite el horario de verano, recuperar el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica sólo la regla de ajuste actual si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede informar con exactitud si <paramref name="dateTimeOffset" /> es un horario de verano durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Indicates whether a particular date and time is invalid.</summary>
        <returns>
          <see langword="true" /> if <paramref name="dateTime" /> is invalid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hora no válida se encuentra dentro de un intervalo de horas de la zona horaria actual que no se puede asignar a la hora Universal coordinada (UTC) debido a la aplicación de una regla de ajuste. Normalmente, horas no válidas se producen cuando el tiempo se mueve hacia delante al horario de verano. Vea la sección ejemplo para ver una ilustración.  
  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro afecta a si `dateTime` representa una hora no válida, como se muestra en la tabla siguiente.  
  
|DateTime.Kind (propiedad)|Objeto TimeZoneInfo (si es aplicable)|Comportamiento|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Determina si la hora es válida.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> o una zona horaria no local.|Convierte `dateTime` a la hora de la <xref:System.TimeZoneInfo> objeto y devuelve `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|No es aplicable.|Se da por supuesto `dateTime` es el momento de la <xref:System.TimeZoneInfo> del objeto y determina si no es válido.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|No es aplicable.|Devuelve `false`.|  
  
   
  
## Examples  
 En la zona horaria del Pacífico horario de verano comienza a las 2:00 A.M. 2 de abril de 2006. El código siguiente pasa el tiempo a intervalos de un minuto desde la 1:59 A.M. en el 2 de abril de 2006, a las 3:01 A.M. en el 2 de abril de 2006, a la <xref:System.TimeZoneInfo.IsInvalidTime%2A> método de una <xref:System.TimeZoneInfo> objeto que representa la zona horaria del Pacífico. La salida de la consola indica que todas las horas desde las 2:00 A.M. en el 2 de abril de 2006, a las 2:59 A.M. en el 2 de abril de 2006, no son válidos.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], este método aplica la regla de ajuste solo si la instancia actual es <see cref="P:System.TimeZoneInfo.Local" />. Como resultado, el método no puede informar con exactitud si <paramref name="dateTime" /> es una hora no válida durante períodos antes de la regla de ajuste actual suministrada en vigor. Para obtener más información, vea la sección Notas a los autores de llamadas en el <see cref="P:System.TimeZoneInfo.Local" /> propiedad.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.</summary>
        <value>Objeto que representa la zona horaria local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La zona horaria local es la zona horaria en el equipo donde se ejecuta el código.  
  
> [!IMPORTANT]
>  Siempre debe tener acceso a la zona horaria local a través de la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad en lugar de asignar la hora local de la zona a un <xref:System.TimeZoneInfo> variable de objeto. Esto evita que el <xref:System.TimeZoneInfo> variable de objeto del que se invalida mediante una llamada a la <xref:System.TimeZoneInfo.ClearCachedData%2A> método.  
  
 El <xref:System.TimeZoneInfo> objeto devuelto por la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad refleja el valor de la **ajustar automáticamente el reloj horario de verano** casilla o **ajustar el reloj automáticamente para guardar el horario de verano Tiempo** casilla de verificación en el Panel de Control **fecha y hora** aplicación para Windows XP y Windows Vista, respectivamente. Si la casilla de verificación está desactivada, la copia en caché de la zona horaria local no contiene ninguna información del horario de verano. Esto significa que:  
  
-   La zona horaria local <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método devuelve una matriz cuya longitud es cero.  
  
-   La zona horaria local <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad devuelve `false`.  
  
-   La zona horaria local no tiene ninguna hora ambigua o no válida (todas las llamadas a <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> o <xref:System.TimeZoneInfo.IsInvalidTime%2A> devolver `false`).  
  
-   Todas las llamadas a <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> con horas locales individuales devuelven false.  
  
 Esto no es cierto, sin embargo, si una referencia a la zona horaria local se recuperan usando el <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método.  
  
 El <xref:System.TimeZoneInfo.Local%2A> propiedad se corresponde con el <xref:System.TimeZone.CurrentTimeZone%2A> propiedad de la <xref:System.TimeZone> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.TimeZoneInfo> objeto que representa la zona horaria local y genera su nombre para mostrar y el nombre de hora estándar así como el nombre del horario de verano.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Para convertir las fechas y horas, [! INCLUDE[winxp](~/includes/winxp-MD.MD)] reconoce sólo la regla de ajuste actual, que se aplica a todas las fechas, incluidas las fechas de nivel inferior (es decir, las fechas anteriores a la fecha de inicio de la regla de ajuste actual). En [! INCLUDE[winxp](~/includes/winxp-MD.MD)], para evitar local información de fecha y hora proporcionada por el <see cref="P:System.TimeZoneInfo.Local" /> objeto de divergente de la información de fecha y hora en que se muestra en la bandeja del sistema, la <see cref="T:System.TimeZoneInfo" /> objeto devuelto por la <see cref="P:System.TimeZoneInfo.Local" />propiedad también aplica la regla de ajuste actual para las fechas de nivel inferior. Aplicaciones que se ejecutan [! INCLUDE[winxp](~/includes/winxp-MD.MD)] que requieren históricamente precisa fecha local y cálculos de tiempo deben solucionar este comportamiento mediante la <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> método para recuperar un <see cref="T:System.TimeZoneInfo" /> objeto que se corresponde con la zona horaria local.  En el ejemplo siguiente se muestran para un [! Sistema include[winxp](~/includes/winxp-MD.MD)] la zona horaria del Pacífico de EE. UU. Dado que el método tres primeros llama todos los use la zona horaria local devuelta por la <see cref="P:System.TimeZoneInfo.Local" /> propiedad, aplica la regla de ajuste de zona horaria actual (que entró en vigor en 2007) para una fecha en el año 2006. La regla de ajuste actual proporciona la transición al horario de verano para que tenga lugar el segundo domingo de marzo; la regla anterior, que estaba en efecto proporcionado para la transición al horario de verano para que tenga lugar el primer domingo de abril de 2006. Solo la cuarta llamada al método, que usa el <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> método para recuperar la zona horaria local, se realiza con precisión esta fecha histórico y conversión de tiempo.  [! code-csharp[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)] [! code-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name for the time zone's standard time.</summary>
        <value>Nombre para mostrar de la hora estándar de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre para mostrar se localiza en función de la referencia cultural instalada con el sistema operativo Windows.  
  
 El <xref:System.TimeZoneInfo.StandardName%2A> propiedad es idéntica a la <xref:System.TimeZone.StandardName%2A> propiedad de la <xref:System.TimeZone> clase.  
  
 Si el idioma del sistema operativo es el inglés, el valor de la <xref:System.TimeZoneInfo.StandardName%2A> propiedad suele ser, aunque no siempre, idéntica de la <xref:System.TimeZoneInfo.Id%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `DisplayDateWithTimeZoneName` que usa el <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar si se debe mostrar el nombre de hora estándar o el nombre del horario de verano de una zona horaria.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the time zone has any daylight saving time rules.</summary>
        <value>Es <see langword="true" /> si la zona horaria admite el horario de verano; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad de la zona horaria local devuelta por la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad refleja la configuración del Panel de Control **fecha y hora** casilla de verificación de la aplicación que define si el sistema automáticamente se ajusta al horario de verano. Si está desactivada, o si no se muestra ninguna casilla para una zona horaria, el valor de esta propiedad es `false`.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera una colección de todas las zonas horarias que están disponibles en un sistema local y muestra los nombres de los usuarios que no son compatibles con el horario de verano.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of an object has been completed.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.TimeZoneInfo" /> object contains invalid or corrupted data.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.TimeZoneInfo" /> object to a serialized string.</summary>
        <returns>A string that represents the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las aplicaciones que se basan en las zonas horarias que no se definen normalmente en el registro de sistemas de Windows pueden usar el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método para crear instancias de las zonas horarias necesarias como <xref:System.TimeZoneInfo> objetos. La aplicación, a continuación, puede llamar a la <xref:System.TimeZoneInfo.ToSerializedString%2A> método para convertir el objeto de zona horaria en una cadena.  
  
 La <xref:System.TimeZoneInfo> objeto también debería almacenarse en una ubicación donde la aplicación pueda recuperarlos cuando sea necesario. Las ubicaciones posibles incluyen:  
  
-   El registro.  
  
-   Un archivo de recursos de la aplicación.  
  
-   Un archivo externo, como un archivo de texto.  
  
   
  
## Examples  
 En el ejemplo siguiente se intenta recuperar la Antártida/Polo Sur zona horaria del sistema local. Si se produce un error, el código intenta recuperar la información sobre la zona horaria de un archivo de texto en el directorio de aplicación. Si se produce un error en este intento, el código crea la zona horaria y escribe información sobre él en el archivo de texto.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current <see cref="T:System.TimeZoneInfo" /> object's display name.</summary>
        <returns>The value of the <see cref="P:System.TimeZoneInfo.DisplayName" /> property of the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al asignar una colección que contiene <xref:System.TimeZoneInfo> objetos a un control de lista como el <xref:System.Windows.Forms.ListBox> (control), el control llama automáticamente a la <xref:System.TimeZoneInfo.ToString%2A> método para extraer una cadena que describe cada objeto que se va a representar en la lista. Como resultado, no es necesario almacenar una descripción significativa del objeto como una cadena y el usuario no necesita usar esa cadena para extraer el objeto de la colección. Vea [Cómo: enumerar zonas horarias presentes en un equipo](~/docs/standard/datetime/enumerate-time-zones.md) para obtener más detalles.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.</summary>
        <value>Objeto que representa la zona horaria universal coordinada (hora UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se trata de un objeto integrado; información sobre este <xref:System.TimeZoneInfo> objeto no se recupera desde el registro.  
  
> [!IMPORTANT]
>  Siempre debe tener acceso a la zona de hora Universal coordinada (UTC) a través de la <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> propiedad en lugar de asignar la zona horaria UTC para un <xref:System.TimeZoneInfo> variable de objeto. Esto evita que el <xref:System.TimeZoneInfo> variable de objeto del que se invalida mediante una llamada a la <xref:System.TimeZoneInfo.ClearCachedData%2A> método.  
  
 Hora Universal coordinada se conocía anteriormente como hora del meridiano de Greenwich (GMT).  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.TimeZoneInfo> objeto que representa la hora Universal coordinada (UTC) y genera su nombre para mostrar y el nombre de hora estándar así como el nombre del horario de verano.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>