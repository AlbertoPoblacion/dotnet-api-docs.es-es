<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="802ab07f33d5b8b8cc91d0793023ecfb60419c17" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57963543" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa cualquier zona horaria del mundo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una zona horaria es una región geográfica en la que se usa la misma hora.  
  
 El <xref:System.TimeZoneInfo> clase ofrece importantes mejoras sobre la <xref:System.TimeZone> (clase), que proporciona funcionalidad limitada.  
  
 La <xref:System.TimeZone> clase reconoce solo la zona horaria local y puede convertir horas entre la hora Universal coordinada (UTC) y la hora local. Un <xref:System.TimeZoneInfo> objeto puede representar cualquier zona horaria y los métodos de la <xref:System.TimeZoneInfo> clase puede usarse para convertir la hora de una zona horaria a la hora correspondiente en cualquier otra zona horaria. Los miembros de la <xref:System.TimeZoneInfo> clase admiten las siguientes operaciones:  
  
-   Recuperar una zona horaria que ya está definida por el sistema operativo.  
  
-   Enumerar las zonas horarias que están disponibles en un sistema.  
  
-   Convertir horas entre zonas horarias diferentes.  
  
-   Crear una nueva zona horaria que ya no está definida por el sistema operativo.  
  
-   Serializar una zona horaria para su recuperación posterior.  
  
> [!NOTE]
>  Una instancia de la <xref:System.TimeZoneInfo> clase es inmutable. Una vez que se ha creado una instancia de un objeto, no se puede modificar sus valores.  
  
 No se puede crear una instancia un <xref:System.TimeZoneInfo> objeto utilizando el `new` palabra clave. En su lugar, debe llamar a uno de los miembros estáticos de la <xref:System.TimeZoneInfo> clase que se muestra en la tabla siguiente.  
  
|Nombre de miembro estático|Descripción|  
|------------------------|-----------------|  
|Método <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Crea una zona horaria personalizada a partir de datos proporcionada por la aplicación.|  
|Método <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Crea una instancia de una zona horaria basándose en su identificador.|  
|Método <xref:System.TimeZoneInfo.FromSerializedString%2A>|Deserializa un valor de cadena para volver a crear un serializador previamente <xref:System.TimeZoneInfo> objeto.|  
|Método <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Devuelve un enumerable <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.TimeZoneInfo> objetos que representan todas las zonas horarias que están disponibles en el sistema local.|  
|Propiedad<xref:System.TimeZoneInfo.Local%2A> |Crea una instancia de un <xref:System.TimeZoneInfo> objeto que representa la zona horaria local.|  
|Propiedad<xref:System.TimeZoneInfo.Utc%2A> |Crea una instancia de un <xref:System.TimeZoneInfo> objeto que representa la zona de hora UTC.|  
  
 Puede usar el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método para crear una zona horaria que no está definida en el registro del sistema local en los sistemas de Windows o las clases de zona horaria en el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux o macOS. A continuación, puede usar el <xref:System.TimeZoneInfo.ToSerializedString%2A> propiedad que se va a guardar la información de zona horaria del objeto como una cadena, que se puede almacenar en alguna forma que sea accesible para la aplicación. Puede usar el <xref:System.TimeZoneInfo.FromSerializedString%2A> realizar una copia del método para convertir una cadena serializada en una <xref:System.TimeZoneInfo> objeto.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la diferencia horaria entre la hora estándar de la zona horaria actual y la hora universal coordinada (hora UTC).</summary>
        <value>Un objeto que indica la diferencia horaria entre la hora estándar de la zona horaria actual y la hora universal coordinada (hora UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo de tiempo devuelto por la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad puede oscilar entre 14 horas (para una zona horaria que es de 14 horas por delante de la hora Universal coordinada (UTC)) y-14 horas (para una zona horaria que es 14 horas por detrás de la hora UTC). Zonas horarias que están por delante de UTC tienen una diferencia positiva; las zonas horarias que están detrás de UTC tienen una diferencia negativa.  
  
 El <xref:System.TimeZoneInfo.BaseUtcOffset%2A> valor se representa como un número entero de minutos. No puede incluir un número de fracciones de minutos.  
  
> [!NOTE]
>  Dado que <xref:System.TimeZoneInfo.BaseUtcOffset%2A> es una propiedad de la <xref:System.TimeZoneInfo> objeto en lugar de <xref:System.TimeZoneInfo.AdjustmentRule> objeto, el <xref:System.TimeZoneInfo> clase un desplazamiento solo aplica a la hora UTC a todos los ajustes de la zona horaria. Para reflejar una zona horaria que haya modificado su desplazamiento a la hora UTC, debe crear una nueva zona horaria mediante el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método.  
  
 El <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad difiere el <xref:System.TimeZoneInfo.GetUtcOffset%2A> método de las maneras siguientes:  
  
-   El <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad devuelve la diferencia entre la hora UTC y la hora de la zona horaria estándar; la <xref:System.TimeZoneInfo.GetUtcOffset%2A> método devuelve la diferencia entre la hora UTC y la hora de la zona horaria en un momento determinado de tiempo.  
  
-   El <xref:System.TimeZoneInfo.GetUtcOffset%2A> método refleja la aplicación de las reglas de ajuste a la zona horaria actual; el <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad no es así.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad para mostrar la diferencia entre la hora local y la hora Universal coordinada (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Borra los datos de zona horaria almacenados en caché.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Datos almacenados en caché de zona horaria incluyen datos sobre la zona horaria local y la zona de hora Universal coordinada (UTC).  
  
 Puede llamar a la `ClearCachedData` método para reducir la memoria dedicada a la caché de aplicación de la información de zona horaria o para reflejar el hecho de que ha cambiado la zona horaria del sistema local.  
  
 No se recomienda almacenar referencias a las zonas de hora UTC y locales. Después de llamar a la `ClearCachedData` método, estas variables de objeto quedará sin definir <xref:System.TimeZoneInfo> objetos que ya no son referencias a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Por ejemplo, en el código siguiente, la segunda llamada a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método produce una <xref:System.ArgumentException> porque el `local` variable ya no se considera igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte una hora en la hora de una zona horaria determinada.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora que se van a convertir.</param>
        <param name="destinationTimeZone">Zona horaria a la que se va a convertir <paramref name="dateTime" />.</param>
        <summary>Convierte una hora en la hora de una zona horaria determinada.</summary>
        <returns>Fecha y hora de la zona horaria de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> método aplica las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 Esta sobrecarga de la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método determina la zona horaria de origen del valor de la `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad, como se muestra en la tabla siguiente.  
  
|Valor de propiedad de clase|Zona horaria de origen|Comportamiento del método|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Convierte la hora local a la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Convierte la hora Universal coordinada (UTC) a la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Supone que <xref:System.TimeZoneInfo.Local%2A>.|Convierte la hora local a la hora de `destinationTimeZone`.|  
  
 El <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece como se muestra en la tabla siguiente.  
  
|Condición|Devuelve el valor de propiedad de clase|  
|---------------|----------------------------------|  
|El valor de `destinationTimeZone` es <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|El valor de `destinationTimeZone` es <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Todos los otros valores de fecha y hora y zona horaria de destino.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si el valor de la `dateTime` parámetro es una hora local ambigua, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora local no válida, este método produce una <xref:System.ArgumentException>.  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 También puede convertir a o a la hora UTC llamando el <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> y <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> métodos.  
  
   
  
## Examples  
 El ejemplo siguiente convierte una matriz de valores de fecha y hora a veces en la zona horaria del este de Estados Unidos y Canadá. Muestra que la zona horaria de origen depende del <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad del origen <xref:System.DateTime> valor. También muestra que el <xref:System.TimeZoneInfo.ConvertTime%2A> método toma en cuenta, los ajustes de zona horaria porque se produce un ajuste de zona horaria de origen y destino zonas horarias a las 2:00 A.M. en el 7 de noviembre de 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El valor del parámetro <paramref name="dateTime" /> representa una hora no válida.</exception>
        <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="destinationTimeZone" /> es <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Fecha y hora que se van a convertir.</param>
        <param name="destinationTimeZone">Zona horaria a la que se va a convertir <paramref name="dateTime" />.</param>
        <summary>Convierte una hora en la hora de una zona horaria determinada.</summary>
        <returns>Fecha y hora de la zona horaria de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> método aplica las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 Esta sobrecarga difiere de las demás sobrecargas de los <xref:System.TimeZoneInfo.ConvertTime%2A> método aceptando una <xref:System.DateTimeOffset> valor como su primer parámetro. Esto identifica la fecha y hora como un desplazamiento de hora Universal coordinada (UTC) en lugar de la fecha y hora en una zona horaria determinada. Como resultado, el `dateTimeOffset` parámetro no puede representar una hora ambigua o una hora no válida.  
  
 Convertir el `dateTimeOffset` valor a la hora de la zona horaria de destino, este método tiene en cuenta las reglas de ajuste en vigor en la zona horaria de destino.  
  
 Si la conversión de `dateTimeOffset` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
   
  
## Examples  
 El ejemplo siguiente convierte una matriz de <xref:System.DateTimeOffset> valores a veces en la zona horaria del este de Estados Unidos y Canadá. Se muestra que el <xref:System.TimeZoneInfo.ConvertTime%2A> método toma en cuenta, los ajustes de zona horaria porque se produce un ajuste de zona horaria de origen y destino zonas horarias a las 2:00 A.M. en el 7 de noviembre de 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="destinationTimeZone" /> es <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora que se van a convertir.</param>
        <param name="sourceTimeZone">Zona horaria de <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Zona horaria a la que se va a convertir <paramref name="dateTime" />.</param>
        <summary>Convierte una hora de una zona horaria en otra.</summary>
        <returns>Fecha y hora de la zona horaria de destino que se corresponde con el parámetro <paramref name="dateTime" /> de la zona horaria de origen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTime%2A> método aplica las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro debe corresponder a la `sourceTimeZone` parámetro, como se muestra en la tabla siguiente.  
  
|Valor DateTime.Kind|valor sourceTimeZone|Comportamiento del método|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Es igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|No es igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Se produce un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Es igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|No es igual a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Se produce un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Cualquier.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
  
 También puede convertir a o desde la hora Universal coordinada (UTC) llamando a la <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> y <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> métodos.  
  
 El <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece como se muestra en la tabla siguiente.  
  
|Condición|Devuelve el valor de propiedad de clase|  
|---------------|----------------------------------|  
|El argumento `destinationTimeZone` es <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|El argumento `destinationTimeZone` es <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Todos los otros fecha y los valores de hora, zonas horarias de origen y zonas horarias de destino.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si el valor de la `dateTime` parámetro es una hora ambigua en la zona horaria de origen, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora no válida en la zona horaria de origen, este método produce una <xref:System.ArgumentException>.  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 El <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> método produce una <xref:System.ArgumentException> excepción si el <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad de la `dateTime` argumento es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> pero el `sourceTimeZone` argumento no es <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Para determinar si la zona horaria de origen es la zona horaria local o la zona horaria universal, el método comprueba la igualdad de referencia en lugar de probar la igualdad de valores con el <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> método. Tenga en cuenta que <xref:System.TimeZoneInfo> objetos que representan la zona horaria local y que se recuperan mediante una llamada a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método no tiene la igualdad referencial con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Además, <xref:System.TimeZoneInfo> objetos que representan el local o zona horaria universal y que se recuperan iterando la colección devuelta por la <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método no tiene la igualdad referencial con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Como alternativa, puede llamar a la <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> método.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el uso de la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> método para convertir la hora estándar de Hawai en hora local.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> del parámetro <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Local" />, pero el parámetro <paramref name="sourceTimeZone" /> no es igual a <see cref="F:System.DateTimeKind.Local" />.  
  
O bien 
La propiedad <see cref="P:System.DateTime.Kind" /> del parámetro <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Utc" />, pero el parámetro <paramref name="sourceTimeZone" /> no es igual a <see cref="P:System.TimeZoneInfo.Utc" />.  
  
O bien 
El parámetro <paramref name="dateTime" /> es una hora no válida (es decir, representa una hora que no existe debido a las reglas de ajuste de una zona horaria).</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="sourceTimeZone" /> es <see langword="null" />.  
  
O bien 
El parámetro <paramref name="destinationTimeZone" /> es <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte una hora en la hora de otra zona horaria basándose en un identificador de zona horaria.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora que se van a convertir.</param>
        <param name="destinationTimeZoneId">Identificador de la zona horaria de destino.</param>
        <summary>Convierte una hora en la hora de otra zona horaria basándose en el identificador de zona horaria.</summary>
        <returns>Fecha y hora de la zona horaria de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método aplica las reglas de ajuste en vigor en el `destinationTimeZoneId` zona horaria.  
  
 Esta sobrecarga es idéntica en gran medida a llamar a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método, excepto porque permite especificar la zona horaria de destino mediante su identificador en lugar de una referencia de objeto. Este método es muy útil cuando debe convertir una hora sin tener que recuperar el objeto de zona horaria que corresponde a él y no es necesario saber si el tiempo convertido es estándar o el horario de verano.  
  
 El <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> método determina la zona horaria de origen del valor de la `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad, como se muestra en la tabla siguiente.  
  
|Valor de propiedad de clase|Zona horaria de origen|Comportamiento del método|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Convierte la hora local a la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Convierte la hora Universal coordinada (UTC) a la hora de `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Supone que <xref:System.TimeZoneInfo.Local%2A>.|Convierte la hora local a la hora de `destinationTimeZone`.|  
  
 El <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece como se muestra en la tabla siguiente.  
  
|Condición|Devuelve el valor de propiedad de clase|  
|---------------|----------------------------------|  
|El valor de `destinationTimeZone` es `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Cualquier otro `destinationTimeZone` valor.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Si el valor de la `dateTime` parámetro es una hora local ambigua, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora local no válida, este método produce una <xref:System.ArgumentException>.  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 Este método recupera información sobre la zona horaria cuyo identificador es especificado por el `destinationTimeZoneId` parámetro del registro en los sistemas Windows y desde el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS. No puede recuperar un objeto de zona horaria que se crea utilizando el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. El `destinationTimeZoneId` parámetro debe corresponder exactamente con el identificador de la zona horaria en longitud, pero no en el caso, para que una coincidencia correcta; es decir, la comparación de `destinationTimeZoneId` con zona horaria identificadores distingue mayúsculas de minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Se encontró el identificador de zona horaria, pero los datos del Registro están dañados.</exception>
        <exception cref="T:System.Security.SecurityException">El proceso no tiene los permisos necesarios para leer la clave del Registro que contiene la información de zona horaria.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">No se encontró el identificador <paramref name="destinationTimeZoneId" /> en el sistema local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Fecha y hora que se van a convertir.</param>
        <param name="destinationTimeZoneId">Identificador de la zona horaria de destino.</param>
        <summary>Convierte una hora en la hora de otra zona horaria basándose en el identificador de zona horaria.</summary>
        <returns>Fecha y hora de la zona horaria de destino.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método aplica las reglas de ajuste en vigor en el `destinationTimeZoneId` zona horaria.  
  
 Esta sobrecarga es idéntica a llamar a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> método, excepto porque permite especificar la zona horaria de destino mediante su identificador en lugar de una referencia de objeto. Este método es muy útil cuando debe convertir una hora sin tener que recuperar el objeto de zona horaria que corresponde a él y no es necesario saber si el tiempo convertido es estándar o el horario de verano.  
  
 Dado que el `dateTimeOffset` parámetro representa una fecha y la diferencia horaria junto con esa hora de la hora Universal coordinada (UTC), no puede representar una hora ambigua o una hora no válida.  
  
 Este método recupera la zona horaria cuyo identificador es especificado por el `destinationTimeZoneId` parámetro del registro en los sistemas Windows y desde el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS. No puede recuperar un objeto de zona horaria que se crea utilizando el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. El `destinationTimeZoneId` parámetro debe corresponder exactamente con el identificador de la zona horaria en longitud, pero no en el caso, para que una coincidencia correcta; es decir, la comparación de `destinationTimeZoneId` con zona horaria identificadores distingue mayúsculas de minúsculas.  
  
 Convertir el `dateTimeOffset` valor a la hora de la zona horaria de destino, el método tiene en cuenta las reglas de ajuste en vigor en la zona horaria de destino.  
  
 Si la conversión de `dateTimeOffset` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Se encontró el identificador de zona horaria, pero los datos del registro está dañados.</exception>
        <exception cref="T:System.Security.SecurityException">El proceso no tiene los permisos necesarios para leer la clave del registro que contiene la información de zona horaria.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">No se encontró el identificador <paramref name="destinationTimeZoneId" /> en el sistema local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora que se van a convertir.</param>
        <param name="sourceTimeZoneId">Identificador de la zona horaria de origen.</param>
        <param name="destinationTimeZoneId">Identificador de la zona horaria de destino.</param>
        <summary>Convierte una hora de una zona horaria en otra basándose en los identificadores de zona horaria.</summary>
        <returns>Fecha y hora de la zona horaria de destino que se corresponde con el parámetro <paramref name="dateTime" /> de la zona horaria de origen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método aplica las reglas de ajuste en vigor en el `destinationTimeZoneId` zona horaria.  
  
 Aunque es similar a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método, puede usar <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> para especificar las zonas horarias de origen y destino mediante sus identificadores en lugar de sus <xref:System.TimeZoneInfo> objetos. Este método es muy útil cuando debe convertir una hora sin tener que recuperar el objeto de zona horaria que corresponde a él y no es necesario saber si el tiempo convertido es estándar o el horario de verano.  
  
 Este método recupera las zonas horarias cuyos identificadores son el `sourceTimeZoneId` y `destinationTimeZoneId` parámetros desde el registro en los sistemas Windows y desde el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS. No puede recuperar objetos de zona horaria que se crean mediante el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método.  
  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro debe corresponder a la `sourceTimeZoneId` parámetro, como se muestra en la tabla siguiente.  
  
|Valor DateTime.Kind|valor sourceTimeZone|Comportamiento del método|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Es igual a `TimeZoneInfo.Utc.Id`.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|No es igual a `TimeZoneInfo.Utc.Id`.|Se produce un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Es igual a `TimeZoneInfo.Local.Id`.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|No es igual a `TimeZoneInfo.Local.Id`.|Se produce un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Cualquier.|Convierte `dateTime` a la hora de la zona horaria de destino.|  
  
 Porque se basa en las llamadas a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método, el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> método realiza una búsqueda para buscar las zonas horarias que corresponden a mayúsculas y minúsculas `sourceTimeZoneId` y `destinationTimeZoneId`.  
  
 Si el valor de la `dateTime` parámetro es una hora ambigua en la zona horaria de origen, se interpreta como una hora estándar. Si el `dateTime` parámetro es una hora no válida en la zona horaria de origen, este método produce una <xref:System.ArgumentException>.  
  
 El <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> a menos que la zona horaria de destino es la hora Universal coordinada (UTC), en cuyo caso se establece en <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> método para mostrar la hora que corresponde a la hora del sistema local en ocho ciudades del mundo.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> del parámetro <paramref name="dateTime" /> no se corresponde con la zona horaria de origen.  
  
O bien 
 <paramref name="dateTime" /> es una hora no válida en la zona horaria de origen.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> es <see langword="null" />.  
  
O bien 
 <paramref name="destinationTimeZoneId" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Se encontraron identificadores de zona horaria, pero los datos del Registro están dañados.</exception>
        <exception cref="T:System.Security.SecurityException">El usuario no tiene los permisos necesarios para leer desde las claves del Registro que contienen datos de zona horaria.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">No se encontró el identificador <paramref name="sourceTimeZoneId" /> en el sistema local.  
  
O bien 
No se encontró el identificador <paramref name="destinationTimeZoneId" /> en el sistema local.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Hora universal coordinada (UTC).</param>
        <param name="destinationTimeZone">Zona horaria a la que se va a convertir <paramref name="dateTime" />.</param>
        <summary>Convierte una hora universal coordinada (UTC) en la hora de una zona horaria especificada.</summary>
        <returns>Fecha y hora de la zona horaria de destino. Su propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Utc" /> si <paramref name="destinationTimeZone" /> es <see cref="P:System.TimeZoneInfo.Utc" />; en caso contrario, su propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar la conversión, el <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> método aplica las reglas de ajuste en vigor en el `destinationTimeZone` zona horaria.  
  
 El comportamiento exacto de este método depende del valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro, como se muestra en la tabla siguiente.  
  
|Propiedad DateTime.Kind|Conversión|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Se produce un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte en hora Universal coordinada (UTC).|  
  
 Si la conversión de `dateTime` da como resultado un valor de fecha y hora que es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o posterior a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, respectivamente.  
  
   
  
## Examples  
 El ejemplo siguiente convierte la hora Universal coordinada (UTC) a la hora Central.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> de <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> es <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte una fecha y hora en hora universal coordinada (UTC).</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora que se van a convertir.</param>
        <summary>Convierte la fecha y hora especificadas en hora universal coordinada (UTC).</summary>
        <returns>Hora universal coordinada (UTC) correspondiente al parámetro <paramref name="dateTime" />. La propiedad <see cref="P:System.DateTime.Kind" /> del valor <see cref="T:System.DateTime" /> siempre se establece en <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La conversión exacta realizada depende del valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro, como se muestra en la tabla siguiente.  
  
|Propiedad DateTime.Kind|Conversión|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Convierte la hora local a la hora Universal coordinada (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Se da por supuesto `dateTime` es la hora local y convierte la hora local a UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Devuelve `dateTime` sin cambios.|  
  
 Si `dateTime` corresponde a una hora local ambigua, este método supone que es hora local estándar. Si `dateTime` corresponde a una hora local no válida, el método inicia una <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Si local del equipo actual zona horaria incluye varias reglas de ajuste, esta sobrecarga de la <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> método puede devolver resultados diferentes a los <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> y <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> métodos. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> siempre se aplica la regla de ajuste actual para la conversión de zona horaria, o no `dateTime` se encuentra dentro de su intervalo de fechas. Y cuando se ejecuta en [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> también se aplica la regla de ajuste actual para la conversión de zona horaria, o no `dateTime` se encuentra dentro de su intervalo de fechas.  
  
 Si el equivalente de UTC de `dateTime` es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o una versión posterior que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, respectivamente.  
  
   
  
## Examples  
 El ejemplo siguiente muestra la conversión de valores de hora cuya propiedad <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, y <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, respectivamente. También ilustra la conversión de horas ambiguas y no válidos.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> devuelve <see langword="true" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora que se van a convertir.</param>
        <param name="sourceTimeZone">Zona horaria de <paramref name="dateTime" />.</param>
        <summary>Convierte la hora de una zona horaria determinada en hora universal coordinada (UTC).</summary>
        <returns>Hora universal coordinada (UTC) correspondiente al parámetro <paramref name="dateTime" />. La propiedad <see cref="P:System.DateTime.Kind" /> del objeto <see cref="T:System.DateTime" /> siempre se establece en <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro es igual a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> y `sourceTimeZone` parámetro es igual a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, este método devuelve `dateTime` sin realizar ninguna conversión.  
  
 Si `dateTime` corresponde a una hora ambigua, este método supone que es la hora estándar de la zona horaria de origen. Si `dateTime` corresponde a una hora no válida, este método produce una <xref:System.ArgumentException>.  
  
 Si el equivalente de hora Universal coordinada (UTC) de `dateTime` es anterior a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o una versión posterior que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, este método devuelve <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, respectivamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera la fecha actual del sistema local y lo convierte en hora Universal coordinada (UTC), a continuación, lo convierte en hora estándar de Tokio y finalmente se convierte a UTC de hora estándar de Tokio. Tenga en cuenta que las dos horas UTC son idénticas.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> es <see cref="F:System.DateTimeKind.Utc" /> y <paramref name="sourceTimeZone" /> no es igual a <see cref="P:System.TimeZoneInfo.Utc" />.  
  
O bien 
 <paramref name="dateTime" />.<see langword="Kind" /> es <see cref="F:System.DateTimeKind.Local" /> y <paramref name="sourceTimeZone" /> no es igual a <see cref="P:System.TimeZoneInfo.Local" />.  
  
O bien 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> devuelve <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> es <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Convertir horas entre zonas horarias</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Define una zona horaria que no se encuentra en el equipo local.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Identificador de la zona horaria.</param>
        <param name="baseUtcOffset">Un objeto que representa la diferencia horaria entre esta zona horaria y la hora universal coordinada (UTC).</param>
        <param name="displayName">Nombre para mostrar de la nueva zona horaria.</param>
        <param name="standardDisplayName">Nombre de la hora estándar de la nueva zona horaria.</param>
        <summary>Crea una zona horaria personalizada con un identificador especificado, un desplazamiento de hora universal coordinada (UTC), un nombre para mostrar y un nombre para mostrar de hora estándar.</summary>
        <returns>Nueva zona horaria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> método es adecuado para la creación de una zona horaria que no tenga ningún ajuste (es decir, una zona horaria que no admite el horario de verano). Para definir una zona horaria que incluye los ajustes del horario de verano, utilice el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método.  
  
 En la tabla siguiente se muestra la relación entre los parámetros que se proporcionan para el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método y las propiedades de la <xref:System.TimeZoneInfo> objeto devueltos por la llamada al método.  
  
|Parámetro CreateCustomTimeZone|Propiedad TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Normalmente, el nombre de hora estándar de la zona horaria y su identificador son los mismos. Sin embargo, la longitud del identificador de la zona horaria no debe superar los 32 caracteres. La cadena pasada a la `displayName` parámetro sigue un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), incluya entre paréntesis. Esto es seguido por una cadena que identifica la zona horaria, o uno o más ciudades, regiones o países en la zona horaria, o ambos. Por ejemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 El ejemplo siguiente crea una zona horaria personalizada para las regiones Mawson y bahía Holme de Antártida. A continuación, muestra el resultado de convertir la hora local a la hora de la nueva zona horaria.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="id" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="id" /> es una cadena vacía ("").  
  
O bien 
El parámetro <paramref name="baseUtcOffset" /> no representa un número entero de minutos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="baseUtcOffset" /> es mayor que 14 horas o menor que -14 horas.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Procedimiento Crear zonas horarias sin reglas de ajuste</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Identificador de la zona horaria.</param>
        <param name="baseUtcOffset">Un objeto que representa la diferencia horaria entre esta zona horaria y la hora universal coordinada (UTC).</param>
        <param name="displayName">Nombre para mostrar de la nueva zona horaria.</param>
        <param name="standardDisplayName">Nombre de la hora estándar de la nueva zona horaria.</param>
        <param name="daylightDisplayName">Nombre del horario de verano de la nueva zona horaria.</param>
        <param name="adjustmentRules">Matriz que aumenta el desplazamiento de hora UTC base para un período determinado.</param>
        <summary>Crea una zona horaria personalizada con un identificador especificado, un desplazamiento de la hora universal coordinada (UTC), un nombre para mostrar, un nombre de hora estándar, un nombre de horario de verano y las reglas del horario de verano.</summary>
        <returns>Objeto <see cref="T:System.TimeZoneInfo" /> que representa la nueva zona horaria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método es adecuado para la creación de una zona horaria que admite el horario de verano. Para definir una zona horaria que no admite el horario de verano, utilice el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método.  
  
 En la tabla siguiente se muestra la relación entre los parámetros que se proporcionan para el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método y los miembros de la <xref:System.TimeZoneInfo> objeto devueltos por la llamada al método.  
  
|Parámetro CreateCustomTimeZone|TimeZoneInfo member|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Una matriz de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> los objetos devueltos por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método.|  
  
 Normalmente, el nombre de hora estándar de la zona horaria y su identificador son los mismos. Sin embargo, la longitud del identificador de la zona horaria no debe superar los 32 caracteres. La cadena pasada a la `displayName` parámetro sigue un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), incluya entre paréntesis. Esto es seguido por una cadena que identifica la zona horaria, o uno o más ciudades, regiones o países en la zona horaria, o ambos. Por ejemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 El `baseUtcOffset` parámetro define el desplazamiento de hora Universal coordinada (UTC) para todas las reglas de ajuste de la zona horaria de la zona horaria personalizada. En otras palabras, la <xref:System.TimeZoneInfo> modelo de objetos supone que el desplazamiento de la zona horaria a la hora UTC es constante a lo largo de la vida de la zona horaria y existe independientes de determinadas reglas de ajuste. Para reflejar una zona horaria que ha cambiado su desplazamiento a la hora UTC, debe crear un nuevo objeto de zona horaria.  
  
 Las reglas de ajuste de una zona horaria se definen haciendo lo siguiente:  
  
1.  Al llamar a la <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> método para definir las iniciales y finales de tiempo de transición para cada regla de ajuste.  
  
2.  Una llamada a la <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> método para cada regla de ajuste.  
  
3.  Asignar las reglas de ajuste a una matriz que se puede pasar como el `adjustmentRules` parámetro.  
  
   
  
## Examples  
 El ejemplo siguiente crea una zona horaria personalizada para la Estación Palmer e Isla Anvers en la Antártida. A continuación, convierte la hora local a la hora de la nueva zona horaria y muestra el resultado.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="id" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="id" /> es una cadena vacía ("").  
  
O bien 
El parámetro <paramref name="baseUtcOffset" /> no representa un número entero de minutos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="baseUtcOffset" /> es mayor que 14 horas o menor que -14 horas.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Las reglas de ajuste especificadas en el parámetro <paramref name="adjustmentRules" /> se superponen.  
  
O bien 
Las reglas de ajuste especificadas en el parámetro <paramref name="adjustmentRules" /> no están en orden cronológico.  
  
O bien 
Uno o más elementos de <paramref name="adjustmentRules" /> son <see langword="null" />.  
  
O bien 
Pueden aplicarse varias reglas de ajuste aplicadas a una fecha.  
  
O bien 
La suma del parámetro <paramref name="baseUtcOffset" /> y el valor <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> de uno o más objetos de la matriz <paramref name="adjustmentRules" /> es mayor que 14 horas o menor que -14 horas.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Filtrar Creación de zonas horarias con reglas de ajuste</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Identificador de la zona horaria.</param>
        <param name="baseUtcOffset">Objeto <see cref="T:System.TimeSpan" /> que representa la diferencia horaria entre esta zona horaria y la hora universal coordinada (UTC).</param>
        <param name="displayName">Nombre para mostrar de la nueva zona horaria.</param>
        <param name="standardDisplayName">Nombre de la hora estándar de la nueva zona horaria.</param>
        <param name="daylightDisplayName">Nombre del horario de verano de la nueva zona horaria.</param>
        <param name="adjustmentRules">Matriz de objetos <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> que aumentan el desplazamiento de hora UTC base para un período determinado.</param>
        <param name="disableDaylightSavingTime">Es <see langword="true" /> para descartar cualquier información relacionada con el horario de verano presente en <paramref name="adjustmentRules" /> con el nuevo objeto; en caso contrario, es <see langword="false" />.</param>
        <summary>Crea una zona horaria personalizada con un identificador especificado, un desplazamiento de hora universal coordinada (UTC), un nombre para mostrar, un nombre de hora estándar, un nombre del horario de verano, las reglas del horario de verano y un valor que indica si el objeto devuelto refleja la información del horario de verano.</summary>
        <returns>Nueva zona horaria. Si el parámetro <paramref name="disableDaylightSavingTime" /> es <see langword="true" />, el objeto devuelto no tiene ningún dato del horario de verano.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta sobrecarga de la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método para crear una zona horaria personalizada cuyo soporte técnico del horario de verano se puede determinar mediante condiciones en tiempo de ejecución.  
  
 En la tabla siguiente se muestra la relación entre los parámetros que se proporcionan para el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método y los miembros de la <xref:System.TimeZoneInfo> objeto devueltos por la llamada al método.  
  
|Parámetro CreateCustomTimeZone|Propiedad TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Si `disableDaylightSavingTime` es `false`; <xref:System.String.Empty?displayProperty=nameWithType> si `disableDaylightSavingTime` es `true`.|  
|`adjustmentRules`|Una matriz de <xref:System.TimeZoneInfo.AdjustmentRule> los objetos devueltos por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método si `disableDaylightSavingTime` es `false`; una matriz vacía devuelta por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método si `disableDaylightSavingTime` es `true`.|  
|`disableDaylightSavingTime`|No <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Normalmente, el nombre de hora estándar de la zona horaria y su identificador son los mismos. Sin embargo, la longitud del identificador de la zona horaria no debe superar los 32 caracteres. La cadena pasada a la `displayName` parámetro sigue un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), incluya entre paréntesis. Esto es seguido por una cadena que identifica la zona horaria, o uno o más ciudades, regiones o países en la zona horaria, o ambos. Por ejemplo:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Las reglas de ajuste de una zona horaria se definen haciendo lo siguiente:  
  
1.  Al llamar a la <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> método para definir las iniciales y finales de las reglas de transición para cada regla de ajuste.  
  
2.  Una llamada a la <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> método para cada regla de ajuste.  
  
3.  Asignar las reglas de ajuste a una matriz que se puede pasar como el `adjustmentRules` parámetro.  
  
 Si `disableDaylightSavingTime` parámetro es `false`, la operación de este método es idéntica a la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> de sobrecarga. Si `disableDaylightSavingTime` es `true`, el objeto devuelto no incluye ninguna regla de ajuste y un <xref:System.TimeZoneInfo.DaylightName%2A> propiedad cuyo valor es una cadena vacía.  
  
   
  
## Examples  
 El ejemplo siguiente crea una zona horaria personalizada para la Estación Palmer e Isla Anvers en la Antártida. Establece el `disableDaylightSavingTime` parámetro en la llamada a la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> método `true`. A continuación, muestra el nombre de la nueva zona horaria al horario de verano, si hay alguno y el número de reglas de ajuste para confirmar que la nueva zona horaria no tiene ninguna información del horario de verano.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="id" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="id" /> es una cadena vacía ("").  
  
O bien 
El parámetro <paramref name="baseUtcOffset" /> no representa un número entero de minutos.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="baseUtcOffset" /> es mayor que 14 horas o menor que -14 horas.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Las reglas de ajuste especificadas en el parámetro <paramref name="adjustmentRules" /> se superponen.  
  
O bien 
Las reglas de ajuste especificadas en el parámetro <paramref name="adjustmentRules" /> no están en orden cronológico.  
  
O bien 
Uno o más elementos de <paramref name="adjustmentRules" /> son <see langword="null" />.  
  
O bien 
Pueden aplicarse varias reglas de ajuste aplicadas a una fecha.  
  
O bien 
La suma del parámetro <paramref name="baseUtcOffset" /> y el valor <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> de uno o más objetos de la matriz <paramref name="adjustmentRules" /> es mayor que 14 horas o menor que -14 horas.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Procedimiento Crear zonas horarias sin reglas de ajuste</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Filtrar Creación de zonas horarias con reglas de ajuste</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre para mostrar para el horario de verano de la zona horaria actual.</summary>
        <value>El nombre para mostrar para el horario de verano de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre para mostrar se localiza basándose en la referencia cultural instalada con el sistema operativo de Windows.  
  
 Un <xref:System.TimeZoneInfo.DaylightName%2A> propiedad cuyo valor no es <xref:System.String.Empty?displayProperty=nameWithType> o `null` no indica necesariamente que la zona horaria admite el horario de verano. Para determinar si la zona horaria admite el horario de verano, compruebe el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad.  
  
 En la mayoría de los casos, el `DaylightName` propiedad de las zonas de hora definido por el sistema no es <xref:System.String.Empty?displayProperty=nameWithType> o `null`. Sin embargo, el <xref:System.TimeZoneInfo.DaylightName%2A> se puede establecer la propiedad de zonas horarias personalizadas <xref:System.String.Empty?displayProperty=nameWithType>. Esto se produce cuando se crean las zonas horarias personalizadas mediante el <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> sobrecarga y la `disableDaylightSavingTime` parámetro es `true`. Por lo tanto, el código nunca debe asumir que el valor de la <xref:System.TimeZoneInfo.DaylightName%2A> propiedad no es `null` o está vacío.  
  
 El <xref:System.TimeZoneInfo.DaylightName%2A> propiedad es equivalente a la <xref:System.TimeZone.DaylightName%2A> propiedad de la <xref:System.TimeZone> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `DisplayDateWithTimeZoneName` que usa el <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar si se debe mostrar el nombre de la hora estándar o el nombre de horario de verano de una zona horaria.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre para mostrar general que representa la zona horaria.</summary>
        <value>El nombre para mostrar general de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre para mostrar se localiza basándose en la referencia cultural instalada con el sistema operativo de Windows.  
  
 Zona horaria nombres para mostrar para las zonas horarias de sistema de Windows siguen un formato bastante estándar. La primera parte del nombre para mostrar es el desplazamiento de base de la zona horaria de hora Universal coordinada, que se indica mediante el acrónimo GMT (hora del meridiano de Greenwich), incluya entre paréntesis. Para la hora Universal coordinada, el acrónimo GMT y sin desplazamiento se encierra entre paréntesis.  Esto es seguido por una cadena que identifica la zona horaria o uno o más ciudades, regiones o países en la zona horaria. Por ejemplo:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.TimeZoneInfo> objeto que representa la zona horaria local y envía su nombre para mostrar, el nombre de la hora estándar y el nombre de horario de verano. Se muestra el resultado de un sistema en los Estados Unidos. Zona horaria estándar del Pacífico.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina si los dos objetos <see cref="T:System.TimeZoneInfo" /> son iguales.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj">Un segundo objeto con el que se va a comparar el objeto actual.</param>
        <summary>Determina si el objeto <see cref="T:System.TimeZoneInfo" /> actual y otro objeto son iguales.</summary>
        <returns>Es <see langword="true" /> si <paramref name="obj" /> es un objeto <see cref="T:System.TimeZoneInfo" /> que es igual a la instancia actual; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método convierte o convierte `obj` a un <xref:System.TimeZoneInfo> de objeto y lo compara con la instancia actual. La prueba de igualdad se basa en una comparación de valores. Actual <xref:System.TimeZoneInfo> instancia y `obj` se consideran iguales en las siguientes condiciones:  
  
-   El tipo de tiempo de ejecución de `obj` es <xref:System.TimeZoneInfo>.  
  
-   Los dos objetos tienen el mismo <xref:System.TimeZoneInfo.Id%2A> valor de propiedad.  
  
-   Los dos objetos tienen las mismas reglas de ajuste.  
  
 Si `obj` es `null` este método devuelve `false`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.Equals%28System.Object%29> método para determinar si la zona horaria local es la hora u hora del Pacífico.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Un segundo objeto con el que se va a comparar el objeto actual.</param>
        <summary>Determina si el objeto <see cref="T:System.TimeZoneInfo" /> actual y otro objeto <see cref="T:System.TimeZoneInfo" /> son iguales.</summary>
        <returns>Es <see langword="true" /> si los dos objetos <see cref="T:System.TimeZoneInfo" /> son iguales; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Igualdad se basa en una comparación de valores. Dos <xref:System.TimeZoneInfo> dos objetos se consideran iguales en las siguientes condiciones:  
  
-   El valor de sus <xref:System.TimeZoneInfo.Id%2A> propiedad es la misma.  
  
-   Tienen las mismas reglas de ajuste.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Devuelve el valor booleano que es el resultado de evaluar la expresión siguiente:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Si el `other` parámetro está sin inicializar <xref:System.TimeZoneInfo> objeto, este método devuelve `false`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> método para determinar si la zona horaria local es la hora u hora del Pacífico.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Identificador de la zona horaria, que se corresponde con la propiedad <see cref="P:System.TimeZoneInfo.Id" />.</param>
        <summary>Crea instancias de un nuevo objeto <see cref="T:System.TimeZoneInfo" /> según su identificador.</summary>
        <returns>Un objeto cuyo identificador es el valor del parámetro <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `id` parámetro debe corresponder exactamente con el identificador de la zona horaria en longitud, pero no en el caso, para que una coincidencia correcta; es decir, la comparación de `id` con zona horaria identificadores distingue mayúsculas de minúsculas. Si desea recuperar objetos de zona horaria basándose en coincidencias parciales, puede escribir procedimientos personalizados que funcionan con la colección de solo lectura <xref:System.TimeZoneInfo> los objetos devueltos por la <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método.  
  
 En los sistemas Windows, `FindSystemTimeZoneById` intenta hacer coincidir `id` a los nombres de las subclaves de la rama HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones del registro. En Linux y macOS, usa la información de zona horaria en el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone). Si el registro o la biblioteca no tiene la información de la zona horaria que desee, puede crear una zona horaria determinada mediante una llamada a una de las sobrecargas de los <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método o mediante una llamada a <xref:System.TimeZoneInfo.FromSerializedString%2A> para deserializar un <xref:System.TimeZoneInfo> de objeto que representa la zona horaria necesaria. Sin embargo, las zonas horarias creadas por estas llamadas al método no son de tiempo definido por el sistema y no se puede recuperar mediante el <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método. Estas zonas horarias personalizadas puede obtenerse acceso únicamente a través de la referencia de objeto devuelta por la <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> o <xref:System.TimeZoneInfo.FromSerializedString%2A> llamada al método.  
  
Este método devuelve un nuevo <xref:System.TimeZoneInfo> para cada llamada al método de instancia; no devuelve los objetos en caché. Esto puede afectar al rendimiento en aplicaciones que llaman a la `FindSystemTimeZoneById` método varias veces con el mismo identificador.   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método para recuperar la zona horaria estándar de Tokio. Esto <xref:System.TimeZoneInfo> objeto, a continuación, se usa para convertir la hora local a la hora de Tokio y para determinar si es hora estándar de Tokio o la hora de verano de Tokio.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">El sistema no tiene bastante memoria para contener información sobre la zona horaria.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="id" /> es <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">No se encontró el identificador de zona horaria especificado por <paramref name="id" />. Esto significa que no existe ningún identificador de zona horaria cuyo nombre coincida con <paramref name="id" />, o que el identificador existe pero no contiene ningún dato de zona horaria.</exception>
        <exception cref="T:System.Security.SecurityException">El proceso no tiene los permisos necesarios para leer la clave del registro que contiene la información de zona horaria.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Se encontró el identificador de zona horaria, pero los datos del Registro están dañados.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">Procedimiento Crear una instancia de un objeto TimeZoneInfo</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="source">Representación de cadena del objeto <see cref="T:System.TimeZoneInfo" /> serializado.</param>
        <summary>Deserializa una cadena para volver a crear un objeto <see cref="T:System.TimeZoneInfo" /> serializado original.</summary>
        <returns>Objeto serializado original.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hay una alternativa a la que proporciona todo el código necesario para crear una zona horaria que no se encuentra en el registro en Windows o en el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS. Puede definir una zona horaria personalizada y, o bien usar la <xref:System.TimeZoneInfo.ToSerializedString%2A> método en un archivo ejecutable independiente o el programa de instalación de la aplicación para guardar la zona horaria como una cadena de uso. La aplicación, a continuación, puede recuperar esta cadena de su ubicación de almacenamiento y crear instancias mediante la <xref:System.TimeZoneInfo.FromSerializedString%2A> método.  
  
   
  
## Examples  
 El ejemplo siguiente se intenta recuperar el Polo Sur y Antártida zona horaria del sistema local. Si se produce un error, el código intenta recuperar información acerca de la zona horaria de un archivo de texto en el directorio de la aplicación. Si este intento falla, el código crea la zona horaria y escribe información sobre la zona horaria en el archivo de texto.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="source" /> es <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="source" /> es una cadena null.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">El parámetro de origen no se puede deserializar de nuevo a un objeto <see cref="T:System.TimeZoneInfo" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">Filtrar Restaurar zonas horarias de un recurso incrustado</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una matriz de objetos <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> que se aplican al objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
        <returns>Una matriz de objetos para esta zona horaria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método recupera una matriz de <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> objetos. Cada objeto de la matriz define la fecha efectiva de inicio y finalización de dicho ajuste de zona horaria, así como su delta (la cantidad exacta por la que el ajuste hace que cambie la hora). Además, dos propiedades devuelven <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> objetos que definen cuándo se produce cada transición anual del horario estándar de.  
  
 Si una zona horaria tiene varias reglas de ajuste, por lo general se ordenan del más antiguo (en el índice 0) a la versión más reciente (índice <xref:System.Array.Length%2A> - 1).  
  
 Si una zona horaria no tiene ninguna regla de ajuste, el <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método devuelve una matriz vacía (una matriz cuyo <xref:System.Array.Length%2A> es cero).  
  
 Las modificaciones a los elementos de la matriz devuelta por la <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método no se reflejan en las reglas de ajuste que pertenecen a una zona horaria determinada. Para modificar las reglas de ajuste de una zona horaria (como para reflejar su transición histórica hacia y desde el horario de verano) debe crear una nueva zona horaria con las reglas de ajuste adecuado, en lugar de modificar uno existente.  
  
   
  
## Examples  
 El ejemplo siguiente recupera todas las zonas horarias definidas en el local del sistema y muestra información completa sobre sus reglas de ajuste en la consola.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">El sistema no tiene suficiente memoria para realizar una copia en memoria de las reglas de ajuste.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve información sobre las posibles fechas y horas a las que se puede asignar una fecha y hora ambigua.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora.</param>
        <summary>Devuelve información sobre las posibles fechas y horas a las que se puede asignar una fecha y hora ambigua.</summary>
        <returns>Una matriz de objetos que representa los desplazamientos posibles de hora universal coordinada (UTC) que se pueden asignar a una fecha y hora determinada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento exacto de este método depende de la relación entre el <xref:System.DateTime.Kind%2A> propiedad y el <xref:System.TimeZoneInfo> objeto, como se muestra en la tabla siguiente.  
  
|Tipo de objeto TimeZoneInfo|Valor de propiedad de clase|Comportamiento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Hora ambigua devuelve los desplazamientos para `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` a la hora local y, a continuación, devuelve los desplazamientos de hora ambigua para esa hora.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Cualquier valor.|Se produce un <xref:System.ArgumentException>.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Local> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` a la zona horaria especificada y, a continuación, determina si esa hora es ambigua.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina si `dateTime` es ambiguo en la zona horaria especificada.|  
  
 El orden de <xref:System.TimeSpan> objetos en la matriz devuelta por este método no está definido. Sin embargo, puede determinar qué elemento representa un desplazamiento de hora estándar de la zona horaria comparando su valor con la zona horaria <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad. Para asignar una hora ambigua a una zona horaria estándar, consulte [Cómo: Resolver horas ambiguas](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `ShowPossibleUtcTimes` que usa el <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> método para asignar una hora ambigua a es posible que el tiempo de hora Universal coordinada (UTC) correspondiente.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 A continuación, se puede llamar al método mediante código como el siguiente:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" /> no es una hora ambigua.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Filtrar Resolver horas ambiguas</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Filtrar Permitir que los usuarios resuelvan horas ambiguas</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Fecha y hora.</param>
        <summary>Devuelve información sobre las posibles fechas y horas a las que se puede asignar una fecha y hora ambigua.</summary>
        <returns>Una matriz de objetos que representa los desplazamientos posibles de hora universal coordinada (UTC) que se pueden asignar a una fecha y hora determinada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento exacto de este método depende de la relación entre el <xref:System.DateTimeOffset.Offset%2A> propiedad de la `dateTimeOffset` parámetro y el <xref:System.TimeZoneInfo> objeto. Si el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad se corresponde con los desplazamientos posibles de la zona horaria actual en hora Universal coordinada (UTC) para la fecha y hora, el método devuelve los desplazamientos posibles. En caso contrario, convierte `dateTimeOffset` la hora en la zona horaria actual y, a continuación, devuelve los posibles desplazamientos de ese de fecha y hora.  
  
 El orden de <xref:System.TimeSpan> objetos en la matriz devuelta por este método no está definido. Sin embargo, puede determinar qué elemento representa un desplazamiento de hora estándar de la zona horaria comparando su valor con la zona horaria <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad. Para asignar una hora ambigua a una zona horaria estándar, consulte [Cómo: Resolver horas ambiguas](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTimeOffset" /> no es una hora ambigua.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Filtrar Resolver horas ambiguas</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Procedimiento Permitir que los usuarios resuelvan horas ambiguas</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actúa como una función hash para los algoritmos hash y estructuras de datos como las tablas hash.</summary>
        <returns>Entero con signo de 32 bits que actúa como código hash para este objeto <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener detalles adicionales sobre la <xref:System.TimeZoneInfo.GetHashCode%2A> método, consulte <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una colección ordenada de todas las zonas horarias sobre qué información está disponible en el sistema local.</summary>
        <returns>Una colección de sólo lectura de objetos <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método recupera toda la información de zona horaria disponible de las subclaves de la clave del registro HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones en sistemas Windows y desde el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS. Si no puede recuperar y analizar los valores para propiedades de cadena concreta del individuo correctamente <xref:System.TimeZoneInfo> objetos, este método establece su valor en una cadena vacía ("").  
  
> [!IMPORTANT]
>  El <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> método devuelve una colección de <xref:System.TimeZoneInfo> objetos sólo para zonas horarias definidas en la biblioteca ICU o. No incluye las zonas horarias creadas mediante las sobrecargas de los <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. Estos son accesibles sólo a través de la referencia de objeto devuelta por el método de creación de la zona horaria.  
  
 La colección devuelta por este método se ordena por la diferencia horaria con UTC y, para las zonas horarias que tienen el mismo desplazamiento de UTC, por el nombre para mostrar con la referencia cultural actual. Para obtener información sobre el nombre para mostrar, vea <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 El <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> objeto devuelto por este método admite la <xref:System.Collections.Generic.IEnumerable%601> interfaz, lo que significa que se puede iterar mediante el `foreach` (en C#) o `For Each…Next` (en Visual Basic) las instrucciones. Cada iteración del bucle proporciona la siguiente <xref:System.TimeZoneInfo> objeto de la colección.  
  
 La colección de <xref:System.TimeZoneInfo> objetos representa las zonas horarias definidas en el equipo local; no necesariamente proporciona información completa para todas las zonas horarias durante todos los períodos de tiempo. Si la aplicación requiere zonas horarias que no se encuentra en el equipo local, puede crear zonas horarias personalizadas mediante las sobrecargas de los <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método. Para obtener más información, vea [Cómo: Crear zonas horarias sin reglas de ajuste](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) y [Cómo: Creación de zonas horarias con reglas de ajuste](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 También puede determinar si se define una zona horaria individual en el equipo local mediante una llamada a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método y proporcionando el identificador de la zona horaria que desea recuperar como parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera una colección de objetos de zona horaria que representan las zonas horarias definidas en un equipo y escribe información sobre ellos en un archivo de texto.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente para almacenar toda la información de la zona horaria.</exception>
        <exception cref="T:System.Security.SecurityException">El usuario no tiene permiso para leer en las claves del Registro que contienen información de la zona horaria.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Calcula el desplazamiento o diferencia entre la hora de esta zona horaria y la hora universal coordinada (UTC) para una fecha y hora determinadas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Fecha y hora para las que se va a determinar el desplazamiento.</param>
        <summary>Calcula el desplazamiento o diferencia entre la hora de esta zona horaria y la hora universal coordinada (UTC) para una fecha y hora determinadas.</summary>
        <returns>Un objeto que indica la diferencia horaria entre las dos zonas horarias.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo de tiempo devuelto incluye las diferencias debido a la aplicación de reglas de ajuste a la zona horaria actual. Difiere de la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad, que devuelve la diferencia entre la hora Universal coordinada (UTC) y la hora estándar de la zona horaria y, por lo tanto, no tiene reglas de ajuste en la cuenta.  
  
 Si el `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad no se corresponde con el objeto de zona horaria, este método realiza la conversión necesaria antes de devolver un resultado. Por ejemplo, esto puede ocurrir si el <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> pero el objeto de zona horaria no es la zona horaria local. Si `dateTime` es ambiguo, o si el tiempo convertido es ambiguo, este método interpreta la hora ambigua como una hora estándar. Si `dateTime` no es válido, este método devuelve un <xref:System.TimeSpan> objeto que refleja la diferencia entre la hora UTC y la hora de la zona horaria estándar.  
  
 El <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> método es similar en la operación a la <xref:System.TimeZone.GetUtcOffset%2A> método de la <xref:System.TimeZone> clase.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el uso de la <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> método con distintas zonas horarias y los valores de fecha que tienen diferentes <xref:System.DateTime.Kind%2A> los valores de propiedad.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Fecha y hora para las que se va a determinar el desplazamiento.</param>
        <summary>Calcula el desplazamiento o diferencia entre la hora de esta zona horaria y la hora universal coordinada (UTC) para una fecha y hora determinadas.</summary>
        <returns>Un objeto que indica la diferencia horaria entre la hora universal coordinada (UTC) y la zona horaria actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El intervalo de tiempo devuelto incluye las diferencias debido a la aplicación de reglas de ajuste a la zona horaria actual. Difiere de la <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad, que devuelve la diferencia entre la hora Universal coordinada (UTC) y la hora estándar de la zona horaria y, por lo tanto, no tiene reglas de ajuste en la cuenta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Segundo objeto que se va a comparar con el objeto <see cref="T:System.TimeZoneInfo" /> actual.</param>
        <summary>Indica si el objeto actual y otro objeto <see cref="T:System.TimeZoneInfo" /> tienen las mismas reglas de ajuste.</summary>
        <returns>Es <see langword="true" /> si las dos zonas horarias tienen reglas de ajuste idénticas y un desplazamiento base idéntico; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como el <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> método, el <xref:System.TimeZoneInfo.HasSameRules%2A> método indica si dos zonas horarias tienen el mismo desplazamiento base (como se define en el <xref:System.TimeZoneInfo.BaseUtcOffset%2A> propiedad) y las mismas reglas de ajuste. A diferencia de la <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> método <xref:System.TimeZoneInfo.HasSameRules%2A> no compara los identificadores de zona horaria (como se define en el <xref:System.TimeZoneInfo.Id%2A> propiedad).  
  
   
  
## Examples  
 Normalmente, un número de zonas horarias definidas en el registro de Windows y la [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS tiene el mismo desplazamiento de hora Universal coordinada (UTC) y las mismas reglas de ajuste. El ejemplo siguiente muestra una lista de estas zonas horarias en la consola.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="other" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el identificador de la zona horaria.</summary>
        <value>Identificador de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El identificador de zona horaria es una cadena de clave que identifica una zona horaria determinada. En los sistemas de Windows, corresponde a las subclaves de la rama HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time zona del registro en los sistemas Windows y desde el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS. Se puede pasar como parámetro a la <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método para crear instancias de un <xref:System.TimeZoneInfo> objeto que representa una zona horaria determinada.  
  
> [!IMPORTANT]
>  Aunque un nombre de clave en el registro de Windows puede tener un máximo de 255 caracteres, se recomienda que un identificador que se asigna a una zona horaria personalizada sea de 32 caracteres o menos. El identificador de más tiempo, mayor será la probabilidad de que un nombre de clave incorrecto será proporcionado al recuperarlos.  
  
 El valor de la <xref:System.TimeZoneInfo.Id%2A> propiedad suele ser, aunque no siempre, idéntica de la <xref:System.TimeZoneInfo.StandardName%2A> propiedad. El identificador de la zona horaria Universal coordinada es UTC.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el identificador de cada una de las zonas horarias definidas en el equipo local.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina si un valor de fecha y hora determinado en una zona horaria concreta es ambiguo y se puede asignar a dos o más horas UTC (hora universal coordinada).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valor de fecha y hora.</param>
        <summary>Determina si un valor de fecha y hora determinado en una zona horaria concreta es ambiguo y se puede asignar a dos o más horas UTC (hora universal coordinada).</summary>
        <returns>Es <see langword="true" /> si el parámetro <paramref name="dateTime" /> es ambiguo; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hora ambigua se encuentra dentro de un intervalo de horas para la zona horaria actual. Esto significa que puede ser una hora estándar o una hora que es el resultado de la aplicación de una regla de ajuste. Normalmente, en horas ambiguas se producen cuando el reloj está configurado para volver a la hora estándar de horario de verano. Vea la sección ejemplo para ver una ilustración.  
  
 Hora Universal coordinada (UTC) no tiene ninguna hora ambigua; ninguna de ellas las zonas horarias que no admiten el horario de verano. Por lo tanto, se tienen estas zonas horarias sin reglas de ajuste y las llamadas a la <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> método devuelven siempre `false`.  
  
 Para las zonas horarias que observan el horario de verano, el comportamiento exacto de este método depende de la relación entre el <xref:System.DateTime.Kind%2A> propiedad y el <xref:System.TimeZoneInfo> objeto, como se muestra en la tabla siguiente.  
  
|Tipo de objeto TimeZoneInfo|Valor de propiedad de clase|Comportamiento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina si el `dateTime` parámetro es ambiguo.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` a la hora local y, a continuación, determina si esa hora es ambigua.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Devuelva `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Si `dateTime` es ambiguo, se da por supuesto es una hora estándar, lo convierte a UTC y devuelve `false`.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Convierte `dateTime` a la hora de la zona horaria especificada y, a continuación, determina si esa hora es ambigua.|  
|Cualquier otra zona horaria.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina si `dateTime` es ambiguo.|  
  
   
  
## Examples  
 En la zona horaria del Pacífico horario de verano finaliza a las 2:00 A.M. 4 de noviembre de 2007. En el ejemplo siguiente se pasa el tiempo a intervalos de un minuto desde las 12:59 A.M. 4 de noviembre de 2007 hasta las 2:01 A.M. 4 de noviembre de 2007, a la <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> método de un <xref:System.TimeZoneInfo> objeto que representa la zona horaria del Pacífico. La salida de la consola indica que todas las horas de 1:00 A.M. 4 de noviembre de 2007, 1:59 a.m. 4 de noviembre de 2007, son ambiguas.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> del valor <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Local" /> y <paramref name="dateTime" /> es una hora no válida.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Fecha y hora.</param>
        <summary>Determina si un valor de fecha y hora determinado en una zona horaria concreta es ambiguo y se puede asignar a dos o más horas UTC (hora universal coordinada).</summary>
        <returns>Es <see langword="true" /> si el parámetro <paramref name="dateTimeOffset" /> es ambiguo en la zona horaria actual; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hora ambigua se encuentra dentro de un intervalo de horas para la zona horaria actual. Esto significa que puede ser una hora estándar o una hora que es el resultado de la aplicación de una regla de ajuste. Normalmente, en horas ambiguas se producen cuando el reloj está configurado para volver a la hora estándar de horario de verano. Hora Universal coordinada (UTC) no tiene ninguna hora ambigua; ninguna de ellas las zonas horarias que no admiten el horario de verano.  
  
 El comportamiento exacto del método depende de la relación entre el <xref:System.DateTimeOffset.Offset%2A> propiedad de la `dateTimeOffset` parámetro y la zona horaria actual. Si el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad es un posible desplazamiento de la hora UTC de la zona horaria actual, el método determina si esa fecha y hora es ambigua. En caso contrario, convierte `dateTimeOffset` a la hora de la zona horaria actual y, a continuación, determina si esa fecha y hora es ambigua.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica si una fecha y hora especificadas están en el intervalo de horario de verano de la zona horaria del objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valor de fecha y hora.</param>
        <summary>Indica si una fecha y hora especificadas están en el intervalo de horario de verano de la zona horaria del objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
        <returns>Es <see langword="true" /> si el parámetro <paramref name="dateTime" /> corresponde al horario de verano; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> se ve afectado por la relación entre la zona de hora representada por la <xref:System.TimeZoneInfo> objeto y el <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro, como se muestra en la tabla siguiente.  
  
|TimeZoneInfo object|Propiedad DateTime.Kind|Resultado|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Determina si `dateTime` es horario de verano.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Convierte `dateTime` desde la hora Universal coordinada (UTC) a la hora local y determina si el horario de verano.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Se da por supuesto que `dateTime` representa la hora local y determina si es horario de verano.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`o `DateTimeKind.Utc`|Devuelve `false` (hora UTC no admite horario de verano).|  
|Cualquier otro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Local`|Convierte la hora local a la hora equivalente de la <xref:System.TimeZoneInfo> de objeto y, a continuación, determina si el último es horario de verano.|  
|Cualquier otro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Utc`|Convierte la hora UTC a la hora equivalente de la <xref:System.TimeZoneInfo> de objeto y, a continuación, determina si el último es horario de verano.|  
|Cualquier otro <xref:System.TimeZoneInfo> objeto.|`DateTimeKind.Unspecified`|Determina si `dateTime` es horario de verano.|  
  
 Si la zona horaria que representa el <xref:System.TimeZoneInfo> objeto no admite el horario de verano, el método siempre devuelve `false`. Un número de zonas horarias, incluidos <xref:System.TimeZoneInfo.Utc%2A>, no tienen en cuenta el horario de verano.  Para determinar si una zona horaria admite el horario de verano, recuperar el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad.  
  
 Si el `dateTime` parámetro especifica una hora ambigua en la zona de horaria del objeto actual, el <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método interpreta `dateTime` como hora estándar y devuelve `false` si su <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si el <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, este método se seleccione la hora ambigua correcta y se indica si se trata de un horario de verano.  
  
 Dado que el <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> método puede devolver `false` para una fecha y hora que es ambiguo (es decir, una fecha y hora que puede representar una hora estándar o un horario de verano en una zona horaria determinada), el <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> método se puede emparejar con la <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar si un tiempo puede ser un horario de verano. Dado que una hora ambigua es aquella que puede ser un horario de verano y una hora estándar, la <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> método se puede llamar primero para determinar si una fecha y hora pueden ser un horario de verano. Si el método devuelve `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método se puede llamar para determinar si el <xref:System.DateTime> valor es un horario de verano. El ejemplo siguiente ilustra esta técnica.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Si el `dateTime` parámetro especifica una hora no válida, la llamada al método produce una <xref:System.ArgumentException> si el valor de la `dateTime` del parámetro <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; en caso contrario, devuelve el método `false`.  
  
 Llame a la <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método para determinar si se debe usar una zona horaria <xref:System.TimeZoneInfo.StandardName%2A> valor o su <xref:System.TimeZoneInfo.DaylightName%2A> valor al mostrar el nombre de zona horaria. Vea la sección ejemplo para ver una ilustración.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `DisplayDateWithTimeZoneName` que usa el <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método para determinar si se debe mostrar el nombre de la hora estándar o el nombre de horario de verano de una zona horaria.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.DateTime.Kind" /> del valor <paramref name="dateTime" /> es <see cref="F:System.DateTimeKind.Local" /> y <paramref name="dateTime" /> es una hora no válida.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Valor de fecha y hora.</param>
        <summary>Indica si una fecha y hora especificadas están en el intervalo de horario de verano de la zona horaria del objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
        <returns>Es <see langword="true" /> si el parámetro <paramref name="dateTimeOffset" /> corresponde al horario de verano; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> se ve afectado por la relación entre la zona de hora representada por la <xref:System.TimeZoneInfo> objeto y el <xref:System.DateTimeOffset.Offset%2A> propiedad de la `dateTimeOffset` parámetro. Si `dateTimeOffset` no corresponde al desplazamiento de la zona horaria actual en hora Universal coordinada (UTC), el método convierte ese tiempo a la hora de la zona horaria actual. A continuación, determina si esa fecha y hora es horario de verano.  
  
 Si la zona horaria que representa el <xref:System.TimeZoneInfo> objeto no admite el horario de verano, el método siempre devuelve `false`. Para determinar si una zona horaria admite el horario de verano, recuperar el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valor de fecha y hora.</param>
        <summary>Indica si una fecha y hora determinadas no son válidas.</summary>
        <returns>Es <see langword="true" /> si <paramref name="dateTime" /> no es válida; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hora no válida se encuentra dentro de un intervalo de horas para la zona horaria actual que no se puede asignar a la hora Universal coordinada (UTC) debido a la aplicación de una regla de ajuste. Normalmente, horas no válidas se producen cuando el tiempo avanza al horario de verano. Vea la sección ejemplo para ver una ilustración.  
  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro afecta a si `dateTime` representa una hora no válida, como se muestra en la tabla siguiente.  
  
|Propiedad DateTime.Kind|Objeto TimeZoneInfo (si procede)|Comportamiento|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Determina si la hora es válida.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> o una zona horaria no local.|Convierte `dateTime` a la hora de la <xref:System.TimeZoneInfo> objeto y devuelve `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|No es aplicable.|Se da por supuesto `dateTime` es el momento de la <xref:System.TimeZoneInfo> objeto y determina si no es válido.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|No es aplicable.|Devuelva `false`.|  
  
   
  
## Examples  
 En la zona horaria del Pacífico horario de verano comienza a las 2:00 A.M. 2 de abril de 2006. El código siguiente pasa el tiempo a intervalos de un minuto desde 1:59 A.M. en el 2 de abril de 2006, a las 3:01 A.M. en el 2 de abril de 2006, a la <xref:System.TimeZoneInfo.IsInvalidTime%2A> método de un <xref:System.TimeZoneInfo> objeto que representa la zona horaria del Pacífico. La salida de la consola indica que todas las horas desde las 2:00 A.M. en el 2 de abril de 2006, a las 2:59 A.M. en el 2 de abril de 2006, no son válidos.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.TimeZoneInfo" /> que representa la zona horaria local.</summary>
        <value>Un objeto que representa la zona horaria local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La zona horaria local es la zona horaria en el equipo donde se ejecuta el código.  
  
> [!IMPORTANT]
>  Siempre debe tener acceso a la zona horaria local a través de la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad en lugar de asignar la hora local de la zona a un <xref:System.TimeZoneInfo> variable de objeto. Esto evita la <xref:System.TimeZoneInfo> variable de objeto del que se invalida mediante una llamada a la <xref:System.TimeZoneInfo.ClearCachedData%2A> método.  
  
 En los sistemas Windows, el <xref:System.TimeZoneInfo> objeto devuelto por la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad refleja el valor de la **ajustar el reloj automáticamente al horario de verano** casilla de verificación en el Panel de Control **fecha y hora**  aplicación. Si la casilla de verificación está desactivada, la copia en caché de la zona horaria local no contiene ninguna información del horario de verano. Esto significa que:  
  
-   La zona horaria local <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> método devuelve una matriz cuya longitud es cero.  
  
-   La zona horaria local <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad devuelve `false`.  
  
-   La zona horaria local no tiene ninguna hora ambigua o no es válida (todas las llamadas a <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> o <xref:System.TimeZoneInfo.IsInvalidTime%2A> devolver `false`).  
  
-   Todas las llamadas a <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> con horas locales individuales devuelven false.  
  
 Esto no es cierto, sin embargo, si una referencia a la zona horaria local se recuperan usando el <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> método.  
  
 El <xref:System.TimeZoneInfo.Local%2A> propiedad se corresponde con el <xref:System.TimeZone.CurrentTimeZone%2A> propiedad de la <xref:System.TimeZone> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.TimeZoneInfo> objeto que representa la zona horaria local y envía su nombre para mostrar, el nombre de la hora estándar y el nombre de horario de verano.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Filtrar Obtener acceso a los objetos de zona horaria Local y UTC predefinidos</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre para mostrar de la hora estándar de la zona horaria.</summary>
        <value>El nombre para mostrar de la hora estándar de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nombre para mostrar se localiza basándose en la referencia cultural instalada con el sistema operativo de Windows.  
  
 El <xref:System.TimeZoneInfo.StandardName%2A> propiedad es idéntica a la <xref:System.TimeZone.StandardName%2A> propiedad de la <xref:System.TimeZone> clase.  
  
 Si el idioma del sistema operativo es el inglés, el valor de la <xref:System.TimeZoneInfo.StandardName%2A> propiedad suele ser, aunque no siempre, idéntica de la <xref:System.TimeZoneInfo.Id%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método denominado `DisplayDateWithTimeZoneName` que usa el <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> método para determinar si se debe mostrar el nombre de la hora estándar o el nombre de horario de verano de una zona horaria.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la zona horaria tiene alguna regla de horario de verano.</summary>
        <value>Es <see langword="true" /> si la zona horaria admite el horario de verano; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> propiedad para la zona horaria local devuelta por la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad refleja la configuración del Panel de Control **fecha y hora** casilla de verificación de la aplicación que define si el sistema automáticamente se ajusta al horario de verano. Si no está marcada, o si no se muestra ninguna casilla para una zona horaria, el valor de esta propiedad es `false`.  
  
   
  
## Examples  
 El ejemplo siguiente recupera una colección de todas las zonas horarias que están disponibles en un sistema local y muestra los nombres de los usuarios que no admiten el horario de verano.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="sender">Objeto que inició la devolución de llamada. La funcionalidad de este parámetro aún no está implementada.</param>
        <summary>Se ejecuta cuando se completa la deserialización de un objeto.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">El objeto <see cref="T:System.TimeZoneInfo" /> contiene datos no válidos o dañados.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se va a rellenar con datos.</param>
        <param name="context">Destino de esta serialización (vea <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Rellena un objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar el objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="info" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiere plena confianza para el llamador inmediato. Este miembro no se puede usar código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el objeto <see cref="T:System.TimeZoneInfo" /> actual en una cadena serializada.</summary>
        <returns>Una cadena que representa el objeto <see cref="T:System.TimeZoneInfo" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las aplicaciones que dependen de las zonas horarias que no suelen definirse en el registro de sistemas de Windows o el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOScan puede usar el <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> método para crear instancias de las zonas horarias necesarias como <xref:System.TimeZoneInfo>objetos. La aplicación, a continuación, puede llamar a la <xref:System.TimeZoneInfo.ToSerializedString%2A> método para convertir el objeto de zona horaria en una cadena.  
  
 La <xref:System.TimeZoneInfo> objeto también se debe almacenar en una ubicación donde la aplicación pueda recuperarlos cuando sea necesario. Las ubicaciones posibles incluyen:  
  
-   El registro en los sistemas de Windows.  
  
-   Un archivo de recursos de la aplicación.  
  
-   Un archivo externo, como un archivo de texto.  
  
   
  
## Examples  
 El ejemplo siguiente se intenta recuperar el Polo Sur y Antártida zona horaria del sistema local. Si se produce un error, el código intenta recuperar información acerca de la zona horaria de un archivo de texto en el directorio de la aplicación. Si este intento falla, el código crea la zona horaria y escribe información sobre él en el archivo de texto.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">Procedimiento Guardar zonas horarias en un recurso incrustado</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el nombre para mostrar del objeto <see cref="T:System.TimeZoneInfo" /> actual.</summary>
        <returns>El valor de la propiedad <see cref="P:System.TimeZoneInfo.DisplayName" /> del objeto <see cref="T:System.TimeZoneInfo" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al asignar una colección que contiene <xref:System.TimeZoneInfo> objetos a un control de lista como la <xref:System.Windows.Forms.ListBox> control, el control llama automáticamente a la <xref:System.TimeZoneInfo.ToString%2A> método para extraer una cadena que describe cada objeto que se representarán en la lista. Como resultado, no es necesario almacenar una descripción significativa del objeto como una cadena y el usuario no tiene que usar dicha cadena para extraer el objeto de la colección. Vea [Cómo: Enumerar zonas horarias presentes en un equipo](~/docs/standard/datetime/enumerate-time-zones.md) para obtener más detalles.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.TimeZoneInfo" /> que representa la zona horaria universal coordinada (hora UTC).</summary>
        <value>Un objeto que representa la zona horaria universal coordinada (hora UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se trata de un objeto integrado; información sobre este <xref:System.TimeZoneInfo> objeto no se puede recuperar del registro en los sistemas Windows y desde el [ICU biblioteca](http://userguide.icu-project.org/datetime/timezone) en Linux y macOS.  
  
> [!IMPORTANT]
>  Siempre debe tener acceso a la zona de hora Universal coordinada (UTC) a través de la <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> propiedad en lugar de asignar la zona horaria UTC para un <xref:System.TimeZoneInfo> variable de objeto. Esto evita la <xref:System.TimeZoneInfo> variable de objeto del que se invalida mediante una llamada a la <xref:System.TimeZoneInfo.ClearCachedData%2A> método.  
  
 Anteriormente se conocía como hora del meridiano de Greenwich (GMT) hora Universal coordinada.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera un <xref:System.TimeZoneInfo> objeto que representa la hora Universal coordinada (UTC) y envía su nombre para mostrar, el nombre de la hora estándar y el nombre de horario de verano.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Procedimiento Obtener acceso a los objetos de zona horaria Local y UTC predefinidos</related>
      </Docs>
    </Member>
  </Members>
</Type>