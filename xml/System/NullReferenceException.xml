<Type Name="NullReferenceException" FullName="System.NullReferenceException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1889a73e6dd0c0791db93421a2a1596cb03dcb42" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48594683" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NullReferenceException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit NullReferenceException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.NullReferenceException" />
  <TypeSignature Language="VB.NET" Value="Public Class NullReferenceException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class NullReferenceException : SystemException" />
  <TypeSignature Language="F#" Value="type NullReferenceException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Excepción que se produce cuando se intenta desreferenciar un objeto null.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.NullReferenceException> excepción se produce cuando se intenta tener acceso a un miembro en un tipo cuyo valor es `null`. Un <xref:System.NullReferenceException> excepción normalmente refleja el error de desarrollador y se produce en los escenarios siguientes:  
  
-   Ha olvidado crear instancias de un tipo de referencia. En el ejemplo siguiente, `names` se declara pero nunca se crea:  
  
     [!code-csharp[System.NullReferenceException.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/example1.cs#1)]
     [!code-vb[System.NullReferenceException.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/example1.vb#1)]  
  
     Algunos compiladores emiten una advertencia cuando compila este código. Otros emiten un error y se produce un error en la compilación. Para solucionar este problema, cree una instancia del objeto para que su valor ya no es `null`. El siguiente ejemplo realiza esto llamando al constructor de clase de un tipo.  
  
     [!code-csharp[System.NullReferenceException.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/example1a.cs#2)]
     [!code-vb[System.NullReferenceException.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/example1a.vb#2)]  
  
-   Ha olvidado a una matriz de dimensión antes de inicializarla. En el ejemplo siguiente, `values` se declara como una matriz de enteros, pero nunca se especifica el número de elementos que contiene. El intento de inicializar sus valores, por tanto, se produce un <xref:System.NullReferenceException> excepción.  
  
     [!code-csharp[System.NullReferenceException.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array3.cs#10)]
     [!code-vb[System.NullReferenceException.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array3.vb#10)]  
  
     Puede eliminar la excepción al declarar el número de elementos de la matriz antes de inicializarla, como el siguiente ejemplo.  
  
     [!code-csharp[System.NullReferenceException.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array4.cs#11)]
     [!code-vb[System.NullReferenceException.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array4.vb#11)]  
  
     Para obtener más información sobre cómo declarar e inicializar matrices, vea [matrices](~/docs/csharp/programming-guide/arrays/index.md) y [matrices](~/docs/visual-basic/programming-guide/language-features/arrays/index.md).  
  
-   Obtendrá un **null** devolver el valor de un método y, a continuación, llamar a un método en el tipo devuelto. A veces esto es el resultado de un error de documentación; se produce un error en la documentación de tener en cuenta que puede devolver una llamada al método `null`. En otros casos, el código erróneamente se da por supuesto que el método siempre devolverá una que no sean de**null** valor.  
  
     El código en el ejemplo siguiente se da por supuesto que el <xref:System.Array.Find%2A?displayProperty=nameWithType> método siempre devuelve `Person` cuyo `FirstName` campo coincide con una cadena de búsqueda. Dado que no hay ninguna coincidencia, el runtime produce una <xref:System.NullReferenceException> excepción.  
  
     [!code-csharp[System.NullReferenceException.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/nullreturn2.cs#4)]
     [!code-vb[System.NullReferenceException.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/nullreturn2.vb#4)]  
  
     Para solucionar este problema, pruebe el valor devuelto del método para asegurarse de que no es `null` antes de llamar a cualquiera de sus miembros, como el siguiente ejemplo.  
  
     [!code-csharp[System.NullReferenceException.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/nullreturn2a.cs#5)]
     [!code-vb[System.NullReferenceException.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/nullreturn2a.vb#5)]  
  
-   Está utilizando una expresión (por ejemplo, va a encadenar una lista de métodos o propiedades juntas) para recuperar un valor y, aunque está comprobando si el valor es `null`, el tiempo de ejecución todavía inicia un <xref:System.NullReferenceException> excepción. Esto ocurre porque uno de los valores intermedios en la expresión devuelve `null`. Como resultado, el resto de `null` nunca se evalúa.  
  
     En el ejemplo siguiente se define un `Pages` objeto que almacena en caché información acerca de las páginas web, que se presentan por `Page` objetos. El `Example.Main` método comprueba si la página web actual tiene un título distinto de null y, si es así, muestra el título. A pesar de esta comprobación, sin embargo, el método produce una <xref:System.NullReferenceException> excepción.  
  
     [!code-csharp[System.NullReferenceException.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Chain1.cs#6)]
     [!code-vb[System.NullReferenceException.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Chain1.vb#6)]  
  
     Se produce la excepción porque `pages.CurrentPage` devuelve `null` si no hay información de página se almacena en la memoria caché. Esta excepción puede corregirse mediante la comprobación del valor de la `CurrentPage` propiedad antes de recuperar actual `Page` del objeto `Title` propiedad, como en el ejemplo siguiente se hace:  
  
     [!code-csharp[System.NullReferenceException.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Chain2.cs#7)]
     [!code-vb[System.NullReferenceException.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Chain2.vb#7)]  
  
-   Va a enumerar los elementos de una matriz que contiene los tipos de referencia y el intento de proceso se produce uno de los elementos un <xref:System.NullReferenceException> excepción.  
  
     El ejemplo siguiente define una matriz de cadenas. Un `for` instrucción enumera los elementos de la matriz y llama a cada cadena <xref:System.String.Trim%2A> método antes de mostrar la cadena.  
  
     [!code-csharp[System.NullReferenceException.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array1.cs#8)]
     [!code-vb[System.NullReferenceException.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array1.vb#8)]  
  
     Esta excepción se produce si asume que cada elemento de la matriz debe contener un valor distinto de null y el valor del elemento de matriz es en realidad `null`. La excepción se puede eliminar mediante la comprobación de si el elemento es `null` antes de realizar cualquier operación en ese elemento, como en el ejemplo siguiente se muestra.  
  
     [!code-csharp[System.NullReferenceException.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/Array2.cs#9)]
     [!code-vb[System.NullReferenceException.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/Array2.vb#9)]  
  
-   Un <xref:System.NullReferenceException> se produce una excepción mediante un método que se pasa `null`. Algunos métodos validan los argumentos que se les pasan. Si lo hacen y uno de los argumentos es `null`, el método produce una <xref:System.ArgumentNullException?displayProperty=nameWithType> excepción. De lo contrario, produce una <xref:System.NullReferenceException> excepción. El ejemplo siguiente muestra este escenario.  
  
     [!code-csharp[System.NullReferenceException.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.nullreferenceexception.class/cs/example2.cs#3)]
     [!code-vb[System.NullReferenceException.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.nullreferenceexception.class/vb/example2.vb#3)]  
  
     Para solucionar este problema, asegúrese de que no es el argumento pasado al método `null`, o controlar la excepción iniciada en un `try…catch…finally` bloque. Para obtener más información, consulte [excepciones](~/docs/standard/exceptions/index.md).  
  
 El siguiente generar instrucciones de lenguaje intermedio (MSIL) de Microsoft <xref:System.NullReferenceException>: `callvirt`, `cpblk`, `cpobj`, `initblk`, `ldelem.<type>`, `ldelema`, `ldfld`, `ldflda`, `ldind.<type>` , `ldlen`, `stelem.<type>`, `stfld`, `stind.<type>`, `throw`, y `unbox`.  
  
 <xref:System.NullReferenceException> utiliza HRESULT COR_E_NULLREFERENCE, que tiene el valor 0 x 80004003.  
  
 Para obtener una lista de valores de propiedad iniciales de una instancia de <xref:System.NullReferenceException>, consulte el <xref:System.NullReferenceException.%23ctor%2A> constructores.  
  
 **Controlar excepciones NullReferenceException en código de versión**  
  
 Es mejor evitar las excepciones NullReferenceException que controlara después de se produce. Controlar una excepción puede dificultar el mantenimiento y la comprensión del código y, a veces, puede introducir otros errores. Las excepciones NullReferenceException suelen ser errores sin recuperación. En esos casos, la mejor opción puede ser permitir que la excepción detenga la aplicación.  
  
 Sin embargo, hay muchas situaciones en las que puede ser útil controlar el error:  
  
-   La aplicación puede pasar por alto los objetos que son NULL. Por ejemplo, si la aplicación recupera y procesa los registros de una base de datos, puede caber la opción de pasar por alto cierto número de registros incorrectos que generan objetos NULL. Es posible que solo tenga que registrar los datos incorrectos en un archivo de registro o en la interfaz de usuario de la aplicación.  
  
-   La recuperación tras la excepción es posible. Por ejemplo, una llamada a un servicio web que devuelve un tipo de referencia podría devolver NULL si se interrumpe la conexión o se agota el tiempo de espera. Puede tratar de restablecer la conexión y volver a hacer la llamada.  
  
-   Puede restaurar el estado de la aplicación a un estado válido. Por ejemplo, puede que esté realizando una tarea con varios pasos que exija guardar información en un almacén de datos antes de llamar a un método que lance una excepción NullReferenceException. Si el objeto sin inicializar fuera a dañar el registro de datos, puede quitar los datos anteriores antes de cerrar la aplicación.  
  
-   La excepción se tiene que notificar. Por ejemplo, si la causa del error fue un error del usuario de la aplicación, puede generar un mensaje para indicarle cómo proporcionar la información correcta. También puede registrar información sobre el error para facilitar la resolución del problema. Algunos marcos, como ASP.NET, tienen un controlador de excepciones de nivel superior que captura todos los errores para que la aplicación no se bloquee nunca. En ese caso, puede que la única forma de saber que se produce sea registrar la excepción.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Controlar y generar excepciones</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullReferenceException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NullReferenceException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" />, estableciendo la propiedad <see cref="P:System.Exception.Message" /> de una nueva instancia en un mensaje proporcionado por el sistema que describe el error, como "Se ha encontrado el valor 'null' en el lugar donde era necesaria una instancia de un objeto". Este mensaje tiene en cuenta la referencia cultural del sistema actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.NullReferenceException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|La cadena del mensaje de error localizado.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullReferenceException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NullReferenceException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new NullReferenceException : string -&gt; NullReferenceException" Usage="new System.NullReferenceException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Objeto <see cref="T:System.String" /> que describe el error. El contenido de <c>message</c> está diseñado para que sea inteligible. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" /> con el mensaje de error especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.NullReferenceException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NullReferenceException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NullReferenceException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new NullReferenceException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; NullReferenceException" Usage="new System.NullReferenceException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objeto que contiene los datos del objeto serializados.</param>
        <param name="context">Información contextual acerca del origen o del destino.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" /> con datos serializados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la deserialización se llama a este constructor para reconstituir el objeto de excepción transmitido en una secuencia. Para obtener más información, consulte [serialización SOAP y XML](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Serialización de SOAP y XML</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NullReferenceException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.NullReferenceException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NullReferenceException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new NullReferenceException : string * Exception -&gt; NullReferenceException" Usage="new System.NullReferenceException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
        <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <c>innerException</c> no es <see langword="null" />, se genera la excepción actual en un bloque <see langword="catch" /> que controla la excepción interna.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.NullReferenceException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una excepción que se produce como consecuencia directa de una excepción anterior debe incluir una referencia a esta última en la propiedad <xref:System.Exception.InnerException%2A>. La propiedad <xref:System.Exception.InnerException%2A> devuelve el mismo valor que se haya pasado al constructor, o bien `null` en caso de que la propiedad <xref:System.Exception.InnerException%2A> no le haya proporcionado al constructor el valor de la excepción interna.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.NullReferenceException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia a la excepción interna.|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Controlar y generar excepciones</related>
      </Docs>
    </Member>
  </Members>
</Type>