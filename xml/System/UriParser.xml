<Type Name="UriParser" FullName="System.UriParser">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d238a719010b8bffa6f0a4a5ac30adecb1b9537" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53394894" /></Metadata><TypeSignature Language="C#" Value="public abstract class UriParser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract UriParser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.UriParser" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UriParser" />
  <TypeSignature Language="C++ CLI" Value="public ref class UriParser abstract" />
  <TypeSignature Language="F#" Value="type UriParser = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Analiza un nuevo esquema de URI. Esta es una clase abstracta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase UriParser permite crear analizadores para nuevos esquemas de URI. Puede crear estos analizadores en su totalidad, o se pueden derivar los analizadores de esquemas conocidos (HTTP, FTP y otros esquemas basados en protocolos de red). Si desea crear un analizador completamente nuevo, se heredan de <xref:System.GenericUriParser>. Si desea crear un analizador que extienda un esquema URI conocido, se heredan de <xref:System.FtpStyleUriParser>, <xref:System.HttpStyleUriParser>, <xref:System.FileStyleUriParser>, <xref:System.GopherStyleUriParser>, o <xref:System.LdapStyleUriParser>.  
  
 Microsoft recomienda encarecidamente que utilice un analizador que se incluye con. NET. Creando su propio analizador aumenta la complejidad de la aplicación y no llevará a cabo, así como los analizadores incluidos.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UriParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UriParser();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Construye un analizador de identificador URI predeterminado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComponents">
      <MemberSignature Language="C#" Value="protected virtual string GetComponents (Uri uri, UriComponents components, UriFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetComponents(class System.Uri uri, valuetype System.UriComponents components, valuetype System.UriFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetComponents(Uri ^ uri, UriComponents components, UriFormat format);" />
      <MemberSignature Language="F#" Value="abstract member GetComponents : Uri * UriComponents * UriFormat -&gt; string&#xA;override this.GetComponents : Uri * UriComponents * UriFormat -&gt; string" Usage="uriParser.GetComponents (uri, components, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="components" Type="System.UriComponents" />
        <Parameter Name="format" Type="System.UriFormat" />
      </Parameters>
      <Docs>
        <param name="uri">URI que se va a analizar.</param>
        <param name="components"><see cref="T:System.UriComponents" /> que se va a recuperar de <paramref name="uri" />.</param>
        <param name="format">Uno de los valores <see cref="T:System.UriFormat" /> que controla cómo se utiliza una secuencia de escape para los caracteres especiales.</param>
        <summary>Obtiene los componentes de un identificador uniforme de recursos URI.</summary>
        <returns>Cadena que contiene los componentes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.UriParser.GetComponents%2A> método para determinar el valor de varias partes del URI, como el <xref:System.UriComponents.Scheme>, <xref:System.UriComponents.Host>, o <xref:System.UriComponents.Port>.  
  
 Los componentes se devuelven en el orden que aparecen en el URI. Por ejemplo, si <xref:System.UriComponents.Scheme> se especifica, aparece en primer lugar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="uriFormat" /> no es válido.  
  
O bien 
 <paramref name="uriComponents" /> no es una combinación de valores de <see cref="T:System.UriComponents" /> válidos.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> requiere un análisis controlado por el usuario 
O bien 
 El parámetro <paramref name="uri" /> no es un identificador URI absoluto. Los identificadores URI relativos no se pueden utilizar con este método.</exception>
        <altmember cref="T:System.UriComponents" />
        <altmember cref="F:System.UriComponents.Host" />
        <altmember cref="F:System.UriComponents.Port" />
        <altmember cref="F:System.UriComponents.Scheme" />
        <altmember cref="T:System.UriFormat" />
        <altmember cref="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeAndValidate">
      <MemberSignature Language="C#" Value="protected virtual void InitializeAndValidate (Uri uri, out UriFormatException parsingError);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeAndValidate(class System.Uri uri, [out] class System.UriFormatException&amp; parsingError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeAndValidate(Uri ^ uri, [Runtime::InteropServices::Out] UriFormatException ^ % parsingError);" />
      <MemberSignature Language="F#" Value="abstract member InitializeAndValidate : Uri *  -&gt; unit&#xA;override this.InitializeAndValidate : Uri *  -&gt; unit" Usage="uriParser.InitializeAndValidate (uri, parsingError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="parsingError" Type="System.UriFormatException" RefType="out" />
      </Parameters>
      <Docs>
        <param name="uri">T:System.Uri que se va a validar.</param>
        <param name="parsingError">Errores de validación, si los hay.</param>
        <summary>Inicializa el estado del analizador y valida el URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.UriParser.InitializeAndValidate%2A> método se llama cada vez un <xref:System.Uri> se crea una instancia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBaseOf">
      <MemberSignature Language="C#" Value="protected virtual bool IsBaseOf (Uri baseUri, Uri relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsBaseOf(class System.Uri baseUri, class System.Uri relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsBaseOf (baseUri As Uri, relativeUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsBaseOf(Uri ^ baseUri, Uri ^ relativeUri);" />
      <MemberSignature Language="F#" Value="abstract member IsBaseOf : Uri * Uri -&gt; bool&#xA;override this.IsBaseOf : Uri * Uri -&gt; bool" Usage="uriParser.IsBaseOf (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="baseUri">Identificador URI base.</param>
        <param name="relativeUri">URI que se va a comprobar.</param>
        <summary>Determina si <paramref name="baseUri" /> es una dirección URI base para <paramref name="relativeUri" />.</summary>
        <returns><see langword="true" /> si <paramref name="baseUri" /> es una dirección URI base para <paramref name="relativeUri" />, de lo contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKnownScheme">
      <MemberSignature Language="C#" Value="public static bool IsKnownScheme (string schemeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKnownScheme(string schemeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.IsKnownScheme(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsKnownScheme (schemeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKnownScheme(System::String ^ schemeName);" />
      <MemberSignature Language="F#" Value="static member IsKnownScheme : string -&gt; bool" Usage="System.UriParser.IsKnownScheme schemeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schemeName">Nombre de esquema que se va a comprobar.</param>
        <summary>Indica si se ha registrado el analizador para un esquema.</summary>
        <returns><see langword="true" /> si se ha registrado <paramref name="schemeName" />; de lo contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="schemeName" /> es null.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="schemeName" /> no es válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWellFormedOriginalString">
      <MemberSignature Language="C#" Value="protected virtual bool IsWellFormedOriginalString (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsWellFormedOriginalString(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.IsWellFormedOriginalString(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsWellFormedOriginalString(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="abstract member IsWellFormedOriginalString : Uri -&gt; bool&#xA;override this.IsWellFormedOriginalString : Uri -&gt; bool" Usage="uriParser.IsWellFormedOriginalString uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">URI que se va a comprobar.</param>
        <summary>Indica si el formato del URI es correcto.</summary>
        <returns><see langword="true" /> si <paramref name="uri" /> tiene el formato correcto; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.UriParser.IsWellFormedOriginalString%2A> método devolverá false si:  
  
-   La cadena no es el escape adecuado por RFC 2396.  
  
-   La cadena representa un URI absoluto que hace referencia a un URI de archivo implícito.  
  
-   La cadena representa un URI absoluto que le falta una barra diagonal antes del componente de ruta de acceso.  
  
-   La cadena contiene barras diagonales inversas sin escape, aunque se tratará como barras diagonales.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNewUri">
      <MemberSignature Language="C#" Value="protected virtual UriParser OnNewUri ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.UriParser OnNewUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.OnNewUri" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnNewUri () As UriParser" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual UriParser ^ OnNewUri();" />
      <MemberSignature Language="F#" Value="abstract member OnNewUri : unit -&gt; UriParser&#xA;override this.OnNewUri : unit -&gt; UriParser" Usage="uriParser.OnNewUri " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UriParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lo invoca un constructor de <see cref="T:System.Uri" /> para obtener una instancia de <see cref="T:System.UriParser" /></summary>
        <returns><see cref="T:System.UriParser" /> para el <see cref="T:System.Uri" /> construido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada devuelve el mismo <xref:System.UriParser> instancia. Es posible que deba reemplazar este método y devolver otra <xref:System.UriParser> para cada invocación si está trabajando en un entorno multiproceso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRegister">
      <MemberSignature Language="C#" Value="protected virtual void OnRegister (string schemeName, int defaultPort);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegister(string schemeName, int32 defaultPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.OnRegister(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRegister (schemeName As String, defaultPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRegister(System::String ^ schemeName, int defaultPort);" />
      <MemberSignature Language="F#" Value="abstract member OnRegister : string * int -&gt; unit&#xA;override this.OnRegister : string * int -&gt; unit" Usage="uriParser.OnRegister (schemeName, defaultPort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemeName" Type="System.String" />
        <Parameter Name="defaultPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemeName">Esquema asociado a este <see cref="T:System.UriParser" />.</param>
        <param name="defaultPort">Número de puerto del esquema.</param>
        <summary>El marco de trabajo lo llama cuando se registra un método de <see cref="T:System.UriParser" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static void Register (UriParser uriParser, string schemeName, int defaultPort);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Register(class System.UriParser uriParser, string schemeName, int32 defaultPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Register(UriParser ^ uriParser, System::String ^ schemeName, int defaultPort);" />
      <MemberSignature Language="F#" Value="static member Register : UriParser * string * int -&gt; unit" Usage="System.UriParser.Register (uriParser, schemeName, defaultPort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriParser" Type="System.UriParser" />
        <Parameter Name="schemeName" Type="System.String" />
        <Parameter Name="defaultPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="uriParser">Analizador de URI que se va a registrar.</param>
        <param name="schemeName">Nombre del esquema asociado a este analizador.</param>
        <param name="defaultPort">Número de puerto predeterminado para el esquema especificado.</param>
        <summary>Asocia un esquema y número de puerto a un <see cref="T:System.UriParser" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `defaultPort` parámetro se establece en -1, el <xref:System.UriParser.Register%2A> método no registra ningún valor predeterminado para el número de puerto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="uriParser" /> es nulo. 
O bien 
 El parámetro <paramref name="schemeName" /> es nulo.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="schemeName" /> no es válido. 
O bien 
 El parámetro <paramref name="defaultPort" /> no es válido. El parámetro <paramref name="defaultPort" /> es menor que -1 o mayor que 65 534.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="protected virtual string Resolve (Uri baseUri, Uri relativeUri, out UriFormatException parsingError);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string Resolve(class System.Uri baseUri, class System.Uri relativeUri, [out] class System.UriFormatException&amp; parsingError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Resolve (baseUri As Uri, relativeUri As Uri, ByRef parsingError As UriFormatException) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ Resolve(Uri ^ baseUri, Uri ^ relativeUri, [Runtime::InteropServices::Out] UriFormatException ^ % parsingError);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : Uri * Uri *  -&gt; string&#xA;override this.Resolve : Uri * Uri *  -&gt; string" Usage="uriParser.Resolve (baseUri, relativeUri, parsingError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.Uri" />
        <Parameter Name="parsingError" Type="System.UriFormatException" RefType="out" />
      </Parameters>
      <Docs>
        <param name="baseUri">Identificador URI base.</param>
        <param name="relativeUri">Identificador URI relativo.</param>
        <param name="parsingError">Errores durante el proceso de resolución, si los hay.</param>
        <summary>Los constructores de <see cref="T:System.Uri" /> y <see cref="Overload:System.Uri.TryCreate" /> lo llaman para resolver un identificador URI relativo.</summary>
        <returns>La cadena del <see cref="T:System.Uri" /> relativo resuelto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Uri> los constructores y <xref:System.Uri.TryCreate%2A?displayProperty=nameWithType> usar <xref:System.UriParser.Resolve%2A> para construir un URI de `baseUri` y `relativeUri`.  
  
 Si un análisis de error, la cadena devuelta para relativo resuelto <xref:System.Uri> es null.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El parámetro <paramref name="baseUri" /> no es un <see cref="T:System.Uri" /> absoluto.  
  
O bien 
 El parámetro <paramref name="baseUri" /> requiere un análisis controlado por el usuario.</exception>
      </Docs>
    </Member>
  </Members>
</Type>