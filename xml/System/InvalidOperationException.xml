<Type Name="InvalidOperationException" FullName="System.InvalidOperationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="310a76379e88bee1dcef1420b7010efdaf2c8a3d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429914" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvalidOperationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidOperationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.InvalidOperationException" />
  <TypeSignature Language="VB.NET" Value="Public Class InvalidOperationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvalidOperationException : SystemException" />
  <TypeSignature Language="F#" Value="type InvalidOperationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Excepción que se produce cuando una llamada a un método no es válida para el estado actual del objeto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.InvalidOperationException> se utiliza en los casos, cuando se produce un error al invocar un método por motivos distintos a argumentos no válidos. Normalmente, se produce cuando el estado de un objeto no admite la llamada al método. Por ejemplo, un <xref:System.InvalidOperationException> excepción se produce en los métodos, como:  
  
-   <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=nameWithType> Si los objetos de una colección se modifican después de crea el enumerador. Para obtener más información, consulte [cambiar una colección que se va iterando lo](#Iterating).  
  
-   <xref:System.Resources.ResourceSet.GetString%2A?displayProperty=nameWithType> Si el conjunto de recursos se cerró antes de se realiza la llamada al método.  
  
-   <xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=nameWithType>, si el objeto u objetos agregarse resultaría en un documento XML con estructura incorrecta.  
  
-   Un método que intenta manipular la interfaz de usuario desde un subproceso que no es el principal o el subproceso de interfaz de usuario.  
  
> [!IMPORTANT]
>  Dado que la <xref:System.InvalidOperationException> se puede producir la excepción en una gran variedad de circunstancias, es importante leer el mensaje de excepción devolviendo por la <xref:System.Exception.Message%2A> propiedad.  
  
 En esta sección:  
  
 [Algunas causas habituales de excepciones InvalidOperationException](#Causes)   
 [Actualización de un subproceso de interfaz de usuario desde un subproceso ajeno a la interfaz de usuario](#UI)  
 [Cambiar una colección que se va iterando lo](#Iterating)  
 [Ordenar una matriz o colección cuyos objetos no se pueden comparar](#Sorting)  
 [Convertir un tipo Nullable&lt;T&gt; que es null para su tipo subyacente](#Nullable)   
 [Al llamar a un método System.Linq.Enumerable en una colección vacía](#Empty)  
 [Llamar a Enumerable.Single o Enumerable.SingleOrDefault en una secuencia sin un elemento](#Single)  
 [Acceso de campo dinámico entre dominios de aplicación](#Emit)  
[Producir una excepción InvalidOperationException](#Throwing)  
[Información diversa](#Misc)  
  
<a name="Causes"></a>   
## <a name="some-common-causes-of-invalidoperationexception-exceptions"></a>Algunas causas habituales de excepciones InvalidOperationException  
 Las secciones siguientes muestran cómo algunas común casos en que en <xref:System.InvalidOperationException> excepción se produce en una aplicación. Cómo controlar el problema depende de la situación concreta. Normalmente, no obstante, produce la excepción de error de desarrollador y <xref:System.InvalidOperationException> se puede prever y evitar la excepción.  
  
<a name="UI"></a>   
### <a name="updating-a-ui-thread-from-a-non-ui-thread"></a>Actualización de un subproceso de interfaz de usuario desde un subproceso ajeno a la interfaz de usuario  
 A menudo, los subprocesos de trabajo se utilizan para realizar algunas tareas en segundo plano que implica la recopilación de datos que se mostrará en la interfaz de usuario de una aplicación. Sin embargo. la mayoría marcos de aplicaciones de GUI (interfaz gráfica de usuario) para .NET Framework, como Windows Forms y Windows Presentation Foundation (WPF) le permiten obtener acceso a objetos de la GUI solo desde el subproceso que crea y administra la interfaz de usuario (el subproceso principal o la interfaz de usuario). Un <xref:System.InvalidOperationException> se produce al intentar obtener acceso a un elemento de interfaz de usuario desde un subproceso distinto del subproceso de interfaz de usuario.  El texto del mensaje de excepción se muestra en la tabla siguiente.  
  
|Tipo de aplicación|Mensaje|  
|----------------------|-------------|  
|Aplicación WPF|**El subproceso que realiza la llamada no puede tener acceso a este objeto porque el propietario es otro subproceso.**|  
|Aplicación de UWP|**La aplicación llamó a una interfaz que se aplanó para un subproceso diferente.**|  
|Aplicación de Windows Forms|**Entre subprocesos operación no válida: Control "TextBox1" acceso desde un subproceso distinto del subproceso que lo creó.**|  
  
 Marcos de interfaz de usuario de .NET Framework implementan un *distribuidor* patrón que incluye un método para comprobar si se está ejecutando una llamada a un miembro de un elemento de interfaz de usuario en el subproceso de interfaz de usuario y otros métodos para programar la llamada en el subproceso de interfaz de usuario:  
  
-   En las aplicaciones WPF, llame a la <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=nameWithType> método para determinar si un método se está ejecutando en un subproceso ajeno a la interfaz de usuario. Devuelve `true` si el método se ejecuta en el subproceso de interfaz de usuario y `false` en caso contrario. Llamar a una de las sobrecargas de los <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=nameWithType> método para programar la llamada en el subproceso de interfaz de usuario.  
  
-   En las aplicaciones de UWP, llame a la [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) método para determinar si un método se está ejecutando en un subproceso ajeno a la interfaz de usuario. Llame a la [CoreDispatcher.RunAsync](https://msdn.microsoft.com/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) método para ejecutar un delegado que actualice el subproceso de interfaz de usuario. Use el  
  
-   En las aplicaciones de Windows Forms, use la <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=nameWithType> propiedad para determinar si un método se está ejecutando en un subproceso ajeno a la interfaz de usuario. Llamar a una de las sobrecargas de los <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=nameWithType> método para ejecutar un delegado que actualice el subproceso de interfaz de usuario.  
  
 Los siguientes ejemplos ilustran el <xref:System.InvalidOperationException> excepción que se produce al intentar actualizar un elemento de interfaz de usuario desde un subproceso distinto del subproceso que lo creó.  Cada ejemplo requiere la creación de dos controles:  
  
-   Un control de cuadro de texto denominado `textBox1`.  En una aplicación de formularios Windows Forms, debe establecer su <xref:System.Windows.Forms.TextBox.Multiline%2A> propiedad `true`.  
  
-   Un control de botón denominado `threadExampleBtn`. En el ejemplo se proporciona un controlador, `ThreadsExampleBtn_Click`, para el botón `Click` eventos.  
  
 En cada caso, el `threadExampleBtn_Click` llamadas del controlador de eventos el `DoSomeWork` método dos veces. La primera llamada se ejecuta sincrónicamente y se realiza correctamente. Pero la segunda llamada, porque se ejecuta de forma asincrónica en un subproceso del grupo, intenta actualizar la interfaz de usuario desde un subproceso ajeno a la interfaz de usuario. Esto da como resultado un <xref:System.InvalidOperationException> excepción.  
  
 Aplicaciones de WPF y UWP  
 [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]
 [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  
  
 La siguiente versión de la `DoSomeWork` método elimina la excepción en una aplicación WPF.  
  
 [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]
 [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  
  
 La siguiente versión de la `DoSomeWork` método elimina la excepción en una aplicación de UWP.  
  
 [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]
 [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  
  
 Aplicaciones de Windows Forms  
 [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]
 [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  
  
 La siguiente versión de la `DoSomeWork` método elimina la excepción en una aplicación de formularios Windows Forms.  
  
 [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]
 [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  
  
<a name="Iterating"></a>   
### <a name="changing-a-collection-while-iterating-it"></a>Cambiar una colección que se va iterando lo  
 El `foreach` instrucción en C# o `For Each` instrucción en Visual Basic se utiliza para recorrer en iteración los miembros de una colección y para leer o modificar los elementos individuales. Sin embargo, no puede usarse para agregar o quitar elementos de la colección. Al hacerlo se inicia una <xref:System.InvalidOperationException> excepción con un mensaje que es similar a "**colección modificada; no puede ejecutar la operación de enumeración. **"  
  
 En el ejemplo siguiente se recorre en iteración que una colección de enteros intenta agregar el cuadrado de cada entero a la colección. El ejemplo genera un <xref:System.InvalidOperationException> con la primera llamada a la <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]
 [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  
  
 Puede eliminar la excepción de dos maneras, dependiendo de la lógica de aplicación:  
  
-   Si los elementos deben agregarse a la colección que se va iterando lo, puede iterar a través del índice la `for` instrucción en lugar de `foreach` o `For Each`. En el ejemplo siguiente se usa el de la instrucción que se va a agregar el cuadrado de los números de la colección a la colección.  
  
     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]
     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  
  
     Tenga en cuenta que debe establecer el número de iteraciones antes de recorrer en iteración la colección mediante un contador del bucle que se cerrará el appropraitely de bucle, recorriendo hacia atrás, de `Count` - 1 a 0, o, como en el ejemplo, asignando el número de elementos de la matriz de una variable y se usa para establecer el límite superior del bucle. En caso contrario, si se agrega un elemento a la colección en cada iteración, se produce un bucle sin fin.  
  
-   Si no es necesario agregar elementos a la colección que se va iterando a él, puede almacenar los elementos que se agrega en una recopilación temporal que agregar cuando haya terminado de recorrer en iteración la colección.  En el ejemplo siguiente se usa este método para agregar el cuadrado de los números de una colección en una recopilación temporal y luego combinar las colecciones en un objeto de matriz único.  
  
     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]
     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  
  
<a name="Sorting"></a>   
### <a name="sorting-an-array-or-collection-whose-objects-cannot-be-compared"></a>Ordenar una matriz o colección cuyos objetos no se pueden comparar  
 Uso general de ordenación métodos, como el <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> método o la <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> método, suelen requerir que al menos uno de los objetos se ordenen implementar la <xref:System.IComparable%601> o la <xref:System.IComparable> interfaz. Si no es así, la colección o matriz no se pueden ordenar y el método produce una <xref:System.InvalidOperationException> excepción. En el ejemplo siguiente se define un `Person` clase almacena dos `Person` objetos en un tipo genérico <xref:System.Collections.Generic.List%601> objeto y los intentos para ordenarlos. Como la salida se muestra en el ejemplo, la llamada a la <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> método produce un <xref:System.InvalidOperationException>.  
  
 [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]
 [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  
  
 Puede eliminar la excepción en cualquiera de estas tres maneras:  
  
-   Si tiene el tipo que desea ordenar (es decir, si puede controlar su código fuente), puede modificarla para implementar la <xref:System.IComparable%601> o <xref:System.IComparable> interfaz. Esto requiere que se implementen los <xref:System.IComparable%601.CompareTo%2A?displayProperty=nameWithType> o <xref:System.IComparable.CompareTo%2A> método. Agregar una implementación de interfaz a un tipo existente no es un cambio importante.  
  
     En el ejemplo siguiente se usa este método para proporcionar un <xref:System.IComparable%601> implementación para la `Person` clase. Todavía puede llamar a la colección o un método de ordenación general de la matriz y, como se muestra en el resultado del ejemplo, la colección se ordena correctamente.  
  
     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]
     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  
  
-   Si no se puede modificar el código fuente para el tipo que desea ordenar, puede definir una clase de ordenación especial que implementa el <xref:System.Collections.Generic.IComparer%601> interfaz.  Puede llamar a una sobrecarga de la `Sort` método que incluye un <xref:System.Collections.Generic.IComparer%601> parámetro. Este enfoque es especialmente útil si desea desarrollar una clase especializada de ordenación que se puede ordenar los objetos según varios criterios.  
  
     En el ejemplo siguiente se utiliza el enfoque al desarrollar un personalizado `PersonComparer` clase que se utiliza para ordenar `Person` colecciones.  A continuación, pasa una instancia de esta clase a la <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=nameWithType> método.  
  
     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]
     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  
  
-   Si no se puede modificar el código fuente para el tipo está intentando ordenar, puede crear un <xref:System.Comparison%601> delegado para realizar la ordenación. La firma de delegado es  
  
    ```vb  
    Function Comparison(Of T)(x As T, y As T) As Integer  
    ```  
  
    ```csharp  
    int Comparison<T>(T x, T y)  
    ```  
  
     En el ejemplo siguiente se utiliza el enfoque definiendo un `PersonComparison` método que coincide con el <xref:System.Comparison%601> firma de delegado.  A continuación, pasa este delegado para la <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=nameWithType> método.  
  
     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]
     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  
  
<a name="Nullable"></a>   
### <a name="casting-a-nullablet-that-is-null-to-its-underlying-type"></a>Convertir un tipo Nullable\<T > que es null para su tipo subyacente  
 Intenta convertir un <xref:System.Nullable%601> valor que es `null` a su tipo subyacente produce un <xref:System.InvalidOperationException> excepción y muestra un mensaje de error "**objeto que acepta valores NULL debe tener un valor.**  
  
 En el ejemplo siguiente se inicia una <xref:System.InvalidOperationException> excepción cuando intenta recorrer en iteración una matriz que incluye un `Nullable(Of Integer)` valor.  
  
 [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]
 [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  
  
 Para evitar la excepción:  
  
-   Use la <xref:System.Nullable%601.HasValue%2A?displayProperty=nameWithType> propiedad para seleccionar solo los elementos que no son `null`.  
  
-   Llame a uno de los <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=nameWithType> sobrecargas para proporcionar un valor predeterminado para un `null` valor.  
  
 En el ejemplo siguiente se lleva a cabo ambos para evitar la <xref:System.InvalidOperationException> excepción.  
  
 [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]
 [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  
  
<a name="Empty"></a>   
### <a name="calling-a-systemlinqenumerable-method-on-an-empty-collection"></a>Al llamar a un método System.Linq.Enumerable en una colección vacía  
 El <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, y <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> métodos realizan operaciones en una secuencia y devuelven un único resultado.   Algunas sobrecargas de estos métodos lanzan una <xref:System.InvalidOperationException> excepción cuando la secuencia está vacía, mientras que otras sobrecargas devuelven `null`. El <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> método también produce un <xref:System.InvalidOperationException> excepción cuando la secuencia contiene más de un elemento.  
  
> [!NOTE]
>  La mayoría de los métodos que producen un <xref:System.InvalidOperationException> excepción son posibles las sobrecargas. Asegúrese de que comprende el comportamiento de la sobrecarga que elija.  
  
 En la tabla siguiente se enumera los mensajes de excepción de la <xref:System.InvalidOperationException> objetos de excepción producidos por llamadas a algunas <xref:System.Linq.Enumerable?displayProperty=nameWithType> métodos.  
  
|Método|Mensaje|  
|------------|-------------|  
|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|**Secuencia no contiene elementos**|  
|`First`|**Secuencia no contiene ningún elemento coincidente**|  
|`Single` <br /> `SingleOrDefault`|**Secuencia contiene más de un elemento coincidente**|  
  
 Cómo eliminar o controlar la excepción depende suposiciones de su aplicación y en el método se llama a.  
  
-   Cuando se deliberadamente llama a uno de estos métodos sin comprobar si una secuencia vacía, se asume que la secuencia no está vacía y que una secuencia vacía es un suceso inesperado. En este caso, será adecuado capturar o volver a iniciar la excepción.  
  
-   Si el error para comprobar si una secuencia vacía es accidental, puede llamar a una de las sobrecargas de los <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> sobrecarga para determinar si una secuencia contiene elementos.  
  
    > [!TIP]
    >  Llamar a la <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> método antes de generar una secuencia puede mejorar el rendimiento si los datos que se va a procesarse pueden contener un gran número de elementos o si la operación que genera la secuencia es costosa.  
  
-   Si se ha llamado a un método como <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=nameWithType>, o <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType>, puede sustituir un método alternativo, como <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=nameWithType>, o <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType>, que devuelve un valor predeterminado en lugar de un miembro de la secuencia.  
  
 Los ejemplos proporcionan detalles adicionales.  
  
 En el ejemplo siguiente se usa el <xref:System.Linq.Enumerable.Average%2A?displayProperty=nameWithType> método para calcular el promedio de una secuencia cuyos valores son mayores que 4. Puesto que ningún valor de la matriz original superior a 4, valores no se incluyen en la secuencia y el método produce una <xref:System.InvalidOperationException> excepción.  
  
 [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]
 [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  
  
 La excepción se puede eliminar mediante una llamada a la <xref:System.Linq.Enumerable.Any%2A> método para determinar si la secuencia contiene elementos antes de llamar al método que procesa la secuencia, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]
 [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  
  
 El <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> método devuelve el primer elemento de una secuencia o el primer elemento de una secuencia que satisface una condición especificada. Si la secuencia está vacía y, por tanto, no tiene un elemento de la primera, produce un <xref:System.InvalidOperationException> excepción.  
  
 En el ejemplo siguiente, la <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> método produce una <xref:System.InvalidOperationException> excepción porque la matriz de dbQueryResults no contiene ningún elemento mayor que 4.  
  
 [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]
 [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  
  
 Puede llamar a la <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> en lugar del método <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> para devolver un objeto o valor predeterminado. Si el método no encuentra un primer elemento en la secuencia, devuelve el valor predeterminado para ese tipo de datos.  El valor predeterminado es `null` para un tipo de referencia, cero para un tipo de datos numéricos, y <xref:System.DateTime.MinValue?displayProperty=nameWithType> para el <xref:System.DateTime> tipo.  
  
> [!NOTE]
>  Interpretar el valor devuelto por la <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=nameWithType> método a menudo resulta complicado por el hecho de que el valor predeterminado del tipo puede ser un valor válido en la secuencia. En este caso, es una llamada a la <xref:System.Linq.Enumerable.Any%2A?displayProperty=nameWithType> método para determinar si la secuencia tiene miembros válidos antes de llamar a la <xref:System.Linq.Enumerable.First%2A?displayProperty=nameWithType> método.  
  
 El ejemplo siguiente se llama el <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=nameWithType> método para evitar la <xref:System.InvalidOperationException> excepción que se produce en el ejemplo anterior.  
  
 [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]
 [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  
  
<a name="Single"></a>   
### <a name="calling-enumerablesingle-or-enumerablesingleordefault-on-a-sequence-without-one-element"></a>Llamar a Enumerable.Single o Enumerable.SingleOrDefault en una secuencia sin un elemento  
 El <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> método devuelve el único elemento de una secuencia o el único elemento de una secuencia que satisface una condición especificada.    Si no hay ningún elemento en la secuencia, o si hay más de un elemento, el método produce una <xref:System.InvalidOperationException> excepción.  
  
 Puede usar el <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> método para devolver un valor predeterminado en lugar de producir una excepción cuando la secuencia no contiene ningún elemento. Sin embargo, el <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> método todavía produce un <xref:System.InvalidOperationException> excepción cuando la secuencia contiene más de un elemento.  
  
 En la tabla siguiente se enumera los mensajes de excepción de la <xref:System.InvalidOperationException> objetos de excepción producidos por las llamadas a la <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> y <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> métodos.  
  
|Método|Mensaje|  
|------------|-------------|  
|`Single`|**Secuencia no contiene ningún elemento coincidente**|  
|`Single` <br /> `SingleOrDefault`|**Secuencia contiene más de un elemento coincidente**|  
  
 En el ejemplo siguiente, la llamada a la <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> método produce una <xref:System.InvalidOperationException> excepción porque la secuencia no tiene ningún elemento mayor que 4.  
  
 [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]
 [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  
  
 En el ejemplo siguiente se intenta evitar el <xref:System.InvalidOperationException> excepción que se produce cuando una secuencia está vacía llamando en su lugar el <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> método. Sin embargo, dado que esta secuencia devuelve varios elementos cuyo valor es mayor que 2, también produce un <xref:System.InvalidOperationException> excepción.  
  
 [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]
 [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  
  
 Llamar a la <xref:System.Linq.Enumerable.Single%2A?displayProperty=nameWithType> método supone que una secuencia o la secuencia que cumpla los criterios especificados contiene solo un elemento.  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=nameWithType> se da por supuesto una secuencia con cero o un resultado, pero no más. Si esta suposición es deliberado por su parte y no se cumplen estas condiciones, reinicio o capturar resultante <xref:System.InvalidOperationException> es adecuado. En caso contrario, o si se espera que las condiciones no válidas se produzcan con cierta frecuencia, considere la posibilidad de usar algunos otros <xref:System.Linq.Enumerable> método, como <xref:System.Linq.Enumerable.FirstOrDefault%2A> o <xref:System.Linq.Enumerable.Where%2A>.  
  
<a name="Emit"></a>   
### <a name="dynamic-cross-application-domain-field-access"></a>Acceso de campo dinámico entre dominios de aplicación  
 El <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=nameWithType> Microsoft instrucción del lenguaje intermedio (MSIL) produce un <xref:System.InvalidOperationException> excepción si el objeto que contiene el campo cuya dirección está intentando recuperar no está dentro del dominio de aplicación en el que se ejecuta el código. La dirección de un campo solo puede tener acceso desde el dominio de aplicación en el que reside.  
  
<a name="Throwing"></a>   
## <a name="throwing-an-invalidoperationexception-exception"></a>Producir una excepción InvalidOperationException  
 Debe producir una <xref:System.InvalidOperationException> excepción solo cuando el estado del objeto por alguna razón no admite una determinada llamada al método. Es decir, la llamada al método es válida en algunas circunstancias o contextos, pero no es válido en otras.  
  
 Si el error de invocación de método es debido a argumentos no válidos, a continuación, <xref:System.ArgumentException> o uno de sus clases derivadas, <xref:System.ArgumentNullException> o <xref:System.ArgumentOutOfRangeException>, se debe producir en su lugar.  
  
<a name="Misc"></a>   
## <a name="miscellaneous-information"></a>Información diversa  
 <xref:System.InvalidOperationException> utiliza HRESULT COR_E_INVALIDOPERATION, que tiene el valor 0 x 80131509.  
  
 Para obtener una lista de valores de propiedad iniciales para una instancia de <xref:System.InvalidOperationException>, consulte el <xref:System.InvalidOperationException.%23ctor%2A> constructores.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Resources.ResourceSet" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Exception.Message%2A> propiedad de la nueva instancia en un mensaje proporcionado por el sistema que describe el error, como "no se puede realizar la operación solicitada." Este mensaje tiene en cuenta la referencia cultural del sistema actual.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.InvalidOperationException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia nula (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|La cadena del mensaje de error localizado.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string -&gt; InvalidOperationException" Usage="new System.InvalidOperationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que describe el error.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" /> con el mensaje de error especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Exception.Message%2A?displayProperty=nameWithType> propiedad de la nueva excepción utilizando el `message` parámetro. Se pretende que el contenido de `message` sea inteligible. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.InvalidOperationException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia nula (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InvalidOperationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objeto que contiene los datos del objeto serializados.</param>
        <param name="context">Información contextual acerca del origen o del destino.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" /> con datos serializados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la deserialización se llama a este constructor para reconstituir el objeto de excepción transmitido en una secuencia. Para obtener más información, consulte [serialización XML y SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidOperationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.InvalidOperationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InvalidOperationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new InvalidOperationException : string * Exception -&gt; InvalidOperationException" Usage="new System.InvalidOperationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
        <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <c>innerException</c> no es una referencia nula (<see langword="Nothing" /> en Visual Basic), la excepción actual se inicia en un bloque <see langword="catch" /> que controla la excepción interna.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.InvalidOperationException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una excepción que se produce como consecuencia directa de una excepción anterior debe incluir una referencia a esta última en la propiedad <xref:System.Exception.InnerException%2A>. La propiedad <xref:System.Exception.InnerException%2A> devuelve el mismo valor pasado al constructor, o una referencia nula (`Nothing` en Visual Basic) si la propiedad <xref:System.Exception.InnerException%2A> no proporciona el valor de la excepción interna al constructor.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.InvalidOperationException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia a la excepción interna.|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>