<Type Name="Tuple&lt;T1,T2,T3,T4&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7427c1ae24f73570a0f6b9da281a533c2f2e025" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36428042" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`4&lt;T1, T2, T3, T4&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`4" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
    <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
    <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
    <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
    <summary>Representa una tupla de 4 o cuádruplo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una tupla es una estructura de datos que tiene un número específico y la secuencia de valores. La <xref:System.Tuple%604> clase representa una tupla de 4 o cuádruple, que es una tupla que tiene cuatro componentes.  
  
 Puede crear instancias de un <xref:System.Tuple%604> objeto mediante una llamada a la <xref:System.Tuple%604.%23ctor%2A> constructor o el método estático <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=nameWithType> método. Puede recuperar el valor de los componentes de la tupla mediante el uso de solo lectura <xref:System.Tuple%604.Item1%2A>, <xref:System.Tuple%604.Item2%2A>, <xref:System.Tuple%604.Item3%2A>, y <xref:System.Tuple%604.Item4%2A> propiedades de la instancia.  
  
 Tuplas se utilizan normalmente en cuatro formas distintas:  
  
-   Para representar un único conjunto de datos. Por ejemplo, una tupla puede representar un registro de base de datos y sus componentes pueden representar campos individuales del registro.  
  
-   Para proporcionar un acceso sencillo a y la manipulación de un conjunto de datos. En el ejemplo siguiente se define una matriz de <xref:System.Tuple%604> objetos que contienen los nombres de lanzadores de béisbol, el número de entradas que lanzaron y el número de carreras ganadas (carreras que anotaron sin presentando errores) y llega a que le asignó. La matriz se pasa a la `ComputeStatistics` método, que calcula el promedio de carreras ganadas cada lanzador (el promedio de carreras cedidas en un juego de nueve entradas) y el número medio de aciertos falladas por entrada. El método también usa estos dos promedios para calcular una media de efectividad hipotética.  
  
     [!code-csharp[System.Tuple\`4.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`4.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.class/vb/example1.vb#1)]  
  
-   Para devolver varios valores de un método sin el uso de `out` parámetros (en C#) o `ByRef` parámetros (en Visual Basic). Por ejemplo, el ejemplo anterior devuelve sus estadísticas calculadas, junto con el nombre del lanzador, en una matriz de <xref:System.Tuple%604> objetos.  
  
-   Para pasar varios valores a un método a través de un solo parámetro. Por ejemplo, el <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> método tiene un parámetro único que le permite proporcionar un valor para el método que el subproceso se ejecuta en el inicio. Si proporciona un <xref:System.Tuple%604> objeto como el argumento del método, puede proporcionar la rutina de inicio del subproceso con cuatro elementos de datos.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.#ctor(`0,`1,`2,`3)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4&gt; : 'T1 * 'T2 * 'T3 * 'T4 -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt; (item1, item2, item3, item4)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
      </Parameters>
      <Docs>
        <param name="item1">Valor del primer componente de la tupla.</param>
        <param name="item2">Valor del segundo componente de la tupla.</param>
        <param name="item3">Valor del tercer componente de la tupla.</param>
        <param name="item4">Valor del cuarto componente de la tupla</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`4" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede utilizar el método estático <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=nameWithType> método para crear instancias de un objeto de tupla de 4 sin tener que especificar explícitamente los tipos de sus componentes. En el ejemplo siguiente se usa el <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=nameWithType> método para crear instancias de una tupla de 4 cuyos componentes son de tipo <xref:System.String>, <xref:System.Double>, <xref:System.Double>, y <xref:System.Double>.  
  
 [!code-csharp[System.Tuple.Create#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#7)]
 [!code-vb[System.Tuple.Create#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#7)]  
  
 Esto es equivalente a la siguiente llamada a la <xref:System.Tuple%604.%23ctor%2A> constructor de clase.  
  
 [!code-csharp[System.Tuple.Create#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#8)]
 [!code-vb[System.Tuple.Create#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto que se va a comparar con esta instancia.</param>
        <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`4" /> actual es igual que el objeto especificado.</summary>
        <returns>
          <see langword="true" /> si la instancia actual es igual que el objeto especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `obj` se considera que el parámetro es igual a la instancia actual en las siguientes condiciones:  
  
-   Es un <xref:System.Tuple%604> objeto.  
  
-   Sus cuatro componentes son de los mismos tipos que la instancia actual.  
  
-   Sus cuatro componentes son iguales que los de la instancia actual. La igualdad viene determinada por el comparador de igualdad de objetos predeterminado para cada componente.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una matriz de <xref:System.Tuple%604> objetos que proporcionan datos a temperaturas de tres veces durante un día determinado. El <xref:System.Tuple%604.Equals%28System.Object%29> método se llama para comparar cada <xref:System.Tuple%604> objeto con los demás <xref:System.Tuple%604> objeto. El resultado muestra que la <xref:System.Tuple%604.Equals%28System.Object%29> método `true` sólo cuando todos los cuatro componentes de la <xref:System.Tuple%604> objetos tienen los mismos valores.  
  
 [!code-csharp[System.Tuple\`4.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`4.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el código hash del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
        <returns>Código hash de un entero de 32 bits con signo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
        <value>Valor del primer componente del objeto <see cref="T:System.Tuple`4" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%604.Item1%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%604.Item1%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%604> objeto y recuperando el primer elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una matriz de <xref:System.Tuple%604> objetos cuyos componentes contienen el nombre de una ciudad, un mes del año y el promedio temperaturas altas y bajas durante ese mes. A continuación, recupera y muestra el valor de cada componente.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
        <value>Valor del segundo componente del objeto <see cref="T:System.Tuple`4" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%604.Item2%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%604.Item2%2A> propiedad.  
  
-   Recuperando la <xref:System.Type> objeto que representa el <xref:System.Tuple%604> objeto y recuperando el segundo elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una matriz de <xref:System.Tuple%604> objetos cuyos componentes contienen el nombre de una ciudad, un mes del año y el promedio temperaturas altas y bajas durante ese mes. A continuación, recupera y muestra el valor de cada componente.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
        <value>Valor del tercer componente del objeto <see cref="T:System.Tuple`4" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%604.Item3%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%604.Item3%2A> propiedad.  
  
-   Recuperando la <xref:System.Type> objeto que representa el <xref:System.Tuple%604> objeto y recuperando el tercer elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una matriz de <xref:System.Tuple%604> objetos cuyos componentes contienen el nombre de una ciudad, un mes del año y el promedio temperaturas altas y bajas durante ese mes. A continuación, recupera y muestra el valor de cada componente.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del cuarto componente del objeto <see cref="T:System.Tuple`4" /> actual.</summary>
        <value>Valor del cuarto componente del objeto <see cref="T:System.Tuple`4" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%604.Item4%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%604.Item4%2A> propiedad.  
  
-   Recuperando la <xref:System.Type> objeto que representa el <xref:System.Tuple%604> objeto y recuperando el cuarto elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una matriz de <xref:System.Tuple%604> objetos cuyos componentes contienen el nombre de una ciudad, un mes del año y el promedio temperaturas altas y bajas durante ese mes. A continuación, recupera y muestra el valor de cada componente.  
  
 [!code-csharp[System.Tuple\`4.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`4.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Objeto que se va a comparar con la instancia actual.</param>
        <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
        <summary>Compara el objeto <see cref="T:System.Tuple`4" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
        <returns>Entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, tal como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor </term><description> Descripción </description></listheader><item><term> Un entero negativo </term><description> Esta instancia precede a <paramref name="other" />.  </description></item><item><term> Cero </term><description> En el criterio de ordenación, esta instancia y <paramref name="other" /> tienen la misma posición.  </description></item><item><term> Un entero positivo </term><description> Esta instancia sigue a <paramref name="other" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%604> se convierte en una interfaz <xref:System.Collections.IStructuralComparable>.  
  
 Aunque puede llamar directamente a este método, normalmente se llama por la colección de métodos que incluyan la ordenación <xref:System.Collections.IComparer> parámetros para ordenar los miembros de una colección. Por ejemplo, se llama a la <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> método y <xref:System.Collections.SortedList.Add%2A> método de un <xref:System.Collections.SortedList> objeto cuyas instancias se crean mediante el uso de la <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> constructor.  
  
> [!CAUTION]
>  El <xref:System.Tuple%604.System%23Collections%23IStructuralComparable%23CompareTo%28System.Object%2CSystem.Collections.IComparer%29> método está pensado para su uso en las operaciones de ordenación. No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales. Para determinar si dos objetos son iguales, llame a la <xref:System.Tuple%604.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una matriz de <xref:System.Tuple%604> objetos que contienen datos estadísticos sobre lanzadores de béisbol. Los elementos de datos incluyen el nombre del lanzador, el número de entradas lanzadas, promedio de carreras ganadas el lanzador (el promedio de las series de un lanzador permite por juego) y el número de visitas el lanzador ha fallado. En el ejemplo se muestra el componente de cada tupla en la matriz sin ordenar, ordena la matriz y, a continuación, llama a <xref:System.Tuple%604.ToString%2A> para mostrar el valor de cada tupla en el criterio de ordenación. Para ordenar la matriz, el ejemplo define un tipo genérico `PitcherComparer` clase que implementa el <xref:System.Collections.IComparer> interfaz y los ordena la <xref:System.Tuple%604> objetos en orden ascendente por el valor de su tercer componente (el promedio de carreras ganadas) en lugar de su primer componente. Tenga en cuenta que el ejemplo no llama directamente el <xref:System.Tuple%604.System%23Collections%23IStructuralComparable%23CompareTo%28System.Object%2CSystem.Collections.IComparer%29> método. Este método se llama implícitamente por el <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> método para cada elemento de la matriz.  
  
 [!code-csharp[System.Tuple\`4.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`4.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`4" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Objeto que se va a comparar con esta instancia.</param>
        <param name="comparer">Un objeto que define el método que se usará para evaluar si los dos objetos son iguales.</param>
        <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`4" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
        <returns>
          <see langword="true" /> si la instancia actual es igual que el objeto especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%604> se convierte en una interfaz <xref:System.Collections.IStructuralEquatable>.  
  
 El <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> se denomina implementación sólo si `other` no es `null`, y si puede ser correctamente convierta (en C#) o convertir (en Visual Basic) a un <xref:System.Tuple%604> objeto cuyos componentes son de los mismos tipos que la instancia actual. El <xref:System.Tuple%604.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> método primeras pasadas el <xref:System.Tuple%604.Item1%2A> valores de la <xref:System.Tuple%604> objetos que se comparará el <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementación. Si esta llamada al método devuelve `true`, el método se llama de nuevo y pasa el <xref:System.Tuple%604.Item2%2A> valores de los dos <xref:System.Tuple%604> objetos. Si esta llamada al método devuelve `true` nuevo, se llama al método una tercera vez y se haya pasado el <xref:System.Tuple%604.Item3%2A> valores de los dos <xref:System.Tuple%604> objetos. Si esta llamada al método devuelve `true` nuevo, el método se llama por cuarta y última vez y pasa el <xref:System.Tuple%604.Item4%2A> valores de los dos <xref:System.Tuple%604> objetos.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un `Item3And4Comparer` clase que implementa el <xref:System.Collections.IEqualityComparer> de interfaz y cambia la manera en que <xref:System.Tuple%604> se evalúan los objetos son iguales. El método siempre devuelve `true` cuando se pasa el <xref:System.Tuple%604.Item1%2A> y <xref:System.Tuple%604.Item2%2A> valores de propiedad de dos <xref:System.Tuple%604> objetos y lo llama el `obj.Equals` método para evaluar sus <xref:System.Tuple%604.Item3%2A> valores de propiedad. Esta llamada al método devuelve true, también se llama el `obj.Equals` método para evaluar las tuplas <xref:System.Tuple%604.Item4%2A> valores de propiedad. Como resultado, el método comprueba la igualdad basándose solo en los valores de la <xref:System.Tuple%604.Item3%2A> y <xref:System.Tuple%604.Item4%2A> propiedades. La salida muestra el resultado de un conjunto de datos de <xref:System.Tuple%604> objetos que registran el nombre de una ciudad de Estados Unidos, el mes de un año y el promedio de temperatura alta y baja durante ese mes.  
  
 [!code-csharp[System.Tuple\`4.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`4.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`4" /> actual.</param>
        <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`4" /> actual usando el método de cálculo especificado.</summary>
        <returns>Código hash de un entero de 32 bits con signo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%604> se convierte en una interfaz <xref:System.Collections.IStructuralEquatable>.  
  
 El método simplemente ajusta una llamada a la `comparer` del objeto <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementación.  
  
 El algoritmo utilizado para calcular el código hash debe devolver el mismo código hash para dos <xref:System.Tuple%604> objetos que se consideran iguales.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
        <summary>Compara el objeto <see cref="T:System.Tuple`4" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual es anterior, posterior o está en la misma posición que el objeto especificado en el criterio de ordenación.</summary>
        <returns>Entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, tal como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor </term><description> Descripción </description></listheader><item><term> Un entero negativo </term><description> Esta instancia precede a <paramref name="obj" />.  </description></item><item><term> Cero </term><description> En el criterio de ordenación, esta instancia y <paramref name="obj" /> tienen la misma posición.  </description></item><item><term> Un entero positivo </term><description> Esta instancia sigue a <paramref name="obj" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%604> se convierte en una interfaz <xref:System.IComparable>.  
  
 Este método proporciona la <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementación para la <xref:System.Tuple%604> clase. Aunque el método se puede llamar directamente, se llama más frecuentemente mediante las sobrecargas predeterminadas de colección de métodos, de ordenación como <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> y <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, para ordenar los miembros de una colección.  
  
> [!CAUTION]
>  El <xref:System.Tuple%604.System%23IComparable%23CompareTo%2A> método está pensado para su uso en las operaciones de ordenación. No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales. Para determinar si dos objetos son iguales, llame a la <xref:System.Tuple%604.Equals%2A> método.  
  
 El <xref:System.Tuple%604.System%23IComparable%23CompareTo%2A> método utiliza el comparador de objetos predeterminado para comparar cada componente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una matriz de <xref:System.Tuple%604> objetos que se componen de nombre, número de entradas con pitch y número de aciertos y carreras ganadas Renunciados a un lanzador béisbol. Muestra los componentes de cada tupla en la matriz sin ordenar, ordena la matriz y, a continuación, llama a <xref:System.Tuple%604.ToString%2A> para mostrar cada tupla en el criterio de ordenación. El resultado muestra que la matriz se ha ordenado por nombre, que es el primer componente. Tenga en cuenta que el ejemplo no llama directamente el <xref:System.Tuple%604.System%23IComparable%23CompareTo%28System.Object%29> método. Este método se llama implícitamente por el <xref:System.Array.Sort%28System.Array%29> método para cada elemento de la matriz.  
  
 [!code-csharp[System.Tuple\`4.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`4.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`4" />.</exception>
        <altmember cref="M:System.Tuple`4.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del elemento <see langword="Tuple" /> especificado. <c>index</c> puede oscilar entre 0 y 3.</param>
        <summary>Obtiene el valor del elemento <see langword="Tuple" /> especificado.</summary>
        <value>Valor del elemento <see langword="Tuple" /> que se encuentra en la posición especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Tuple%604.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> propiedad es una implementación de interfaz explícita. Para invocarlo, debe cast o convert el <xref:System.Tuple%604> el objeto a un <xref:System.Runtime.CompilerServices.ITuple> objeto de interfaz.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> es menor que 0 o mayor que 3.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4&gt;.System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos de <see langword="Tuple" />.</summary>
        <value>4, el número de elementos de un objeto <see cref="T:System.Tuple`4" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Tuple%604.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> propiedad es una implementación de interfaz explícita. Para invocarlo, debe cast o convert el <xref:System.Tuple%604> el objeto a un <xref:System.Runtime.CompilerServices.ITuple> objeto de interfaz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`4.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`4" />.</summary>
        <returns>Representación en forma de cadena de este objeto <see cref="T:System.Tuple`4" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena devuelta por este método toma la forma (*Item1*, *Item2*, *Item3*, *Item4*), donde *Item1*, *Item2*, *Item3*, y *Item4* representan los valores de la <xref:System.Tuple%604.Item1%2A>, <xref:System.Tuple%604.Item2%2A>, <xref:System.Tuple%604.Item3%2A>y <xref:System.Tuple%604.Item4%2A> propiedades, respectivamente. Si alguno de los valores de propiedad es `null`, se representa como <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.Tuple%604.ToString%2A> método. Muestra los componentes de una matriz de objetos de tupla de 4 que contienen el nombre de una ciudad, un mes del año y la temperatura alta y baja promedio durante ese mes.  
  
 [!code-csharp[System.Tuple\`4.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`4.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`4.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`4.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>