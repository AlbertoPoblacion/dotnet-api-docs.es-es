<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`2.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac542802c8b131a7cf4904d9bfcece32d03ba6f604e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42802c8b131a7cf4904d9bfcece32d03ba6f604e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>The type of the tuple's first component.</source>
          <target state="translated">Tipo del primer componente de la tupla.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>The type of the tuple's second component.</source>
          <target state="translated">Tipo del segundo componente de la tupla.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Tuple`2">
          <source>Represents a 2-tuple, or pair.</source>
          <target state="translated">Representa una tupla de 2 o par.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Una tupla es una estructura de datos que tiene un número específico y la secuencia de valores.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> class represents a 2-tuple, or pair, which is a tuple that has two components.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> clase representa una tupla de 2 o par, que es una tupla que tiene dos componentes.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>A 2-tuple is similar to a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> structure.</source>
          <target state="translated">Una tupla de 2 es similar a un <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> estructura.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%602.%23ctor%2A&gt;</ph> constructor or the static <ph id="ph3">&lt;xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Puede crear instancias de un <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objeto mediante una llamada a la <ph id="ph2">&lt;xref:System.Tuple%602.%23ctor%2A&gt;</ph> constructor o el método estático <ph id="ph3">&lt;xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>You can retrieve the values of the tuple's components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> instance properties.</source>
          <target state="translated">Puede recuperar los valores de los componentes de la tupla mediante el uso de solo lectura <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> propiedades de la instancia.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">Tuplas se utilizan normalmente en cuatro formas distintas:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>To represent a single set of data.</source>
          <target state="translated">Para representar un único conjunto de datos.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>For example, a tuple can represent a record in a database, and its components can represent that record's fields.</source>
          <target state="translated">Por ejemplo, una tupla puede representar un registro en una base de datos y sus componentes pueden representar los campos de dicho registro.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">Para proporcionar un acceso sencillo a y la manipulación de un conjunto de datos.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objects that contain the names of students and their corresponding test scores.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objetos que contienen los nombres de los alumnos y sus correspondientes puntuaciones de pruebas.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>It then iterates the array to calculate the mean test score.</source>
          <target state="translated">A continuación, recorre en iteración la matriz para calcular la puntuación media de las pruebas.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">Para devolver varios valores de un método sin el uso de <ph id="ph1">`out`</ph> parámetros (en C#) o <ph id="ph2">`ByRef`</ph> parámetros (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>For example, the following example uses a <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> object to return the quotient and the remainder that result from integer division.</source>
          <target state="translated">Por ejemplo, en el ejemplo siguiente se usa un <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objeto para devolver el cociente y el resto que es el resultado de la división de enteros.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">Para pasar varios valores a un método a través de un solo parámetro.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">Por ejemplo, el <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> método tiene un parámetro único que le permite proporcionar un valor para el método que el subproceso se ejecuta en el inicio.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`2">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> object as the method argument, you can supply the thread’s startup routine with two items of data.</source>
          <target state="translated">Si proporciona un <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objeto como el argumento del método, puede proporcionar la rutina de inicio del subproceso con dos elementos de datos.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.#ctor(`0,`1)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">Valor del primer componente de la tupla.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.#ctor(`0,`1)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">Valor del segundo componente de la tupla.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.#ctor(`0,`1)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.#ctor(`0,`1)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 2-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated">También puede utilizar el método estático <ph id="ph1">&lt;xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType&gt;</ph> método para crear instancias de un objeto de tupla de 2 sin tener que especificar explícitamente los tipos de sus componentes.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.#ctor(`0,`1)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 2-tuple whose components are of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=nameWithType&gt;</ph> método para crear instancias de una tupla de 2 cuyos componentes son de tipo <ph id="ph2">&lt;xref:System.String&gt;</ph> y <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.#ctor(`0,`1)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%602.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">Esto es equivalente a la siguiente llamada a la <ph id="ph1">&lt;xref:System.Tuple%602.%23ctor%2A&gt;</ph> constructor de clase.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Objeto que se va a comparar con esta instancia.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">Devuelve un valor que indica si el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual es igual que el objeto especificado.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la instancia actual es igual que el objeto especificado; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated">El <ph id="ph1">`obj`</ph> se considera que el parámetro es igual a la instancia actual en las siguientes condiciones:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> object.</source>
          <target state="translated">Es un <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>Its two components are of the same types as the current instance.</source>
          <target state="translated">Sus dos componentes son de los mismos tipos que la instancia actual.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>Its two components are equal to those of the current instance.</source>
          <target state="translated">Sus dos componentes son iguales que los de la instancia actual.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">La igualdad viene determinada por el comparador de igualdad de objetos predeterminado para cada componente.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Tuple%602.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method to determine whether any of the objects in an array of <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> objects are equal to one another.</source>
          <target state="translated">El ejemplo siguiente se llama el <ph id="ph1">&lt;xref:System.Tuple%602.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> método para determinar si alguno de los objetos de una matriz de <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> objetos son iguales entre sí.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.Equals(System.Object)">
          <source>The output reflects the fact that the <ph id="ph1">&lt;xref:System.Tuple%602.Equals%28System.Object%29&gt;</ph> method returns <ph id="ph2">`true`</ph> when comparing <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objects whose components have equal values.</source>
          <target state="translated">El resultado refleja el hecho de que el <ph id="ph1">&lt;xref:System.Tuple%602.Equals%28System.Object%29&gt;</ph> método <ph id="ph2">`true`</ph> al comparar <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objetos cuyos componentes tienen los mismos valores.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object.</source>
          <target state="translated">Devuelve el código hash del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Código hash de un entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Tuple`2.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object's first component.</source>
          <target state="translated">Obtiene el valor del primer componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object's first component.</source>
          <target state="translated">Valor del primer componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando el <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> objeto y recuperando el primer elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item1">
          <source>The example illustrates the use of the <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> properties to define a method that returns multiple values in the form of a 2-tuple.</source>
          <target state="translated">En el ejemplo se muestra el uso de la <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> propiedades para definir un método que devuelva varios valores en forma de una tupla de 2.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.Tuple`2.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object's second component.</source>
          <target state="translated">Obtiene el valor del segundo componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object's second component.</source>
          <target state="translated">Valor del segundo componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando la <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> objeto y recuperando el segundo elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.Item2">
          <source>The example illustrates the use of the <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> properties to define a method that returns multiple values in the form of a 2-tuple.</source>
          <target state="translated">En el ejemplo se muestra el uso de la <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> propiedades para definir un método que devuelva varios valores en forma de una tupla de 2.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Objeto que se va a comparar con la instancia actual.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">Un objeto que proporciona reglas personalizadas para la comparación.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o si se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Entero con signo que indica la posición relativa de esta instancia y <ph id="ph1">&lt;paramref name="other" /&gt;</ph> en el criterio de ordenación, tal como se muestra en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descripción</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero negativo</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia precede a <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Cero</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> En el criterio de ordenación, esta instancia y <ph id="ph3">&lt;paramref name="other" /&gt;</ph> tienen la misma posición.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero positivo</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia es posterior a <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection., For example, it is called by the <ph id="ph2">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph4">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph5">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Aunque puede llamar directamente a este método, normalmente se llama por la colección de métodos que incluyan la ordenación <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parámetros para ordenar los miembros de una colección. por ejemplo, se llama a la <ph id="ph2">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> método y la <ph id="ph3">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> método de un <ph id="ph4">&lt;xref:System.Collections.SortedList&gt;</ph> objeto cuyas instancias se crean mediante el uso de la <ph id="ph5">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> método está pensado para su uso en las operaciones de ordenación.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar si dos objetos son iguales, llame a la <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objects that consist of a student's name and test score.</source>
          <target state="translated">En el ejemplo siguiente se crea una matriz de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objetos que constan de un nombre de estudiante y puntuación de la prueba.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It displays the component of each tuple in the array in unsorted order, sorts the array, and then calls <ph id="ph1">&lt;xref:System.Tuple%602.ToString%2A&gt;</ph> to display the value of each tuple in sorted order.</source>
          <target state="translated">Muestra el componente de cada tupla en la matriz sin ordenar, ordena la matriz y, a continuación, llama a <ph id="ph1">&lt;xref:System.Tuple%602.ToString%2A&gt;</ph> para mostrar el valor de cada tupla en el criterio de ordenación.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To sort the array, the example defines a generic <ph id="ph1">`ScoreComparer`</ph> class that implements the <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> interface and sorts the <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objects in ascending order by the value of their second component rather than their first component.</source>
          <target state="translated">Para ordenar la matriz, el ejemplo define un tipo genérico <ph id="ph1">`ScoreComparer`</ph> clase que implementa el <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> interfaz y los ordena la <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objetos en orden ascendente según el valor de su segundo componente en lugar de su primer componente.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">Tenga en cuenta que el ejemplo no llama directamente el <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method for each element in the array.</source>
          <target state="translated">Este método se llama implícitamente por el <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> método para cada elemento de la matriz.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> no es un objeto <ph id="ph2">&lt;see cref="T:System.Tuple`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Objeto que se va a comparar con esta instancia.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">Un objeto que define el método que se usará para evaluar si los dos objetos son iguales.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">Devuelve un valor que indica si el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual es igual que el objeto especificado según el método de comparación especificado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la instancia actual es igual que el objeto especificado; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%602&gt;</ph> object whose components are of the same types as the current instance.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> se denomina implementación sólo si <ph id="ph2">`other`</ph> no es <ph id="ph3">`null`</ph>, y si puede ser correctamente convierta (en C#) o convertir (en Visual Basic) a un <ph id="ph4">&lt;xref:System.Tuple%602&gt;</ph> objeto cuyos componentes son de los mismos tipos que la instancia actual.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> método primeras pasadas el <ph id="ph2">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> valores de la <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objetos que se comparará el <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objects.</source>
          <target state="translated">Si esta llamada al método devuelve <ph id="ph1">`true`</ph>, el método se llama de nuevo y pasa el <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> valores de los dos <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines an <ph id="ph1">`Item2Comparer`</ph> class that implements the <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> interface and changes the way in which <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objects are evaluated for equality.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`Item2Comparer`</ph> clase que implementa el <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> de interfaz y cambia la manera en que <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> se evalúan los objetos son iguales.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The method always returns <ph id="ph1">`true`</ph> when it is passed the <ph id="ph2">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> property values of two <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objects, and it calls the <ph id="ph4">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method to evaluate their <ph id="ph5">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> property values.</source>
          <target state="translated">El método siempre devuelve <ph id="ph1">`true`</ph> cuando se pasa el <ph id="ph2">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> valores de propiedad de dos <ph id="ph3">&lt;xref:System.Tuple%602&gt;</ph> objetos y lo llama el <ph id="ph4">&lt;xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> método para evaluar sus <ph id="ph5">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> valores de propiedad.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>As a result, the method tests for equality based only on the value of the <ph id="ph1">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> property.</source>
          <target state="translated">Como resultado, el método comprueba la igualdad basándose solo en el valor de la <ph id="ph1">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The output illustrates the result for a data set of <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objects that record the names of runners and the distances that they ran.</source>
          <target state="translated">La salida muestra el resultado de un conjunto de datos de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objetos que registran los nombres de corredores y las distancias que ejecutaron.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object.</source>
          <target state="translated">Objeto cuyo método <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> calcula el código hash del objeto <ph id="ph2">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">Calcula el código hash del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual usando el método de cálculo especificado.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Código hash de un entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">El método simplemente ajusta una llamada a la <ph id="ph1">`comparer`</ph> del objeto <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">El algoritmo utilizado para calcular el código hash debe devolver el mismo código hash para dos <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objetos que se consideran iguales.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Objeto que se va a comparar con la instancia actual.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> actual con un objeto especificado y devuelve un entero que indica si el objeto actual es anterior, posterior o está en la misma posición que el objeto especificado en el criterio de ordenación.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Entero con signo que indica la posición relativa de esta instancia y <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> en el criterio de ordenación, tal como se muestra en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descripción</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero negativo</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia precede a <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Cero</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> En el criterio de ordenación, esta instancia y <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> tienen la misma posición.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero positivo</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia es posterior a <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> class.</source>
          <target state="translated">Este método proporciona la <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementación para la <ph id="ph2">&lt;xref:System.Tuple%602&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">Aunque el método se puede llamar directamente, se llama más frecuentemente mediante las sobrecargas predeterminadas de colección de métodos, de ordenación como <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, para ordenar los miembros de una colección.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%602.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> método está pensado para su uso en las operaciones de ordenación.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%602.Equals%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar si dos objetos son iguales, llame a la <ph id="ph1">&lt;xref:System.Tuple%602.Equals%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> method uses the default object comparer to compare each component.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%602.System%23IComparable%23CompareTo%2A?displayProperty=nameWithType&gt;</ph> método utiliza el comparador de objetos predeterminado para comparar cada componente.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objects that consist of a student's name and test score.</source>
          <target state="translated">En el ejemplo siguiente se crea una matriz de <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> objetos que constan de un nombre de estudiante y puntuación de la prueba.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>It displays the component of each tuple in the array in unsorted order, sorts the array, and then calls <ph id="ph1">&lt;xref:System.Tuple%602.ToString%2A&gt;</ph> to display the value of each tuple in sorted order.</source>
          <target state="translated">Muestra el componente de cada tupla en la matriz sin ordenar, ordena la matriz y, a continuación, llama a <ph id="ph1">&lt;xref:System.Tuple%602.ToString%2A&gt;</ph> para mostrar el valor de cada tupla en el criterio de ordenación.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by its first component.</source>
          <target state="translated">El resultado muestra que la matriz se ha ordenado por su primer componente.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%602.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">Tenga en cuenta que el ejemplo no llama directamente el <ph id="ph1">&lt;xref:System.Tuple%602.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">Este método se llama implícitamente por el <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> método para cada elemento de la matriz.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> no es un objeto <ph id="ph2">&lt;see cref="T:System.Tuple`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Índice del elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 to 1.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> puede oscilar entre 0 y 1.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Obtiene el valor del elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">Valor del elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> que se encuentra en la posición especificada.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%602.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> propiedad es una implementación de interfaz explícita.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para invocarlo, debe cast o convert el <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> el objeto a un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interfaz.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> es menor que 0 o mayor que 1.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Obtiene el número de elementos de <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
          <source>2, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object.</source>
          <target state="translated">2, el número de elementos de un objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%602.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%602.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> propiedad es una implementación de interfaz explícita.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para invocarlo, debe cast o convert el <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> el objeto a un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interfaz.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> instance.</source>
          <target state="translated">Devuelve una cadena que representa el valor de esta instancia de <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Tuple`2.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph> object.</source>
          <target state="translated">Representación en forma de cadena de este objeto <ph id="ph1">&lt;see cref="T:System.Tuple`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>), where <bpt id="p3">*</bpt>Item1<ept id="p3">*</ept> and <bpt id="p4">*</bpt>Item2<ept id="p4">*</ept> represent the values of the <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> properties.</source>
          <target state="translated">La cadena devuelta por este método toma la forma (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>), donde <bpt id="p3">*</bpt>Item1<ept id="p3">*</ept> y <bpt id="p4">*</bpt>Item2<ept id="p4">*</ept> representan los valores de la <ph id="ph1">&lt;xref:System.Tuple%602.Item1%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Tuple%602.Item2%2A&gt;</ph> propiedades.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.ToString">
          <source>If either property value is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si cualquier valor de propiedad es <ph id="ph1">`null`</ph>, se representa como <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`2.ToString">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.Tuple%602.ToString%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo siguiente se muestra el <ph id="ph1">&lt;xref:System.Tuple%602.ToString%2A&gt;</ph> método.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>