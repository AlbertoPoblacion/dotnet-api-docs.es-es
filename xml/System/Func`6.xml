<Type Name="Func&lt;T1,T2,T3,T4,T5,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d1be2de79ce0a49df8ff4e96c2a0f25d2b03ce3a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728129" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`6&lt;- T1, - T2, - T3, - T4, - T5, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`6" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Tipo del primer parámetro del método que este delegado encapsula.</typeparam>
    <typeparam name="T2">Tipo del segundo parámetro del método que este delegado encapsula.</typeparam>
    <typeparam name="T3">Tipo del tercer parámetro del método que este delegado encapsula.</typeparam>
    <typeparam name="T4">Tipo del cuarto parámetro del método que este delegado encapsula.</typeparam>
    <typeparam name="T5">Tipo del quinto parámetro del método encapsulado por el delegado.</typeparam>
    <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.</typeparam>
    <param name="arg1">Primer parámetro del método que este delegado encapsula.</param>
    <param name="arg2">Segundo parámetro del método que este delegado encapsula.</param>
    <param name="arg3">Tercer parámetro del método que este delegado encapsula.</param>
    <param name="arg4">Cuarto parámetro del método que este delegado encapsula.</param>
    <param name="arg5">Quinto parámetro del método encapsulado por el delegado.</param>
    <summary>Encapsula un método que tiene cinco parámetros y devuelve un valor del tipo especificado por el parámetro <typeparamref name="TResult" />.</summary>
    <returns>Valor devuelto del método que este delegado encapsula.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar a este delegado para representar un método que puede pasarse como parámetro sin declarar explícitamente un delegado personalizado. El método encapsulado debe corresponder a la firma del método que está definida por el delegado. Esto significa que el método encapsulado debe tener cinco parámetros, cada uno de los cuales se pasa por valor, y debe devolver un valor.  
  
> [!NOTE]
>  Hacer referencia a un método que tiene cinco parámetros y devuelve `void` (o en Visual Basic, que se declara como un `Sub` en lugar de como un `Function`), use la interfaz genérica <xref:System.Action%605> delegar en su lugar.  
  
 También puede usar el <xref:System.Func%606> delegar con métodos anónimos y expresiones lambda.  
  
 El tipo subyacente de una expresión lambda es uno de la clase genérica `Func` delegados. Esto hace posible pasar una expresión lambda como parámetro sin asignarla explícitamente a un delegado.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`5" />
  </Docs>
</Type>