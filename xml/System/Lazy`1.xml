<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="18f7acfe9be295d345b133ff0702748156b3ca30" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="cb31d-101">El tipo de objeto que se inicializa de forma diferida.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cb31d-101">The type of object that is being lazily initialized.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="cb31d-102">Proporciona compatibilidad con la inicialización diferida.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cb31d-102">Provides support for lazy initialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-103">Usar inicialización diferida para aplazar la creación de un objeto grande o gran cantidad de recursos o la ejecución de una tarea que consume muchos recursos, especialmente cuando esa creación o ejecución no puede producirse durante la vigencia del programa.</span><span class="sxs-lookup"><span data-stu-id="cb31d-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="cb31d-104">Para prepararse para la inicialización diferida, se crea una instancia de <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="cb31d-105">El argumento de tipo de la <xref:System.Lazy%601> objeto creado por usted especifica el tipo del objeto que se va a inicializar de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="cb31d-106">El constructor que se usa para crear la <xref:System.Lazy%601> objeto determina las características de la inicialización.</span><span class="sxs-lookup"><span data-stu-id="cb31d-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="cb31d-107">La inicialización diferida se produce la primera vez que se accede a la propiedad <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="cb31d-108">En la mayoría de los casos, elegir un constructor depende de las respuestas a dos preguntas:</span><span class="sxs-lookup"><span data-stu-id="cb31d-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="cb31d-109">¿Se el objeto inicializado de forma diferida obtendrá acceso desde varios subprocesos?</span><span class="sxs-lookup"><span data-stu-id="cb31d-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="cb31d-110">Si es así, la <xref:System.Lazy%601> objeto puede crear en cualquier subproceso.</span><span class="sxs-lookup"><span data-stu-id="cb31d-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="cb31d-111">Puede usar uno de los constructores simples cuyo comportamiento predeterminado consiste en crear un subprocesos <xref:System.Lazy%601> objeto, por lo que solo una instancia de objeto con instancias de forma diferida se crea independientemente de cuántos subprocesos intenten tener acceso a él.</span><span class="sxs-lookup"><span data-stu-id="cb31d-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="cb31d-112">Para crear un <xref:System.Lazy%601> objeto que no es seguro para subprocesos, debe utilizar un constructor que le permite no especificar ninguna seguridad para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="cb31d-113">Realizar la <xref:System.Lazy%601> seguro para subprocesos de objeto no protege el objeto inicializado de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="cb31d-114">Si varios subprocesos pueden tener acceso al objeto inicializado de forma diferida, debe realizar sus propiedades y métodos seguros para el acceso multiproceso.</span><span class="sxs-lookup"><span data-stu-id="cb31d-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="cb31d-115">¿La inicialización diferida requiere una gran cantidad de código, o el objeto inicializado de forma diferida tenga un constructor predeterminado que se hace todo lo que necesita y no produce excepciones?</span><span class="sxs-lookup"><span data-stu-id="cb31d-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="cb31d-116">Si tiene que escribir código de inicialización o si las excepciones deben tratarse, use uno de los constructores que toma un método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="cb31d-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="cb31d-117">Escribir el código de inicialización en el método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="cb31d-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="cb31d-118">La siguiente tabla muestra qué constructor para elegir, en función de estos dos factores:</span><span class="sxs-lookup"><span data-stu-id="cb31d-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="cb31d-119">Objeto tendrán acceso al</span><span class="sxs-lookup"><span data-stu-id="cb31d-119">Object will be accessed by</span></span>|<span data-ttu-id="cb31d-120">Si se requiere ningún código de inicialización (constructor predeterminado), usar</span><span class="sxs-lookup"><span data-stu-id="cb31d-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="cb31d-121">Si no se requiere el código de inicialización, use</span><span class="sxs-lookup"><span data-stu-id="cb31d-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="cb31d-122">Varios subprocesos</span><span class="sxs-lookup"><span data-stu-id="cb31d-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="cb31d-123">Un subproceso</span><span class="sxs-lookup"><span data-stu-id="cb31d-123">One thread</span></span>|<span data-ttu-id="cb31d-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> con `isThreadSafe` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="cb31d-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="cb31d-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> con `isThreadSafe` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="cb31d-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="cb31d-126">Puede usar una expresión lambda para especificar el método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="cb31d-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="cb31d-127">Esto evita que el código de inicialización en un solo lugar.</span><span class="sxs-lookup"><span data-stu-id="cb31d-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="cb31d-128">La expresión lambda captura el contexto, incluidos los argumentos que se pasan al constructor del objeto inicializado de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="cb31d-129">**Almacenamiento en caché de excepción** cuando se usan métodos de fábrica, las excepciones se almacenan en caché.</span><span class="sxs-lookup"><span data-stu-id="cb31d-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="cb31d-130">Es decir, si el método de generador produce un tiempo de la primera excepción un subproceso intenta obtener acceso a la <xref:System.Lazy%601.Value%2A> propiedad de la <xref:System.Lazy%601> del objeto, la misma excepción se produce en todos los intentos subsiguientes.</span><span class="sxs-lookup"><span data-stu-id="cb31d-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="cb31d-131">Esto garantiza que todas las llamadas a la <xref:System.Lazy%601.Value%2A> propiedad produce el mismo resultado y evita errores sutiles que pueden surgir si diferentes subprocesos obtienen resultados diferentes.</span><span class="sxs-lookup"><span data-stu-id="cb31d-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="cb31d-132">El <xref:System.Lazy%601> reemplaza un real `T` que en caso contrario, habría se ha inicializado en algún momento anterior, normalmente durante el inicio.</span><span class="sxs-lookup"><span data-stu-id="cb31d-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="cb31d-133">Un error en ese momento anterior es suele ser desastroso.</span><span class="sxs-lookup"><span data-stu-id="cb31d-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="cb31d-134">Si no hay posibilidad de un error recuperable, se recomienda compilar la lógica de reintento a la rutina de inicialización (en este caso, el método de fábrica), como haría si no usa la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</span></span>  
  
 <span data-ttu-id="cb31d-135">**Alternativa al bloqueo** en determinadas situaciones, puede evitar la sobrecarga de la <xref:System.Lazy%601> objeto predeterminado el comportamiento de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="cb31d-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="cb31d-136">En raras ocasiones, podría haber un riesgo potencial de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="cb31d-137">En tales casos, puede usar el <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor y especifique <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cb31d-138">Esto permite la <xref:System.Lazy%601> objeto que se va a crear una copia del objeto inicializado de forma diferida en cada uno de varios subprocesos si llama los subprocesos del <xref:System.Lazy%601.Value%2A> propiedad simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="cb31d-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="cb31d-139">La <xref:System.Lazy%601> objeto garantiza que todos los subprocesos de utilizar la misma instancia del objeto inicializado de forma diferida y descarta las instancias que no se utilizan.</span><span class="sxs-lookup"><span data-stu-id="cb31d-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="cb31d-140">Por lo tanto, el costo de reducir la sobrecarga de bloqueo es que el programa a veces, puede crear y descartar copias adicionales de un objeto costoso.</span><span class="sxs-lookup"><span data-stu-id="cb31d-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="cb31d-141">En la mayoría de los casos, esto es improbable.</span><span class="sxs-lookup"><span data-stu-id="cb31d-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="cb31d-142">Los ejemplos de la <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> y <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructores demuestran este comportamiento.</span><span class="sxs-lookup"><span data-stu-id="cb31d-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cb31d-143">Cuando se especifica <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, las excepciones no se nunca almacena en caché, incluso si se especifica un método de fábrica.</span><span class="sxs-lookup"><span data-stu-id="cb31d-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="cb31d-144">**Constructores equivalente** además de habilitar el uso de <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> y <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructores pueden duplicar la funcionalidad de los otros constructores.</span><span class="sxs-lookup"><span data-stu-id="cb31d-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="cb31d-145">En la tabla siguiente se muestra los valores de parámetro que generan un comportamiento equivalente.</span><span class="sxs-lookup"><span data-stu-id="cb31d-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="cb31d-146">Para crear un <xref:System.Lazy%601> objeto que se</span><span class="sxs-lookup"><span data-stu-id="cb31d-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="cb31d-147">Para los constructores que tienen un `LazyThreadSafetyMode` `mode` parámetro, establecer `mode` a</span><span class="sxs-lookup"><span data-stu-id="cb31d-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="cb31d-148">Constructores que tienen un valor booleano de `isThreadSafe` parámetro, establecer `isThreadSafe` a</span><span class="sxs-lookup"><span data-stu-id="cb31d-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="cb31d-149">Para los constructores sin parámetros de seguridad de subprocesos</span><span class="sxs-lookup"><span data-stu-id="cb31d-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="cb31d-150">Totalmente es seguro para subprocesos; se utiliza para asegurarse de que solo un subproceso inicializa el valor de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="cb31d-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="cb31d-151">Todos los constructores de este tipo son totalmente es seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="cb31d-152">No es seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="cb31d-153">No es aplicable</span><span class="sxs-lookup"><span data-stu-id="cb31d-153">Not applicable.</span></span>|  
|<span data-ttu-id="cb31d-154">Totalmente es seguro para subprocesos; anticipación de subprocesos para inicializar el valor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="cb31d-155">No es aplicable</span><span class="sxs-lookup"><span data-stu-id="cb31d-155">Not applicable.</span></span>|<span data-ttu-id="cb31d-156">No es aplicable</span><span class="sxs-lookup"><span data-stu-id="cb31d-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="cb31d-157">**Otras capacidades** para obtener información sobre el uso de <xref:System.Lazy%601> con campos de subproceso estático, o como el almacén de copia de seguridad para las propiedades, vea [la inicialización diferida](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="cb31d-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb31d-158">En el ejemplo siguiente se muestra el uso de la <xref:System.Lazy%601> clase para proporcionar la inicialización diferida con acceso desde varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-159">El ejemplo se utiliza la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="cb31d-160">También muestra el uso de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (especificar `true` para `isThreadSafe`) y la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (especificar <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="cb31d-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="cb31d-161">Para cambiar a un constructor diferente, cambie los constructores que están comentados.</span><span class="sxs-lookup"><span data-stu-id="cb31d-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="cb31d-162">Para obtener un ejemplo que muestra la excepción de almacenamiento en caché utilizando los constructores de la mismos, vea el <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="cb31d-163">El ejemplo define una clase `LargeObject` que uno de varios subprocesos inicializará de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="cb31d-164">Las cuatro secciones claves de código muestran la creación del inicializador, el método de fábrica, la inicialización real y el constructor de la `LargeObject` (clase), que muestra un mensaje cuando se crea el objeto.</span><span class="sxs-lookup"><span data-stu-id="cb31d-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="cb31d-165">Al principio del método `Main`, el ejemplo crea el inicializador diferido seguro para subprocesos para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="cb31d-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="cb31d-166">El método de generador muestra la creación del objeto, con un marcador de posición para la inicialización adicional:</span><span class="sxs-lookup"><span data-stu-id="cb31d-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="cb31d-167">Tenga en cuenta que las secciones de código de dos primeras se pueden combinar mediante una función lambda, como se muestra aquí:</span><span class="sxs-lookup"><span data-stu-id="cb31d-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="cb31d-168">En el ejemplo se pone en pausa, para indicar que puede transcurrir un período indeterminado antes de que se produce la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="cb31d-169">Cuando se presiona el **ENTRAR** clave, en el ejemplo se crea e inicia tres subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="cb31d-170">El `ThreadProc` método utilizado por todas las llamadas de tres subprocesos el <xref:System.Lazy%601.Value%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cb31d-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="cb31d-171">La primera vez que esto ocurre, el `LargeObject` se crea la instancia:</span><span class="sxs-lookup"><span data-stu-id="cb31d-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="cb31d-172">El constructor de la `LargeObject` (clase), que incluye la última sección de clave del código, se muestra un mensaje y se registra la identidad del subproceso de inicialización.</span><span class="sxs-lookup"><span data-stu-id="cb31d-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="cb31d-173">El resultado del programa aparece al final de la lista de código completa.</span><span class="sxs-lookup"><span data-stu-id="cb31d-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-174">Por simplificar, en este ejemplo se emplea una instancia global de <xref:System.Lazy%601> y todos los métodos son `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="cb31d-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="cb31d-175">No son requisitos para el uso de la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="cb31d-176">De forma predeterminada, todos los miembros públicos y protegidos de la <see cref="T:System.Lazy`1" /> clase son seguros para subprocesos y se pueden usar simultáneamente desde varios subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cb31d-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span>
      </span>
      <span data-ttu-id="cb31d-177">Si lo desea y por instancia, utilizando parámetros a los constructores del tipo, se pueden quitar estas garantías de seguridad para subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cb31d-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cb31d-178">Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-178">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cb31d-179">Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="cb31d-180">Cuando se produce la inicialización diferida, se usa el constructor predeterminado del tipo de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-180">When lazy initialization occurs, the default constructor of the target type is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-181">Una instancia que se crea con este constructor se puede usar simultáneamente desde varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-181">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="cb31d-182">El modo de seguridad de subprocesos de un <xref:System.Lazy%601> instancia que se inicializa con este constructor es <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-182">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cb31d-183">El modo de seguridad para subprocesos describe el comportamiento cuando varios subprocesos intentan inicializar la <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-183">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="cb31d-184">Un <xref:System.Lazy%601> instancia que se crea con este constructor no almacena en caché las excepciones.</span><span class="sxs-lookup"><span data-stu-id="cb31d-184">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="cb31d-185">Para obtener más información, vea la clase <xref:System.Lazy%601> o la enumeración <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-185">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb31d-186">En el ejemplo siguiente se muestra el uso de este constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-186">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="cb31d-187">También muestra el uso de la <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (especificar `true` para `isThreadSafe`) y la <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (especificar <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="cb31d-187">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="cb31d-188">Para cambiar a un constructor diferente, cambie los constructores que están comentados.</span><span class="sxs-lookup"><span data-stu-id="cb31d-188">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="cb31d-189">El ejemplo define una clase `LargeObject` que uno de varios subprocesos inicializará de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-189">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="cb31d-190">Las dos líneas de clave de código de este ejemplo son la creación de inicializador y la inicialización real.</span><span class="sxs-lookup"><span data-stu-id="cb31d-190">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="cb31d-191">Al principio del método `Main`, el ejemplo crea el inicializador diferido seguro para subprocesos para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="cb31d-191">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="cb31d-192">En el ejemplo se crea e inicia tres subprocesos que se bloquean en un <xref:System.Threading.ManualResetEvent> de objeto, por lo que en el ejemplo se puede liberar los subprocesos a la vez.</span><span class="sxs-lookup"><span data-stu-id="cb31d-192">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="cb31d-193">El `ThreadProc` método utilizado por todas las llamadas de tres subprocesos el <xref:System.Lazy%601.Value%2A> propiedad que se va a obtener el `LargeObject` instancia:</span><span class="sxs-lookup"><span data-stu-id="cb31d-193">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="cb31d-194">El <xref:System.Lazy%601> clase proporciona un bloqueo, por lo que solo un subproceso puede crear el `LargeObject` instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-194">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="cb31d-195">En el ejemplo se muestra que los demás subprocesos todos obtienen la misma instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-195">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-196">Por simplificar, en este ejemplo se emplea una instancia global de <xref:System.Lazy%601> y todos los métodos son `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="cb31d-196">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="cb31d-197">No son requisitos para el uso de la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-197">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="cb31d-198">Se establece en <see langword="true" /> para hacer que esta instancia se pueda usar en varios subprocesos al mismo tiempo; se establece en <see langword="false" /> para impedir que la instancia se pueda usar en más de un subproceso a la vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-198">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cb31d-199">Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-199">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="cb31d-200">Cuando se produce la inicialización diferida, se usan el constructor predeterminado del tipo de destino y el modo de inicialización especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-200">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-201">El modo de seguridad de subprocesos de un <xref:System.Lazy%601> instancia que se inicializa con este constructor es <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> si `isThreadSafe` es `true`; en caso contrario, el modo es <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-201">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cb31d-202">El modo de seguridad para subprocesos describe el comportamiento cuando varios subprocesos intentan inicializar la <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-202">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="cb31d-203">Para especificar el <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> modo, utilice la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-203">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="cb31d-204">Un <xref:System.Lazy%601> instancia que se crea con este constructor no almacena en caché las excepciones.</span><span class="sxs-lookup"><span data-stu-id="cb31d-204">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="cb31d-205">Para obtener más información, vea la clase <xref:System.Lazy%601> o la enumeración <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-205">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb31d-206">En el ejemplo siguiente se muestra el uso de este constructor para crear a un inicializador diferido que no es un subproceso seguro, para escenarios donde todo el acceso al objeto inicializado de forma diferida se produce en el mismo subproceso.</span><span class="sxs-lookup"><span data-stu-id="cb31d-206">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="cb31d-207">También muestra el uso de la <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (especificar <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`.</span><span class="sxs-lookup"><span data-stu-id="cb31d-207">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="cb31d-208">Para cambiar a un constructor diferente, cambiar qué constructor se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-208">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-209">Para el código que muestra cómo utilizar este constructor en escenarios de multithreading (especificar `true` para `isThreadSafe`), vea el ejemplo de la <xref:System.Lazy%601.%23ctor> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-209">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="cb31d-210">El ejemplo define un `LargeObject` clase que se inicializará de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-210">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="cb31d-211">En el `Main` método, en el ejemplo se crea un <xref:System.Lazy%601> instancia y, a continuación, realiza una pausa.</span><span class="sxs-lookup"><span data-stu-id="cb31d-211">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="cb31d-212">Cuando se presiona el **ENTRAR** clave, el ejemplo accede a la <xref:System.Lazy%601.Value%2A> propiedad de la <xref:System.Lazy%601> instancia, que se produce la inicialización que se produzca.</span><span class="sxs-lookup"><span data-stu-id="cb31d-212">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="cb31d-213">El constructor de la `LargeObject` clase muestra un mensaje de consola.</span><span class="sxs-lookup"><span data-stu-id="cb31d-213">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-214">Por simplificar, en este ejemplo se emplea una instancia global de <xref:System.Lazy%601> y todos los métodos son `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="cb31d-214">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="cb31d-215">No son requisitos para el uso de la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-215">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="cb31d-216">Delegado que se invoca para generar el valor inicializado de forma diferida cuando sea necesario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-216">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cb31d-217">Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-217">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="cb31d-218">Cuando se produce la inicialización diferida, se usa la función de inicialización especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-218">When lazy initialization occurs, the specified initialization function is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-219">Una instancia que se crea con este constructor se puede usar simultáneamente desde varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-219">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="cb31d-220">El modo de seguridad de subprocesos de un <xref:System.Lazy%601> instancia que se inicializa con este constructor es <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-220">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cb31d-221">El modo de seguridad para subprocesos describe el comportamiento cuando varios subprocesos intentan inicializar la <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-221">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="cb31d-222">Las excepciones producidas por `valueFactory` se almacenan en caché.</span><span class="sxs-lookup"><span data-stu-id="cb31d-222">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="cb31d-223">Para obtener más información, vea la clase <xref:System.Lazy%601> o la enumeración <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-223">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb31d-224">En el ejemplo siguiente se muestra el uso de este constructor para proporcionar la inicialización diferida con almacenamiento en caché de excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-224">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="cb31d-225">También muestra el uso de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (especificar `true` para `isThreadSafe`) y la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (especificar <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="cb31d-225">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="cb31d-226">Para cambiar a un constructor diferente, cambie los constructores que están comentados.</span><span class="sxs-lookup"><span data-stu-id="cb31d-226">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="cb31d-227">El ejemplo define una clase `LargeObject` que uno de varios subprocesos inicializará de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-227">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="cb31d-228">Las tres secciones principales de código muestran la creación de inicializador, la inicialización real y el constructor de la `LargeObject` (clase), que muestra el almacenamiento en caché de excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-228">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="cb31d-229">Al principio del método `Main`, el ejemplo crea el inicializador diferido seguro para subprocesos para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="cb31d-229">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="cb31d-230">En el ejemplo se crea y se inicia tres subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-230">The example creates and starts three threads.</span></span> <span data-ttu-id="cb31d-231">El `ThreadProc` método utilizado por todas las llamadas de tres subprocesos el <xref:System.Lazy%601.Value%2A> propiedad que se va a obtener el `LargeObject` instancia:</span><span class="sxs-lookup"><span data-stu-id="cb31d-231">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="cb31d-232">En el constructor de la `LargeObject` (clase), la tercera sección clave de código produce una excepción la primera vez un `LargeObject` instancia se crea, pero posteriormente permite la creación de instancia que se produzca:</span><span class="sxs-lookup"><span data-stu-id="cb31d-232">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="cb31d-233">Cuando se ejecuta el ejemplo, el primer subproceso que intenta crear una instancia de `LargeObject` se produce un error y la excepción se detecta.</span><span class="sxs-lookup"><span data-stu-id="cb31d-233">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="cb31d-234">Es de esperar que el siguiente subproceso correctamente crearía una instancia, pero la <xref:System.Lazy%601> objeto ha almacenado en caché la excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-234">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="cb31d-235">Por este motivo, los tres subprocesos producen la excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-235">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-236">Por simplificar, en este ejemplo se emplea una instancia global de <xref:System.Lazy%601> y todos los métodos son `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="cb31d-236">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="cb31d-237">No son requisitos para el uso de la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-237">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cb31d-238">
            <paramref name="valueFactory" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-238">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="cb31d-239">Uno de los valores de enumeración que especifica el modo de seguridad para subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-239">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cb31d-240">Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" /> que usa el constructor predeterminado de <paramref name="T" /> y el modo de seguridad para subprocesos especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-240">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-241">El modo de seguridad de subprocesos de un <xref:System.Lazy%601> instancia describe el comportamiento cuando varios subprocesos intentan inicializar la <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-241">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="cb31d-242">Un <xref:System.Lazy%601> instancia que se crea con este constructor no almacena en caché las excepciones.</span><span class="sxs-lookup"><span data-stu-id="cb31d-242">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="cb31d-243">Para obtener más información, vea la clase <xref:System.Lazy%601> o la enumeración <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-243">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb31d-244">En el ejemplo siguiente se muestra el uso de este constructor para crear a un inicializador diferido que permite que varios subprocesos a las de carrera para crear un objeto de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-244">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="cb31d-245">Varios subprocesos pueden ser correcta en la creación de instancias, pero todos los subprocesos de utilizan la instancia que se creó en primer lugar.</span><span class="sxs-lookup"><span data-stu-id="cb31d-245">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-246">Para obtener un ejemplo que muestra cómo utilizar este constructor en escenarios de un único subproceso (especificar <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`), consulte el <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-246">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="cb31d-247">Para obtener un ejemplo que muestra cómo utilizar este constructor para proporcionar el bloqueo en lugar de las condiciones de carrera en escenarios de multithreading (especificar <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`), consulte el <xref:System.Lazy%601.%23ctor> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-247">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="cb31d-248">El ejemplo define un `LargeObject` clase que se pueden inicializar de forma diferida por cualquiera de varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-248">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="cb31d-249">Las tres secciones principales de código muestran la creación de inicializador, la inicialización real y el constructor y el finalizador de la `LargeObject` clase.</span><span class="sxs-lookup"><span data-stu-id="cb31d-249">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="cb31d-250">Al principio de la `Main` método, en el ejemplo se crea el <xref:System.Lazy%601> objeto que realiza la inicialización diferida de la `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="cb31d-250">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="cb31d-251">En el ejemplo se crea e inicia tres subprocesos que se bloquean en un <xref:System.Threading.ManualResetEvent> de objeto, por lo que en el ejemplo se puede liberar los subprocesos a la vez.</span><span class="sxs-lookup"><span data-stu-id="cb31d-251">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="cb31d-252">En el `ThreadProc` método usado por todos los subprocesos de tres, una llamada a la <xref:System.Lazy%601.Value%2A> propiedad, se crea el `LargeObject` instancia:</span><span class="sxs-lookup"><span data-stu-id="cb31d-252">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="cb31d-253">Dado que el constructor para la <xref:System.Lazy%601> instancia especificada <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, los tres subprocesos tienen autorización para crear `LargeObject` instancias.</span><span class="sxs-lookup"><span data-stu-id="cb31d-253">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="cb31d-254">En el ejemplo se muestra cómo hacerlo, mostrando los mensajes de la consola en el constructor y el finalizador de la `LargeObject` clase:</span><span class="sxs-lookup"><span data-stu-id="cb31d-254">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="cb31d-255">Sin embargo, la <xref:System.Lazy%601> objeto garantiza que solo una instancia se usa por todos los subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-255">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="cb31d-256">El resultado del ejemplo muestra que todos los tres subprocesos usan la misma instancia y también muestra que las otras dos instancias pueden ser reclamadas por la recolección de elementos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-256">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-257">Por simplificar, en este ejemplo se emplea una instancia global de <xref:System.Lazy%601> y todos los métodos son `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="cb31d-257">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="cb31d-258">No son requisitos para el uso de la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-258">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cb31d-259">
            <paramref name="mode" /> contiene un valor no válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-259">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="cb31d-260">Delegado que se invoca para generar el valor inicializado de forma diferida cuando sea necesario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-260">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="isThreadSafe">
          <span data-ttu-id="cb31d-261">Se establece en <see langword="true" /> para hacer que esta instancia se pueda usar en varios subprocesos al mismo tiempo; se establece en <see langword="false" /> para impedir que esta instancia se pueda usar en más de un subproceso a la vez.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-261">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cb31d-262">Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-262">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="cb31d-263">Cuando se produce la inicialización diferida, se usan la función de inicialización y el modo de inicialización especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-263">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-264">El modo de seguridad de subprocesos de un <xref:System.Lazy%601> instancia que se inicializa con este constructor es <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> si `isThreadSafe` es `true`; en caso contrario, el modo es <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-264">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cb31d-265">El modo de seguridad para subprocesos describe el comportamiento cuando varios subprocesos intentan inicializar la <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-265">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="cb31d-266">Para especificar el <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> modo, utilice la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-266">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="cb31d-267">Las excepciones producidas por `valueFactory` se almacenan en caché.</span><span class="sxs-lookup"><span data-stu-id="cb31d-267">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="cb31d-268">Para obtener más información, vea la clase <xref:System.Lazy%601> o la enumeración <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-268">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb31d-269">En el ejemplo siguiente se muestra el uso de este constructor para proporcionar la inicialización diferida, con excepción de almacenamiento en caché, en un escenario con un único subproceso.</span><span class="sxs-lookup"><span data-stu-id="cb31d-269">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="cb31d-270">También muestra el uso de la <xref:System.Lazy%601.%23ctor%2A> constructor (especificar <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`).</span><span class="sxs-lookup"><span data-stu-id="cb31d-270">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="cb31d-271">Para cambiar a este constructor, cambiar qué constructor se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-271">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-272">Para el código que muestra cómo utilizar este constructor en escenarios de multithreading (especificar `true` para `isThreadSafe`), vea el ejemplo de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-272">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="cb31d-273">El ejemplo define una clase `LargeObject` que uno de varios subprocesos inicializará de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-273">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="cb31d-274">Las tres secciones principales de código muestran la creación de inicializador, la inicialización real y el constructor de la `LargeObject` (clase), que muestra el almacenamiento en caché de excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-274">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="cb31d-275">Al principio del método `Main`, el ejemplo crea el inicializador diferido seguro para subprocesos para `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="cb31d-275">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="cb31d-276">En la llamada al constructor, el `isThreadSafe` parámetro es `false`, por lo que el <xref:System.Lazy%601> no es seguro para la ejecución de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-276">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="cb31d-277">Dado que no es seguro para subprocesos, el ejemplo llama a la <xref:System.Lazy%601.Value%2A> propiedad tres veces en el mismo subproceso:</span><span class="sxs-lookup"><span data-stu-id="cb31d-277">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="cb31d-278">En el constructor de la `LargeObject` (clase), la tercera sección clave de código produce una excepción la primera vez un `LargeObject` instancia se crea, pero posteriormente permite la creación de instancia que se produzca:</span><span class="sxs-lookup"><span data-stu-id="cb31d-278">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="cb31d-279">Cuando se ejecuta el ejemplo, el primer intento de crear una instancia de `LargeObject` se produce un error y la excepción se detecta.</span><span class="sxs-lookup"><span data-stu-id="cb31d-279">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="cb31d-280">Es de esperar que el próximo intento se realizaría correctamente, pero la <xref:System.Lazy%601> objeto ha almacenado en caché la excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-280">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="cb31d-281">Por este motivo, los tres intentos producen la excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-281">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-282">Por simplificar, en este ejemplo se emplea una instancia global de <xref:System.Lazy%601> y todos los métodos son `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="cb31d-282">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="cb31d-283">No son requisitos para el uso de la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-283">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cb31d-284">
            <paramref name="valueFactory" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-284">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="cb31d-285">Delegado que se invoca para generar el valor inicializado de forma diferida cuando sea necesario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-285">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="cb31d-286">Uno de los valores de enumeración que especifica el modo de seguridad para subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-286">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cb31d-287">Inicializa una nueva instancia de la clase <see cref="T:System.Lazy`1" /> que utiliza la función de inicialización y el modo de seguridad para subprocesos especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-287">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-288">El modo de seguridad de subprocesos de un <xref:System.Lazy%601> instancia describe el comportamiento cuando varios subprocesos intentan inicializar la <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-288">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="cb31d-289">Las excepciones producidas por `valueFactory` se almacenan en caché, a menos que `mode` es <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-289">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cb31d-290">Para obtener más información, vea la clase <xref:System.Lazy%601> o la enumeración <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="cb31d-290">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb31d-291">En el ejemplo siguiente se muestra el uso de este constructor para crear a un inicializador diferido que permite que varios subprocesos a las de carrera para crear un objeto de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-291">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="cb31d-292">Varios subprocesos pueden ser correcta en la creación de instancias, pero todos los subprocesos de utilizan la instancia que se creó en primer lugar.</span><span class="sxs-lookup"><span data-stu-id="cb31d-292">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="cb31d-293">Además, el ejemplo se muestra que las excepciones no se nunca almacenan en caché cuando se especifica <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, incluso si la inicialización se realiza una función en lugar de por el constructor predeterminado del tipo creado de forma diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-293">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-294">Para obtener un ejemplo que muestra cómo utilizar este constructor en escenarios de un único subproceso (especificar <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> para `mode`), consulte el <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-294">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="cb31d-295">Para obtener un ejemplo que muestra cómo utilizar este constructor para proporcionar el bloqueo en lugar de las condiciones de carrera en escenarios de multithreading (especificar <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> para `mode`), consulte el <xref:System.Lazy%601.%23ctor> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-295">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="cb31d-296">El ejemplo define un `LargeObject` clase que se pueden inicializar de forma diferida por cualquiera de varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-296">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="cb31d-297">Las cuatro secciones claves de código muestran la creación de inicializador, la inicialización real, la función de inicialización y el constructor y el finalizador de la `LargeObject` clase.</span><span class="sxs-lookup"><span data-stu-id="cb31d-297">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="cb31d-298">Al principio de la `Main` método, en el ejemplo se crea el <xref:System.Lazy%601> objeto que realiza la inicialización diferida de la `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="cb31d-298">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="cb31d-299">El inicializador diferido usa una función para realizar la inicialización.</span><span class="sxs-lookup"><span data-stu-id="cb31d-299">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="cb31d-300">En este caso, se requiere una función porque no hay ningún constructor predeterminado para la `LargeObject` clase.</span><span class="sxs-lookup"><span data-stu-id="cb31d-300">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="cb31d-301">En el ejemplo se crea e inicia tres subprocesos que se bloquean en un <xref:System.Threading.ManualResetEvent> de objeto, por lo que en el ejemplo se puede liberar los subprocesos a la vez.</span><span class="sxs-lookup"><span data-stu-id="cb31d-301">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="cb31d-302">En el `ThreadProc` método usado por todos los subprocesos de tres, una llamada a la <xref:System.Lazy%601.Value%2A> propiedad, se crea el `LargeObject` instancia:</span><span class="sxs-lookup"><span data-stu-id="cb31d-302">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="cb31d-303">En la tercera sección clave del código, se llama a la función de inicialización diferida para crear el `LargeObject` instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-303">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="cb31d-304">La función produce una vez la primera excepción que se llama:</span><span class="sxs-lookup"><span data-stu-id="cb31d-304">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="cb31d-305">Con cualquier otro <xref:System.Threading.LazyThreadSafetyMode> configuración, una excepción no controlada en la función de inicialización podría almacenarse en memoria caché.</span><span class="sxs-lookup"><span data-stu-id="cb31d-305">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="cb31d-306">Sin embargo, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suprime el almacenamiento en caché de excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-306">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="cb31d-307">El resultado del ejemplo muestra que un intento posterior para inicializar el objeto se realiza correctamente.</span><span class="sxs-lookup"><span data-stu-id="cb31d-307">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-308">El mensaje de excepción normalmente aparece después de los mensajes que indican que otro subproceso ha inicializado correctamente el objeto.</span><span class="sxs-lookup"><span data-stu-id="cb31d-308">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="cb31d-309">Esto es debido al retraso introducido por producir y detectar la excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-309">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="cb31d-310">Dado que el constructor para la <xref:System.Lazy%601> instancia especificada <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, los tres subprocesos tienen autorización para crear `LargeObject` instancias.</span><span class="sxs-lookup"><span data-stu-id="cb31d-310">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="cb31d-311">En el ejemplo se muestra cómo hacerlo, mostrando los mensajes de la consola en el constructor y el finalizador de la `LargeObject` clase:</span><span class="sxs-lookup"><span data-stu-id="cb31d-311">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="cb31d-312">La <xref:System.Lazy%601> objeto garantiza que solo una instancia se usa por todos los subprocesos (salvo el subproceso donde la función de inicialización produce una excepción).</span><span class="sxs-lookup"><span data-stu-id="cb31d-312">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="cb31d-313">El resultado del ejemplo muestra cómo hacerlo.</span><span class="sxs-lookup"><span data-stu-id="cb31d-313">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb31d-314">Por simplificar, en este ejemplo se emplea una instancia global de <xref:System.Lazy%601> y todos los métodos son `static` (`Shared` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="cb31d-314">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="cb31d-315">No son requisitos para el uso de la inicialización diferida.</span><span class="sxs-lookup"><span data-stu-id="cb31d-315">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cb31d-316">
            <paramref name="mode" /> contiene un valor no válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-316">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cb31d-317">
            <paramref name="valueFactory" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-317">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cb31d-318">Obtiene un valor que indica si se ha creado un valor para esta instancia de <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-318">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cb31d-319">Es <see langword="true" /> si se ha creado un valor para esta instancia de <see cref="T:System.Lazy`1" />; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-319">
              <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-320">Cuando se produce la inicialización diferida para un <xref:System.Lazy%601> instancia, ya que podrían producirse en un valor que se está creando o se producirá una excepción.</span><span class="sxs-lookup"><span data-stu-id="cb31d-320">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="cb31d-321">Si una excepción es el comportamiento producido, las siguientes de la <xref:System.Lazy%601> instancia depende de si el almacenamiento en caché de excepción está en vigor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-321">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="cb31d-322">Si el <xref:System.Lazy%601> instancia se creó mediante un constructor que no especifica una función de inicialización, a continuación, el almacenamiento en caché de excepción no está en vigor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-322">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="cb31d-323">Un intento posterior de inicializar el <xref:System.Lazy%601> podría realizarse correctamente y después de la inicialización correcta del <xref:System.Lazy%601.IsValueCreated%2A> propiedad devuelve `true`.</span><span class="sxs-lookup"><span data-stu-id="cb31d-323">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="cb31d-324">Si el <xref:System.Lazy%601> instancia se creó con una función de inicialización (especificado por el `valueFactory` parámetro de la <xref:System.Lazy%601> constructor), a continuación, el almacenamiento en caché de excepción se controla mediante el modo de seguridad para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="cb31d-324">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="cb31d-325">Si el modo es <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> o <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, no hay ninguna segunda oportunidad de inicializar el <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-325">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="cb31d-326">Si se produce una excepción y no se controla en la función de inicialización, esa excepción se almacena en caché y se vuelve a producir en accesos posteriores de la <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="cb31d-326">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cb31d-327">No se crea ningún valor si se produce una excepción, por lo que en estos casos <xref:System.Lazy%601.IsValueCreated%2A> devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="cb31d-327">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="cb31d-328">Si el modo es <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, el primer subproceso que se ejecuta correctamente en la ejecución de la función de inicialización (o el constructor predeterminado) crea el valor de la <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-328">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="cb31d-329">Si la función de inicialización produce una excepción en un subproceso, otros subprocesos todavía pueden intentar inicializar el <xref:System.Lazy%601> instancia.</span><span class="sxs-lookup"><span data-stu-id="cb31d-329">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="cb31d-330">Hasta que se cree el valor, el <xref:System.Lazy%601.IsValueCreated%2A> propiedad devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="cb31d-330">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cb31d-331">Crea y devuelve una representación de cadena de la propiedad <see cref="P:System.Lazy`1.Value" /> de esta instancia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-331">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cb31d-332">El resultado de llamar al método <see cref="M:System.Object.ToString" /> en la propiedad <see cref="P:System.Lazy`1.Value" /> de esta instancia, si el valor se ha creado (es decir, si la propiedad <see cref="P:System.Lazy`1.IsValueCreated" /> devuelve <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-332">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span>
          </span>
          <span data-ttu-id="cb31d-333">De lo contrario, una cadena que indica que el valor no se ha creado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-333">Otherwise, a string indicating that the value has not been created.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-334">Llamar a este método no hace que la inicialización.</span><span class="sxs-lookup"><span data-stu-id="cb31d-334">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="cb31d-335">El <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad puede ser `null` después de la inicialización diferida si el método de generador que se ha especificado para la `valueFactory` parámetro de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor devuelve `null`.</span><span class="sxs-lookup"><span data-stu-id="cb31d-335">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="cb31d-336">La propiedad <see cref="P:System.Lazy`1.Value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-336">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cb31d-337">Obtiene el valor inicializado de forma diferida de la instancia actual de <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-337">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cb31d-338">Valor inicializado de forma diferida de la instancia actual de <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-338">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb31d-339">Si el <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> propiedad es `false`, acceso a la <xref:System.Lazy%601.Value%2A> propiedad fuerza la inicialización.</span><span class="sxs-lookup"><span data-stu-id="cb31d-339">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="cb31d-340">Además de las excepciones que se muestran, el <xref:System.Lazy%601.Value%2A> propiedad puede producir cualquier excepción no controlada producida por el método de generador que se pasó a la `valueFactory` parámetro de la <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="cb31d-340">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="cb31d-341">La instancia de <see cref="T:System.Lazy`1" /> se inicializa para utilizar el constructor predeterminado del tipo que se inicializa de forma diferida, y faltan los permisos para tener acceso al constructor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-341">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="cb31d-342">La instancia de <see cref="T:System.Lazy`1" /> se inicializa para utilizar el constructor predeterminado del tipo que se inicializa de forma diferida, y ese tipo no tiene un constructor público sin parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-342">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cb31d-343">La función de inicialización intenta tener acceso a <see cref="P:System.Lazy`1.Value" /> en esta instancia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cb31d-343">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>