<Type Name="Buffer" FullName="System.Buffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="93d635c06ab8def7132cc81be4c95923a6faad9f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39765601" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Buffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Buffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffer" />
  <TypeSignature Language="VB.NET" Value="Public Class Buffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class Buffer abstract sealed" />
  <TypeSignature Language="F#" Value="type Buffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manipula matrices de tipos primitivos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Buffer> solo afecta a las matrices de tipos primitivos; Esta clase no se aplica a los objetos. Cada tipo primitivo se trata como una serie de bytes sin tener en cuenta cualquier comportamiento o limitación asociado con el tipo primitivo.  
  
 <xref:System.Buffer> Proporciona métodos para copiar bytes de una matriz de tipos primitivos en otra matriz de tipos primitivos, obtener un byte de una matriz, establecer un byte en una matriz y obtener la longitud de una matriz. Esta clase proporciona un mejor rendimiento para manipular tipos primitivos que métodos similares de la <xref:System.Array?displayProperty=nameWithType> clase.  
  
 <xref:System.Buffer> es aplicable a los tipos primitivos siguientes: <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Single>, y <xref:System.Double>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra el uso de varias `Buffer` métodos de la clase.  
  
 [!code-cpp[System.Buffer.BlockCopy#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/buffer.cpp#1)]
 [!code-csharp[System.Buffer.BlockCopy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/buffer.cs#1)]
 [!code-vb[System.Buffer.BlockCopy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/buffer.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BlockCopy">
      <MemberSignature Language="C#" Value="public static void BlockCopy (Array src, int srcOffset, Array dst, int dstOffset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BlockCopy(class System.Array src, int32 srcOffset, class System.Array dst, int32 dstOffset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BlockCopy (src As Array, srcOffset As Integer, dst As Array, dstOffset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BlockCopy(Array ^ src, int srcOffset, Array ^ dst, int dstOffset, int count);" />
      <MemberSignature Language="F#" Value="static member BlockCopy : Array * int * Array * int * int -&gt; unit" Usage="System.Buffer.BlockCopy (src, srcOffset, dst, dstOffset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Array" />
        <Parameter Name="srcOffset" Type="System.Int32" />
        <Parameter Name="dst" Type="System.Array" />
        <Parameter Name="dstOffset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">Búfer de origen.</param>
        <param name="srcOffset">Desplazamiento de bytes de base cero hacia <c>src</c>.</param>
        <param name="dst">Búfer de destino.</param>
        <param name="dstOffset">Desplazamiento de bytes de base cero hacia <c>dst</c>.</param>
        <param name="count">Número de bytes que se van a copiar.</param>
        <summary>Copia un número especificado de bytes de una matriz de origen a partir de un desplazamiento determinado a una matriz de destino a partir de un desplazamiento determinado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método copia `count` bytes a partir de `src`, comenzando en `srcOffset`a `dst`, comenzando en `dstOffset`. Ambos `srcOffset` y `dstOffset` están basadas en cero; es decir, el primer byte de cada búfer en la posición 0, no la posición 1.  
  
 El <xref:System.Buffer.BlockCopy%2A> método tiene acceso a los bytes en el `src` matriz de parámetros con los desplazamientos en la memoria, no construcciones de programación como índices o los límites superior e inferior de matriz. Por ejemplo, si en el lenguaje de programación de la aplicación declara una <xref:System.Int32> de matriz con un límite inferior basado en cero de -50 y, a continuación, pasar la matriz y un desplazamiento de 5 a la <xref:System.Buffer.BlockCopy%2A> método, el primer elemento de matriz tendrá acceso el método es el segundo elemento de la matriz, que es en-49 al índice. Además, se tiene acceso a los bytes de elemento de la matriz-49 al primer lugar depende del orden del equipo que se está ejecutando la aplicación.  
  
 Como sugiere su nombre, el <xref:System.Buffer.BlockCopy%2A> método copia un bloque de bytes como un todo, en lugar de copiar un byte cada vez. Por lo tanto, si `src` y `dst` hacen referencia a la misma matriz y el intervalo de `srcOffset`  +  `count` -1 se superpone con el intervalo de `dstOffset`  +  `count` - 1, los valores de la superposición no se sobrescriben los bytes antes de que se copien en el destino. En el ejemplo siguiente, los valores de bytes 0-16 en una matriz llamada `arr` se copian en 28 de 12 bytes. A pesar de que el intervalo que se superponen, los valores de los bytes de origen se copian correctamente.  
  
 [!code-cpp[System.Buffer.BlockCopy#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#3)]
 [!code-csharp[System.Buffer.BlockCopy#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#3)]
 [!code-vb[System.Buffer.BlockCopy#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#3)]  
  
 En el ejemplo siguiente, los valores de bytes 12-28 en una matriz llamada `arr` se copian en los bytes 0-16. De nuevo, a pesar de que el intervalo que se superponen, los valores de los bytes de origen se copian correctamente.  
  
 [!code-cpp[System.Buffer.BlockCopy#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#4)]
 [!code-csharp[System.Buffer.BlockCopy#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#4)]
 [!code-vb[System.Buffer.BlockCopy#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#4)]  
  
   
  
## Examples  
 El siguiente ejemplo copia regiones de matrices mediante el uso de la <xref:System.Buffer.BlockCopy%2A> método. Para cada <xref:System.Buffer.BlockCopy%2A> operación, muestra el origen y destino matrices como una matriz de valores y como una secuencia de bytes. En el ejemplo se muestra la importancia de considerar un sistema al trabajar con el <xref:System.Buffer.BlockCopy%2A> método: sistemas de Windows porque son little-endian, los bytes de orden inferior del valor de un tipo de datos primitivo preceden a los bytes de orden superior.  
  
 [!code-cpp[System.Buffer.BlockCopy#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/bcopy.cpp#2)]
 [!code-csharp[System.Buffer.BlockCopy#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/bcopy.cs#2)]
 [!code-vb[System.Buffer.BlockCopy#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/bcopy.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="src" /> o <paramref name="dst" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="src" /> o <paramref name="dst" /> no es una matriz de primitivas.  
  
O bien 
El número de bytes de <paramref name="src" /> es menor que <paramref name="srcOffset" /> más <paramref name="count" />.  
  
O bien 
El número de bytes de <paramref name="dst" /> es menor que <paramref name="dstOffset" /> más <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="srcOffset" /> o <paramref name="dstOffset" /> o <paramref name="count" /> es menor que 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="ByteLength">
      <MemberSignature Language="C#" Value="public static int ByteLength (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ByteLength(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.ByteLength(System.Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ByteLength(Array ^ array);" />
      <MemberSignature Language="F#" Value="static member ByteLength : Array -&gt; int" Usage="System.Buffer.ByteLength array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array">Matriz.</param>
        <summary>Devuelve el número de bytes de la matriz especificada.</summary>
        <returns>Número de bytes de la matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente muestra el uso de la `ByteLength` método para devolver el número de bytes en una matriz.  
  
 [!code-cpp[System.Buffer.Bytes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/bytelength.cpp#1)]
 [!code-csharp[System.Buffer.Bytes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/bytelength.cs#1)]
 [!code-vb[System.Buffer.Bytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/bytelength.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> no es una matriz primitiva.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="array" /> es mayor de 2 gigabytes (GB).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public static byte GetByte (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 GetByte(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.GetByte(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte GetByte(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="static member GetByte : Array * int -&gt; byte" Usage="System.Buffer.GetByte (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Matriz.</param>
        <param name="index">Una posición en la matriz.</param>
        <summary>Recupera el byte que se encuentra en una posición determinada de una matriz especificada.</summary>
        <returns>Devuelve el byte del parámetro <paramref name="index" /> de la matriz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `GetByte` método obtiene un determinado byte de la matriz. La matriz debe ser una matriz de primitivas.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra los valores de byte en las ubicaciones especificadas en las matrices mediante la `GetByte` método.  
  
 [!code-cpp[System.Buffer.Bytes#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/getbyte.cpp#3)]
 [!code-csharp[System.Buffer.Bytes#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/getbyte.cs#3)]
 [!code-vb[System.Buffer.Bytes#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/getbyte.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> no es una matriz primitiva.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> es negativo o mayor que la longitud de <paramref name="array" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="array" /> es mayor de 2 gigabytes (GB).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemoryCopy">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copia un bloque de memoria.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemoryCopy">
      <MemberSignature Language="C#" Value="public static void MemoryCopy (void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryCopy(void* source, void* destination, int64 destinationSizeInBytes, int64 sourceBytesToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);" />
      <MemberSignature Language="F#" Value="static member MemoryCopy : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * int64 * int64 -&gt; unit" Usage="System.Buffer.MemoryCopy (source, destination, destinationSizeInBytes, sourceBytesToCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="destinationSizeInBytes" Type="System.Int64" />
        <Parameter Name="sourceBytesToCopy" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">Dirección de los bytes que se van a copiar.</param>
        <param name="destination">Dirección de destino.</param>
        <param name="destinationSizeInBytes">Número de bytes disponibles en el bloque de memoria de destino.</param>
        <param name="sourceBytesToCopy">Número de bytes que se van a copiar.</param>
        <summary>Copia un número de bytes especificado como un valor de entero long desde una dirección de la memoria en otra.  
  
Esta API no es conforme a CLS.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método copia `sourceBytesToCopy` bytes a partir de la dirección especificada por `source` a la dirección especificada por `destination`. Si se superponen los búferes y la diferencia entre `destination` menos `source` es menor que `sourceBytesToCopy`, el bloque de origen se copia en el bloque de destino en orden inverso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="sourceBytesToCopy" /> es mayor que <paramref name="destinationSizeInBytes" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MemoryCopy">
      <MemberSignature Language="C#" Value="public static void MemoryCopy (void* source, void* destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryCopy(void* source, void* destination, unsigned int64 destinationSizeInBytes, unsigned int64 sourceBytesToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryCopy(void* source, void* destination, System::UInt64 destinationSizeInBytes, System::UInt64 sourceBytesToCopy);" />
      <MemberSignature Language="F#" Value="static member MemoryCopy : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint64 * uint64 -&gt; unit" Usage="System.Buffer.MemoryCopy (source, destination, destinationSizeInBytes, sourceBytesToCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="destinationSizeInBytes" Type="System.UInt64" />
        <Parameter Name="sourceBytesToCopy" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="source">Dirección de los bytes que se van a copiar.</param>
        <param name="destination">Dirección de destino.</param>
        <param name="destinationSizeInBytes">Número de bytes disponibles en el bloque de memoria de destino.</param>
        <param name="sourceBytesToCopy">Número de bytes que se van a copiar.</param>
        <summary>Copia un número de bytes especificado como un valor de entero long sin signo desde una dirección de la memoria a otra.  
  
Esta API no es conforme a CLS.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método copia `sourceBytesToCopy` bytes a partir de la dirección especificada por `source` a la dirección especificada por `destination`. Si se superponen los búferes y la diferencia entre `destination` menos `source` es menor que `sourceBytesToCopy`, el bloque de origen se copia en el bloque de destino en orden inverso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="sourceBytesToCopy" /> es mayor que <paramref name="destinationSizeInBytes" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetByte">
      <MemberSignature Language="C#" Value="public static void SetByte (Array array, int index, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetByte(class System.Array array, int32 index, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetByte(Array ^ array, int index, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member SetByte : Array * int * byte -&gt; unit" Usage="System.Buffer.SetByte (array, index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="array">Matriz.</param>
        <param name="index">Una posición en la matriz.</param>
        <param name="value">Valor que se va asignar.</param>
        <summary>Asigna un valor especificado a un byte en una posición determinada de una matriz especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `array` debe ser una matriz de primitivas.  
  
   
  
## Examples  
 El siguiente ejemplo de código asigna valores a los bytes en ubicaciones concretas dentro de las matrices mediante la `SetByte` método.  
  
 [!code-cpp[System.Buffer.Bytes#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/setbyte.cpp#2)]
 [!code-csharp[System.Buffer.Bytes#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/setbyte.cs#2)]
 [!code-vb[System.Buffer.Bytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/setbyte.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> no es una matriz primitiva.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> es negativo o mayor que la longitud de <paramref name="array" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="array" /> es mayor de 2 gigabytes (GB).</exception>
      </Docs>
    </Member>
  </Members>
</Type>