<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5da4af93ad7b061e8a044bcad37e9192c6c78b1" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52610672" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">Tipo del primer componente de la tupla.</typeparam>
    <typeparam name="T2">Tipo del segundo componente de la tupla.</typeparam>
    <typeparam name="T3">Tipo del tercer componente de la tupla.</typeparam>
    <typeparam name="T4">Tipo del cuarto componente de la tupla.</typeparam>
    <typeparam name="T5">Tipo del quinto componente de la tupla.</typeparam>
    <typeparam name="T6">Tipo del sexto componente de la tupla.</typeparam>
    <typeparam name="T7">Tipo del séptimo componente de la tupla.</typeparam>
    <typeparam name="TRest">Cualquier objeto <see langword="Tuple" /> genérico que defina los tipos de los componentes restantes de la tupla.</typeparam>
    <summary>Representa una tupla de *n*, donde *n* es 8 o más.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una tupla es una estructura de datos que tiene un número específico y la secuencia de valores. El <xref:System.Tuple%608> clase representa un *n*- tupla que tiene ocho o más componentes.  
  
 Puede crear instancias de un <xref:System.Tuple%608> objeto con exactamente ocho componentes mediante una llamada a estático <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método. El ejemplo siguiente crea una tupla de 8 (óctupla) que contiene números primos menores que 20. Tenga en cuenta que usa la inferencia de tipo para determinar el tipo de cada componente.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 También puede crear una instancia un objeto de tupla de n con ocho o más componentes mediante una llamada a la <xref:System.Tuple%608.%23ctor%2A> constructor. En el ejemplo siguiente se usa el <xref:System.Tuple%608.%23ctor%2A> constructor para crear una tupla de 8 que es equivalente a la tupla creada en el ejemplo anterior.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  Para crear una tupla de n con nueve o más componentes, debe llamar a la <xref:System.Tuple%608.%23ctor%2A> constructor. Los métodos de generador estático de la <xref:System.Tuple> clase no admiten la creación de `Tuple` objetos con más de ocho componentes.  
  
 Para crear instancias de una tupla de n que tiene ocho o más componentes con el <xref:System.Tuple%608.%23ctor%2A> constructor, proporcione un tipo genérico `Tuple` objeto como el `rest` parámetro para definir el octavo al *n*componente de la tupla. Anidando genérico `Tuple` objetos de este modo, puede crear una tupla con ninguna limitación práctica en el número de sus componentes.  
  
 El ejemplo siguiente crea una tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de cada censo nacional de 1860 a 2000. El primer componente de la tupla es el nombre de la ciudad. El segundo componente es la fecha de inicio de la serie de datos y el tercer componente es la población en la fecha de inicio. Cada componente subsiguiente proporciona la población en intervalos de diez años. La tupla de 17 se crea mediante el anidamiento un <xref:System.Tuple%603> objeto dentro de un <xref:System.Tuple%608> objeto. (Eso es, el <xref:System.Tuple%603> objeto se proporciona como el valor de la `rest` parámetro en el <xref:System.Tuple%608> constructor de clase.) Esto <xref:System.Tuple%608> objeto, a su vez, anidado en un exterior <xref:System.Tuple%608> objeto. (Eso es, el <xref:System.Tuple%608> objeto se proporciona como el valor de la `rest` parámetro en el exterior <xref:System.Tuple%608> constructor de clase del objeto.)  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 Puede recuperar el valor de los siete primeros componentes de la tupla mediante el uso de solo lectura <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, y <xref:System.Tuple%607.Item7%2A> propiedades de la instancia. Los componentes adicionales están anidados y se pueden recuperar desde el <xref:System.Tuple%608.Rest%2A> propiedad. En el ejemplo anterior, el <xref:System.Tuple%608.Item1%2A> a través de <xref:System.Tuple%608.Item7%2A> propiedades recuperan el primer al séptimo componente de la tupla. El octavo al decimocuarto componentes se encuentran en la tupla que está anidada en el segundo nivel y se representan mediante el `Rest.Item1` a través de `Rest.Item7` propiedades. Los componentes de Decimoséptimo decimoquinta a través se encuentran en la tupla que está anidada en el tercer nivel y se representan mediante el `Rest.Rest.Item1` aunque `Rest.Rest.Item3` propiedades.  
  
 Las tuplas se usan normalmente de cuatro maneras diferentes:  
  
-   Para representar un único conjunto de datos. Por ejemplo, una tupla puede representar un registro de base de datos y sus componentes pueden representar campos individuales del registro.  
  
-   Para proporcionar un acceso sencillo a y la manipulación de un conjunto de datos.  
  
-   Para devolver varios valores de un método sin el uso de `out` parámetros (en C#) o `ByRef` parámetros (en Visual Basic). Por ejemplo, el ejemplo anterior devuelve sus estadísticas calculadas, junto con el nombre de la ciudad, en un <xref:System.Tuple%607> objeto.  
  
-   Para pasar varios valores a un método a través de un solo parámetro. Por ejemplo, el <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> método tiene un parámetro único que le permite proporcionar un valor para el método que el subproceso se ejecuta en el inicio. Si proporciona un <xref:System.Tuple%607> objeto como argumento de método, puede proporcionar la rutina de inicio del subproceso con siete elementos de datos.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'Rest -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; (item1, item2, item3, item4, item5, item6, item7, rest)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">Valor del primer componente de la tupla.</param>
        <param name="item2">Valor del segundo componente de la tupla.</param>
        <param name="item3">Valor del tercer componente de la tupla.</param>
        <param name="item4">Valor del cuarto componente de la tupla</param>
        <param name="item5">Valor del quinto componente de la tupla.</param>
        <param name="item6">Valor del sexto componente de la tupla.</param>
        <param name="item7">Valor del séptimo componente de la tupla.</param>
        <param name="rest">Cualquier objeto <see langword="Tuple" /> genérico que contenga los valores de los restantes componentes de la tupla.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Tuple`8" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede usar estático <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método para crear instancias de un objeto de tupla de 8 (óctupla) sin tener que especificar explícitamente los tipos de sus componentes. En el ejemplo siguiente se usa el <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método para crear instancias de un objeto de tupla de 8 que contiene números primos menores que 20.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Esto es equivalente a la siguiente llamada a la <xref:System.Tuple%607.%23ctor%2A> constructor de clase.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 Sin embargo, estático <xref:System.Tuple.Create%2A?displayProperty=nameWithType> método no se puede usar para crear un objeto de tupla con más de ocho componentes.  
  
 Cuando se usa el <xref:System.Tuple%608.%23ctor%2A> constructor para crear una tupla de n con ocho o más componentes, usa el `rest` parámetro para crear una tupla de n anidada que tiene entre uno y siete componentes. Mediante el uso de niveles de anidamiento sucesivos, puede crear una tupla de n que tiene un número prácticamente ilimitado de componentes. Por ejemplo, para crear una tupla de 25, crear una instancia de un <xref:System.Tuple%608> objeto con tres niveles de anidamiento, como sigue:  
  
-   Exterior <xref:System.Tuple%608> objeto contiene el primer al séptimo componente. Su <xref:System.Tuple%608.Rest%2A> propiedad proporciona acceso a un <xref:System.Tuple%608> objeto en el primer nivel de anidamiento.  
  
-   Anidado exterior <xref:System.Tuple%608> objeto contiene el componente octavo al decimocuarto y su <xref:System.Tuple%608.Rest%2A> propiedad proporciona acceso a un <xref:System.Tuple%608> objeto en el segundo nivel de anidamiento.  
  
-   El <xref:System.Tuple%608> objeto en el segundo nivel de anidamiento contiene del decimoquinto al vigésimo primer componente y su <xref:System.Tuple%608.Rest%2A> propiedad proporciona acceso a un <xref:System.Tuple%604> objeto en el tercer nivel de anidamiento.  
  
-   La tupla más interna es un <xref:System.Tuple%604> objeto que contiene los componentes de veinticinco vigésimo segundo a través.  
  
   
  
## Examples  
 El ejemplo siguiente crea una tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de cada censo de 1860 a 2000. El primer componente de la tupla es el nombre de la ciudad. El segundo componente es la fecha de inicio de la serie de datos y el tercer componente es la población en la fecha de inicio. Cada componente subsiguiente proporciona la población en intervalos de diez años. El ejemplo utiliza dos niveles de anidamiento para crear la tupla de 17: define una tupla de 7 cuyo componentes tercero a séptimo contienen datos de población de 1860 a 1900, una tupla de 7 anidada que contiene los datos de población de 1910 a 1970, e interior anidado 3-tupla que contiene datos de población de 1980 a 2000.  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rest" /> no es un objeto <see langword="Tuple" /> genérico.</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto que se va a comparar con esta instancia.</param>
        <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`8" /> actual es igual que el objeto especificado.</summary>
        <returns>
          <see langword="true" /> si la instancia actual es igual que el objeto especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `obj` parámetro se considera igual a la instancia actual si cumple todas las condiciones siguientes:  
  
-   Es un <xref:System.Tuple%608> objeto.  
  
-   Tiene el mismo número total de componentes que son de los mismos tipos que la instancia actual.  
  
-   Sus componentes (incluidos los componentes anidados) son iguales a los de la instancia actual. Igualdad viene determinada por el comparador de igualdad predeterminado para cada componente.  
  
   
  
## Examples  
 En el ejemplo siguiente se define cinco <xref:System.Tuple%608> objetos que contienen números primos. A continuación, compara el primer objeto que tiene cada uno de los objetos restantes. Como se muestra en la salida, solo el primer y último <xref:System.Tuple%608> objetos son iguales, porque tienen un número idéntico de componentes con valores idénticos.  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calcula el código hash para el objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <returns>Código hash de un entero de 32 bits con signo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del primer componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor del primer componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%608.Item1%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%608.Item1%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%608> objeto y recuperar el primer elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El primer componente de la tupla de 17 es el nombre de la ciudad. El ejemplo se usa el <xref:System.Tuple%608.Item1%2A> propiedad para mostrar el nombre de la ciudad en el encabezado de tabla antes de mostrar los datos de población.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del segundo componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor del segundo componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%608.Item2%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%608.Item2%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%608> de objetos y recuperando el segundo elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El segundo componente de la tupla de 17 es el primer año de la serie de datos. En el ejemplo se asigna el valor de la <xref:System.Tuple%608.Item2%2A> propiedad a una variable y, a continuación, utiliza esa variable para representar el año cuyos datos se muestran.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del tercer componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor del tercer componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%608.Item3%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%608.Item3%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%608> de objetos y recuperando el tercer elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El tercer componente de la tupla de 17 es la población de 1860. El ejemplo se usa el <xref:System.Tuple%608.Item3%2A> propiedad para mostrar el valor de población y para calcular la tasa de cambio de población entre 1860 y 1870 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del cuarto componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor del cuarto componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%608.Item4%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%608.Item4%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%608> de objetos y recuperando el cuarto elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El cuarto componente de la tupla de 17 es la población de 1870. El ejemplo se usa el <xref:System.Tuple%608.Item4%2A> propiedad para mostrar el valor de población y para calcular la tasa de cambio de población entre 1870 y 1880 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del quinto componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor del quinto componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%608.Item5%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%608.Item5%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%608> de objetos y recuperando el quinto elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El quinto componente de la tupla de 17 es la población de 1880. El ejemplo se usa el <xref:System.Tuple%608.Item5%2A> propiedad para mostrar el valor de población y para calcular la tasa de cambio de población entre 1880 y 1890 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del sexto componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor del sexto componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%608.Item6%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%608.Item6%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%608> de objetos y recuperando el sexto elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El sexto componente de la tupla de 17 es la población de 1890. El ejemplo se usa el <xref:System.Tuple%608.Item6%2A> propiedad para mostrar el valor de población y para calcular la tasa de cambio de población entre 1900 y de 1890 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item7 : 'T7" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del séptimo componente del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor del séptimo componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede determinar dinámicamente el tipo de la <xref:System.Tuple%608.Item7%2A> componente en uno de dos maneras:  
  
-   Mediante una llamada a la `GetType` método en el valor devuelto por la <xref:System.Tuple%608.Item7%2A> propiedad.  
  
-   Recuperando el <xref:System.Type> objeto que representa el <xref:System.Tuple%608> de objetos y recuperando el séptimo elemento de la matriz devuelta por su <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El séptimo componente de la tupla de 17 es la población de 1900. El ejemplo se usa el <xref:System.Tuple%608.Item7%2A> propiedad para mostrar el valor de población y para calcular la tasa de cambio de población entre 1900 y 1910 anual.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberSignature Language="F#" Value="member this.Rest : 'Rest" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Rest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los componentes restantes del objeto <see cref="T:System.Tuple`8" /> actual.</summary>
        <value>Valor de los restantes componente del objeto <see cref="T:System.Tuple`8" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Tuple%608.Rest%2A> devuelve una propiedad `Tuple` objeto que permite el acceso a la octava aunque *n*componente de la tupla. Dependiendo del número total de componentes de la tupla, se pueden recuperar los valores del octavo al decimocuarto componentes desde anidado `Tuple` del objeto <xref:System.Tuple%608.Item1%2A> a través de <xref:System.Tuple%608.Item7%2A> propiedades. A continuación, puede usar el <xref:System.Tuple%608.Rest%2A> propiedad de un anidado <xref:System.Tuple%608> objeto para recuperar el `Tuple` objeto en el siguiente nivel de anidamiento.  
  
 Puede determinar dinámicamente el número de componentes de un anidado `Tuple` objeto devuelto por la <xref:System.Tuple%608.Rest%2A> propiedad extrayendo el dígito de su nombre de tipo. Esto se muestra en el ejemplo siguiente.  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 El ejemplo siguiente crea un objeto de tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 2000. El séptimo componente de la tupla de 17 es la población de 1900. El ejemplo se usa el <xref:System.Tuple%608.Rest%2A> propiedad para recuperar los valores del octavo al decimocuarto componentes y se usa el <xref:System.Tuple%608.Rest%2A> propiedad de anidado <xref:System.Tuple%608> objeto para recuperar los valores de los componentes restantes.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Objeto que se va a comparar con la instancia actual.</param>
        <param name="comparer">Un objeto que proporciona reglas personalizadas para la comparación.</param>
        <summary>Compara el objeto <see cref="T:System.Tuple`8" /> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</summary>
        <returns>Entero con signo que indica la posición relativa de esta instancia y <paramref name="other" /> en el criterio de ordenación, tal como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Descripción 
 </description></listheader><item><term> Un entero negativo 
 </term><description> Esta instancia precede a <paramref name="other" />.  
  
 </description></item><item><term> Cero 
 </term><description> En el criterio de ordenación, esta instancia y <paramref name="other" /> tienen la misma posición.  
  
 </description></item><item><term> Un entero positivo. 
 </term><description> Esta instancia es posterior a <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación de interfaz explícita. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%608> se convierte en una interfaz <xref:System.Collections.IStructuralComparable>.  
  
 Este método le permite definir las comparaciones personalizadas de <xref:System.Tuple%608> objetos. Por ejemplo, puede usar este método al orden <xref:System.Tuple%608> objetos según el valor de un componente específico.  
  
 Aunque puede llamar directamente a este método, normalmente se denomina mediante la ordenación de recopilación de los métodos que incluyen <xref:System.Collections.IComparer> parámetros para ordenar los miembros de una colección. Por ejemplo, se llamó el <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> método y el <xref:System.Collections.SortedList.Add%2A> método de un <xref:System.Collections.SortedList> objeto cuyas instancias se crean mediante el uso de la <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> constructor.  
  
> [!CAUTION]
>  El <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> método está pensado para su uso en las operaciones de ordenación. No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales. Para determinar si dos objetos son iguales, llame a la <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una matriz de <xref:System.Tuple%608> objetos que contiene los datos de población de cuatro ciudades de Estados Unidos de 1940 a 2000. Primer componente es de óctupla es el nombre de la ciudad. Los seis componentes restantes representan la población en intervalos de 10 años de 1940 a 2000.  
  
 El `PopulationComparer` clase proporciona un <xref:System.Collections.IComparer> implementación que permite a la matriz de óctuplas por cualquiera de sus componentes. Se proporcionan dos valores para el `PopulationComparer` clase en su constructor: la posición del componente que define el criterio de ordenación, y un <xref:System.Boolean> valor que indica si los objetos de tupla deben ordenarse en orden ascendente o descendente.  
  
 El ejemplo, a continuación, muestra los elementos de la matriz sin ordenar, ordena por el tercer componente (la población de 1950) y mostrarlos y, a continuación, ordena por el octavo componente (la población de 2000) y mostrarlos.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> no es un objeto <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Objeto que se va a comparar con esta instancia.</param>
        <param name="comparer">Un objeto que define el método que se usará para evaluar si los dos objetos son iguales.</param>
        <summary>Devuelve un valor que indica si el objeto <see cref="T:System.Tuple`8" /> actual es igual que el objeto especificado según el método de comparación especificado.</summary>
        <returns>
          <see langword="true" /> si la instancia actual es igual que el objeto especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%608> se convierte en una interfaz <xref:System.Collections.IStructuralEquatable>.  
  
 El <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> se denomina implementación sólo si `other` no es `null`, y si puede ser correctamente, convierta (en C#) o convertir (en Visual Basic) a un <xref:System.Tuple%608> objeto que tiene el mismo número total de componentes (las de incluidas anidados `Tuple` objetos) de los mismos tipos que la instancia actual. El <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> método primeras pasadas el <xref:System.Tuple%608.Item1%2A> valores de la <xref:System.Tuple%608> objetos que se comparará el <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementación. Si esta llamada al método devuelve `true`, el método se llama de nuevo y pasa el <xref:System.Tuple%608.Item2%2A> valores de las dos <xref:System.Tuple%608> objetos. Este proceso continúa hasta que devuelva la llamada al método `false` cuando compara un par de valores o los dos <xref:System.Tuple%608.Rest%2A> valores se pasan al método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Objeto cuyo método <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcula el código hash del objeto <see cref="T:System.Tuple`8" /> actual.</param>
        <summary>Calcula el código hash del objeto <see cref="T:System.Tuple`8" /> actual usando el método de cálculo especificado.</summary>
        <returns>Código hash de un entero de 32 bits con signo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%608> se convierte en una interfaz <xref:System.Collections.IStructuralEquatable>.  
  
 El método simplemente ajusta una llamada a la `comparer` del objeto <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementación.  
  
 El algoritmo utilizado para calcular el código hash debe devolver el mismo código hash para dos <xref:System.Tuple%608> objetos que se consideran iguales.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
        <summary>Compara el objeto <see cref="T:System.Tuple`8" /> actual con un objeto especificado y devuelve un entero que indica si el objeto actual es anterior, posterior o está en la misma posición que el objeto especificado en el criterio de ordenación.</summary>
        <returns>Entero con signo que indica la posición relativa de esta instancia y <paramref name="obj" /> en el criterio de ordenación, tal como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Descripción 
 </description></listheader><item><term> Un entero negativo 
 </term><description> Esta instancia precede a <paramref name="obj" />.  
  
 </description></item><item><term> Cero 
 </term><description> En el criterio de ordenación, esta instancia y <paramref name="obj" /> tienen la misma posición.  
  
 </description></item><item><term> Un entero positivo. 
 </term><description> Esta instancia es posterior a <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Tuple%608> se convierte en una interfaz <xref:System.IComparable>.  
  
 Este método proporciona la <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementación para el <xref:System.Tuple%608> clase. Aunque el método se puede llamar directamente, normalmente se denomina mediante las sobrecargas predeterminadas de ordenación a la colección de métodos, como <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> y <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, para ordenar los miembros de una colección.  
  
> [!CAUTION]
>  El <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> método está pensado para su uso en las operaciones de ordenación. No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales. Para determinar si dos objetos son iguales, llame a la <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> método.  
  
 Este método utiliza al comparador de objeto predeterminado para comparar cada componente.  
  
   
  
## Examples  
 El ejemplo siguiente crea una matriz de óctuplas cuyos componentes son enteros que contienen un rango de números primos. El ejemplo muestra los elementos de la matriz sin ordenar, ordena la matriz y, a continuación, muestra la matriz en el criterio de ordenación. El resultado muestra que se ha ordenado la matriz por <xref:System.Tuple%608.Item1%2A>, o el primer componente de la tupla. Tenga en cuenta que el ejemplo no llama directamente el <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> método. Este método se llama de forma implícita el <xref:System.Array.Sort%28System.Array%29> método para cada elemento de la matriz.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> no es un objeto <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice del elemento <see langword="Tuple" /> especificado. <paramref name="index" /> puede oscilar entre 0 y <see langword="Item1" /> hasta uno menos que el número de elementos de <see langword="Tuple" />.</param>
        <summary>Obtiene el valor del elemento <see langword="Tuple" /> especificado.</summary>
        <value>Valor del elemento <see langword="Tuple" /> que se encuentra en la posición especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> propiedad es una implementación de interfaz explícita. Para invocarlo, debe convertir o convertir el <xref:System.Tuple%608> objeto a un <xref:System.Runtime.CompilerServices.ITuple> objeto de interfaz.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> es menor que 0.  
  
O bien 
 <paramref name="index" /> es mayor o igual que <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos de <see langword="Tuple" />.</summary>
        <value>Número de elementos incluidos en <see langword="Tuple" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> propiedad es una implementación de interfaz explícita. Para invocarlo, debe convertir o convertir el <xref:System.Tuple%608> tipo a un <xref:System.Runtime.CompilerServices.ITuple> objeto de interfaz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una cadena que representa el valor de esta instancia de <see cref="T:System.Tuple`8" />.</summary>
        <returns>Representación en forma de cadena de este objeto <see cref="T:System.Tuple`8" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena devuelta por este método adopta la forma (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`,  *Item8*...), donde *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, *Item6*, y *Item7* representan los valores de la <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, y <xref:System.Tuple%608.Item7%2A> propiedades. *Item8* representa el valor de la <xref:System.Tuple%608> del objeto `Next.Item1` propiedad. El valor de cualquier componente anidado adicional seguir *Item8*. Si alguno de los valores de propiedad es `null`, se representa como <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 El ejemplo siguiente crea una tupla de 17 que contiene los datos de población de la ciudad de Detroit, Michigan, de 1860 a 1900. A continuación, usa el <xref:System.Tuple%608.ToString%2A> método para mostrar los datos de la tupla.  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>