<Type Name="Convert" FullName="System.Convert">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1153148dda3a8e4a6d4faf1dafb59b372fc6f0d6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39768233" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Convert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Convert extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Convert" />
  <TypeSignature Language="VB.NET" Value="Public Class Convert" />
  <TypeSignature Language="C++ CLI" Value="public ref class Convert abstract sealed" />
  <TypeSignature Language="F#" Value="type Convert = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="da069-101">Convierte un tipo de datos base en otro tipo de datos base.</span>
      <span class="sxs-lookup">
        <span data-stu-id="da069-101">Converts a base data type to another base data type.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-102">Los métodos estáticos de la <xref:System.Convert> clase se utilizan principalmente para admitir la conversión a y desde los tipos de datos base en .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="da069-102">The static methods of the <xref:System.Convert> class are primarily used to support conversion to and from the base data types in the .NET Framework.</span></span> <span data-ttu-id="da069-103">Los tipos bases admitidos son <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> y <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-103">The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>.</span></span> <span data-ttu-id="da069-104">Además, el <xref:System.Convert> clase incluye métodos para admitir otros tipos de conversiones.</span><span class="sxs-lookup"><span data-stu-id="da069-104">In addition, the <xref:System.Convert> class includes methods to support  other kinds of conversions.</span></span>  
  
 <span data-ttu-id="da069-105">Este tema consta de las siguientes secciones:</span><span class="sxs-lookup"><span data-stu-id="da069-105">This topic consists of the following sections:</span></span>  
  
 <span data-ttu-id="da069-106">[Conversiones de tipos Base](#Base) </span><span class="sxs-lookup"><span data-stu-id="da069-106">[Conversions to and from Base Types](#Base) </span></span>  
 <span data-ttu-id="da069-107">[Números enteros](#NonDecimal) </span><span class="sxs-lookup"><span data-stu-id="da069-107">[Non-Decimal Numbers](#NonDecimal) </span></span>  
 <span data-ttu-id="da069-108">[Conversiones de objetos personalizados en tipos Base](#Custom) </span><span class="sxs-lookup"><span data-stu-id="da069-108">[Conversions from Custom Objects to Base Types](#Custom) </span></span>  
 <span data-ttu-id="da069-109">[Información de formato específica de la referencia cultural](#Culture) </span><span class="sxs-lookup"><span data-stu-id="da069-109">[Culture-Specific Formatting Information](#Culture) </span></span>  
 <span data-ttu-id="da069-110">[Codificación Base64](#Base64) </span><span class="sxs-lookup"><span data-stu-id="da069-110">[Base64 Encoding](#Base64) </span></span>  
 [<span data-ttu-id="da069-111">Otras conversiones comunes</span><span class="sxs-lookup"><span data-stu-id="da069-111">Other Common Conversions</span></span>](#Other)  
  
<a name="Base"></a>   
## <a name="conversions-to-and-from-base-types"></a><span data-ttu-id="da069-112">Conversiones de tipos Base</span><span class="sxs-lookup"><span data-stu-id="da069-112">Conversions to and from Base Types</span></span>  
 <span data-ttu-id="da069-113">Existe un método de conversión para convertir a cada tipo base para todos los demás tipos base.</span><span class="sxs-lookup"><span data-stu-id="da069-113">A conversion method exists to convert every base type to every other base type.</span></span> <span data-ttu-id="da069-114">Sin embargo, la llamada real a un método de conversión puede producir uno de cinco resultados, dependiendo del valor del tipo base en tiempo de ejecución y el tipo de base de destino.</span><span class="sxs-lookup"><span data-stu-id="da069-114">However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type.</span></span> <span data-ttu-id="da069-115">Estos cinco resultados son:</span><span class="sxs-lookup"><span data-stu-id="da069-115">These five outcomes are:</span></span>  
  
-   <span data-ttu-id="da069-116">Ninguna conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-116">No conversion.</span></span> <span data-ttu-id="da069-117">Esto se produce cuando se realiza un intento para convertir de un tipo a sí mismo (por ejemplo, mediante una llamada a <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType> con un argumento de tipo <xref:System.Int32>).</span><span class="sxs-lookup"><span data-stu-id="da069-117">This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType> with an argument of type <xref:System.Int32>).</span></span> <span data-ttu-id="da069-118">En este caso, el método simplemente devuelve una instancia del tipo original.</span><span class="sxs-lookup"><span data-stu-id="da069-118">In this case, the method simply returns an instance of the original type.</span></span>  
  
-   <span data-ttu-id="da069-119">Una clase <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="da069-119">An <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="da069-120">Esto se produce cuando no se admite una conversión determinada.</span><span class="sxs-lookup"><span data-stu-id="da069-120">This occurs when a particular conversion is not supported.</span></span> <span data-ttu-id="da069-121">Un <xref:System.InvalidCastException> se produce para las conversiones siguientes:</span><span class="sxs-lookup"><span data-stu-id="da069-121">An <xref:System.InvalidCastException> is thrown for the following conversions:</span></span>  
  
    -   <span data-ttu-id="da069-122">Conversiones de <xref:System.Char> a <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, o <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="da069-122">Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>.</span></span>  
  
    -   <span data-ttu-id="da069-123">Conversiones de <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, o <xref:System.DateTime> a <xref:System.Char>.</span><span class="sxs-lookup"><span data-stu-id="da069-123">Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>.</span></span>  
  
    -   <span data-ttu-id="da069-124">Conversiones de <xref:System.DateTime> a cualquier otro tipo, excepto <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-124">Conversions from <xref:System.DateTime> to any other type except <xref:System.String>.</span></span>  
  
    -   <span data-ttu-id="da069-125">Conversiones de cualquier otro tipo, excepto <xref:System.String>a <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="da069-125">Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>.</span></span>  
  
-   <span data-ttu-id="da069-126">Objeto <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="da069-126">A <xref:System.FormatException>.</span></span> <span data-ttu-id="da069-127">Esto se produce cuando el intento de convertir un valor de cadena en cualquier otro tipo base porque la cadena no está en el formato adecuado.</span><span class="sxs-lookup"><span data-stu-id="da069-127">This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format.</span></span> <span data-ttu-id="da069-128">Se produce la excepción para las conversiones siguientes:</span><span class="sxs-lookup"><span data-stu-id="da069-128">The exception is thrown for the following conversions:</span></span>  
  
    -   <span data-ttu-id="da069-129">Una cadena que se va a convertir en un <xref:System.Boolean> valor no es igual <xref:System.Boolean.TrueString?displayProperty=nameWithType> o <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-129">A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=nameWithType> or <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="da069-130">Una cadena que se va a convertir en un <xref:System.Char> valor consta de varios caracteres.</span><span class="sxs-lookup"><span data-stu-id="da069-130">A string to be converted to a <xref:System.Char> value consists of multiple characters.</span></span>  
  
    -   <span data-ttu-id="da069-131">Una cadena que se va a convertir en cualquier tipo numérico no se reconoce como un número válido.</span><span class="sxs-lookup"><span data-stu-id="da069-131">A string to be converted to any numeric type is not recognized as a valid number.</span></span>  
  
    -   <span data-ttu-id="da069-132">Una cadena que se va a convertir en un <xref:System.DateTime> no se reconoce como un valor de hora y fecha válida.</span><span class="sxs-lookup"><span data-stu-id="da069-132">A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value.</span></span>  
  
-   <span data-ttu-id="da069-133">Una conversión correcta.</span><span class="sxs-lookup"><span data-stu-id="da069-133">A successful conversion.</span></span> <span data-ttu-id="da069-134">Para las conversiones entre dos tipos bases diferentes no aparece en los resultados anteriores, todas las conversiones de ampliación, así como todas las conversiones de restricción que no tienen como resultado una pérdida de datos se realizará correctamente y el método devolverá un valor del tipo base del destino.</span><span class="sxs-lookup"><span data-stu-id="da069-134">For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.</span></span>  
  
-   <span data-ttu-id="da069-135">Una clase <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="da069-135">An <xref:System.OverflowException>.</span></span> <span data-ttu-id="da069-136">Esto se produce cuando una conversión de restricción produce una pérdida de datos.</span><span class="sxs-lookup"><span data-stu-id="da069-136">This occurs when a narrowing conversion results in a loss of data.</span></span> <span data-ttu-id="da069-137">Por ejemplo, intenta convertir un <xref:System.Int32> instancia cuyo valor es 10000 para un <xref:System.Byte> tipo produce una <xref:System.OverflowException> porque 10000 está fuera del intervalo de la <xref:System.Byte> tipo de datos.</span><span class="sxs-lookup"><span data-stu-id="da069-137">For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.</span></span>  
  
 <span data-ttu-id="da069-138">No se producirá una excepción si la conversión de un tipo numérico tiene como resultado una pérdida de precisión (es decir, la pérdida de algunos de los dígitos menos significativos).</span><span class="sxs-lookup"><span data-stu-id="da069-138">An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits).</span></span> <span data-ttu-id="da069-139">Sin embargo, se producirá una excepción si el resultado es mayor que puede representarse mediante el tipo de valor devuelto del método de conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-139">However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.</span></span>  
  
 <span data-ttu-id="da069-140">Por ejemplo, cuando un <xref:System.Double> se convierte en un <xref:System.Single>, podría producirse una pérdida de precisión, pero se produce ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-140">For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown.</span></span> <span data-ttu-id="da069-141">Sin embargo, si la magnitud de la <xref:System.Double> es demasiado grande para representarlo mediante un <xref:System.Single>, se produce una excepción de desbordamiento.</span><span class="sxs-lookup"><span data-stu-id="da069-141">However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.</span></span>  
  
<a name="NonDecimal"></a>   
## <a name="non-decimal-numbers"></a><span data-ttu-id="da069-142">Números enteros</span><span class="sxs-lookup"><span data-stu-id="da069-142">Non-Decimal Numbers</span></span>  
 <span data-ttu-id="da069-143">La <xref:System.Convert> clase incluye métodos estáticos que se pueden llamar para convertir valores enteros en representaciones de cadena que no sea decimal, y convertir las cadenas que representan los números no decimal en valores enteros.</span><span class="sxs-lookup"><span data-stu-id="da069-143">The <xref:System.Convert> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values.</span></span> <span data-ttu-id="da069-144">Cada uno de estos métodos de conversión incluye un `base` argumento que le permite especificar el sistema numérico; binaria (base 2), octal (base 8) y hexadecimal (base 16), así como número decimal (base 10).</span><span class="sxs-lookup"><span data-stu-id="da069-144">Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10).</span></span> <span data-ttu-id="da069-145">Hay un conjunto de métodos para convertir cada uno de los tipos enteros primitivos conforme a CLS en una cadena y otro para convertir una cadena en cada uno de los tipos primitivos de enteros:</span><span class="sxs-lookup"><span data-stu-id="da069-145">There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:</span></span>  
  
-   <span data-ttu-id="da069-146"><xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> y <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, para convertir un valor de byte a y desde una cadena en una base especificada.</span><span class="sxs-lookup"><span data-stu-id="da069-146"><xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="da069-147"><xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> y <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, para convertir un entero con signo de 16 bits a y desde una cadena en una base especificada.</span><span class="sxs-lookup"><span data-stu-id="da069-147"><xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="da069-148"><xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> y <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, para convertir un entero con signo de 32 bits a y desde una cadena en una base especificada.</span><span class="sxs-lookup"><span data-stu-id="da069-148"><xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="da069-149"><xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> y <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, para convertir un entero con signo de 64 bits a y desde una cadena en una base especificada.</span><span class="sxs-lookup"><span data-stu-id="da069-149"><xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base.</span></span>  
  
-   <span data-ttu-id="da069-150"><xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, para convertir la representación de cadena de un valor de bytes en un formato especificado en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-150"><xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte.</span></span>  
  
-   <span data-ttu-id="da069-151"><xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, para convertir la representación de cadena de un entero en un formato especificado en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-151"><xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.</span></span>  
  
-   <span data-ttu-id="da069-152"><xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, para convertir la representación de cadena de un entero en un formato especificado en un entero de 32 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-152"><xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.</span></span>  
  
-   <span data-ttu-id="da069-153"><xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, para convertir la representación de cadena de un entero en un formato especificado en un entero de 64 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-153"><xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.</span></span>  
  
 <span data-ttu-id="da069-154">El siguiente ejemplo convierte el valor de <xref:System.Int16.MaxValue?displayProperty=nameWithType> en una cadena en todos admiten formatos numéricos.</span><span class="sxs-lookup"><span data-stu-id="da069-154">The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=nameWithType> to a string in all supported numeric formats.</span></span> <span data-ttu-id="da069-155">A continuación, se convierte el valor de cadena de nuevo a un <xref:System.Int16> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-155">It then converts the string value back to a <xref:System.Int16> value.</span></span>  
  
 [!code-cpp[System.Convert#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/NonDecimal1.cpp#2)]
 [!code-csharp[System.Convert#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/NonDecimal1.cs#2)]
 [!code-vb[System.Convert#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/NonDecimal1.vb#2)]  
  
<a name="Custom"></a>   
## <a name="conversions-from-custom-objects-to-base-types"></a><span data-ttu-id="da069-156">Conversiones de objetos personalizados en tipos Base</span><span class="sxs-lookup"><span data-stu-id="da069-156">Conversions from Custom Objects to Base Types</span></span>  
 <span data-ttu-id="da069-157">Además de admitir las conversiones entre los tipos base, el <xref:System.Convert> método admite la conversión de cualquier tipo personalizado en cualquier tipo base.</span><span class="sxs-lookup"><span data-stu-id="da069-157">In addition to supporting conversions between the base types, the <xref:System.Convert> method supports conversion of any custom type to any base type.</span></span> <span data-ttu-id="da069-158">Para ello, el tipo personalizado debe implementar la <xref:System.IConvertible> interfaz, que define métodos para convertir el tipo de implementación en cada uno de los tipos base.</span><span class="sxs-lookup"><span data-stu-id="da069-158">To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types.</span></span> <span data-ttu-id="da069-159">Las conversiones que no son compatibles con un tipo determinado se deben producir una <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="da069-159">Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.</span></span>  
  
 <span data-ttu-id="da069-160">Cuando el <xref:System.Convert.ChangeType%2A> método se pasa un tipo personalizado como su primer parámetro, o cuando el `Convert.To` *tipo* método (como <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType> o <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> se llama y se pasa una instancia de un tipo personalizado como su primera parámetro, el <xref:System.Convert> método, llama a su vez, el tipo personalizado <xref:System.IConvertible> implementación para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-160">When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> is called and passed an instance of a custom type as its first parameter, the <xref:System.Convert> method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion.</span></span> <span data-ttu-id="da069-161">Para obtener más información, consulte [conversión de tipos en .NET Framework](~/docs/standard/base-types/type-conversion.md).</span><span class="sxs-lookup"><span data-stu-id="da069-161">For more information, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="culture-specific-formatting-information"></a><span data-ttu-id="da069-162">Información de formato específica de la referencia cultural</span><span class="sxs-lookup"><span data-stu-id="da069-162">Culture-Specific Formatting Information</span></span>  
 <span data-ttu-id="da069-163">Todos los métodos de conversión de tipo base y la <xref:System.Convert.ChangeType%2A> método incluyen sobrecargas que tienen un parámetro de tipo <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-163">All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-164">Por ejemplo, el <xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType> método tiene las siguientes dos sobrecargas:</span><span class="sxs-lookup"><span data-stu-id="da069-164">For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType> method has the following two overloads:</span></span>  
  
-   <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>  
  
-   <xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>  
  
 <span data-ttu-id="da069-165">El <xref:System.IFormatProvider> parámetro puede proporcionar información de formato de referencia cultural específica para ayudar en el proceso de conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-165">The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process.</span></span> <span data-ttu-id="da069-166">Sin embargo, se omite la mayoría de los métodos de conversión de tipo base.</span><span class="sxs-lookup"><span data-stu-id="da069-166">However, it is ignored by most of the base type conversion methods.</span></span> <span data-ttu-id="da069-167">Se usa únicamente por los siguientes métodos de conversión de tipo base. Si un `null` <xref:System.IFormatProvider> argumento se pasa a estos métodos, el <xref:System.Globalization.CultureInfo> se usa el objeto que representa la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-167">It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
-   <span data-ttu-id="da069-168">Los métodos que convierten un valor a un tipo numérico.</span><span class="sxs-lookup"><span data-stu-id="da069-168">By methods that convert a value to a numeric type.</span></span> <span data-ttu-id="da069-169">El <xref:System.IFormatProvider> parámetro se utiliza en la sobrecarga que tiene parámetros de tipo <xref:System.String> y <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-169">The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-170">También se utiliza en la sobrecarga que tiene parámetros de tipo <xref:System.Object> y <xref:System.IFormatProvider> si el tiempo de ejecución el objeto de tipo es un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-170">It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.</span></span>  
  
-   <span data-ttu-id="da069-171">Los métodos que convierten un valor en una fecha y hora.</span><span class="sxs-lookup"><span data-stu-id="da069-171">By methods that convert a value to a date and time.</span></span> <span data-ttu-id="da069-172">El <xref:System.IFormatProvider> parámetro se utiliza en la sobrecarga que tiene parámetros de tipo <xref:System.String> y <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-172">The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-173">También se utiliza en la sobrecarga que tiene parámetros de tipo <xref:System.Object> y <xref:System.IFormatProvider> si el tiempo de ejecución el objeto de tipo es un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-173">It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.</span></span>  
  
-   <span data-ttu-id="da069-174">Por el <xref:System.Convert.ToString%2A?displayProperty=nameWithType> sobrecargas que incluyen un <xref:System.IFormatProvider> parámetro y que convierten un valor numérico en una cadena o un <xref:System.DateTime> valor en una cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-174">By the <xref:System.Convert.ToString%2A?displayProperty=nameWithType> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string.</span></span>  
  
 <span data-ttu-id="da069-175">Sin embargo, cualquier tipo definido por el usuario que implementa <xref:System.IConvertible> puede hacer que el uso de la <xref:System.IFormatProvider> parámetro.</span><span class="sxs-lookup"><span data-stu-id="da069-175">However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter.</span></span>  
  
<a name="Base64"></a>   
## <a name="base64-encoding"></a><span data-ttu-id="da069-176">Codificación Base64</span><span class="sxs-lookup"><span data-stu-id="da069-176">Base64 Encoding</span></span>  
 <span data-ttu-id="da069-177">Codificación Base64, datos binarios convierte en una cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-177">Base64 encoding converts binary data to a string.</span></span> <span data-ttu-id="da069-178">Datos expresados como dígitos en base 64 se pueden transmitir fácilmente a través de canales de datos que solo se pueden transmitir los caracteres de 7 bits.</span><span class="sxs-lookup"><span data-stu-id="da069-178">Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters.</span></span> <span data-ttu-id="da069-179">El <xref:System.Convert> clase incluye los siguientes métodos para admitir la codificación base64: un conjunto de métodos admite la conversión de una matriz de bytes desde y hacia un <xref:System.String> o a y desde una matriz de caracteres Unicode que consta de caracteres de dígitos en base 64.</span><span class="sxs-lookup"><span data-stu-id="da069-179">The <xref:System.Convert> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.</span></span>  
  
-   <span data-ttu-id="da069-180"><xref:System.Convert.ToBase64String%2A>, que convierte una matriz de bytes en una cadena codificada en base64.</span><span class="sxs-lookup"><span data-stu-id="da069-180"><xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string.</span></span>  
  
-   <span data-ttu-id="da069-181"><xref:System.Convert.ToBase64CharArray%2A>, que convierte una matriz de bytes en una matriz de caracteres con codificación base64.</span><span class="sxs-lookup"><span data-stu-id="da069-181"><xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array.</span></span>  
  
-   <span data-ttu-id="da069-182"><xref:System.Convert.FromBase64String%2A>, que convierte una cadena codificada en base64 en una matriz de bytes.</span><span class="sxs-lookup"><span data-stu-id="da069-182"><xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array.</span></span>  
  
-   <span data-ttu-id="da069-183"><xref:System.Convert.FromBase64CharArray%2A>, que convierte una matriz de caracteres con codificación base64 en una matriz de bytes.</span><span class="sxs-lookup"><span data-stu-id="da069-183"><xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array.</span></span>  
  
<a name="Other"></a>   
## <a name="other-common-conversions"></a><span data-ttu-id="da069-184">Otras conversiones comunes</span><span class="sxs-lookup"><span data-stu-id="da069-184">Other Common Conversions</span></span>  
 <span data-ttu-id="da069-185">Puede usar otras clases en .NET Framework para realizar algunas conversiones que no son compatibles con los métodos estáticos de la <xref:System.Convert> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-185">You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <xref:System.Convert> class.</span></span>  <span data-ttu-id="da069-186">Se incluyen los siguientes:</span><span class="sxs-lookup"><span data-stu-id="da069-186">These include:</span></span>  
  
 <span data-ttu-id="da069-187">Conversión a matrices de bytes</span><span class="sxs-lookup"><span data-stu-id="da069-187">Conversion to byte arrays</span></span>  
 <span data-ttu-id="da069-188">El <xref:System.BitConverter> clase proporciona métodos que convierten los tipos numéricos primitivos (incluido <xref:System.Boolean>) para matrices de bytes y de byte matrices de nuevo en tipos de datos primitivos.</span><span class="sxs-lookup"><span data-stu-id="da069-188">The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types.</span></span>  
  
 <span data-ttu-id="da069-189">Codificación de caracteres y descodificar</span><span class="sxs-lookup"><span data-stu-id="da069-189">Character encoding and decoding</span></span>  
 <span data-ttu-id="da069-190">El <xref:System.Text.Encoding> clase y sus clases derivadas (como <xref:System.Text.UnicodeEncoding> y <xref:System.Text.UTF8Encoding>) proporcionan métodos para codificar una matriz de caracteres o una cadena (es decir, convertirlos a una matriz de bytes en una codificación determinada) y para descodificar una codificada de bytes de matriz (es decir, convertir una matriz de bytes a caracteres Unicode codificados UTF16.</span><span class="sxs-lookup"><span data-stu-id="da069-190">The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters.</span></span> <span data-ttu-id="da069-191">Para obtener más información, consulte [codificación de caracteres en .NET Framework](~/docs/standard/base-types/character-encoding.md)</span><span class="sxs-lookup"><span data-stu-id="da069-191">For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-192">En el ejemplo siguiente se muestra algunos de los métodos de conversión en el <xref:System.Convert> clase, incluidas <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, y <xref:System.Convert.ToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="da069-192">The following example demonstrates some of the conversion methods in the <xref:System.Convert> class, including <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, and <xref:System.Convert.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Convert#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert/CPP/converter.cpp#1)]
 [!code-csharp[System.Convert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert/CS/converter.cs#1)]
 [!code-vb[System.Convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert/VB/converter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.SByte" />
    <altmember cref="T:System.Int16" />
    <altmember cref="T:System.Int32" />
    <altmember cref="T:System.Int64" />
    <altmember cref="T:System.Byte" />
    <altmember cref="T:System.UInt16" />
    <altmember cref="T:System.UInt32" />
    <altmember cref="T:System.UInt64" />
    <altmember cref="T:System.Single" />
    <altmember cref="T:System.Double" />
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Boolean" />
    <altmember cref="T:System.Char" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="ChangeType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-193">Devuelve un objeto de un tipo especificado cuyo valor es equivalente a un objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-193">Returns an object of a specified type whose value is equivalent to a specified object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeType (value As Object, conversionType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, Type ^ conversionType);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * Type -&gt; obj" Usage="System.Convert.ChangeType (value, conversionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-194">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-194">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="conversionType">
          <span data-ttu-id="da069-195">Tipo de objeto que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-195">The type of object to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-196">Devuelve un objeto del tipo especificado y cuyo valor es equivalente al objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-196">Returns an object of the specified type and whose value is equivalent to the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-197">Objeto cuyo tipo es <paramref name="conversionType" /> y cuyo valor es equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-197">An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-198">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-198">-or-</span>
          </span>
          <span data-ttu-id="da069-199">Una referencia nula (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> no es un tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-199">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is not a value type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-200"><xref:System.Convert.ChangeType%2A> es un método de conversión de uso general que convierte el objeto especificado por `value` a `conversionType`.</span><span class="sxs-lookup"><span data-stu-id="da069-200"><xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`.</span></span> <span data-ttu-id="da069-201">El `value` parámetro puede ser un objeto de cualquier tipo, y `conversionType` también puede ser un <xref:System.Type> objeto que representa cualquier tipo base o personalizado.</span><span class="sxs-lookup"><span data-stu-id="da069-201">The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type.</span></span> <span data-ttu-id="da069-202">Para la conversión se realice correctamente, `value` debe implementar la <xref:System.IConvertible> interfaz, porque el método simplemente ajusta una llamada a una adecuada <xref:System.IConvertible> método.</span><span class="sxs-lookup"><span data-stu-id="da069-202">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="da069-203">El método requiere que la conversión de `value` a `conversionType` admitirse.</span><span class="sxs-lookup"><span data-stu-id="da069-203">The method requires that conversion of `value` to `conversionType` be supported.</span></span>  
  
 <span data-ttu-id="da069-204">Este método usa la referencia cultural del subproceso actual para la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-204">This method uses the current thread's culture for the conversion.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-205">En el ejemplo siguiente se muestra el uso del método <xref:System.Convert.ChangeType%2A>.</span><span class="sxs-lookup"><span data-stu-id="da069-205">The following example illustrates the use of the <xref:System.Convert.ChangeType%2A> method.</span></span>  
  
 [!code-cpp[convertchangetype#1](~/samples/snippets/cpp/VS_Snippets_CLR/convertchangetype/CPP/convertchangetype.cpp#1)]
 [!code-csharp[convertchangetype#1](~/samples/snippets/csharp/VS_Snippets_CLR/convertchangetype/CS/convertchangetype.cs#1)]
 [!code-vb[convertchangetype#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convertchangetype/VB/convertchangetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-206">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-206">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-207">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-207">-or-</span>
          </span>
          <span data-ttu-id="da069-208">
            <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> es un tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-208">
              <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is a value type.</span>
          </span>
          <span data-ttu-id="da069-209">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-209">-or-</span>
          </span>
          <span data-ttu-id="da069-210">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-210">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-211">
            <paramref name="value" /> no es un formato reconocido por <paramref name="conversionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-211">
              <paramref name="value" /> is not in a format recognized by <paramref name="conversionType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-212">
            <paramref name="value" /> representa un número que está fuera del intervalo de <paramref name="conversionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-212">
              <paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-213">
            <paramref name="conversionType" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-213">
              <paramref name="conversionType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="da069-214">
            <para>El <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> método puede convertir un valor de enumeración en otro tipo. Sin embargo, otro tipo no puede convertir en un valor de enumeración, incluso si el tipo de origen es el tipo subyacente de la enumeración. Para convertir a un tipo en un valor de enumeración, utilice un operador de conversión (en C#) o una función de conversión (en Visual Basic). El ejemplo siguiente muestra la conversión desde y hacia un <c>continente</c> valor de enumeración.  [! código csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)] [! código vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)] el <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> método puede convertir un tipo que acepta valores NULL en otro tipo. Sin embargo, no puede convertir otro tipo en un valor de un tipo que acepta valores NULL, incluso si <paramref name="conversionType" /> es el tipo subyacente de la <see cref="T:System.Nullable`1" />. Para realizar la conversión, puede usar un operador de conversión (en C#) o una función de conversión (en Visual Basic). El ejemplo siguiente muestra la conversión a y desde un tipo que acepta valores NULL.  [! código csharp[System.Convert.ChangeType#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable.cs#7)] [! código vb[System.Convert.ChangeType#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable.vb#7)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-214">
              <para>The <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> method can convert an enumeration value to another type. However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration. To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic). The following example illustrates the conversion to and from a <c>Continent</c> enumeration value.  [!code-csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)] [!code-vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)]  The <see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /> method can convert a nullable type to another type. However, it cannot convert another type to a value of a nullable type, even if <paramref name="conversionType" /> is the underlying type of the <see cref="T:System.Nullable`1" />.To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic). The following example illustrates the conversion to and from a nullable type.  [!code-csharp[System.Convert.ChangeType#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable.cs#7)] [!code-vb[System.Convert.ChangeType#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable.vb#7)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.TypeCode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, TypeCode typeCode);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * TypeCode -&gt; obj" Usage="System.Convert.ChangeType (value, typeCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-215">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-215">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="typeCode">
          <span data-ttu-id="da069-216">Tipo de objeto que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-216">The type of object to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-217">Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-217">Returns an object of the specified type whose value is equivalent to the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-218">Objeto cuyo tipo subyacente es <paramref name="typeCode" /> y cuyo valor es equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-218">An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-219">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-219">-or-</span>
          </span>
          <span data-ttu-id="da069-220">Una referencia nula (<see langword="Nothing" /> en Visual Basic) si <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> es <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" /> u <see cref="F:System.TypeCode.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-220">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, or <see cref="F:System.TypeCode.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-221"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> es un método de conversión de uso general que convierte el objeto especificado por `value` a un tipo predefinido especificado por `typeCode`.</span><span class="sxs-lookup"><span data-stu-id="da069-221"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`.</span></span> <span data-ttu-id="da069-222">El `value` parámetro puede ser un objeto de cualquier tipo.</span><span class="sxs-lookup"><span data-stu-id="da069-222">The `value` parameter can be an object of any type.</span></span> <span data-ttu-id="da069-223">Para la conversión se realice correctamente, `value` debe implementar la <xref:System.IConvertible> interfaz, porque el método simplemente ajusta una llamada a una adecuada <xref:System.IConvertible> método.</span><span class="sxs-lookup"><span data-stu-id="da069-223">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="da069-224">El método también requiere que la conversión de `value` a `typeCode` admitirse.</span><span class="sxs-lookup"><span data-stu-id="da069-224">The method also requires that conversion of `value` to `typeCode` be supported.</span></span>  
  
 <span data-ttu-id="da069-225">El <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> método no admite la conversión de `value` a un tipo personalizado.</span><span class="sxs-lookup"><span data-stu-id="da069-225">The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method does not support the conversion of `value` to a custom type.</span></span> <span data-ttu-id="da069-226">Para llevar a cabo este tipo de conversión, llame a la <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-226">To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-227">El ejemplo siguiente muestra cómo usar el <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> método para cambiar un <xref:System.Object> al tipo especificado por el <xref:System.TypeCode> parámetro, si es posible.</span><span class="sxs-lookup"><span data-stu-id="da069-227">The following example illustrates how to use the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29> method to change an <xref:System.Object> to the type specified by the <xref:System.TypeCode> parameter, if possible.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype_01.cpp#2)]
 [!code-csharp[System.Convert.ChangeType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype01.cs#2)]
 [!code-vb[System.Convert.ChangeType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype01.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-228">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-228">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-229">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-229">-or-</span>
          </span>
          <span data-ttu-id="da069-230">
            <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> especifica un tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-230">
              <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> specifies a value type.</span>
          </span>
          <span data-ttu-id="da069-231">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-231">-or-</span>
          </span>
          <span data-ttu-id="da069-232">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-232">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-233">
            <paramref name="value" /> no es un formato reconocido por el tipo <paramref name="typeCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-233">
              <paramref name="value" /> is not in a format recognized by the <paramref name="typeCode" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-234">
            <paramref name="value" /> representa un número que está fuera del intervalo del tipo <paramref name="typeCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-234">
              <paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-235">
            <paramref name="typeCode" /> no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-235">
              <paramref name="typeCode" /> is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ChangeType (value As Object, conversionType As Type, provider As IFormatProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, Type ^ conversionType, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * Type * IFormatProvider -&gt; obj" Usage="System.Convert.ChangeType (value, conversionType, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-236">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-236">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="conversionType">
          <span data-ttu-id="da069-237">Tipo de objeto que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-237">The type of object to return.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-238">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-238">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-239">Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-239">Returns an object of the specified type whose value is equivalent to the specified object.</span>
          </span>
          <span data-ttu-id="da069-240">Un parámetro proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-240">A parameter supplies culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-241">Objeto cuyo tipo es <paramref name="conversionType" /> y cuyo valor es equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-241">An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-242">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-242">-or-</span>
          </span>
          <span data-ttu-id="da069-243">
            <paramref name="value" /> si el tipo <see cref="T:System.Type" /> de <paramref name="value" /> y <paramref name="conversionType" /> son iguales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-243">
              <paramref name="value" />, if the <see cref="T:System.Type" /> of <paramref name="value" /> and <paramref name="conversionType" /> are equal.</span>
          </span>
          <span data-ttu-id="da069-244">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-244">-or-</span>
          </span>
          <span data-ttu-id="da069-245">Una referencia nula (<see langword="Nothing" /> en Visual Basic), si <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> no es un tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-245">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is not a value type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-246"><xref:System.Convert.ChangeType%2A> es un método de conversión de uso general que convierte el objeto especificado por `value` a `conversionType`.</span><span class="sxs-lookup"><span data-stu-id="da069-246"><xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`.</span></span> <span data-ttu-id="da069-247">El `value` parámetro puede ser un objeto de cualquier tipo, y `conversionType` también puede ser un <xref:System.Type> objeto que representa cualquier tipo base o personalizado.</span><span class="sxs-lookup"><span data-stu-id="da069-247">The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type.</span></span> <span data-ttu-id="da069-248">Para la conversión se realice correctamente, `value` debe implementar la <xref:System.IConvertible> interfaz, porque el método simplemente ajusta una llamada a una adecuada <xref:System.IConvertible> método.</span><span class="sxs-lookup"><span data-stu-id="da069-248">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="da069-249">El método requiere que la conversión de `value` a `conversionType` admitirse.</span><span class="sxs-lookup"><span data-stu-id="da069-249">The method requires that conversion of `value` to `conversionType` be supported.</span></span>  
  
 <span data-ttu-id="da069-250">El `provider` parámetro es un <xref:System.IFormatProvider> implementación que proporciona información de formato para la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-250">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion.</span></span> <span data-ttu-id="da069-251">Cuándo y cómo se usa este parámetro depende subyacente <xref:System.IConvertible> implementación.</span><span class="sxs-lookup"><span data-stu-id="da069-251">Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation.</span></span> <span data-ttu-id="da069-252">Si `value` es un tipo de datos base, `provider` solo se usa para las conversiones siguientes:</span><span class="sxs-lookup"><span data-stu-id="da069-252">If `value` is a base data type, `provider` is used only for the following conversions:</span></span>  
  
-   <span data-ttu-id="da069-253">Conversión de un número en una cadena, o de una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="da069-253">Conversion from a number to a string, or from a string to a number.</span></span> <span data-ttu-id="da069-254">`provider` debe ser un <xref:System.Globalization.CultureInfo> objeto, un <xref:System.Globalization.NumberFormatInfo> objeto o una personalizada <xref:System.IFormatProvider> implementación que devuelve un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-254">`provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-255">Sin embargo, dado que el <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> método realiza la conversión mediante el especificador de formato "G" de forma predeterminada, el `provider` parámetro no tiene ningún efecto si `value` o el tipo de destino es un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-255">However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default "G" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.</span></span> <span data-ttu-id="da069-256">Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que representa la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-256">If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
-   <span data-ttu-id="da069-257">Conversión de un <xref:System.DateTime> valor como una cadena o desde una cadena a un <xref:System.DateTime> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-257">Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="da069-258">`provider` debe ser un <xref:System.Globalization.CultureInfo> o <xref:System.Globalization.DateTimeFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-258">`provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.</span></span> <span data-ttu-id="da069-259">Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que representa la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-259">If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
 <span data-ttu-id="da069-260">Si `value` es un tipo definido por la aplicación, su <xref:System.IConvertible> implementación puede utilizar el `provider` parámetro.</span><span class="sxs-lookup"><span data-stu-id="da069-260">If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-261">En el ejemplo siguiente se define una clase `Temperature` que implementa la interfaz <xref:System.IConvertible>.</span><span class="sxs-lookup"><span data-stu-id="da069-261">The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#3)]
 [!code-csharp[System.Convert.ChangeType#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#3)]
 [!code-vb[System.Convert.ChangeType#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#3)]  
  
 <span data-ttu-id="da069-262">En el ejemplo siguiente se crea una instancia de la `Temperature` clase y llama a la <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> método para convertirla en los tipos numéricos básicos compatibles con .NET Framework y a un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-262">The following example creates an instance of the `Temperature` class and calls the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method to convert it to the basic numeric types supported by the .NET Framework and to a <xref:System.String>.</span></span> <span data-ttu-id="da069-263">Se muestra que el <xref:System.Convert.ChangeType%2A> método ajusta una llamada para el tipo de origen <xref:System.IConvertible> implementación.</span><span class="sxs-lookup"><span data-stu-id="da069-263">It illustrates that the <xref:System.Convert.ChangeType%2A> method wraps a call to the source type's <xref:System.IConvertible> implementation.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype03.cpp#4)]
 [!code-csharp[System.Convert.ChangeType#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype03.cs#4)]
 [!code-vb[System.Convert.ChangeType#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype03.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-264">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-264">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-265">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-265">-or-</span>
          </span>
          <span data-ttu-id="da069-266">
            <paramref name="value" /> es <see langword="null" /> y <paramref name="conversionType" /> es un tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-266">
              <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is a value type.</span>
          </span>
          <span data-ttu-id="da069-267">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-267">-or-</span>
          </span>
          <span data-ttu-id="da069-268">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-268">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-269">
            <paramref name="value" /> no tiene un formato para <paramref name="conversionType" /> que <paramref name="provider" /> reconozca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-269">
              <paramref name="value" /> is not in a format for <paramref name="conversionType" /> recognized by <paramref name="provider" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-270">
            <paramref name="value" /> representa un número que está fuera del intervalo de <paramref name="conversionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-270">
              <paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-271">
            <paramref name="conversionType" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-271">
              <paramref name="conversionType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="da069-272">
            <para>El <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> método puede convertir un valor de enumeración en otro tipo. Sin embargo, otro tipo no puede convertir en un valor de enumeración, incluso si el tipo de origen es el tipo subyacente de la enumeración. Para convertir a un tipo en un valor de enumeración, utilice un operador de conversión (en C#) o una función de conversión (en Visual Basic). El ejemplo siguiente muestra la conversión desde y hacia un <c>continente</c> valor de enumeración.  [! código csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)] [! código vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)] el <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> método puede convertir un tipo que acepta valores NULL en otro tipo. Sin embargo, no puede convertir otro tipo en un valor de un tipo que acepta valores NULL, incluso si <paramref name="conversionType" /> es el tipo subyacente de la <see cref="T:System.Nullable`1" />. Para realizar la conversión, puede usar un operador de conversión (en C#) o una función de conversión (en Visual Basic). El ejemplo siguiente muestra la conversión a y desde un tipo que acepta valores NULL.  [! código csharp[System.Convert.ChangeType#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable_1.cs#8)] [! código vb[System.Convert.ChangeType#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable_1.vb#8)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-272">
              <para>The <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method can convert an enumeration value to another type. However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration. To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic). The following example illustrates the conversion to and from a <c>Continent</c> enumeration value.  [!code-csharp[System.Convert.ChangeType#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_enum2.cs#5)] [!code-vb[System.Convert.ChangeType#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_enum2.vb#5)]  The <see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /> method can convert a nullable type to another type. However, it cannot convert another type to a value of a nullable type, even if <paramref name="conversionType" /> is the underlying type of the <see cref="T:System.Nullable`1" />. To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic). The following example illustrates the conversion to and from a nullable type.  [!code-csharp[System.Convert.ChangeType#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype_nullable_1.cs#8)] [!code-vb[System.Convert.ChangeType#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype_nullable_1.vb#8)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ChangeType(System::Object ^ value, TypeCode typeCode, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ChangeType : obj * TypeCode * IFormatProvider -&gt; obj" Usage="System.Convert.ChangeType (value, typeCode, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-273">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-273">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="typeCode">
          <span data-ttu-id="da069-274">Tipo de objeto que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-274">The type of object to return.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-275">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-275">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-276">Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-276">Returns an object of the specified type whose value is equivalent to the specified object.</span>
          </span>
          <span data-ttu-id="da069-277">Un parámetro proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-277">A parameter supplies culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-278">Objeto cuyo tipo subyacente es <paramref name="typeCode" /> y cuyo valor es equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-278">An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-279">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-279">-or-</span>
          </span>
          <span data-ttu-id="da069-280">Una referencia nula (<see langword="Nothing" /> en Visual Basic) si <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> es <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" /> u <see cref="F:System.TypeCode.Object" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-280">A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> is <see cref="F:System.TypeCode.Empty" />, <see cref="F:System.TypeCode.String" />, or <see cref="F:System.TypeCode.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-281"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> es un método de conversión de uso general que convierte el objeto especificado por `value` a un tipo predefinido especificado por `typeCode`.</span><span class="sxs-lookup"><span data-stu-id="da069-281"><xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`.</span></span> <span data-ttu-id="da069-282">El `value` parámetro puede ser un objeto de cualquier tipo.</span><span class="sxs-lookup"><span data-stu-id="da069-282">The `value` parameter can be an object of any type.</span></span> <span data-ttu-id="da069-283">Para la conversión se realice correctamente, `value` debe implementar la <xref:System.IConvertible> interfaz, porque el método simplemente ajusta una llamada a una adecuada <xref:System.IConvertible> método.</span><span class="sxs-lookup"><span data-stu-id="da069-283">For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method.</span></span> <span data-ttu-id="da069-284">El método también requiere que la conversión de `value` a `typeCode` admitirse.</span><span class="sxs-lookup"><span data-stu-id="da069-284">The method also requires that conversion of `value` to `typeCode` be supported.</span></span>  
  
 <span data-ttu-id="da069-285">El <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> método no admite la conversión de `value` a un tipo personalizado.</span><span class="sxs-lookup"><span data-stu-id="da069-285">The <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method does not support the conversion of `value` to a custom type.</span></span> <span data-ttu-id="da069-286">Para llevar a cabo este tipo de conversión, llame a la <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-286">To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method.</span></span>  
  
 <span data-ttu-id="da069-287">El `provider` parámetro es un <xref:System.IFormatProvider> implementación que proporciona información de formato para la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-287">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion.</span></span> <span data-ttu-id="da069-288">Cuándo y cómo se usa este parámetro depende subyacente <xref:System.IConvertible> implementación.</span><span class="sxs-lookup"><span data-stu-id="da069-288">Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation.</span></span> <span data-ttu-id="da069-289">Si `value` es un tipo de datos base, `provider` solo se usa para las conversiones siguientes.</span><span class="sxs-lookup"><span data-stu-id="da069-289">If `value` is a base data type, `provider` is used only for the following conversions.</span></span> <span data-ttu-id="da069-290">Si un `null` <xref:System.IFormatProvider> argumento se pasa a estos métodos, el <xref:System.Globalization.CultureInfo> se usa el objeto que representa la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-290">If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
-   <span data-ttu-id="da069-291">Conversión de un número en una cadena, o de una cadena en un número.</span><span class="sxs-lookup"><span data-stu-id="da069-291">Conversion from a number to a string, or from a string to a number.</span></span> <span data-ttu-id="da069-292">`provider` debe ser un <xref:System.Globalization.CultureInfo> objeto, un <xref:System.Globalization.NumberFormatInfo> objeto o una personalizada <xref:System.IFormatProvider> implementación que devuelve un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-292">`provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-293">Sin embargo, dado que el <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> método realiza la conversión mediante el especificador de formato "G" de forma predeterminada, el `provider` parámetro no tiene ningún efecto si `value` o el tipo de destino es un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-293">However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default "G" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.</span></span>  
  
-   <span data-ttu-id="da069-294">Conversión de un <xref:System.DateTime> valor como una cadena o desde una cadena a un <xref:System.DateTime> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-294">Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="da069-295">`provider` debe ser un <xref:System.Globalization.CultureInfo> o <xref:System.Globalization.DateTimeFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-295">`provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.</span></span>  
  
 <span data-ttu-id="da069-296">Si `value` es un tipo definido por la aplicación, su <xref:System.IConvertible> implementación puede utilizar el `provider` parámetro.</span><span class="sxs-lookup"><span data-stu-id="da069-296">If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-297">En el ejemplo siguiente se define un proveedor de formato personalizado denominado `InterceptProvider` que indica cuándo su <xref:System.IFormatProvider.GetFormat%2A> método se llama y devuelve un <xref:System.Globalization.NumberFormatInfo> para la referencia cultural fr-FR y un <xref:System.Globalization.DateTimeFormatInfo> objeto para la referencia cultural en-US.</span><span class="sxs-lookup"><span data-stu-id="da069-297">The following example defines a custom format provider named `InterceptProvider` that indicates when its <xref:System.IFormatProvider.GetFormat%2A> method is called and returns a <xref:System.Globalization.NumberFormatInfo> for the fr-FR culture and a <xref:System.Globalization.DateTimeFormatInfo> object for the en-US culture.</span></span> <span data-ttu-id="da069-298">Este proveedor de formato se usa en todas las llamadas a la <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-298">This format provider is used in all calls to the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="da069-299">El ejemplo, a continuación, crea una matriz con un <xref:System.Double> y un <xref:System.DateTime> valor y hace que las llamadas repetidas a <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> con cada valor y cada miembro de la <xref:System.TypeCode> enumeración.</span><span class="sxs-lookup"><span data-stu-id="da069-299">The example then creates an array with a <xref:System.Double> and a <xref:System.DateTime> value and makes repeated calls to <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> with each value and each member of the <xref:System.TypeCode> enumeration.</span></span> <span data-ttu-id="da069-300">El ejemplo se muestra cuando se utiliza el método la <xref:System.IFormatProvider> parámetro y también muestra el uso de la `provider` parámetro para ejecutar el formato dependiente de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="da069-300">The example illustrates when the method uses the <xref:System.IFormatProvider> parameter and also illustrates the use of the `provider` parameter to perform culture-sensitive formatting.</span></span>  
  
 [!code-cpp[System.Convert.ChangeType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.changetype/cpp/changetype00.cpp#1)]
 [!code-csharp[System.Convert.ChangeType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.changetype/cs/changetype00.cs#1)]
 [!code-vb[System.Convert.ChangeType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.changetype/vb/changetype00.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-301">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-301">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-302">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-302">-or-</span>
          </span>
          <span data-ttu-id="da069-303">
            <paramref name="value" /> es <see langword="null" /> y <paramref name="typeCode" /> especifica un tipo de valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-303">
              <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> specifies a value type.</span>
          </span>
          <span data-ttu-id="da069-304">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-304">-or-</span>
          </span>
          <span data-ttu-id="da069-305">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-305">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-306">
            <paramref name="value" /> tiene un formato para el tipo <paramref name="typeCode" /> que no reconoce <paramref name="provider" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-306">
              <paramref name="value" /> is not in a format for the <paramref name="typeCode" /> type recognized by <paramref name="provider" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-307">
            <paramref name="value" /> representa un número que está fuera del intervalo del tipo <paramref name="typeCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-307">
              <paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-308">
            <paramref name="typeCode" /> no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-308">
              <paramref name="typeCode" /> is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DBNull">
      <MemberSignature Language="C#" Value="public static readonly object DBNull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DBNull" />
      <MemberSignature Language="DocId" Value="F:System.Convert.DBNull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DBNull As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ DBNull;" />
      <MemberSignature Language="F#" Value=" staticval mutable DBNull : obj" Usage="System.Convert.DBNull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="da069-309">Una constante que representa una columna de base de datos sin datos; es decir, el valor Null de las bases de datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-309">A constant that represents a database column that is absent of data; that is, database null.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-310">El <xref:System.Convert.DBNull> campo es equivalente a <xref:System.DBNull.Value?displayProperty=nameWithType>, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="da069-310">The <xref:System.Convert.DBNull> field is equivalent to <xref:System.DBNull.Value?displayProperty=nameWithType>, as the following example shows.</span></span>  
  
 [!code-csharp[System.Convert.DBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.dbnull/cs/dbnull1.cs#1)]
 [!code-vb[System.Convert.DBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.dbnull/vb/dbnull1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DBNull" />
        <altmember cref="F:System.DBNull.Value" />
      </Docs>
    </Member>
    <Member MemberName="FromBase64CharArray">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64CharArray(char[] inArray, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBase64CharArray (inArray As Char(), offset As Integer, length As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ FromBase64CharArray(cli::array &lt;char&gt; ^ inArray, int offset, int length);" />
      <MemberSignature Language="F#" Value="static member FromBase64CharArray : char[] * int * int -&gt; byte[]" Usage="System.Convert.FromBase64CharArray (inArray, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">
          <span data-ttu-id="da069-311">Matriz de caracteres Unicode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-311">A Unicode character array.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="da069-312">Posición en <c>inArray</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-312">A position within <c>inArray</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="da069-313">Número de elementos de <c>inArray</c> que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-313">The number of elements in <c>inArray</c> to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-314">Convierte un subconjunto de una matriz de caracteres Unicode, que codifica los datos binarios como dígitos en base 64, en una matriz equivalente de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-314">Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</span>
          </span>
          <span data-ttu-id="da069-315">Los parámetros especifican el subconjunto de la matriz de entrada y el número de elementos que se convierten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-315">Parameters specify the subset in the input array and the number of elements to convert.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-316">Matriz de enteros de 8 bits sin signo que equivale a un número <paramref name="length" /> de elementos en la posición <paramref name="offset" /> de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-316">An array of 8-bit unsigned integers equivalent to <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-317">`inArray` se compone de dígitos en base 64, caracteres de espacio en blanco y caracteres de relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-317">`inArray` is composed of base-64 digits, white-space characters, and trailing padding characters.</span></span> <span data-ttu-id="da069-318">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", caracteres en minúsculas "a" a "z", "0" a "9", los números y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-318">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</span></span>  
  
 <span data-ttu-id="da069-319">Los caracteres de espacio en blanco y sus nombres Unicode y puntos de código hexadecimal son tabulación (carácter de tabulación, u+0009), nueva línea (avance de línea, U + 000A), retorno de carro (retorno de carro, U+000D) y el espacio en blanco (espacio, u+0020).</span><span class="sxs-lookup"><span data-stu-id="da069-319">The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</span></span> <span data-ttu-id="da069-320">Un número arbitrario de caracteres de espacio en blanco puede aparecer en `inArray` porque se omiten todos los caracteres de espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="da069-320">An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored.</span></span>  
  
 <span data-ttu-id="da069-321">El carácter no tiene valor, "=", se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-321">The valueless character, "=", is used for trailing padding.</span></span> <span data-ttu-id="da069-322">Al final de `inArray` puede constar de cero, uno o dos caracteres de relleno.</span><span class="sxs-lookup"><span data-stu-id="da069-322">The end of `inArray` can consist of zero, one, or two padding characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-323">El <xref:System.Convert.FromBase64CharArray%2A> método está diseñado para procesar una matriz de caracteres único que contiene todos los datos que se desea descodificar.</span><span class="sxs-lookup"><span data-stu-id="da069-323">The <xref:System.Convert.FromBase64CharArray%2A> method is designed to process a single character array that contains all the data to be decoded.</span></span> <span data-ttu-id="da069-324">Para descodificar los datos de caracteres base 64 de un flujo, utilice el <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-324">To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-325">En el ejemplo siguiente se muestra el uso de la <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> método para descodificar datos en formato UUENCODE (base 64) y guardarlos en formato binario.</span><span class="sxs-lookup"><span data-stu-id="da069-325">The following example demonstrates the use of the <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to decode UUencoded (base-64) data and save it as binary output.</span></span>  
  
 [!code-cpp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#3)]
 [!code-csharp[System.Convert UUEncodeDecode functions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#3)]
 [!code-vb[System.Convert UUEncodeDecode functions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#3)]  
  
 <span data-ttu-id="da069-326">En el ejemplo siguiente se muestra el <xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29> y <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> métodos.</span><span class="sxs-lookup"><span data-stu-id="da069-326">The following example demonstrates the <xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29> and <xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> methods.</span></span> <span data-ttu-id="da069-327">La entrada se divide en grupos de tres bytes (24 bits) cada uno.</span><span class="sxs-lookup"><span data-stu-id="da069-327">The input is divided into groups of three bytes (24 bits) each.</span></span> <span data-ttu-id="da069-328">Por lo tanto, cada grupo consta de cuatro números de 6 bits donde cada número está comprendido entre decimal entre 0 y 63.</span><span class="sxs-lookup"><span data-stu-id="da069-328">Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</span></span> <span data-ttu-id="da069-329">En este ejemplo, hay 85 grupos de 3 bytes con un byte restante.</span><span class="sxs-lookup"><span data-stu-id="da069-329">In this example, there are 85 3-byte groups with one byte remaining.</span></span> <span data-ttu-id="da069-330">El primer grupo consta de los valores hexadecimales 00, 01 y 02, que producen cuatro valores de 6 bits iguales a 0, 0, 4 y 2 decimales.</span><span class="sxs-lookup"><span data-stu-id="da069-330">The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</span></span> <span data-ttu-id="da069-331">Estos cuatro valores corresponden a los dígitos de base 64, "A", "A", "E" y "C", al principio de la salida.</span><span class="sxs-lookup"><span data-stu-id="da069-331">Those four values correspond to the base-64 digits, "A", "A", "E", and "C", at the beginning of the output.</span></span>  
  
 <span data-ttu-id="da069-332">Si no existe un número entero de grupos de 3 bytes, los bytes restantes se rellenan con ceros para formar un grupo completo.</span><span class="sxs-lookup"><span data-stu-id="da069-332">If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</span></span> <span data-ttu-id="da069-333">En este ejemplo, el valor del último byte es FF hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-333">In this example, the value of the last byte is hexadecimal FF.</span></span> <span data-ttu-id="da069-334">Los 6 primeros bits son iguales al decimal 63, que corresponde a los dígitos de base 64 "/" al final de la salida, y los siguientes 2 bits se rellenan con ceros para producir el decimal 48, que corresponde a los dígitos de base 64, "w".</span><span class="sxs-lookup"><span data-stu-id="da069-334">The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</span></span> <span data-ttu-id="da069-335">Los dos últimos valores de 6 bits son el relleno y corresponden a sin valor "=" carácter de relleno.</span><span class="sxs-lookup"><span data-stu-id="da069-335">The last two 6-bit values are padding and correspond to the valueless padding character, "=".</span></span>  
  
 [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]
 [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]
 [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-336">
            <paramref name="inArray" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-336">
              <paramref name="inArray" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-337">
            <paramref name="offset" /> o <paramref name="length" /> es menor que 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-337">
              <paramref name="offset" /> or <paramref name="length" /> is less than 0.</span>
          </span>
          <span data-ttu-id="da069-338">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-338">-or-</span>
          </span>
          <span data-ttu-id="da069-339">
            <paramref name="offset" /> más <paramref name="length" /> indica una posición de carácter que no se encuentra dentro de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-339">
              <paramref name="offset" /> plus <paramref name="length" /> indicates a position not within <paramref name="inArray" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-340">La longitud de <paramref name="inArray" />, sin tener en cuenta los espacios en blanco, no es cero ni un múltiplo de 4.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-340">The length of <paramref name="inArray" />, ignoring white-space characters, is not zero or a multiple of 4.</span>
          </span>
          <span data-ttu-id="da069-341">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-341">-or-</span>
          </span>
          <span data-ttu-id="da069-342">El formato de <paramref name="inArray" /> no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-342">The format of <paramref name="inArray" /> is invalid.</span>
          </span>
          <span data-ttu-id="da069-343">
            <paramref name="inArray" /> contiene un carácter que no está en base 64, más de dos caracteres de relleno o un carácter entre los caracteres de relleno que no es un espacio en blanco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-343">
              <paramref name="inArray" /> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.FromBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="FromBase64String">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64String (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64String(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.FromBase64String(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBase64String (s As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ FromBase64String(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member FromBase64String : string -&gt; byte[]" Usage="System.Convert.FromBase64String s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="da069-344">Cadena que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-344">The string to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-345">Convierte la cadena especificada, que codifica los datos binarios como dígitos en base 64, en una matriz equivalente de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-345">Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-346">Una matriz de enteros de 8 bits sin signo equivalente a <paramref name="s" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-346">An array of 8-bit unsigned integers that is equivalent to <paramref name="s" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-347">`s` se compone de dígitos en base 64, caracteres de espacio en blanco y caracteres de relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-347">`s` is composed of base-64 digits, white-space characters, and trailing padding characters.</span></span> <span data-ttu-id="da069-348">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", caracteres en minúsculas "a" a "z", "0" a "9", los números y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-348">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</span></span>  
  
 <span data-ttu-id="da069-349">Los caracteres de espacio en blanco y sus nombres Unicode y puntos de código hexadecimal son tabulación (carácter de tabulación, u+0009), nueva línea (avance de línea, U + 000A), retorno de carro (retorno de carro, U+000D) y el espacio en blanco (espacio, u+0020).</span><span class="sxs-lookup"><span data-stu-id="da069-349">The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</span></span> <span data-ttu-id="da069-350">Un número arbitrario de caracteres de espacio en blanco puede aparecer en `s` porque se omiten todos los caracteres de espacio en blanco.</span><span class="sxs-lookup"><span data-stu-id="da069-350">An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored.</span></span>  
  
 <span data-ttu-id="da069-351">El carácter no tiene valor, "=", se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-351">The valueless character, "=", is used for trailing padding.</span></span> <span data-ttu-id="da069-352">Al final de `s` puede constar de cero, uno o dos caracteres de relleno.</span><span class="sxs-lookup"><span data-stu-id="da069-352">The end of `s` can consist of zero, one, or two padding characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-353">El <xref:System.Convert.FromBase64String%2A> método está diseñado para procesar una única cadena que contiene todos los datos que se desea descodificar.</span><span class="sxs-lookup"><span data-stu-id="da069-353">The <xref:System.Convert.FromBase64String%2A> method is designed to process a single string that contains all the data to be decoded.</span></span> <span data-ttu-id="da069-354">Para descodificar los datos de caracteres base 64 de un flujo, utilice el <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-354">To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-355">En el ejemplo siguiente se usa el <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> método para convertir una matriz de bytes en una cadena con codificación UUEncode (base 64) y, a continuación, llama a la <xref:System.Convert.FromBase64String%28System.String%29> método para restaurar la matriz de bytes original.</span><span class="sxs-lookup"><span data-stu-id="da069-355">The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]
 [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  
  
 <span data-ttu-id="da069-356">El siguiente es un ejemplo más complejo que crea una matriz de enteros de 32 bits de 20 elementos.</span><span class="sxs-lookup"><span data-stu-id="da069-356">The following is a more complex example that creates a 20-element array of 32-bit integers.</span></span> <span data-ttu-id="da069-357">A continuación, usa el <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> método para convertir cada elemento en una matriz de bytes que se almacena en la posición adecuada en un búfer mediante una llamada a la <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-357">It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-358">Este búfer, a continuación, se pasa a la <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> método para crear una cadena con codificación UUEncode (base 64).</span><span class="sxs-lookup"><span data-stu-id="da069-358">This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.</span></span>  <span data-ttu-id="da069-359">A continuación, llama el <xref:System.Convert.FromBase64String%28System.String%29> método para descodificar la cadena con codificación UUEncode y llama a la <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> método para convertir cada conjunto de cuatro bytes (el tamaño de un entero de 32 bits) en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-359">It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</span></span> <span data-ttu-id="da069-360">El resultado del ejemplo muestra que la matriz original se ha restaurado correctamente.</span><span class="sxs-lookup"><span data-stu-id="da069-360">The output from the example shows that the original array has been successfully restored.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]
 [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-361">
            <paramref name="s" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-361">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-362">La longitud de <paramref name="s" />, sin tener en cuenta los espacios en blanco, no es cero ni un múltiplo de 4.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-362">The length of <paramref name="s" />, ignoring white-space characters, is not zero or a multiple of 4.</span>
          </span>
          <span data-ttu-id="da069-363">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-363">-or-</span>
          </span>
          <span data-ttu-id="da069-364">El formato de <paramref name="s" /> no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-364">The format of <paramref name="s" /> is invalid.</span>
          </span>
          <span data-ttu-id="da069-365">
            <paramref name="s" /> contiene un carácter que no está en base 64, más de dos caracteres de relleno o un carácter entre los caracteres de relleno que no es un espacio en blanco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-365">
              <paramref name="s" /> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="T:System.Security.Cryptography.FromBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.GetTypeCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeCode (value As Object) As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : obj -&gt; TypeCode" Usage="System.Convert.GetTypeCode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-366">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-366">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-367">Devuelve el <see cref="T:System.TypeCode" /> del objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-367">Returns the <see cref="T:System.TypeCode" /> for the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-368">
            <see cref="T:System.TypeCode" /> para <paramref name="value" /> o <see cref="F:System.TypeCode.Empty" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-368">The <see cref="T:System.TypeCode" /> for <paramref name="value" />, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDBNull(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.IsDBNull(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDBNull (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDBNull(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member IsDBNull : obj -&gt; bool" Usage="System.Convert.IsDBNull value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-369">Objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-369">An object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-370">Devuelve una indicación en la que se precisa si el objeto especificado es de tipo <see cref="T:System.DBNull" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-370">Returns an indication whether the specified object is of type <see cref="T:System.DBNull" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-371">
            <see langword="true" /> si <paramref name="value" /> es de tipo <see cref="T:System.DBNull" />; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-371">
              <see langword="true" /> if <paramref name="value" /> is of type <see cref="T:System.DBNull" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-372">El <xref:System.Convert.IsDBNull%2A> método pruebas si el `value` es igual al parámetro <xref:System.DBNull.Value?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-372">The <xref:System.Convert.IsDBNull%2A> method tests whether the `value` parameter is equal to <xref:System.DBNull.Value?displayProperty=nameWithType>.</span></span> <span data-ttu-id="da069-373">Es equivalente al código siguiente:</span><span class="sxs-lookup"><span data-stu-id="da069-373">It is equivalent to the following code:</span></span>  
  
 [!code-csharp[System.Convert.IsDBNull#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#1)]
 [!code-vb[System.Convert.IsDBNull#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="da069-374"><xref:System.DBNull.Value?displayProperty=nameWithType> se usa para indicar un valor que falta.</span><span class="sxs-lookup"><span data-stu-id="da069-374"><xref:System.DBNull.Value?displayProperty=nameWithType> is used to indicate a value that is missing.</span></span> <span data-ttu-id="da069-375">No es equivalente a `null` o a <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-375">It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="da069-376">Por lo tanto, un código como `Convert.IsDBNull(null)` en C# o `Convert.IsDBNull(Nothing)` en Visual Basic devuelve`false`.</span><span class="sxs-lookup"><span data-stu-id="da069-376">Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-377">En el ejemplo siguiente se usa un <xref:System.Data.SqlClient.SqlDataReader> objeto para recuperar datos de la encuesta de una base de datos.</span><span class="sxs-lookup"><span data-stu-id="da069-377">The following example uses a <xref:System.Data.SqlClient.SqlDataReader> object to retrieve survey data from a database.</span></span> <span data-ttu-id="da069-378">Asigna los valores de campo de cada fila a una matriz y, a continuación, pasa cada elemento de matriz el <xref:System.Convert.IsDBNull%2A> método.</span><span class="sxs-lookup"><span data-stu-id="da069-378">It assigns each row's field values to an array, and then passes each array element to the <xref:System.Convert.IsDBNull%2A> method.</span></span> <span data-ttu-id="da069-379">Si el método devuelve `true`, en el ejemplo se asigna la cadena "NA" para el elemento de matriz.</span><span class="sxs-lookup"><span data-stu-id="da069-379">If the method returns `true`, the example assigns the string "NA" to the array element.</span></span> <span data-ttu-id="da069-380">La matriz, a continuación, se agrega a la <xref:System.Windows.Forms.DataGridView.Rows%2A> colección de un <xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType> control.</span><span class="sxs-lookup"><span data-stu-id="da069-380">The array is then added to the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection of a <xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType> control.</span></span>  
  
 [!code-csharp[System.Convert.IsDBNull#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.IsDBNull/cs/Form1.cs#2)]
 [!code-vb[System.Convert.IsDBNull#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.IsDBNull/vb/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DBNull" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBase64CharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-381">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-381">Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</span>
          </span>
        </summary>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64CharArray (inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToBase64CharArray(cli::array &lt;System::Byte&gt; ^ inArray, int offsetIn, int length, cli::array &lt;char&gt; ^ outArray, int offsetOut);" />
      <MemberSignature Language="F#" Value="static member ToBase64CharArray : byte[] * int * int * char[] * int -&gt; int" Usage="System.Convert.ToBase64CharArray (inArray, offsetIn, length, outArray, offsetOut)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">
          <span data-ttu-id="da069-382">Matriz de entrada de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-382">An input array of 8-bit unsigned integers.</span>
          </span>
        </param>
        <param name="offsetIn">
          <span data-ttu-id="da069-383">Posición en <c>inArray</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-383">A position within <c>inArray</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="da069-384">Número de elementos de <c>inArray</c> que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-384">The number of elements of <c>inArray</c> to convert.</span>
          </span>
        </param>
        <param name="outArray">
          <span data-ttu-id="da069-385">Matriz de salida de caracteres Unicode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-385">An output array of Unicode characters.</span>
          </span>
        </param>
        <param name="offsetOut">
          <span data-ttu-id="da069-386">Posición en <c>outArray</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-386">A position within <c>outArray</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-387">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-387">Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</span>
          </span>
          <span data-ttu-id="da069-388">Los parámetros especifican los subconjuntos como posiciones de desplazamiento en las matrices de entrada y salida, así como el número de elementos de la matriz de entrada que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-388">Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-389">Entero de 32 bits con signo que contiene el número de bytes de <paramref name="outArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-389">A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-390">El subconjunto de `length` elementos de `inArray` a partir de posición `offsetIn`, se toman como un valor numérico y se convierte en un subconjunto de elementos de `outArray` a partir de posición `offsetOut`.</span><span class="sxs-lookup"><span data-stu-id="da069-390">The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`.</span></span> <span data-ttu-id="da069-391">El valor devuelto indica el número de elementos convertidos en `outArray`.</span><span class="sxs-lookup"><span data-stu-id="da069-391">The return value indicates the number of converted elements in `outArray`.</span></span> <span data-ttu-id="da069-392">El subconjunto de `outArray` consta de dígitos en base 64.</span><span class="sxs-lookup"><span data-stu-id="da069-392">The subset of `outArray` consists of base-64 digits.</span></span>  
  
 <span data-ttu-id="da069-393">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" a "9" y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-393">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="da069-394">El carácter no tiene valor, "=", se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-394">The valueless character, "=", is used for trailing padding.</span></span>  
  
 <span data-ttu-id="da069-395">El `offset` y `length` parámetros son números con signo de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="da069-395">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="da069-396">El `offsetIn` y `offsetOut` parámetros son las posiciones de la matriz de base cero.</span><span class="sxs-lookup"><span data-stu-id="da069-396">The `offsetIn` and `offsetOut` parameters are zero-based array positions.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-397">El <xref:System.Convert.ToBase64CharArray%2A> método está diseñado para procesar una matriz de bytes única que contiene todos los datos que se desea codificar.</span><span class="sxs-lookup"><span data-stu-id="da069-397">The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="da069-398">Para crear una matriz de caracteres base 64 de una secuencia de bytes, use la <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-398">To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-399">El ejemplo siguiente se muestra cómo utilizar el <xref:System.Convert.ToBase64CharArray%2A> método UUencode (codificación en base 64) una secuencia binaria y, a continuación, guardar la codificación en un archivo.</span><span class="sxs-lookup"><span data-stu-id="da069-399">The following example demonstrates using the <xref:System.Convert.ToBase64CharArray%2A> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.</span></span>  
  
 [!code-cpp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CPP/class1.cpp#2)]
 [!code-csharp[System.Convert UUEncodeDecode functions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/CS/class1.cs#2)]
 [!code-vb[System.Convert UUEncodeDecode functions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert UUEncodeDecode functions/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-400">El valor de <paramref name="inArray" /> o <paramref name="outArray" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-400">
              <paramref name="inArray" /> or <paramref name="outArray" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-401">
            <paramref name="offsetIn" />, <paramref name="offsetOut" /> o <paramref name="length" /> es negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-401">
              <paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="da069-402">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-402">-or-</span>
          </span>
          <span data-ttu-id="da069-403">La suma de <paramref name="offsetIn" /> y <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-403">
              <paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span>
          </span>
          <span data-ttu-id="da069-404">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-404">-or-</span>
          </span>
          <span data-ttu-id="da069-405">La suma de <paramref name="offsetOut" /> y el número de elementos a devolver es mayor que la longitud de <paramref name="outArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-405">
              <paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64CharArray (inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer, options As Base64FormattingOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToBase64CharArray(cli::array &lt;System::Byte&gt; ^ inArray, int offsetIn, int length, cli::array &lt;char&gt; ^ outArray, int offsetOut, Base64FormattingOptions options);" />
      <MemberSignature Language="F#" Value="static member ToBase64CharArray : byte[] * int * int * char[] * int * Base64FormattingOptions -&gt; int" Usage="System.Convert.ToBase64CharArray (inArray, offsetIn, length, outArray, offsetOut, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">
          <span data-ttu-id="da069-406">Matriz de entrada de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-406">An input array of 8-bit unsigned integers.</span>
          </span>
        </param>
        <param name="offsetIn">
          <span data-ttu-id="da069-407">Posición en <c>inArray</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-407">A position within <c>inArray</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="da069-408">Número de elementos de <c>inArray</c> que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-408">The number of elements of <c>inArray</c> to convert.</span>
          </span>
        </param>
        <param name="outArray">
          <span data-ttu-id="da069-409">Matriz de salida de caracteres Unicode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-409">An output array of Unicode characters.</span>
          </span>
        </param>
        <param name="offsetOut">
          <span data-ttu-id="da069-410">Posición en <c>outArray</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-410">A position within <c>outArray</c>.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="da069-411">
            <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> para insertar un salto de línea cada 76 caracteres o <see cref="F:System.Base64FormattingOptions.None" /> para no insertar saltos de línea.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-411">
              <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None" /> to not insert line breaks.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-412">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-412">Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</span>
          </span>
          <span data-ttu-id="da069-413">Los parámetros especifican los subconjuntos como posiciones de desplazamiento en las matrices de entrada y salida, el número de elementos de la matriz de entrada que se convierten y si se insertan saltos de línea en la matriz de salida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-413">Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-414">Entero de 32 bits con signo que contiene el número de bytes de <paramref name="outArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-414">A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-415">El subconjunto de `length` elementos de la `inArray` parámetro que empieza en la posición `offsetIn`, se toman como un valor numérico y se convierte en un subconjunto de elementos de la `outArray` parámetro que empieza en la posición `offsetOut`.</span><span class="sxs-lookup"><span data-stu-id="da069-415">The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`.</span></span> <span data-ttu-id="da069-416">El valor devuelto indica el número de elementos convertidos en `outArray`.</span><span class="sxs-lookup"><span data-stu-id="da069-416">The return value indicates the number of converted elements in `outArray`.</span></span> <span data-ttu-id="da069-417">El subconjunto de `outArray` consta de dígitos en base 64.</span><span class="sxs-lookup"><span data-stu-id="da069-417">The subset of `outArray` consists of base-64 digits.</span></span>  
  
 <span data-ttu-id="da069-418">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" a "9" y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-418">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="da069-419">El carácter sin valor "=" se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-419">The valueless character "=" is used for trailing padding.</span></span>  
  
 <span data-ttu-id="da069-420">El `offset` y `length` parámetros son números con signo de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="da069-420">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="da069-421">El `offsetIn` y `offsetOut` parámetros son las posiciones de la matriz de base cero.</span><span class="sxs-lookup"><span data-stu-id="da069-421">The `offsetIn` and `offsetOut` parameters are zero-based array positions.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-422">El <xref:System.Convert.ToBase64CharArray%2A> método está diseñado para procesar una matriz de bytes única que contiene todos los datos que se desea codificar.</span><span class="sxs-lookup"><span data-stu-id="da069-422">The <xref:System.Convert.ToBase64CharArray%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="da069-423">Para crear una matriz de caracteres base 64 de una secuencia de bytes, use la <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-423">To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="da069-424">Si el `options` parámetro está establecido en <xref:System.Base64FormattingOptions.InsertLineBreaks> y el resultado de la conversión tiene más de 76 caracteres, se inserta un salto de línea cada 76 caracteres.</span><span class="sxs-lookup"><span data-stu-id="da069-424">If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</span></span> <span data-ttu-id="da069-425">Un salto de línea se define como un carácter de retorno de carro (U+000D) seguido por una línea de alimentación (000A) caracteres.</span><span class="sxs-lookup"><span data-stu-id="da069-425">A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</span></span> <span data-ttu-id="da069-426">Para obtener más información, consulte RFC 2045, "Multipurpose Internet Mail Extensions", en [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).</span><span class="sxs-lookup"><span data-stu-id="da069-426">For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [https://www.rfc-editor.org/](https://www.rfc-editor.org/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-427">En el ejemplo siguiente se muestra el <xref:System.Convert.ToBase64CharArray%2A> método.</span><span class="sxs-lookup"><span data-stu-id="da069-427">The following example demonstrates the <xref:System.Convert.ToBase64CharArray%2A> method.</span></span> <span data-ttu-id="da069-428">La entrada se divide en grupos de tres bytes (24 bits) cada uno.</span><span class="sxs-lookup"><span data-stu-id="da069-428">The input is divided into groups of three bytes (24 bits) each.</span></span> <span data-ttu-id="da069-429">Por lo tanto, cada grupo consta de cuatro números de 6 bits donde cada número está comprendido entre decimal entre 0 y 63.</span><span class="sxs-lookup"><span data-stu-id="da069-429">Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</span></span> <span data-ttu-id="da069-430">En este ejemplo, hay 85 grupos de 3 bytes con un byte restante.</span><span class="sxs-lookup"><span data-stu-id="da069-430">In this example, there are 85 3-byte groups with one byte remaining.</span></span> <span data-ttu-id="da069-431">El primer grupo consta de los valores hexadecimales 00, 01 y 02, que producen cuatro valores de 6 bits iguales a 0, 0, 4 y 2 decimales.</span><span class="sxs-lookup"><span data-stu-id="da069-431">The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</span></span> <span data-ttu-id="da069-432">Estos cuatro valores corresponden a los dígitos en base 64 "A", "A", "E" y "C" al principio de la salida.</span><span class="sxs-lookup"><span data-stu-id="da069-432">Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</span></span>  
  
 <span data-ttu-id="da069-433">Si no existe un número entero de grupos de 3 bytes, los bytes restantes se rellenan con ceros para formar un grupo completo.</span><span class="sxs-lookup"><span data-stu-id="da069-433">If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</span></span> <span data-ttu-id="da069-434">En este ejemplo, el valor del último byte es FF hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-434">In this example, the value of the last byte is hexadecimal FF.</span></span> <span data-ttu-id="da069-435">Los 6 primeros bits son iguales al decimal 63, que corresponde a los dígitos de base 64 "/" al final de la salida, y los siguientes 2 bits se rellenan con ceros para producir el decimal 48, que corresponde a los dígitos de base 64, "w".</span><span class="sxs-lookup"><span data-stu-id="da069-435">The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</span></span> <span data-ttu-id="da069-436">Los dos últimos valores de 6 bits son el relleno y corresponden a sin valor "=" carácter de relleno.</span><span class="sxs-lookup"><span data-stu-id="da069-436">The last two 6-bit values are padding and correspond to the valueless padding character, "=".</span></span>  
  
 [!code-cpp[convert.tobase64chararray#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64chararray/CPP/tb64ca.cpp#1)]
 [!code-csharp[convert.tobase64chararray#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64chararray/CS/tb64ca.cs#1)]
 [!code-vb[convert.tobase64chararray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64chararray/VB/tb64ca.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-437">El valor de <paramref name="inArray" /> o <paramref name="outArray" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-437">
              <paramref name="inArray" /> or <paramref name="outArray" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-438">
            <paramref name="offsetIn" />, <paramref name="offsetOut" /> o <paramref name="length" /> es negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-438">
              <paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="da069-439">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-439">-or-</span>
          </span>
          <span data-ttu-id="da069-440">La suma de <paramref name="offsetIn" /> y <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-440">
              <paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span>
          </span>
          <span data-ttu-id="da069-441">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-441">-or-</span>
          </span>
          <span data-ttu-id="da069-442">La suma de <paramref name="offsetOut" /> y el número de elementos a devolver es mayor que la longitud de <paramref name="outArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-442">
              <paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-443">
            <paramref name="options" /> no es un valor <see cref="T:System.Base64FormattingOptions" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-443">
              <paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBase64String">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-444">Convierte el valor de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-444">Converts the value of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span>
          </span>
        </summary>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] -&gt; string" Usage="System.Convert.ToBase64String inArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="inArray">
          <span data-ttu-id="da069-445">Matriz de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-445">An array of 8-bit unsigned integers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-446">Convierte una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-446">Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-447">Representación de cadena, en base 64, del contenido de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-447">The string representation, in base 64, of the contents of <paramref name="inArray" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-448">Los elementos de `inArray` se toman como un valor numérico y se convierte en una representación de cadena que se codifica con dígitos de base 64.</span><span class="sxs-lookup"><span data-stu-id="da069-448">The elements of `inArray` are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.</span></span>  
  
 <span data-ttu-id="da069-449">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" a "9" y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-449">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="da069-450">El carácter no tiene valor, "=", se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-450">The valueless character, "=", is used for trailing padding.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-451">El <xref:System.Convert.ToBase64String%2A> método está diseñado para procesar una matriz de bytes única que contiene todos los datos que se desea codificar.</span><span class="sxs-lookup"><span data-stu-id="da069-451">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="da069-452">Para codificar datos desde una secuencia, utilice el <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-452">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="da069-453">Normalmente, el <xref:System.Convert.ToBase64String%2A> no es el método utilizado para ida y vuelta un formato UUENCODE (codificado en base 64) cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-453">Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.</span></span>  <span data-ttu-id="da069-454">Es decir, si descodifica una cadena mediante una llamada a la <xref:System.Convert.FromBase64String%2A> método, a continuación, codificar la matriz de bytes devuelta llamando el <xref:System.Convert.ToBase64String%2A> método, la cadena resultante no será necesariamente idéntica a la cadena original.</span><span class="sxs-lookup"><span data-stu-id="da069-454">That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string.</span></span> <span data-ttu-id="da069-455">La cadena estará ida y vuelta sólo si la cadena original es una cadena codificada en base 64 válida.</span><span class="sxs-lookup"><span data-stu-id="da069-455">The string will round-trip only if the original string is a valid base-64 encoded string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-456">En el ejemplo siguiente se usa el <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> método para convertir una matriz de bytes en una cadena con codificación UUEncode (base 64) y, a continuación, llama a la <xref:System.Convert.FromBase64String%28System.String%29> método para restaurar la matriz de bytes original.</span><span class="sxs-lookup"><span data-stu-id="da069-456">The following example uses the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String2.cs#1)]
 [!code-vb[System.Convert.ToBase64String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String2.vb#1)]  
  
 <span data-ttu-id="da069-457">El siguiente es un ejemplo más complejo que crea una matriz de enteros de 32 bits de 20 elementos.</span><span class="sxs-lookup"><span data-stu-id="da069-457">The following is a more complex example that creates a 20-element array of 32-bit integers.</span></span> <span data-ttu-id="da069-458">A continuación, usa el <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> método para convertir cada elemento en una matriz de bytes que se almacena en la posición adecuada en un búfer mediante una llamada a la <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-458">It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-459">Este búfer, a continuación, se pasa a la <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> método para crear una cadena con codificación UUEncode (base 64).</span><span class="sxs-lookup"><span data-stu-id="da069-459">This buffer is then passed to the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29> method to create a UUencoded (base-64) string.</span></span>  <span data-ttu-id="da069-460">A continuación, llama el <xref:System.Convert.FromBase64String%28System.String%29> método para descodificar la cadena con codificación UUEncode y llama a la <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> método para convertir cada conjunto de cuatro bytes (el tamaño de un entero de 32 bits) en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-460">It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</span></span> <span data-ttu-id="da069-461">El resultado del ejemplo muestra que la matriz original se ha restaurado correctamente.</span><span class="sxs-lookup"><span data-stu-id="da069-461">The output from the example shows that the original array has been successfully restored.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String.cs#2)]
 [!code-vb[System.Convert.ToBase64String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-462">
            <paramref name="inArray" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-462">
              <paramref name="inArray" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), options As Base64FormattingOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, Base64FormattingOptions options);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] * Base64FormattingOptions -&gt; string" Usage="System.Convert.ToBase64String (inArray, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">
          <span data-ttu-id="da069-463">Matriz de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-463">An array of 8-bit unsigned integers.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="da069-464">
            <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> para insertar un salto de línea cada 76 caracteres o <see cref="F:System.Base64FormattingOptions.None" /> para no insertar saltos de línea.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-464">
              <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None" /> to not insert line breaks.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-465">Convierte una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-465">Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span>
          </span>
          <span data-ttu-id="da069-466">Un parámetro especifica si se insertan saltos de línea en el valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-466">A parameter specifies whether to insert line breaks in the return value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-467">Representación de cadena en base 64 de los elementos de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-467">The string representation in base 64 of the elements in <paramref name="inArray" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-468">Los elementos de la `inArray` parámetro se toman como un valor numérico y se convierte en una representación de cadena en base 64.</span><span class="sxs-lookup"><span data-stu-id="da069-468">The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.</span></span>  
  
 <span data-ttu-id="da069-469">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" a "9" y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-469">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="da069-470">El carácter sin valor "=" se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-470">The valueless character "=" is used for trailing padding.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-471">El <xref:System.Convert.ToBase64String%2A> método está diseñado para procesar una matriz de bytes única que contiene todos los datos que se desea codificar.</span><span class="sxs-lookup"><span data-stu-id="da069-471">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="da069-472">Para codificar datos desde una secuencia, utilice el <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-472">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="da069-473">Si el `options` parámetro está establecido en <xref:System.Base64FormattingOptions.InsertLineBreaks> y el resultado de la conversión tiene más de 76 caracteres, se inserta un salto de línea cada 76 caracteres.</span><span class="sxs-lookup"><span data-stu-id="da069-473">If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</span></span> <span data-ttu-id="da069-474">Un salto de línea se define como un carácter de retorno de carro (U+000D) seguido por una línea de alimentación (000A) caracteres.</span><span class="sxs-lookup"><span data-stu-id="da069-474">A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</span></span> <span data-ttu-id="da069-475">Dado que los saltos de línea se consideran caracteres de espacio en blanco en una codificación en base 64, se pasan por alto cuando la conversión de base 64 de cadena a una matriz de bytes codificada.</span><span class="sxs-lookup"><span data-stu-id="da069-475">Because line breaks are considered white-space characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array.</span></span> <span data-ttu-id="da069-476">Los saltos de línea resultan prácticos simplemente al mostrar la cadena codificada a un control o un dispositivo como una ventana de consola.</span><span class="sxs-lookup"><span data-stu-id="da069-476">The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window.</span></span> <span data-ttu-id="da069-477">Para obtener más información, consulte RFC 2045, "Multipurpose Internet Mail Extensions", en [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).</span><span class="sxs-lookup"><span data-stu-id="da069-477">For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [https://www.rfc-editor.org/](https://www.rfc-editor.org/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-478">El ejemplo siguiente se llama el <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType> con un <xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType> argumento para Insertar línea se interrumpe en la cadena que se genera al codificar una matriz de bytes de 100 elementos.</span><span class="sxs-lookup"><span data-stu-id="da069-478">The following example calls the <xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType> with a <xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.</span></span>  
  
 [!code-csharp[System.Convert.ToBase64String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Convert.ToBase64String/cs/ToBase64String3.cs#3)]
 [!code-vb[System.Convert.ToBase64String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Convert.ToBase64String/vb/ToBase64String3.vb#3)]  
  
 <span data-ttu-id="da069-479">Como la salida muestra el ejemplo, el <xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType> se realiza correctamente en la restauración de la matriz de bytes original; se omiten los caracteres de salto de línea durante la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-479">As the output from the example shows, the <xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-480">
            <paramref name="inArray" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-480">
              <paramref name="inArray" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-481">
            <paramref name="options" /> no es un valor <see cref="T:System.Base64FormattingOptions" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-481">
              <paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (ReadOnlySpan&lt;byte&gt; bytes, Base64FormattingOptions options = System.Base64FormattingOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (bytes As ReadOnlySpan(Of Byte), Optional options As Base64FormattingOptions = System.Base64FormattingOptions.None) As String" />
      <MemberSignature Language="F#" Value="static member ToBase64String : ReadOnlySpan&lt;byte&gt; * Base64FormattingOptions -&gt; string" Usage="System.Convert.ToBase64String (bytes, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), offset As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, int offset, int length);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] * int * int -&gt; string" Usage="System.Convert.ToBase64String (inArray, offset, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">
          <span data-ttu-id="da069-482">Matriz de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-482">An array of 8-bit unsigned integers.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="da069-483">Posición de desplazamiento en <c>inArray</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-483">An offset in <c>inArray</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="da069-484">Número de elementos de <c>inArray</c> que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-484">The number of elements of <c>inArray</c> to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-485">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-485">Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span>
          </span>
          <span data-ttu-id="da069-486">Los parámetros especifican el subconjunto como una posición de desplazamiento en la matriz de entrada y el número de elementos de la matriz que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-486">Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-487">Representación de cadena en base 64 de los elementos <paramref name="length" /> de <paramref name="inArray" />, empezando en la posición <paramref name="offset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-487">The string representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" />, starting at position <paramref name="offset" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-488">Los elementos de `inArray` se toman como un valor numérico y se convierte en una representación de cadena en base 64.</span><span class="sxs-lookup"><span data-stu-id="da069-488">The elements of `inArray` are taken as a numeric value and converted to a string representation in base 64.</span></span>  
  
 <span data-ttu-id="da069-489">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" a "9" y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-489">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="da069-490">El carácter no tiene valor, "=", se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-490">The valueless character, "=", is used for trailing padding.</span></span>  
  
 <span data-ttu-id="da069-491">El `offset` y `length` parámetros son números con signo de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="da069-491">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="da069-492">El `offset` parámetro está basado en cero.</span><span class="sxs-lookup"><span data-stu-id="da069-492">The `offset` parameter is zero-based.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-493">El <xref:System.Convert.ToBase64String%2A> método está diseñado para procesar una matriz de bytes única que contiene todos los datos que se desea codificar.</span><span class="sxs-lookup"><span data-stu-id="da069-493">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="da069-494">Para codificar datos desde una secuencia, utilice el <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-494">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-495">
            <paramref name="inArray" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-495">
              <paramref name="inArray" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-496">
            <paramref name="offset" /> o <paramref name="length" /> es negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-496">
              <paramref name="offset" /> or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="da069-497">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-497">-or-</span>
          </span>
          <span data-ttu-id="da069-498">La suma de <paramref name="offset" /> y <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-498">
              <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBase64String (inArray As Byte(), offset As Integer, length As Integer, options As Base64FormattingOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToBase64String(cli::array &lt;System::Byte&gt; ^ inArray, int offset, int length, Base64FormattingOptions options);" />
      <MemberSignature Language="F#" Value="static member ToBase64String : byte[] * int * int * Base64FormattingOptions -&gt; string" Usage="System.Convert.ToBase64String (inArray, offset, length, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">
          <span data-ttu-id="da069-499">Matriz de enteros de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-499">An array of 8-bit unsigned integers.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="da069-500">Posición de desplazamiento en <c>inArray</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-500">An offset in <c>inArray</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="da069-501">Número de elementos de <c>inArray</c> que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-501">The number of elements of <c>inArray</c> to convert.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="da069-502">
            <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> para insertar un salto de línea cada 76 caracteres o <see cref="F:System.Base64FormattingOptions.None" /> para no insertar saltos de línea.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-502">
              <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None" /> to not insert line breaks.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-503">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-503">Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</span>
          </span>
          <span data-ttu-id="da069-504">Los parámetros especifican el subconjunto como una posición de desplazamiento en la matriz de entrada, el número de elementos en la matriz que se convierten y si se insertan saltos de línea en el valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-504">Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-505">Representación de cadena en base 64 de los elementos <paramref name="length" /> de <paramref name="inArray" />, empezando en la posición <paramref name="offset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-505">The string representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" />, starting at position <paramref name="offset" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-506">Los elementos de la `inArray` parámetro se toman como un valor numérico y se convierte en una representación de cadena en base 64.</span><span class="sxs-lookup"><span data-stu-id="da069-506">The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.</span></span>  
  
 <span data-ttu-id="da069-507">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúscula "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" a "9" y los símbolos "+" y "/".</span><span class="sxs-lookup"><span data-stu-id="da069-507">The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</span></span> <span data-ttu-id="da069-508">El carácter sin valor "=" se usa para el relleno final.</span><span class="sxs-lookup"><span data-stu-id="da069-508">The valueless character "=" is used for trailing padding.</span></span>  
  
 <span data-ttu-id="da069-509">El `offset` y `length` parámetros son números con signo de 32 bits.</span><span class="sxs-lookup"><span data-stu-id="da069-509">The `offset` and `length` parameters are 32-bit signed numbers.</span></span> <span data-ttu-id="da069-510">El `offset` parámetro está basado en cero.</span><span class="sxs-lookup"><span data-stu-id="da069-510">The `offset` parameter is zero-based.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="da069-511">El <xref:System.Convert.ToBase64String%2A> método está diseñado para procesar una matriz de bytes única que contiene todos los datos que se desea codificar.</span><span class="sxs-lookup"><span data-stu-id="da069-511">The <xref:System.Convert.ToBase64String%2A> method is designed to process a single byte array that contains all the data to be encoded.</span></span> <span data-ttu-id="da069-512">Para codificar datos desde una secuencia, utilice el <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="da069-512">To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="da069-513">Si el `options` parámetro está establecido en <xref:System.Base64FormattingOptions.InsertLineBreaks> y el resultado de la conversión tiene más de 76 caracteres, se inserta un salto de línea cada 76 caracteres.</span><span class="sxs-lookup"><span data-stu-id="da069-513">If the `options` parameter is set to <xref:System.Base64FormattingOptions.InsertLineBreaks> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</span></span> <span data-ttu-id="da069-514">Un salto de línea se define como un carácter de retorno de carro (U+000D) seguido por una línea de alimentación (000A) caracteres.</span><span class="sxs-lookup"><span data-stu-id="da069-514">A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</span></span> <span data-ttu-id="da069-515">Para obtener más información, consulte RFC 2045, "Multipurpose Internet Mail Extensions", en [ https://www.rfc-editor.org/ ](https://www.rfc-editor.org/).</span><span class="sxs-lookup"><span data-stu-id="da069-515">For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [https://www.rfc-editor.org/](https://www.rfc-editor.org/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-516">En el ejemplo siguiente se muestra el <xref:System.Convert.ToBase64String%2A> método.</span><span class="sxs-lookup"><span data-stu-id="da069-516">The following example demonstrates the <xref:System.Convert.ToBase64String%2A> method.</span></span> <span data-ttu-id="da069-517">La entrada se divide en grupos de tres bytes (24 bits) cada uno.</span><span class="sxs-lookup"><span data-stu-id="da069-517">The input is divided into groups of three bytes (24 bits) each.</span></span> <span data-ttu-id="da069-518">Por lo tanto, cada grupo consta de cuatro números de 6 bits donde cada número está comprendido entre decimal entre 0 y 63.</span><span class="sxs-lookup"><span data-stu-id="da069-518">Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</span></span> <span data-ttu-id="da069-519">En este ejemplo, hay 85 grupos de 3 bytes con un byte restante.</span><span class="sxs-lookup"><span data-stu-id="da069-519">In this example, there are 85 3-byte groups with one byte remaining.</span></span> <span data-ttu-id="da069-520">El primer grupo consta de los valores hexadecimales 00, 01 y 02, que producen cuatro valores de 6 bits iguales a 0, 0, 4 y 2 decimales.</span><span class="sxs-lookup"><span data-stu-id="da069-520">The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</span></span> <span data-ttu-id="da069-521">Estos cuatro valores corresponden a los dígitos en base 64 "A", "A", "E" y "C" al principio de la salida.</span><span class="sxs-lookup"><span data-stu-id="da069-521">Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</span></span>  
  
 <span data-ttu-id="da069-522">Si no existe un número entero de grupos de 3 bytes, los bytes restantes se rellenan con ceros para formar un grupo completo.</span><span class="sxs-lookup"><span data-stu-id="da069-522">If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</span></span> <span data-ttu-id="da069-523">En este ejemplo, el valor del último byte es FF hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-523">In this example, the value of the last byte is hexadecimal FF.</span></span> <span data-ttu-id="da069-524">Los 6 primeros bits son iguales al decimal 63, que corresponde a los dígitos de base 64 "/" al final de la salida, y los siguientes 2 bits se rellenan con ceros para producir el decimal 48, que corresponde a los dígitos de base 64, "w".</span><span class="sxs-lookup"><span data-stu-id="da069-524">The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</span></span> <span data-ttu-id="da069-525">Los dos últimos valores de 6 bits son el relleno y corresponden a sin valor "=" carácter de relleno.</span><span class="sxs-lookup"><span data-stu-id="da069-525">The last two 6-bit values are padding and correspond to the valueless padding character, "=".</span></span>  
  
 [!code-cpp[convert.tobase64string#1](~/samples/snippets/cpp/VS_Snippets_CLR/convert.tobase64string/CPP/tb64s.cpp#1)]
 [!code-csharp[convert.tobase64string#1](~/samples/snippets/csharp/VS_Snippets_CLR/convert.tobase64string/CS/tb64s.cs#1)]
 [!code-vb[convert.tobase64string#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/convert.tobase64string/VB/tb64s.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-526">
            <paramref name="inArray" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-526">
              <paramref name="inArray" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-527">
            <paramref name="offset" /> o <paramref name="length" /> es negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-527">
              <paramref name="offset" /> or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="da069-528">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-528">-or-</span>
          </span>
          <span data-ttu-id="da069-529">La suma de <paramref name="offset" /> y <paramref name="length" /> es mayor que la longitud de <paramref name="inArray" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-529">
              <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-530">
            <paramref name="options" /> no es un valor <see cref="T:System.Base64FormattingOptions" /> válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-530">
              <paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Convert.FromBase64String(System.String)" />
        <altmember cref="T:System.Security.Cryptography.ToBase64Transform" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToBoolean">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-531">Convierte un valor especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-531">Converts a specified value to an equivalent Boolean value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(bool value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : bool -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-532">Valor booleano que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-532">The Boolean value to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-533">Devuelve el valor booleano especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-533">Returns the specified Boolean value; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-534">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-534">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : byte -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-535">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-535">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-536">Convierte el valor del entero de 8 bits sin signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-536">Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-537">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-537">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-538">El ejemplo siguiente convierte una matriz de <xref:System.Byte> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-538">The following example converts an array of <xref:System.Byte> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#12)]
 [!code-csharp[System.Convert.ToBoolean#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#12)]
 [!code-vb[System.Convert.ToBoolean#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(char value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : char -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-539">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-539">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-540">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-540">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-541">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-541">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-542">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-542">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-543">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-543">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : DateTime -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-544">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-544">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-545">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-545">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-546">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-546">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-547">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-547">No value is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-548">En el ejemplo siguiente se muestra que un intento para convertir un <xref:System.DateTime> produce el valor de un tipo booleano <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="da069-548">The following example demonstrates that an attempt to convert a <xref:System.DateTime> value to a Boolean type throws <xref:System.InvalidCastException>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#20)]
 [!code-csharp[System.Convert Snippets#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#20)]
 [!code-vb[System.Convert Snippets#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-549">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-549">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : decimal -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-550">Número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-550">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-551">Convierte el valor del número decimal especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-551">Converts the value of the specified decimal number to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-552">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-552">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-553">El ejemplo siguiente convierte una matriz de <xref:System.Decimal> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-553">The following example converts an array of <xref:System.Decimal> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#2)]
 [!code-csharp[System.Convert.ToBoolean#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#2)]
 [!code-vb[System.Convert.ToBoolean#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(double value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : double -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-554">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-554">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-555">Convierte el valor del número de punto flotante de precisión doble especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-555">Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-556">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-556">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-557">El siguiente ejemplo convierte un valor booleano para un <xref:System.Double> y un <xref:System.Double> a un valor booleano.</span><span class="sxs-lookup"><span data-stu-id="da069-557">The following example converts a Boolean to a <xref:System.Double> and a <xref:System.Double> to a Boolean value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]
 [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]
 [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(short value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : int16 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-558">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-558">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-559">Convierte el valor del entero de 16 bits con signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-559">Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-560">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-560">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-561">El ejemplo siguiente convierte una matriz de <xref:System.Int16> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-561">The following example converts an array of <xref:System.Int16> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#3)]
 [!code-csharp[System.Convert.ToBoolean#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#3)]
 [!code-vb[System.Convert.ToBoolean#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(int value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : int -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-562">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-562">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-563">Convierte el valor del entero de 32 bits con signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-563">Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-564">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-564">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-565">El ejemplo siguiente convierte una matriz de <xref:System.Int32> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-565">The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#4)]
 [!code-csharp[System.Convert.ToBoolean#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#4)]
 [!code-vb[System.Convert.ToBoolean#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(long value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : int64 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-566">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-566">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-567">Convierte el valor del entero de 64 bits con signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-567">Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-568">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-568">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-569">El ejemplo siguiente convierte una matriz de <xref:System.Int64> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-569">The following example converts an array of <xref:System.Int64> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#5)]
 [!code-csharp[System.Convert.ToBoolean#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#5)]
 [!code-vb[System.Convert.ToBoolean#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : obj -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-570">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-570">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-571">Convierte el valor de un objeto especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-571">Converts the value of a specified object to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-572">Valor <see langword="true" /> o <see langword="false" />, que refleja el valor devuelto al invocar el método <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> para el tipo subyacente de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-572">
              <see langword="true" /> or <see langword="false" />, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-573">Si el valor de <paramref name="value" /> es <see langword="null" />, el método devuelve <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-573">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-574">El siguiente ejemplo convierte una matriz de valores de objeto para <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-574">The following example converts an array of object values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#11)]
 [!code-csharp[System.Convert.ToBoolean#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#11)]
 [!code-vb[System.Convert.ToBoolean#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-575">
            <paramref name="value" /> es una cadena que no es igual a <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-575">
              <paramref name="value" /> is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-576">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-576">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-577">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-577">-or-</span>
          </span>
          <span data-ttu-id="da069-578">La conversión de <paramref name="value" /> en un <see cref="T:System.Boolean" /> no se admite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-578">The conversion of <paramref name="value" /> to a <see cref="T:System.Boolean" /> is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : sbyte -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-579">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-579">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-580">Convierte el valor del entero de 8 bits con signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-580">Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-581">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-581">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-582">El ejemplo siguiente convierte una matriz de <xref:System.SByte> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-582">The following example converts an array of <xref:System.SByte> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#6)]
 [!code-csharp[System.Convert.ToBoolean#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#6)]
 [!code-vb[System.Convert.ToBoolean#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.SByte" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(float value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : single -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-583">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-583">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-584">Convierte el valor del número de punto flotante de precisión sencilla especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-584">Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-585">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-585">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-586">El ejemplo siguiente convierte una matriz de <xref:System.Single> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-586">The following example converts an array of <xref:System.Single> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#7)]
 [!code-csharp[System.Convert.ToBoolean#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#7)]
 [!code-vb[System.Convert.ToBoolean#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : string -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-587">Cadena que contiene el valor de <see cref="F:System.Boolean.TrueString" /> o de <see cref="F:System.Boolean.FalseString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-587">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-588">Convierte la representación de cadena especificada de un valor lógico en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-588">Converts the specified string representation of a logical value to its Boolean equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-589">
            <see langword="true" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.TrueString" />, o <see langword="false" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.FalseString" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-589">
              <see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or <see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-590">Para una conversión correcta que se produzca, el `value` parámetro debe ser igual a cualquiera <xref:System.Boolean.TrueString?displayProperty=nameWithType>, una constante cuyo valor es `True`, <xref:System.Boolean.FalseString?displayProperty=nameWithType>, una constante cuyo valor es `False`, o bien debe ser `null`.</span><span class="sxs-lookup"><span data-stu-id="da069-590">For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=nameWithType>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=nameWithType>, a constant whose value is `False`, or it must be `null`.</span></span> <span data-ttu-id="da069-591">En la comparación de `value` con <xref:System.Boolean.TrueString?displayProperty=nameWithType> y <xref:System.Boolean.FalseString?displayProperty=nameWithType>, el método omite el espacio en blanco, así como inicial y final case.</span><span class="sxs-lookup"><span data-stu-id="da069-591">In comparing `value` with <xref:System.Boolean.TrueString?displayProperty=nameWithType> and <xref:System.Boolean.FalseString?displayProperty=nameWithType>, the method ignores case as well as leading and trailing white space.</span></span>  
  
 <span data-ttu-id="da069-592">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-592">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-593">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-593">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-594">En el ejemplo siguiente se usa el <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> método para convertir varias cadenas en valores booleanos.</span><span class="sxs-lookup"><span data-stu-id="da069-594">The following example uses the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> method to convert various strings to Boolean values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean1.cpp#1)]
 [!code-csharp[System.Convert.ToBoolean#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/ToBoolean1.cs#1)]
 [!code-vb[System.Convert.ToBoolean#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/ToBoolean1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-595">
            <paramref name="value" /> no es igual a <see cref="F:System.Boolean.TrueString" /> ni a <see cref="F:System.Boolean.FalseString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-595">
              <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : uint16 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-596">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-596">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-597">Convierte el valor del entero de 16 bits sin signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-597">Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-598">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-598">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-599">El ejemplo siguiente convierte una matriz de <xref:System.UInt16> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-599">The following example converts an array of <xref:System.UInt16> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#8)]
 [!code-csharp[System.Convert.ToBoolean#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#8)]
 [!code-vb[System.Convert.ToBoolean#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : uint32 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-600">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-600">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-601">Convierte el valor del entero de 32 bits sin signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-601">Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-602">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-602">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-603">El ejemplo siguiente convierte una matriz de <xref:System.Int32> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-603">The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#9)]
 [!code-csharp[System.Convert.ToBoolean#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#9)]
 [!code-vb[System.Convert.ToBoolean#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : uint64 -&gt; bool" Usage="System.Convert.ToBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-604">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-604">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-605">Convierte el valor del entero de 64 bits sin signo especificado en un valor booleano equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-605">Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-606">Es <see langword="true" /> si <paramref name="value" /> es distinto de cero; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-606">
              <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-607">El ejemplo siguiente convierte una matriz de <xref:System.UInt64> valores <xref:System.Boolean> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-607">The following example converts an array of <xref:System.UInt64> values to <xref:System.Boolean> values.</span></span>  
  
 [!code-cpp[System.Convert.ToBoolean#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cpp/toboolean2.cpp#10)]
 [!code-csharp[System.Convert.ToBoolean#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToBoolean/cs/toboolean2.cs#10)]
 [!code-vb[System.Convert.ToBoolean#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToBoolean/vb/toboolean2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As Object, provider As IFormatProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : obj * IFormatProvider -&gt; bool" Usage="System.Convert.ToBoolean (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-608">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-608">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-609">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-609">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-610">Convierte el valor del objeto especificado en un valor booleano equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-610">Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-611">Valor <see langword="true" /> o <see langword="false" />, que refleja el valor devuelto al invocar el método <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> para el tipo subyacente de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-611">
              <see langword="true" /> or <see langword="false" />, which reflects the value returned by invoking the <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> method for the underlying type of <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-612">Si el valor de <paramref name="value" /> es <see langword="null" />, el método devuelve <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-612">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-613">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-613">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-614">Los tipos bases pasan por alto el `provider` parámetro; sin embargo, el parámetro puede usarse si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-614">The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-615">En el ejemplo siguiente se define una clase que implementa <xref:System.IConvertible> y una clase que implementa <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-615">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-616">Objetos de la clase que implementa <xref:System.IConvertible> contienen una matriz de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-616">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="da069-617">Un objeto de cada clase se pasa a la <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-617">An object of each class is passed to the <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="da069-618">Este método devuelve `true` si alguno de los valores de matriz no descartados es distinto de cero.</span><span class="sxs-lookup"><span data-stu-id="da069-618">This method returns `true` if any of the non-discarded array values are non-zero.</span></span> <span data-ttu-id="da069-619">La <xref:System.IFormatProvider> objeto determina cómo se descartan los elementos para este cálculo.</span><span class="sxs-lookup"><span data-stu-id="da069-619">The <xref:System.IFormatProvider> object determines how elements are discarded for this calculation.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-620">
            <paramref name="value" /> es una cadena que no es igual a <see cref="F:System.Boolean.TrueString" /> o <see cref="F:System.Boolean.FalseString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-620">
              <paramref name="value" /> is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-621">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-621">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-622">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-622">-or-</span>
          </span>
          <span data-ttu-id="da069-623">La conversión de <paramref name="value" /> en un <see cref="T:System.Boolean" /> no se admite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-623">The conversion of <paramref name="value" /> to a <see cref="T:System.Boolean" /> is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToBoolean (value As String, provider As IFormatProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ToBoolean(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToBoolean : string * IFormatProvider -&gt; bool" Usage="System.Convert.ToBoolean (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-624">Cadena que contiene el valor de <see cref="F:System.Boolean.TrueString" /> o de <see cref="F:System.Boolean.FalseString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-624">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-625">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-625">An object that supplies culture-specific formatting information.</span>
          </span>
          <span data-ttu-id="da069-626">Este parámetro se ignora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-626">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-627">Convierte la representación de cadena especificada de un valor lógico en un valor booleano equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-627">Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-628">
            <see langword="true" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.TrueString" />, o <see langword="false" /> si <paramref name="value" /> es igual a <see cref="F:System.Boolean.FalseString" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-628">
              <see langword="true" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.TrueString" />, or <see langword="false" /> if <paramref name="value" /> equals <see cref="F:System.Boolean.FalseString" /> or <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-629">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-629">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-630">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-630">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-631">
            <paramref name="value" /> no es igual a <see cref="F:System.Boolean.TrueString" /> ni a <see cref="F:System.Boolean.FalseString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-631">
              <paramref name="value" /> is not equal to <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-632">Convierte un valor especificado en un entero de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-632">Converts a specified value to an 8-bit unsigned integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Boolean) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(bool value);" />
      <MemberSignature Language="F#" Value="static member ToByte : bool -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-633">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-633">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-634">Convierte el valor booleano especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-634">Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-635">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-635">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-636">El ejemplo siguiente muestra la conversión de <xref:System.Boolean> a <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-636">The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Byte> values.</span></span>  
  
 [!code-cpp[System.Convert.ToByte#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.convert.tobyte/cpp/tobyte1.cpp#1)]
 [!code-csharp[System.Convert.ToByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#1)]
 [!code-vb[System.Convert.ToByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToByte : byte -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-637">Entero de 8 bits sin signo que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-637">The 8-bit unsigned integer to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-638">Devuelve el entero de 8 bits sin signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-638">Returns the specified 8-bit unsigned integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-639">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-639">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Char) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(char value);" />
      <MemberSignature Language="F#" Value="static member ToByte : char -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-640">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-640">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-641">Convierte el valor del carácter Unicode especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-641">Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-642">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-642">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-643">Este método devuelve un valor de byte sin signo que representa el código numérico de la <xref:System.Char> objeto pasa a él.</span><span class="sxs-lookup"><span data-stu-id="da069-643">This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it.</span></span> <span data-ttu-id="da069-644">En .NET Framework, un <xref:System.Char> objeto es un valor de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="da069-644">In the .NET Framework, a <xref:System.Char> object is a 16-bit value.</span></span> <span data-ttu-id="da069-645">Esto significa que el método es adecuado para devolver los códigos de caracteres numéricos en el intervalo de caracteres ASCII o en los intervalos Unicode C0 controles y Latín básico y los controles C1 y Latín-1 adicional, de u+0000 a 00FF U +.</span><span class="sxs-lookup"><span data-stu-id="da069-645">This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-646">El ejemplo siguiente convierte una matriz de <xref:System.Char> valores <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-646">The following example converts an array of <xref:System.Char> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#2)]
 [!code-vb[System.Convert.ToByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-647">
            <paramref name="value" /> representa un número mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-647">
              <paramref name="value" /> represents a number that is greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As DateTime) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToByte : DateTime -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-648">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-648">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-649">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-649">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-650">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-650">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-651">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-651">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-652">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-652">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Decimal) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToByte : decimal -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-653">Número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-653">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-654">Convierte el valor del número decimal especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-654">Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-655">
            <paramref name="value" /> se redondea al entero de 8 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-655">
              <paramref name="value" />, rounded to the nearest 8-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-656">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-656">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-657">El ejemplo siguiente se convierte un <xref:System.Byte> valor a un <xref:System.Decimal> y un <xref:System.Decimal> valor a un <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="da069-657">The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]
 [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]
 [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-658">
            <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" /> o menor que <see cref="F:System.Byte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-658">
              <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Double) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(double value);" />
      <MemberSignature Language="F#" Value="static member ToByte : double -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-659">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-659">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-660">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-660">Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-661">
            <paramref name="value" /> se redondea al entero de 8 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-661">
              <paramref name="value" />, rounded to the nearest 8-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-662">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-662">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-663">El ejemplo siguiente se convierte un <xref:System.Byte> valor a un <xref:System.Double> y un <xref:System.Double> valor a un <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="da069-663">The following example converts a <xref:System.Byte> value to a <xref:System.Double> and a <xref:System.Double> value to a <xref:System.Byte>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]
 [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]
 [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-664">
            <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" /> o menor que <see cref="F:System.Byte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-664">
              <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Short) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(short value);" />
      <MemberSignature Language="F#" Value="static member ToByte : int16 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-665">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-665">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-666">Convierte el valor del entero de 16 bits con signo especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-666">Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-667">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-667">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-668">El ejemplo siguiente convierte una matriz de <xref:System.Int16> valores <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-668">The following example converts an array of <xref:System.Int16> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#3)]
 [!code-vb[System.Convert.ToByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-669">
            <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-669">
              <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(int value);" />
      <MemberSignature Language="F#" Value="static member ToByte : int -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-670">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-670">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-671">Convierte el valor del entero de 32 bits con signo especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-671">Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-672">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-672">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-673">El ejemplo siguiente convierte una matriz de <xref:System.Int32> valores <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-673">The following example converts an array of <xref:System.Int32> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#4)]
 [!code-vb[System.Convert.ToByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-674">
            <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-674">
              <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Long) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(long value);" />
      <MemberSignature Language="F#" Value="static member ToByte : int64 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-675">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-675">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-676">Convierte el valor del entero de 64 bits con signo especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-676">Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-677">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-677">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-678">El ejemplo siguiente convierte una matriz de <xref:System.Int64> valores <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-678">The following example converts an array of <xref:System.Int64> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#5)]
 [!code-vb[System.Convert.ToByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-679">
            <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-679">
              <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Object) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToByte : obj -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-680">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-680">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-681">Convierte el valor del objeto especificado en un entero de 8 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-681">Converts the value of the specified object to an 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-682">Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-682">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-683">Si `value` no `null`, este método ajusta una llamada a la <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> implementación del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-683">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-684">En el ejemplo siguiente se usa el <xref:System.Convert.ToByte%28System.Object%29> método para convertir una matriz de objetos para <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-684">The following example uses the <xref:System.Convert.ToByte%28System.Object%29> method to convert an array of objects to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#6)]
 [!code-vb[System.Convert.ToByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-685">
            <paramref name="value" /> no es un formato de propiedad válido para un valor <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-685">
              <paramref name="value" /> is not in the property format for a <see cref="T:System.Byte" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-686">
            <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-686">
              <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span>
          </span>
          <span data-ttu-id="da069-687">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-687">-or-</span>
          </span>
          <span data-ttu-id="da069-688">La conversión de <paramref name="value" /> en un tipo <see cref="T:System.Byte" /> no se admite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-688">Conversion from <paramref name="value" /> to the <see cref="T:System.Byte" /> type is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-689">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-689">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As SByte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToByte : sbyte -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-690">El entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-690">The 8-bit signed integer to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-691">Convierte el valor del entero de 8 bits con signo especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-691">Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-692">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-692">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-693">El ejemplo siguiente convierte una matriz de <xref:System.SByte> valores <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-693">The following example converts an array of <xref:System.SByte> values to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#7)]
 [!code-vb[System.Convert.ToByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-694">
            <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-694">
              <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Single) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(float value);" />
      <MemberSignature Language="F#" Value="static member ToByte : single -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-695">Número de punto flotante de precisión sencilla.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-695">A single-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-696">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-696">Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-697">
            <paramref name="value" /> se redondea al entero de 8 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-697">
              <paramref name="value" />, rounded to the nearest 8-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-698">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-698">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-699">El ejemplo siguiente se convierte un <xref:System.Single> valor a un <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="da069-699">The following example converts a <xref:System.Single> value to a <xref:System.Byte>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#19)]
 [!code-csharp[System.Convert Snippets#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#19)]
 [!code-vb[System.Convert Snippets#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-700">
            <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" /> o menor que <see cref="F:System.Byte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-700">
              <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToByte : string -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-701">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-701">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-702">Convierte la representación de cadena especificada de un número en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-702">Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-703">Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-703">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-704">Mediante el <xref:System.Convert.ToByte%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-704">Using the <xref:System.Convert.ToByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-705">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-705">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-706">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-706">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-707">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-707">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-708">El ejemplo siguiente se define una matriz de cadenas e intenta convertir cada cadena en un <xref:System.Byte>.</span><span class="sxs-lookup"><span data-stu-id="da069-708">The following example defines a string array and attempts to convert each string to a <xref:System.Byte>.</span></span>  <span data-ttu-id="da069-709">Tenga en cuenta que mientras un `null` cadena se analiza en cero, <xref:System.String.Empty?displayProperty=nameWithType> produce una <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="da069-709">Note that while a `null` string parses to zero, <xref:System.String.Empty?displayProperty=nameWithType> throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="da069-710">Tenga en cuenta que aunque los espacios iniciales y finales se analizan correctamente, dar formato a los símbolos, como símbolos de moneda, separadores de grupos o separadores decimales, no lo hacen.</span><span class="sxs-lookup"><span data-stu-id="da069-710">Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/ToByte5.cs#15)]
 [!code-vb[System.Convert.ToByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte5.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-711">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-711">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-712">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-712">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Byte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As UShort) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToByte : uint16 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-713">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-713">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-714">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-714">Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-715">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-715">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-716">El siguiente ejemplo convierte una matriz de enteros de 16 bits sin signo a <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-716">The following example converts an array of unsigned 16-bit integers to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#8)]
 [!code-vb[System.Convert.ToByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-717">
            <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-717">
              <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As UInteger) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToByte : uint32 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-718">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-718">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-719">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-719">Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-720">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-720">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-721">El siguiente ejemplo convierte una matriz de enteros sin signo a <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-721">The following example converts an array of unsigned integers to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#9)]
 [!code-vb[System.Convert.ToByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-722">
            <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-722">
              <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As ULong) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToByte : uint64 -&gt; byte" Usage="System.Convert.ToByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-723">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-723">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-724">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-724">Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-725">Un entero de 8 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-725">An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-726">El siguiente ejemplo convierte una matriz de enteros largos sin signo a <xref:System.Byte> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-726">The following example converts an array of unsigned long integers to <xref:System.Byte> values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte1.cs#10)]
 [!code-vb[System.Convert.ToByte#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-727">
            <paramref name="value" /> es mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-727">
              <paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As Object, provider As IFormatProvider) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToByte : obj * IFormatProvider -&gt; byte" Usage="System.Convert.ToByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-728">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-728">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-729">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-729">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-730">Convierte el valor del objeto especificado en un entero de 8 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-730">Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-731">Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-731">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-732">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-732">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-733">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-733">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-734">En el ejemplo siguiente se define una clase `ByteString` que implementa la interfaz <xref:System.IConvertible>.</span><span class="sxs-lookup"><span data-stu-id="da069-734">The following example defines a `ByteString` class that implements the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="da069-735">La clase almacena la representación de cadena de un valor de bytes, junto con un campo de inicio de sesión, para que sea capaz de representar ambos valores de byte con signo y sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-735">The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#12)]
 [!code-vb[System.Convert.ToByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#12)]  
  
 <span data-ttu-id="da069-736">El ejemplo siguiente crea varios `ByteString` objetos y llama a la <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> método convertirlos a valores de byte.</span><span class="sxs-lookup"><span data-stu-id="da069-736">The following example instantiates several `ByteString` objects and calls the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method to convert them to byte values.</span></span> <span data-ttu-id="da069-737">Se muestra que el <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> método ajusta una llamada a la <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> método del objeto que se va a convertir.</span><span class="sxs-lookup"><span data-stu-id="da069-737">It illustrates that the <xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29> method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType> method of the object to be converted.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte3.cs#13)]
 [!code-vb[System.Convert.ToByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte3.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-738">
            <paramref name="value" /> no es un formato de propiedad válido para un valor <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-738">
              <paramref name="value" /> is not in the property format for a <see cref="T:System.Byte" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-739">
            <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-739">
              <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span>
          </span>
          <span data-ttu-id="da069-740">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-740">-or-</span>
          </span>
          <span data-ttu-id="da069-741">La conversión de <paramref name="value" /> en un tipo <see cref="T:System.Byte" /> no se admite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-741">Conversion from <paramref name="value" /> to the <see cref="T:System.Byte" /> type is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-742">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-742">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String, provider As IFormatProvider) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToByte : string * IFormatProvider -&gt; byte" Usage="System.Convert.ToByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-743">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-743">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-744">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-744">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-745">Convierte la representación de cadena especificada de un número en un entero de 8 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-745">Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-746">Un entero de 8 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-746">An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-747">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-747">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-748">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-748">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-749">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> objeto se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-749">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-750">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-750">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-751">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-751">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-752">En el ejemplo siguiente se crea un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que define el signo positivo como "pos" y el signo negativo como "neg", que usa en las llamadas a la <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-752">The following example creates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the positive sign as "pos" and the negative sign as "neg", which it uses in calls to the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="da069-753">A continuación, llama el <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> método varias veces para convertir cada elemento de una matriz de cadenas para un <xref:System.Byte> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-753">It then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29> method repeatedly to convert each element in a string array to a <xref:System.Byte> value.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte4.cs#14)]
 [!code-vb[System.Convert.ToByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte4.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-754">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-754">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-755">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-755">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Byte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToByte(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToByte (value As String, fromBase As Integer) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte ToByte(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToByte : string * int -&gt; byte" Usage="System.Convert.ToByte (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-756">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-756">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-757">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-757">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-758">Convierte la representación de cadena de un número en una base especificada en un entero de 8 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-758">Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-759">Un entero de 8 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-759">An 8-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-760">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-760">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-761">Dado que el <xref:System.Byte> tipo de datos admite valores sin signo, el <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> método supone que `value` se expresa mediante la representación binaria sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-761">Because the <xref:System.Byte> data type supports unsigned values only, the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="da069-762">En otras palabras, todos los ocho bits se utilizan para representar el valor numérico, y no está presente un bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-762">In other words, all eight bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="da069-763">Como resultado, es posible escribir código en el que un byte con signo de valor que está fuera del intervalo de la <xref:System.Byte> tipo de datos se convierte en un <xref:System.Byte> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-763">As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-764">El ejemplo siguiente convierte <xref:System.SByte.MinValue> a su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-764">The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-765">En lugar de producir una excepción, el método muestra el mensaje, "0 x 80 se convierte en 128".</span><span class="sxs-lookup"><span data-stu-id="da069-765">Instead of throwing an exception, the method displays the message, "0x80 converts to 128."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#3)]
 [!code-vb[System.Convert.BaseConversion#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#3)]  
  
 <span data-ttu-id="da069-766">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-766">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-767">El ejemplo siguiente muestra una técnica para asegurarse de que el método no utiliza incorrectamente unsigned representación binaria cuando convierte una representación de cadena hexadecimal a un <xref:System.Byte> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-767">The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value.</span></span> <span data-ttu-id="da069-768">El ejemplo determina si un valor representa con signo o entero sin signo mientras se está convirtiendo ese valor a su representación de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-768">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="da069-769">Cuando el ejemplo se convierte el valor de nuevo a un <xref:System.Byte> valor, comprueba si el valor original era un entero con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-769">When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="da069-770">Si es así, y su bit de orden superior está establecido (lo que indica que el valor es negativo y que utiliza dos es el complemento en lugar de la representación binaria sin signo), el método produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-770">If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#4)]
 [!code-vb[System.Convert.BaseConversion#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-771">El ejemplo siguiente se intenta interpretar una matriz de cadenas como la representación de valores binarios, octales, decimal y hexadecimales.</span><span class="sxs-lookup"><span data-stu-id="da069-771">The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.</span></span>  
  
 [!code-csharp[System.Convert.ToByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tobyte/cs/tobyte2.cs#11)]
 [!code-vb[System.Convert.ToByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tobyte/vb/tobyte2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-772">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-772">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-773">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-773">-or-</span>
          </span>
          <span data-ttu-id="da069-774">
            <paramref name="value" />, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-774">
              <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-775">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-775">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-776">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-776">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-777">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-777">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-778">
            <paramref name="value" />, que representa un número sin signo en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-778">
              <paramref name="value" />, which represents a base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-779">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-779">-or-</span>
          </span>
          <span data-ttu-id="da069-780">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-780">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToChar">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-781">Convierte un valor especificado en un carácter Unicode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-781">Converts a specified value to a Unicode character.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Boolean) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(bool value);" />
      <MemberSignature Language="F#" Value="static member ToChar : bool -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-782">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-782">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-783">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-783">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-784">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-784">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-785">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-785">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-786">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-786">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Byte) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToChar : byte -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-787">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-787">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-788">Convierte el valor del entero de 8 bits sin signo especificado en el carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-788">Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-789">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-789">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-790">El siguiente ejemplo convierte una matriz de bytes sin signo a <xref:System.Char> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-790">The following example converts an array of unsigned bytes to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#1)]
 [!code-vb[System.Convert.ToChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(char value);" />
      <MemberSignature Language="F#" Value="static member ToChar : char -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-791">Carácter Unicode que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-791">The Unicode character to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-792">Devuelve el valor del carácter Unicode especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-792">Returns the specified Unicode character value; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-793">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-793">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As DateTime) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToChar : DateTime -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-794">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-794">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-795">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-795">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-796">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-796">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-797">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-797">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-798">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-798">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Decimal) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToChar : decimal -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-799">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-799">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-800">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-800">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-801">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-801">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-802">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-802">No value is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-803">El ejemplo siguiente se intenta convertir un <xref:System.Decimal> a <xref:System.Char>y produce <xref:System.InvalidCastException> en caso de error.</span><span class="sxs-lookup"><span data-stu-id="da069-803">The following example attempts to convert a <xref:System.Decimal> to <xref:System.Char>, and throws <xref:System.InvalidCastException> on failure.</span></span>  
  
 [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]
 [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]
 [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-804">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-804">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Double) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(double value);" />
      <MemberSignature Language="F#" Value="static member ToChar : double -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-805">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-805">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-806">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-806">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-807">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-807">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-808">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-808">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-809">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-809">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Short) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(short value);" />
      <MemberSignature Language="F#" Value="static member ToChar : int16 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-810">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-810">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-811">Convierte el valor del entero de 16 bits con signo especificado en un carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-811">Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-812">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-812">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-813">El siguiente ejemplo convierte una matriz de enteros de 16 bits con signo a <xref:System.Char> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-813">The following example converts an array of signed 16-bit integers to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#2)]
 [!code-vb[System.Convert.ToChar#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-814">
            <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-814">
              <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(int value);" />
      <MemberSignature Language="F#" Value="static member ToChar : int -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-815">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-815">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-816">Convierte el valor del entero de 32 bits con signo especificado en un carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-816">Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-817">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-817">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-818">El siguiente ejemplo convierte una matriz de enteros con signo a <xref:System.Char> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-818">The following example converts an array of signed integers to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#3)]
 [!code-vb[System.Convert.ToChar#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-819">
            <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-819">
              <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Long) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(long value);" />
      <MemberSignature Language="F#" Value="static member ToChar : int64 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-820">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-820">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-821">Convierte el valor del entero de 64 bits con signo especificado en un carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-821">Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-822">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-822">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-823">El ejemplo siguiente se intenta convertir un entero largo a un <xref:System.Char>y produce una <xref:System.OverflowException> en caso de error.</span><span class="sxs-lookup"><span data-stu-id="da069-823">The following example attempts to convert a long integer to a <xref:System.Char>, and throws a <xref:System.OverflowException> on failure.</span></span>  
  
 [!code-cpp[System.Convert Snippets#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#8)]
 [!code-csharp[System.Convert Snippets#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#8)]
 [!code-vb[System.Convert Snippets#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-824">
            <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-824">
              <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Object) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToChar : obj -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-825">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-825">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-826">Convierte el valor del objeto especificado en un carácter Unicode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-826">Converts the value of the specified object to a Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-827">Un carácter Unicode que es equivalente a value o <see cref="F:System.Char.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-827">A Unicode character that is equivalent to value, or <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-828">Si `value` no `null`, este método ajusta una llamada a la <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> implementación del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-828">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-829">El ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos a un <xref:System.Char> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-829">The following example attempts to convert each element in an object array to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#9)]
 [!code-vb[System.Convert.ToChar#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-830">
            <paramref name="value" /> es una cadena nula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-830">
              <paramref name="value" /> is a null string.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-831">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-831">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-832">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-832">-or-</span>
          </span>
          <span data-ttu-id="da069-833">La conversión de <paramref name="value" /> en un <see cref="T:System.Char" /> no se admite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-833">The conversion of <paramref name="value" /> to a <see cref="T:System.Char" /> is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-834">
            <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-834">
              <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As SByte) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToChar : sbyte -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-835">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-835">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-836">Convierte el valor del entero de 8 bits con signo especificado en un carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-836">Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-837">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-837">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-838">El siguiente ejemplo convierte una matriz de bytes con signo que <xref:System.Char> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-838">The following example converts an array of signed bytes to <xref:System.Char> values.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#4)]
 [!code-vb[System.Convert.ToChar#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-839">
            <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-839">
              <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Single) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(float value);" />
      <MemberSignature Language="F#" Value="static member ToChar : single -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-840">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-840">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-841">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-841">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-842">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-842">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-843">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-843">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-844">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-844">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToChar : string -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-845">Una cadena de longitud 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-845">A string of length 1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-846">Convierte el primer carácter de una cadena especificada en un carácter Unicode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-846">Converts the first character of a specified string to a Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-847">Un carácter Unicode equivalente al primer y único carácter de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-847">A Unicode character that is equivalent to the first and only character in <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-848">`value` debe ser una cadena que contiene un único carácter.</span><span class="sxs-lookup"><span data-stu-id="da069-848">`value` must be a string that contains a single character.</span></span>  
  
 <span data-ttu-id="da069-849">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Char.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-849">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-850">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-850">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-851">El ejemplo siguiente convierte cada elemento de una matriz de cadenas para un <xref:System.Char> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-851">The following example converts each element in a string array to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#5)]
 [!code-vb[System.Convert.ToChar#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-852">
            <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-852">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-853">La longitud de <paramref name="value" /> no es 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-853">The length of <paramref name="value" /> is not 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As UShort) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToChar : uint16 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-854">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-854">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-855">Convierte el valor del entero de 16 bits sin signo especificado en el carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-855">Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-856">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-856">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-857">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits sin signo a un <xref:System.Char> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-857">The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#6)]
 [!code-vb[System.Convert.ToChar#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As UInteger) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToChar : uint32 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-858">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-858">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-859">Convierte el valor del entero de 32 bits sin signo especificado en el carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-859">Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-860">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-860">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-861">El ejemplo siguiente convierte cada elemento de una matriz de enteros sin signo a un <xref:System.Char> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-861">The following example converts each element in an array of unsigned integers to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#7)]
 [!code-vb[System.Convert.ToChar#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-862">
            <paramref name="value" /> es mayor que <see cref="F:System.Char.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-862">
              <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As ULong) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToChar : uint64 -&gt; char" Usage="System.Convert.ToChar value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-863">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-863">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-864">Convierte el valor del entero de 64 bits sin signo especificado en el carácter Unicode equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-864">Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-865">Un carácter Unicode equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-865">A Unicode character that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-866">El ejemplo siguiente convierte cada elemento de una matriz de enteros largos sin signo a un <xref:System.Char> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-866">The following example converts each element in an array of unsigned long integers to a <xref:System.Char> value.</span></span>  
  
 [!code-csharp[System.Convert.ToChar#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tochar/cs/tochar1.cs#8)]
 [!code-vb[System.Convert.ToChar#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tochar/vb/tochar1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-867">
            <paramref name="value" /> es mayor que <see cref="F:System.Char.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-867">
              <paramref name="value" /> is greater than <see cref="F:System.Char.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As Object, provider As IFormatProvider) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToChar : obj * IFormatProvider -&gt; char" Usage="System.Convert.ToChar (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-868">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-868">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-869">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-869">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-870">Convierte el valor del objeto especificado en su carácter Unicode equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-870">Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-871">Un carácter Unicode que es equivalente a <paramref name="value" /> o <see cref="F:System.Char.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-871">A Unicode character that is equivalent to <paramref name="value" />, or <see cref="F:System.Char.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-872">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-872">The return value is the result of invoking the <xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-873">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-873">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-874">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-874">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-875">En el ejemplo siguiente se define una clase que implementa <xref:System.IConvertible> y una clase que implementa <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-875">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-876">Objetos de la clase que implementa <xref:System.IConvertible> contienen una matriz de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-876">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="da069-877">Un objeto de cada clase se pasa a la `ToChar` método.</span><span class="sxs-lookup"><span data-stu-id="da069-877">An object of each class is passed to the `ToChar` method.</span></span> <span data-ttu-id="da069-878">Este método devuelve un carácter cuyo Unicode valor es el promedio de la matriz de <xref:System.Double> valores, utilizando el objeto que implementa <xref:System.IFormatProvider> para determinar cómo se calcula el promedio.</span><span class="sxs-lookup"><span data-stu-id="da069-878">This method returns a character whose Unicode value is the average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-879">
            <paramref name="value" /> es una cadena nula.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-879">
              <paramref name="value" /> is a null string.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-880">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-880">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-881">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-881">-or-</span>
          </span>
          <span data-ttu-id="da069-882">La conversión de <paramref name="value" /> en un <see cref="T:System.Char" /> no se admite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-882">The conversion of <paramref name="value" /> to a <see cref="T:System.Char" /> is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-883">
            <paramref name="value" /> es menor que <see cref="F:System.Char.MinValue" /> o mayor que <see cref="F:System.Char.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-883">
              <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToChar(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToChar (value As String, provider As IFormatProvider) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToChar(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToChar : string * IFormatProvider -&gt; char" Usage="System.Convert.ToChar (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-884">Una cadena de longitud 1 o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-884">A string of length 1 or <see langword="null" />.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-885">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-885">An object that supplies culture-specific formatting information.</span>
          </span>
          <span data-ttu-id="da069-886">Este parámetro se ignora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-886">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-887">Convierte el primer carácter de una cadena especificada en un carácter Unicode, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-887">Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-888">Un carácter Unicode equivalente al primer y único carácter de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-888">A Unicode character that is equivalent to the first and only character in <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-889">`value` debe ser una cadena que contiene un único carácter.</span><span class="sxs-lookup"><span data-stu-id="da069-889">`value` must be a string that contains a single character.</span></span>  
  
 <span data-ttu-id="da069-890">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Char.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-890">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-891">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-891">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-892">El ejemplo siguiente convierte una representación de cadena de un <xref:System.Char> valor con el `ToChar` método, utilizando un <xref:System.IFormatProvider> objeto que muestra el tipo de proveedor de formato para el que se llama.</span><span class="sxs-lookup"><span data-stu-id="da069-892">The following example converts a string representation of a <xref:System.Char> value with the `ToChar` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called.</span></span> <span data-ttu-id="da069-893">El ejemplo muestra que el proveedor de formato no se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="da069-893">The example shows that the format provider is not referenced.</span></span>  
  
 [!code-cpp[System.Convert.ToNonNum_String#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CPP/stringnonnum.cpp#2)]
 [!code-csharp[System.Convert.ToNonNum_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/CS/stringnonnum.cs#2)]
 [!code-vb[System.Convert.ToNonNum_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToNonNum_String/VB/stringnonnum.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-894">
            <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-894">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-895">La longitud de <paramref name="value" /> no es 1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-895">The length of <paramref name="value" /> is not 1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDateTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-896">Convierte un valor especificado en un valor <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-896">Converts a specified value to a <see cref="T:System.DateTime" /> value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Boolean) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(bool value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : bool -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-897">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-897">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-898">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-898">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-899">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-899">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-900">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-900">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-901">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-901">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Byte) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : byte -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-902">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-902">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-903">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-903">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-904">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-904">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-905">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-905">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-906">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-906">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Char) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(char value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : char -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-907">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-907">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-908">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-908">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-909">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-909">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-910">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-910">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-911">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-911">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : DateTime -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-912">Valor de fecha y hora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-912">A date and time value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-913">Devuelve el objeto <see cref="T:System.DateTime" /> especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-913">Returns the specified <see cref="T:System.DateTime" /> object; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-914">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-914">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Decimal) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : decimal -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-915">Número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-915">The number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-916">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-916">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-917">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-917">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-918">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-918">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-919">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-919">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(double value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : double -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-920">Valor de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-920">The double-precision floating-point value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-921">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-921">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-922">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-922">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-923">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-923">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-924">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-924">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Short) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(short value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : int16 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-925">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-925">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-926">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-926">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-927">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-927">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-928">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-928">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-929">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-929">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int16" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(int value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : int -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-930">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-930">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-931">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-931">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-932">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-932">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-933">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-933">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-934">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-934">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(long value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : int64 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-935">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-935">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-936">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-936">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-937">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-937">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-938">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-938">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-939">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-939">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int64" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Object) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : obj -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-940">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-940">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-941">Convierte el valor del objeto especificado en un objeto <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-941">Converts the value of the specified object to a <see cref="T:System.DateTime" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-942">Fecha y hora equivalente del valor de <paramref name="value" />, o fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-942">The date and time equivalent of the value of <paramref name="value" />, or a date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-943">Para la conversión se realice correctamente, el tipo en tiempo de ejecución de la `value` parámetro debe ser un <xref:System.DateTime> o un <xref:System.String>, o `value` debe ser `null`.</span><span class="sxs-lookup"><span data-stu-id="da069-943">For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`.</span></span> <span data-ttu-id="da069-944">En caso contrario, el método produce una <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="da069-944">Otherwise, the method throws an <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="da069-945">Además, si `value` es una cadena, debe contener una representación válida de un valor de fecha y hora en la referencia cultural actual o un <xref:System.FormatException> se produce.</span><span class="sxs-lookup"><span data-stu-id="da069-945">In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown.</span></span>  
  
 <span data-ttu-id="da069-946">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-946">The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-947">El ejemplo siguiente se llama el <xref:System.Convert.ToDateTime%28System.Object%29> método con una variedad de <xref:System.Object> variables.</span><span class="sxs-lookup"><span data-stu-id="da069-947">The following example calls the <xref:System.Convert.ToDateTime%28System.Object%29> method with a variety of <xref:System.Object> variables.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime1.cs#1)]
 [!code-vb[System.Convert.ToDateTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-948">
            <paramref name="value" /> no es un valor de fecha y hora válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-948">
              <paramref name="value" /> is not a valid date and time value.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-949">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-949">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-950">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-950">-or-</span>
          </span>
          <span data-ttu-id="da069-951">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-951">The conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As SByte) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : sbyte -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-952">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-952">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-953">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-953">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-954">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-954">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-955">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-955">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-956">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-956">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Single) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(float value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : single -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-957">Valor de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-957">The single-precision floating-point value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-958">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-958">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-959">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-959">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-960">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-960">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-961">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-961">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : string -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-962">Representación en forma de cadena de una fecha y hora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-962">The string representation of a date and time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-963">Convierte la representación de cadena especificada de una fecha y hora en un valor de fecha y hora equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-963">Converts the specified string representation of a date and time to an equivalent date and time value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-964">Fecha y hora equivalente del valor de <paramref name="value" />, o la fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-964">The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-965">Si `value` no es `null`, el valor devuelto es el resultado de invocar el <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> método `value` usando la información de formato en un <xref:System.Globalization.DateTimeFormatInfo> objeto que se inicializa para la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-965">If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture.</span></span> <span data-ttu-id="da069-966">El `value` argumento debe contener la representación de una fecha y hora en uno de los formatos descritos en el <xref:System.Globalization.DateTimeFormatInfo> tema.</span><span class="sxs-lookup"><span data-stu-id="da069-966">The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic.</span></span> <span data-ttu-id="da069-967">Si el valor de `value` es `null`, el método devuelve <xref:System.DateTime.MinValue?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-967">If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="da069-968">Este método intenta analizar `value` completamente y evitar que se produzca un <xref:System.FormatException>.</span><span class="sxs-lookup"><span data-stu-id="da069-968">This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>.</span></span> <span data-ttu-id="da069-969">Completa falta el mes, día y año información con la fecha actual.</span><span class="sxs-lookup"><span data-stu-id="da069-969">It completes missing month, day, and year information with the current date.</span></span> <span data-ttu-id="da069-970">Si `value` contiene solo una fecha y ninguna hora, este método supone que la hora de medianoche.</span><span class="sxs-lookup"><span data-stu-id="da069-970">If `value` contains only a date and no time, this method assumes a time of midnight.</span></span> <span data-ttu-id="da069-971">Cualquier, interior, caracteres iniciales o finales espacio en blanco en `value` se omiten.</span><span class="sxs-lookup"><span data-stu-id="da069-971">Any leading, inner, or trailing white-space characters in `value` are ignored.</span></span>  
  
 <span data-ttu-id="da069-972">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-972">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-973">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-973">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-974">En el ejemplo siguiente se usa el <xref:System.Convert.ToDateTime%2A> método para convertir varias representaciones de cadena de fechas y horas a <xref:System.DateTime> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-974">The following example uses the <xref:System.Convert.ToDateTime%2A> method to convert various string representations of dates and times to <xref:System.DateTime> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime2.cs#2)]
 [!code-vb[System.Convert.ToDateTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-975">
            <paramref name="value" /> es una cadena de fecha y hora con un formato incorrecto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-975">
              <paramref name="value" /> is not a properly formatted date and time string.</span>
          </span>
        </exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As UShort) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : uint16 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-976">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-976">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-977">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-977">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-978">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-978">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-979">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-979">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-980">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-980">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.UInt16" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As UInteger) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : uint32 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-981">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-981">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-982">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-982">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-983">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-983">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-984">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-984">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-985">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-985">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.UInt32" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As ULong) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : uint64 -&gt; DateTime" Usage="System.Convert.ToDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-986">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-986">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-987">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-987">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-988">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-988">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-989">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-989">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-990">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-990">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.UInt64" />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As Object, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : obj * IFormatProvider -&gt; DateTime" Usage="System.Convert.ToDateTime (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-991">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-991">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-992">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-992">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-993">Convierte el valor del objeto especificado en un objeto <see cref="T:System.DateTime" />, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-993">Converts the value of the specified object to a <see cref="T:System.DateTime" /> object, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-994">Fecha y hora equivalente del valor de <paramref name="value" />, o la fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-994">The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-995">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-995">The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-996">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-996">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-997">Por ejemplo, si `value` es un <xref:System.String> que representa una fecha, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar esa fecha.</span><span class="sxs-lookup"><span data-stu-id="da069-997">For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date.</span></span> <span data-ttu-id="da069-998">`provider` no participa en la conversión de `value` si el tipo de runtime de `value` es un <xref:System.String>, o si `value` está definido por el usuario escriba cuya <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> implementación hace uso de `provider`.</span><span class="sxs-lookup"><span data-stu-id="da069-998">`provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType> implementation makes use of `provider`.</span></span> <span data-ttu-id="da069-999">Si el tipo de runtime de `value` es <xref:System.String> y `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que representa la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-999">If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1000">En el ejemplo siguiente se define un proveedor de formato personalizado, `CustomProvider`, cuya <xref:System.IFormatProvider.GetFormat%2A> método genera un mensaje en la consola que se ha invocado y, a continuación, devuelve el <xref:System.Globalization.DateTimeFormatInfo> objeto de la referencia cultural cuyo nombre se pasa como parámetro a su clase constructor.</span><span class="sxs-lookup"><span data-stu-id="da069-1000">The following example defines a custom format provider, `CustomProvider`, whose <xref:System.IFormatProvider.GetFormat%2A> method outputs a message to the console that it has been invoked, and then returns the <xref:System.Globalization.DateTimeFormatInfo> object of the culture whose name was passed as a parameter to its class constructor.</span></span> <span data-ttu-id="da069-1001">Cada uno de estos `CustomProvider` objetos se usa para convertir los elementos de una matriz de objetos a los valores de fecha y hora.</span><span class="sxs-lookup"><span data-stu-id="da069-1001">Each of these `CustomProvider` objects is used to convert the elements in an object array to date and time values.</span></span> <span data-ttu-id="da069-1002">El resultado indica que el `CustomProvider` objeto se usa en la conversión solo cuando el tipo de la `value` parámetro es un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-1002">The output indicates that the `CustomProvider` object is used in the conversion only when the type of the `value` parameter is a <xref:System.String>.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/todatetime4.cs#4)]
 [!code-vb[System.Convert.ToDateTime#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/todatetime4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1003">
            <paramref name="value" /> no es un valor de fecha y hora válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1003">
              <paramref name="value" /> is not a valid date and time value.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1004">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1004">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1005">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1005">-or-</span>
          </span>
          <span data-ttu-id="da069-1006">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1006">The conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDateTime (value As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ToDateTime(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDateTime : string * IFormatProvider -&gt; DateTime" Usage="System.Convert.ToDateTime (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1007">Cadena que contiene una fecha y hora que se van a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1007">A string that contains a date and time to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1008">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1008">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1009">Convierte la representación de cadena especificada de un número en una fecha y hora equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1009">Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1010">Fecha y hora equivalente del valor de <paramref name="value" />, o la fecha y hora equivalente de <see cref="F:System.DateTime.MinValue" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1010">The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="F:System.DateTime.MinValue" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1011">El valor devuelto es el resultado de invocar el <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1011">The return value is the result of invoking the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="da069-1012">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.DateTimeFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1012">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object.</span></span> <span data-ttu-id="da069-1013">El <xref:System.Globalization.DateTimeFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1013">The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1014">Si `provider` es `null`, el <xref:System.Globalization.DateTimeFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1014">If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1015">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1015">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1016">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1016">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1017">El ejemplo siguiente convierte las representaciones de cadena de valores de fecha con el `ToDateTime` método, utilizando un <xref:System.IFormatProvider> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1017">The following example converts string representations of date values with the `ToDateTime` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-csharp[System.Convert.ToDateTime#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDateTime/cs/ToDateTime3.cs#3)]
 [!code-vb[System.Convert.ToDateTime#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDateTime/vb/ToDateTime3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1018">
            <paramref name="value" /> es una cadena de fecha y hora con un formato incorrecto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1018">
              <paramref name="value" /> is not a properly formatted date and time string.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDecimal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1019">Convierte un valor especificado en un número decimal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1019">Converts a specified value to a decimal number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Boolean) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(bool value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : bool -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1020">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1020">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1021">Convierte el valor booleano especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1021">Converts the specified Boolean value to the equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1022">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1022">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1023">El ejemplo siguiente muestra la conversión de <xref:System.Boolean> a <xref:System.Decimal> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1023">The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#1)]
 [!code-vb[System.Convert.ToDecimal2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Byte) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : byte -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1024">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1024">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1025">Convierte el valor del entero de 8 bits sin signo especificado en el número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1025">Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1026">Número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1026">The decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1027">El ejemplo siguiente se convierte un <xref:System.Byte> valor a un <xref:System.Decimal> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1027">The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#18)]
 [!code-csharp[System.Convert Snippets#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#18)]
 [!code-vb[System.Convert Snippets#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Char) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(char value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : char -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1028">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1028">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1029">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1029">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1030">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1030">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1031">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1031">No value is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1032">El ejemplo siguiente se intenta convertir un <xref:System.Char> valor <xref:System.Decimal>y produce <xref:System.InvalidCastException> tras un error.</span><span class="sxs-lookup"><span data-stu-id="da069-1032">The following example attempts to convert a <xref:System.Char> value to <xref:System.Decimal>, and throws <xref:System.InvalidCastException> upon failure.</span></span>  
  
 [!code-cpp[System.Convert Snippets#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#17)]
 [!code-csharp[System.Convert Snippets#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#17)]
 [!code-vb[System.Convert Snippets#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1033">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1033">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As DateTime) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : DateTime -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1034">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1034">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1035">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1035">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1036">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1036">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1037">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1037">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1038">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1038">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : decimal -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1039">Número decimal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1039">A decimal number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1040">Devuelve el número decimal especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1040">Returns the specified decimal number; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1041">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1041">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Double) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(double value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : double -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1042">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1042">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1043">Convierte el valor del número de punto flotante de precisión doble especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1043">Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1044">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1044">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1045">El <xref:System.Decimal> valor devuelto por este método contiene un máximo de 15 dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="da069-1045">The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits.</span></span> <span data-ttu-id="da069-1046">Si el `value` parámetro contiene más de 15 dígitos significativos, se redondea utilizando el redondeo al más cercano.</span><span class="sxs-lookup"><span data-stu-id="da069-1046">If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest.</span></span> <span data-ttu-id="da069-1047">El ejemplo siguiente se muestra cómo el <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> método utiliza el redondeo al más cercano a la devolución un <xref:System.Decimal> valor con 15 dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="da069-1047">The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType> method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#2)]
 [!code-vb[System.Convert.ToDecimal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-1048">El ejemplo siguiente se convierte un <xref:System.Double> valor a un <xref:System.Decimal> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1048">The following example converts a <xref:System.Double> value to a <xref:System.Decimal> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]
 [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]
 [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1049">
            <paramref name="value" /> es mayor que <see cref="F:System.Decimal.MaxValue" /> o menor que <see cref="F:System.Decimal.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1049">
              <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Short) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(short value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : int16 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1050">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1050">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1051">Convierte el valor del entero de 16 bits con signo especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1051">Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1052">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1052">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1053">El siguiente ejemplo convierte una matriz de enteros de 16 bits con signo a <xref:System.Decimal> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1053">The following example converts an array of 16-bit signed integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#2)]
 [!code-vb[System.Convert.ToDecimal2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(int value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : int -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1054">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1054">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1055">Convierte el valor del entero de 32 bits con signo especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1055">Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1056">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1056">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1057">El siguiente ejemplo convierte una matriz de enteros con signo a <xref:System.Decimal> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1057">The following example converts an array of signed integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#3)]
 [!code-vb[System.Convert.ToDecimal2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Long) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(long value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : int64 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1058">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1058">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1059">Convierte el valor del entero de 64 bits con signo especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1059">Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1060">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1060">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1061">El ejemplo siguiente se convierte un <xref:System.Int64> valor a un <xref:System.Decimal> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1061">The following example converts an <xref:System.Int64> value to a <xref:System.Decimal> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#10)]
 [!code-csharp[System.Convert Snippets#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#10)]
 [!code-vb[System.Convert Snippets#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Object) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : obj -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1062">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1062">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1063">Convierte el valor del objeto especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1063">Converts the value of the specified object to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1064">Un número decimal equivalente a <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1064">A decimal number that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1065">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1065">The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1066">El ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos a un <xref:System.Decimal> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1066">The following example tries to convert each element in an object array to a <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#4)]
 [!code-vb[System.Convert.ToDecimal2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1067">
            <paramref name="value" /> no es un formato adecuado para un tipo <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1067">
              <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1068">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1068">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1069">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1069">-or-</span>
          </span>
          <span data-ttu-id="da069-1070">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1070">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1071">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1071">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As SByte) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : sbyte -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1072">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1072">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1073">Convierte el valor del entero de 8 bits con signo especificado en el número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1073">Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1074">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1074">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1075">El ejemplo siguiente convierte cada elemento de una matriz de bytes con signo en un <xref:System.Decimal> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1075">The following example converts each element in an array of signed bytes to a <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#5)]
 [!code-vb[System.Convert.ToDecimal2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Single) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(float value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : single -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1076">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1076">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1077">Convierte el valor del número de punto flotante de precisión sencilla especificado en el número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1077">Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1078">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1078">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1079">El <xref:System.Decimal> valor devuelto por este método contiene un máximo de siete dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="da069-1079">The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits.</span></span> <span data-ttu-id="da069-1080">Si el `value` parámetro contiene más de siete dígitos significativos, se redondea utilizando el redondeo al más cercano.</span><span class="sxs-lookup"><span data-stu-id="da069-1080">If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest.</span></span> <span data-ttu-id="da069-1081">El ejemplo siguiente se muestra cómo el <xref:System.Convert.ToDecimal%28System.Single%29> método utiliza el redondeo al más cercano a la devolución un <xref:System.Decimal> valor con siete dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="da069-1081">The following example illustrates how the <xref:System.Convert.ToDecimal%28System.Single%29> method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToDecimal/cs/ToDecimal1.cs#1)]
 [!code-vb[System.Convert.ToDecimal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToDecimal/vb/ToDecimal1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-1082">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Single> valores a un <xref:System.Decimal> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1082">The following example tries to convert each element in an array of <xref:System.Single> values to a <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#6)]
 [!code-vb[System.Convert.ToDecimal2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1083">
            <paramref name="value" /> es mayor que <see cref="F:System.Decimal.MaxValue" /> o menor que <see cref="F:System.Decimal.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1083">
              <paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" /> or less than <see cref="F:System.Decimal.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As String) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : string -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1084">Cadena que contiene un número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1084">A string that contains a number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1085">Convierte la representación de cadena especificada de un número en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1085">Converts the specified string representation of a number to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1086">Un número decimal equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1086">A decimal number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1087">Mediante el <xref:System.Convert.ToDecimal%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1087">Using the <xref:System.Convert.ToDecimal%28System.String%29> method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-1088">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1088">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-1089">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1089">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1090">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1090">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1091">El ejemplo siguiente muestra el uso de `ToDecimal`.</span><span class="sxs-lookup"><span data-stu-id="da069-1091">The following example illustrates the use of `ToDecimal`.</span></span> <span data-ttu-id="da069-1092">Intenta convertir un <xref:System.String> a un <xref:System.Decimal>e inicia las posibles excepciones que pueden surgir durante la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-1092">It attempts to convert a <xref:System.String> to a <xref:System.Decimal>, and throws the possible exceptions that may arise during the conversion.</span></span>  
  
 [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]
 [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]
 [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1093">
            <paramref name="value" /> no es un número con un formato válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1093">
              <paramref name="value" /> is not a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1094">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1094">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As UShort) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : uint16 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1095">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1095">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1096">Convierte el valor del entero de 16 bits sin signo especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1096">Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1097">Número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1097">The decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1098">El siguiente ejemplo convierte una matriz de enteros de 16 bits sin signo a <xref:System.Decimal> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1098">The following example converts an array of 16-bit unsigned integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#7)]
 [!code-vb[System.Convert.ToDecimal2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As UInteger) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : uint32 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1099">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1099">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1100">Convierte el valor del entero de 32 bits sin signo especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1100">Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1101">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1101">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1102">El siguiente ejemplo convierte una matriz de enteros sin signo a <xref:System.Decimal> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1102">The following example converts an array of unsigned integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#8)]
 [!code-vb[System.Convert.ToDecimal2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As ULong) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : uint64 -&gt; decimal" Usage="System.Convert.ToDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1103">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1103">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1104">Convierte el valor del entero de 64 bits sin signo especificado en un número decimal equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1104">Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1105">Un número decimal equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1105">A decimal number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1106">El siguiente ejemplo convierte una matriz de enteros largos sin signo a <xref:System.Decimal> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1106">The following example converts an array of unsigned long integers to <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal1.cs#9)]
 [!code-vb[System.Convert.ToDecimal2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As Object, provider As IFormatProvider) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : obj * IFormatProvider -&gt; decimal" Usage="System.Convert.ToDecimal (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1107">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1107">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1108">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1108">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1109">Convierte el valor del objeto especificado en un número decimal equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1109">Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1110">Un número decimal equivalente a <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1110">A decimal number that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1111">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1111">The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-1112">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1112">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-1113">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-1113">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1114">En el ejemplo siguiente se define una clase `Temperature` que implementa la interfaz <xref:System.IConvertible>.</span><span class="sxs-lookup"><span data-stu-id="da069-1114">The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#10)]
 [!code-vb[System.Convert.ToDecimal2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#10)]  
  
 <span data-ttu-id="da069-1115">El ejemplo siguiente muestra que cuando un `Temperature` objeto se pasa como parámetro a la <xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29> método, el <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> implementación de la `Temperature` clase se llama para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-1115">The following example shows that when a `Temperature` object is passed as a parameter to the <xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29> method, the <xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType> implementation of the `Temperature` class is called to perform the conversion.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal2.cs#11)]
 [!code-vb[System.Convert.ToDecimal2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal2.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1116">
            <paramref name="value" /> no es un formato adecuado para un tipo <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1116">
              <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1117">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1117">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1118">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1118">-or-</span>
          </span>
          <span data-ttu-id="da069-1119">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1119">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1120">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1120">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Decimal" />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDecimal (value As String, provider As IFormatProvider) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal ToDecimal(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDecimal : string * IFormatProvider -&gt; decimal" Usage="System.Convert.ToDecimal (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1121">Cadena que contiene un número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1121">A string that contains a number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1122">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1122">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1123">Convierte la representación de cadena especificada de un número en un número decimal equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1123">Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1124">Un número decimal equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1124">A decimal number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1125">El valor devuelto es el resultado de invocar el <xref:System.Decimal.Parse%2A?displayProperty=nameWithType> método `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1125">The return value is the result of invoking the <xref:System.Decimal.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="da069-1126">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1126">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-1127">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1127">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1128">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1128">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1129">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1129">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1130">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1130">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1131">El ejemplo siguiente se intenta convertir una matriz de cadenas a <xref:System.Decimal> valores usando <xref:System.Globalization.NumberFormatInfo> objetos que representan dos referencias culturales diferentes.</span><span class="sxs-lookup"><span data-stu-id="da069-1131">The following example attempts to convert an array of strings to <xref:System.Decimal> values by using <xref:System.Globalization.NumberFormatInfo> objects that represent two different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToDecimal2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todecimal2/cs/todecimal3.cs#12)]
 [!code-vb[System.Convert.ToDecimal2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todecimal2/vb/todecimal3.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1132">
            <paramref name="value" /> no es un número con un formato válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1132">
              <paramref name="value" /> is not a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1133">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1133">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDouble">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1134">Convierte un valor especificado en un número de punto flotante de precisión doble.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1134">Converts a specified value to a double-precision floating-point number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(bool value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : bool -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1135">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1135">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1136">Convierte el valor booleano especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1136">Converts the specified Boolean value to the equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1137">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1137">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1138">El ejemplo siguiente se convierte un <xref:System.Boolean> valor a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1138">The following example converts a <xref:System.Boolean> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#1)]
 [!code-csharp[System.Convert Snippets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#1)]
 [!code-vb[System.Convert Snippets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Byte) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : byte -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1139">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1139">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1140">Convierte el valor del entero de 8 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1140">Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1141">Número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1141">The double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1142">El ejemplo siguiente se convierte un <xref:System.Byte> valor a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1142">The following example converts a <xref:System.Byte> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#2)]
 [!code-csharp[System.Convert Snippets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#2)]
 [!code-vb[System.Convert Snippets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(char value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : char -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1143">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1143">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1144">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1144">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1145">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1145">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1146">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1146">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1147">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1147">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As DateTime) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : DateTime -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1148">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1148">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1149">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1149">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1150">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1150">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1151">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1151">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1152">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1152">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Decimal) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : decimal -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1153">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1153">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1154">Convierte el valor del número decimal especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1154">Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1155">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1155">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1156">El ejemplo siguiente se convierte un <xref:System.Decimal> valor a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1156">The following example converts a <xref:System.Decimal> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#5)]
 [!code-csharp[System.Convert Snippets#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#5)]
 [!code-vb[System.Convert Snippets#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(double value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : double -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1157">Número de punto flotante de precisión doble que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1157">The double-precision floating-point number to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1158">Devuelve el número de punto flotante de precisión doble especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1158">Returns the specified double-precision floating-point number; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1159">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1159">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Short) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(short value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : int16 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1160">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1160">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1161">Convierte el valor del entero de 16 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1161">Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1162">Número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1162">A double-precision floating-point number equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1163">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits con signo a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1163">The following example converts each element in an array of 16-bit signed integers to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#1)]
 [!code-vb[System.Convert.ToDouble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(int value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : int -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1164">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1164">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1165">Convierte el valor del entero de 32 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1165">Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1166">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1166">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1167">El ejemplo siguiente se convierte un <xref:System.Int32> valor a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1167">The following example converts an <xref:System.Int32> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#3)]
 [!code-csharp[System.Convert Snippets#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#3)]
 [!code-vb[System.Convert Snippets#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Long) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(long value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : int64 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1168">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1168">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1169">Convierte el valor del entero de 64 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1169">Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1170">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1170">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1171">El ejemplo siguiente convierte cada elemento de una matriz de enteros largos con signo a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1171">The following example converts each element in an array of signed long integers to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#2)]
 [!code-vb[System.Convert.ToDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : obj -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1172">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1172">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1173">Convierte el valor del objeto especificado en un número de punto flotante de precisión doble.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1173">Converts the value of the specified object to a double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1174">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1174">A double-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1175">Si `value` no `null`, este método ajusta una llamada a la <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> implementación del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1175">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1176">El ejemplo siguiente se intenta convertir cada valor en una matriz de objetos a un <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="da069-1176">The following example attempts to convert each value in an object array to a <xref:System.Double>.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#3)]
 [!code-vb[System.Convert.ToDouble#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1177">
            <paramref name="value" /> no es un formato adecuado para un tipo <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1177">
              <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1178">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1178">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1179">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1179">-or-</span>
          </span>
          <span data-ttu-id="da069-1180">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1180">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1181">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1181">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As SByte) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : sbyte -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1182">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1182">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1183">Convierte el valor del entero de 8 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1183">Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1184">Entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1184">The 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1185">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.SByte> valores a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1185">The following example converts each element in an array of <xref:System.SByte> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#4)]
 [!code-vb[System.Convert.ToDouble#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Single) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(float value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : single -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1186">Número de punto flotante de precisión sencilla.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1186">The single-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1187">Convierte el valor del número de punto flotante de precisión sencilla especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1187">Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1188">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1188">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1189">El ejemplo siguiente se convierte un <xref:System.Single> valor a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1189">The following example converts a <xref:System.Single> value to a <xref:System.Double> value.</span></span>  
  
 [!code-cpp[System.Convert Snippets#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#6)]
 [!code-csharp[System.Convert Snippets#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#6)]
 [!code-vb[System.Convert Snippets#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : string -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1190">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1190">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1191">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1191">Converts the specified string representation of a number to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1192">Un número de punto flotante de precisión doble equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1192">A double-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1193">Mediante el <xref:System.Convert.ToDouble%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1193">Using the <xref:System.Convert.ToDouble%28System.String%29> method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-1194">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1194">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-1195">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Double.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1195">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1196">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1196">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1197">El ejemplo siguiente se intenta convertir cada elemento de una matriz de cadenas numéricas a un <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="da069-1197">The following example attempts to convert each element in an array of numeric strings to a <xref:System.Double>.</span></span> <span data-ttu-id="da069-1198">El resultado del ejemplo es de un sistema cuya referencia cultural actual es en-US.</span><span class="sxs-lookup"><span data-stu-id="da069-1198">The example's output is from a system whose current culture is en-US.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/example8.cs#8)]
 [!code-vb[System.Convert.ToDouble#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/example8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1199">
            <paramref name="value" /> no es un número con un formato válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1199">
              <paramref name="value" /> is not a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1200">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1200">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As UShort) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : uint16 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1201">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1201">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1202">Convierte el valor del entero de 16 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1202">Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1203">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1203">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1204">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.UInt16> valores a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1204">The following example converts each element in an array of <xref:System.UInt16> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#5)]
 [!code-vb[System.Convert.ToDouble#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As UInteger) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : uint32 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1205">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1205">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1206">Convierte el valor del entero de 32 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1206">Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1207">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1207">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1208">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.UInt32> valores a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1208">The following example converts each element in an array of <xref:System.UInt32> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#6)]
 [!code-vb[System.Convert.ToDouble#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As ULong) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToDouble : uint64 -&gt; double" Usage="System.Convert.ToDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1209">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1209">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1210">Convierte el valor del entero de 64 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1210">Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1211">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1211">A double-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1212">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.UInt64> valores a un <xref:System.Double> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1212">The following example converts each element in an array of <xref:System.UInt64> values to a <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Convert.ToDouble#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.todouble/cs/todouble1.cs#7)]
 [!code-vb[System.Convert.ToDouble#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.todouble/vb/todouble1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As Object, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDouble : obj * IFormatProvider -&gt; double" Usage="System.Convert.ToDouble (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1213">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1213">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1214">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1214">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1215">Convierte el valor del objeto especificado en un número de punto flotante de precisión doble, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1215">Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1216">Un número de punto flotante de precisión doble equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1216">A double-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1217">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1217">The return value is the result of invoking the <xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-1218">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1218">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-1219">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-1219">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-1220">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-1220">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1221">En el ejemplo siguiente se define una clase que implementa <xref:System.IConvertible> y una clase que implementa <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-1221">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-1222">Objetos de la clase que implementa <xref:System.IConvertible> contienen una matriz de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1222">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="da069-1223">Un objeto de cada clase se pasa a la `ToDouble` método.</span><span class="sxs-lookup"><span data-stu-id="da069-1223">An object of each class is passed to the `ToDouble` method.</span></span> <span data-ttu-id="da069-1224">Este método devuelve un promedio de la matriz de <xref:System.Double> valores, utilizando el objeto que implementa <xref:System.IFormatProvider> para determinar cómo se calcula el promedio.</span><span class="sxs-lookup"><span data-stu-id="da069-1224">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1225">
            <paramref name="value" /> no es un formato adecuado para un tipo <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1225">
              <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1226">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1226">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1227">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1227">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToDouble(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToDouble (value As String, provider As IFormatProvider) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double ToDouble(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToDouble : string * IFormatProvider -&gt; double" Usage="System.Convert.ToDouble (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1228">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1228">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1229">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1229">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1230">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión doble equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1230">Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1231">Un número de punto flotante de precisión doble equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1231">A double-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1232">El valor devuelto es el resultado de invocar el <xref:System.Double.Parse%2A?displayProperty=nameWithType> método `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1232">The return value is the result of invoking the <xref:System.Double.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="da069-1233">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1233">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-1234">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1234">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1235">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1235">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1236">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Double.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1236">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1237">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1237">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1238">El ejemplo siguiente convierte las representaciones de cadena de <xref:System.Double> valores con el `ToDouble` método, utilizando un <xref:System.IFormatProvider> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1238">The following example converts string representations of <xref:System.Double> values with the `ToDouble` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-csharp[System.Convert.ToReals_String#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToReals_String/CS/todouble.cs#2)]
 [!code-vb[System.Convert.ToReals_String#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToReals_String/VB/todouble.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1239">
            <paramref name="value" /> no es un número con un formato válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1239">
              <paramref name="value" /> is not a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1240">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Double.MinValue" /> o mayor que <see cref="F:System.Double.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1240">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1241">Convierte un valor especificado en un entero de 16 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1241">Converts a specified value to a 16-bit signed integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Boolean) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(bool value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : bool -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1242">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1242">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1243">Convierte el valor booleano especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1243">Converts the specified Boolean value to the equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1244">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1244">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1245">El ejemplo siguiente convierte los valores booleanos `true` y `false` a <xref:System.Int16> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1245">The following example converts the Boolean values `true` and `false` to <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#1)]
 [!code-vb[System.Convert.ToInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Byte) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : byte -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1246">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1246">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1247">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1247">Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1248">Un entero de 16 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1248">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1249">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Byte> valores a un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1249">The following example converts each element in an array of <xref:System.Byte> values to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#2)]
 [!code-vb[System.Convert.ToInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Char) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(char value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : char -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1250">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1250">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1251">Convierte el valor del carácter Unicode especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1251">Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1252">Un entero de 16 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1252">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1253">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Char> valores a un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1253">The following example attempts to convert each element in an array of <xref:System.Char> values to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#3)]
 [!code-vb[System.Convert.ToInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1254">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1254">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As DateTime) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : DateTime -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1255">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1255">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1256">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1256">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1257">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1257">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1258">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1258">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1259">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1259">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Decimal) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : decimal -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1260">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1260">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1261">Convierte el valor del número decimal especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1261">Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1262">
            <paramref name="value" /> se redondea al entero de 16 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1262">
              <paramref name="value" />, rounded to the nearest 16-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1263">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1263">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1264">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Decimal> valores a un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1264">The following example attempts to convert each element in an array of <xref:System.Decimal> values to a 16-bit signed integer.</span></span> <span data-ttu-id="da069-1265">El ejemplo muestra que la parte fraccionaria de un <xref:System.Decimal> valor se redondea al realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-1265">The example illustrates that any fractional part of a <xref:System.Decimal> value is rounded when performing the conversion.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#4)]
 [!code-vb[System.Convert.ToInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1266">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1266">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Double) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(double value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : double -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1267">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1267">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1268">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1268">Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1269">
            <paramref name="value" /> se redondea al entero de 16 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1269">
              <paramref name="value" />, rounded to the nearest 16-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1270">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1270">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1271">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Double> valores a un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1271">The following example converts each element in an array of <xref:System.Double> values to a 16-bit signed integer.</span></span> <span data-ttu-id="da069-1272">El ejemplo muestra que la parte fraccionaria de un <xref:System.Double> se redondea el valor antes de realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-1272">The example illustrates that any fractional part of a <xref:System.Double> value is rounded before performing the conversion.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#5)]
 [!code-vb[System.Convert.ToInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1273">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1273">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(short value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : int16 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1274">Entero de 16 bits con signo que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1274">The 16-bit signed integer to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1275">Devuelve el entero de 16 bits con signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1275">Returns the specified 16-bit signed integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1276">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1276">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(int value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : int -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1277">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1277">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1278">Convierte el valor del entero de 32 bits con signo especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1278">Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1279">Entero de 16 bits con signo que equivale a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1279">The 16-bit signed integer equivalent of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1280">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1280">The following example attempts to convert each element in an array of integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#6)]
 [!code-vb[System.Convert.ToInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1281">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1281">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Long) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(long value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : int64 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1282">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1282">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1283">Convierte el valor del entero de 64 bits con signo especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1283">Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1284">Un entero de 16 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1284">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1285">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros largos en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1285">The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#7)]
 [!code-vb[System.Convert.ToInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1286">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1286">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Object) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : obj -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1287">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1287">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1288">Convierte el valor del objeto especificado en un entero de 16 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1288">Converts the value of the specified object to a 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1289">Un entero de 16 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1289">A 16-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1290">Si `value` no `null`, este método ajusta una llamada a la <xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType> implementación del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1290">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1291">El ejemplo siguiente se intenta convertir cada elemento en una matriz de objetos en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1291">The following example attempts to convert each element in an object array to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#8)]
 [!code-vb[System.Convert.ToInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1292">
            <paramref name="value" /> no es un formato adecuado para un tipo <see cref="T:System.Int16" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1292">
              <paramref name="value" /> is not in an appropriate format for an <see cref="T:System.Int16" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1293">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1293">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1294">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1294">-or-</span>
          </span>
          <span data-ttu-id="da069-1295">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1295">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1296">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1296">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As SByte) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : sbyte -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1297">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1297">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1298">Convierte el valor del entero de 8 bits con signo especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1298">Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1299">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1299">A 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1300">El ejemplo siguiente convierte cada elemento de una matriz de bytes con signo en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1300">The following example converts each element in an array of signed bytes to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#9)]
 [!code-vb[System.Convert.ToInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Single) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(float value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : single -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1301">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1301">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1302">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1302">Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1303">
            <paramref name="value" /> se redondea al entero de 16 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1303">
              <paramref name="value" />, rounded to the nearest 16-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1304">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1304">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1305">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Single> valores a un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1305">The following example attempts to convert each element in an array of <xref:System.Single> values to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#10)]
 [!code-vb[System.Convert.ToInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1306">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" /> o menor que <see cref="F:System.Int16.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1306">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : string -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1307">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1307">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1308">Convierte la representación de cadena especificada de un número en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1308">Converts the specified string representation of a number to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1309">Un entero de 16 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1309">A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1310">Mediante el <xref:System.Convert.ToInt16%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1310">Using the <xref:System.Convert.ToInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-1311">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1311">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-1312">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1312">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1313">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1313">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1314">El ejemplo siguiente convierte las representaciones de cadena de enteros de 16 bits con el `ToInt16` método, utilizando el formato predeterminado.</span><span class="sxs-lookup"><span data-stu-id="da069-1314">The following example converts string representations of 16-bit integers with the `ToInt16` method, using default formatting.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]
 [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]
 [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1315">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1315">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1316">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1316">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Int16.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As UShort) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : uint16 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1317">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1317">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1318">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1318">Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1319">Un entero de 16 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1319">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1320">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros de 16 bits sin signo en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1320">The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#11)]
 [!code-vb[System.Convert.ToInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1321">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1321">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As UInteger) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : uint32 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1322">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1322">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1323">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1323">Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1324">Un entero de 16 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1324">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1325">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros sin signo en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1325">The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#12)]
 [!code-vb[System.Convert.ToInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1326">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1326">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As ULong) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : uint64 -&gt; int16" Usage="System.Convert.ToInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1327">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1327">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1328">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1328">Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1329">Un entero de 16 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1329">A 16-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1330">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros largos sin signo en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1330">The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_1.cs#13)]
 [!code-vb[System.Convert.ToInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1331">
            <paramref name="value" /> es mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1331">
              <paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As Object, provider As IFormatProvider) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : obj * IFormatProvider -&gt; int16" Usage="System.Convert.ToInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1332">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1332">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1333">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1333">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1334">Convierte el valor del objeto especificado en un entero de 16 bits con signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1334">Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1335">Un entero de 16 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1335">A 16-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1336">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1336">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-1337">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-1337">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-1338">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-1338">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1339">En el ejemplo siguiente se define una clase que implementa <xref:System.IConvertible> y una clase que implementa <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-1339">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-1340">Objetos de la clase que implementa <xref:System.IConvertible> contienen una matriz de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1340">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="da069-1341">Un objeto de cada clase se pasa a la `ToInt16` método.</span><span class="sxs-lookup"><span data-stu-id="da069-1341">An object of each class is passed to the `ToInt16` method.</span></span> <span data-ttu-id="da069-1342">Este método devuelve un promedio de la matriz de <xref:System.Double> valores, utilizando el objeto que implementa <xref:System.IFormatProvider> para determinar cómo se calcula el promedio.</span><span class="sxs-lookup"><span data-stu-id="da069-1342">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1343">
            <paramref name="value" /> no es un formato adecuado para un tipo <see cref="T:System.Int16" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1343">
              <paramref name="value" /> is not in an appropriate format for an <see cref="T:System.Int16" /> type.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1344">
            <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1344">
              <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1345">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1345">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String, provider As IFormatProvider) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : string * IFormatProvider -&gt; int16" Usage="System.Convert.ToInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1346">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1346">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1347">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1347">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1348">Convierte la representación de cadena especificada de un número en un entero de 16 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1348">Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1349">Un entero de 16 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1349">A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1350">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1350">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-1351">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1351">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1352">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1352">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1353">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1353">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1354">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1354">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1355">El ejemplo siguiente convierte las representaciones de cadena de enteros de 16 bits con el `ToInt16` método, utilizando un <xref:System.IFormatProvider> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1355">The following example converts string representations of 16-bit integers with the `ToInt16` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/toint16.cpp#3)]
 [!code-csharp[System.Convert.ToSInts_String#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/toint16.cs#3)]
 [!code-vb[System.Convert.ToSInts_String#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/toint16.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1356">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1356">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1357">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1357">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Int16.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt16(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt16 (value As String, fromBase As Integer) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short ToInt16(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToInt16 : string * int -&gt; int16" Usage="System.Convert.ToInt16 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1358">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1358">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-1359">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1359">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1360">Convierte la representación de cadena de un número en una base especificada en un entero de 16 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1360">Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1361">Un entero de 16 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1361">A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1362">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-1362">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-1363">Dado que el signo negativo no es compatible con representaciones numéricas de que no sea de base 10, la <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> método supone que los números negativos utilizan dos representación del complemento.</span><span class="sxs-lookup"><span data-stu-id="da069-1363">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="da069-1364">En otras palabras, el método siempre interpreta el bit de orden superior binario de un entero (bit 15) como su bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1364">In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit.</span></span> <span data-ttu-id="da069-1365">Como resultado, es posible escribir código en el que no son de base 10 de número que está fuera del intervalo de la <xref:System.Int16> tipo de datos se convierte en un <xref:System.Int16> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-1365">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-1366">El siguiente ejemplo se aumenta <xref:System.Int16.MaxValue?displayProperty=nameWithType> por uno, convierte el número resultante en su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1366">The following example increments <xref:System.Int16.MaxValue?displayProperty=nameWithType> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-1367">En lugar de producir una excepción, el método muestra el mensaje, "0 x 8000 se convierte en -32768".</span><span class="sxs-lookup"><span data-stu-id="da069-1367">Instead of throwing an exception, the method displays the message, "0x8000 converts to -32768."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#5)]
 [!code-vb[System.Convert.BaseConversion#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#5)]  
  
 <span data-ttu-id="da069-1368">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método usa la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-1368">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-1369">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos recuperando primero el signo del valor numérico antes de convertirlo en su representación de cadena hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-1369">As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="da069-1370">Producir una excepción si el valor original era positivo pero la conversión a un entero genera un valor negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-1370">Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#6)]
 [!code-vb[System.Convert.BaseConversion#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#6)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-1371">El ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas como una cadena hexadecimal y convertirlo en un entero de 16 bits con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1371">The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint16/cs/toint16_2.cs#14)]
 [!code-vb[System.Convert.ToInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint16/vb/toint16_2.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-1372">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1372">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-1373">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1373">-or-</span>
          </span>
          <span data-ttu-id="da069-1374">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1374">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-1375">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1375">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1376">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1376">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-1377">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1377">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1378">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1378">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-1379">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1379">-or-</span>
          </span>
          <span data-ttu-id="da069-1380">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int16.MinValue" /> o mayor que <see cref="F:System.Int16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1380">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1381">Convierte un valor especificado en un entero de 32 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1381">Converts a specified value to a 32-bit signed integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(bool value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : bool -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1382">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1382">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1383">Convierte el valor booleano especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1383">Converts the specified Boolean value to the equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1384">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1384">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1385">El ejemplo siguiente convierte la <xref:System.Boolean> valores `true` y `false` a enteros.</span><span class="sxs-lookup"><span data-stu-id="da069-1385">The following example converts the <xref:System.Boolean> values `true` and `false` to integers.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#1)]
 [!code-vb[System.Convert.ToInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : byte -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1386">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1386">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1387">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1387">Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1388">Un entero de 32 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1388">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1389">El ejemplo siguiente convierte cada elemento de una matriz de bytes en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1389">The following example converts each element in an array of bytes to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#2)]
 [!code-vb[System.Convert.ToInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(char value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : char -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1390">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1390">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1391">Convierte el valor del carácter Unicode especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1391">Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1392">Un entero de 32 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1392">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1393">El <xref:System.Convert.ToInt32%28System.Char%29> método devuelve un entero de 32 bits con signo que representa la unidad de código con codificación UTF-16 de la `value` argumento.</span><span class="sxs-lookup"><span data-stu-id="da069-1393">The <xref:System.Convert.ToInt32%28System.Char%29> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument.</span></span> <span data-ttu-id="da069-1394">Si `value` no es un suplente bajo o suplente alto, este valor devuelto también representa el punto de código Unicode del valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1394">If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1395">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Char> valores en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1395">The following example converts each element in an array of <xref:System.Char> values to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#3)]
 [!code-vb[System.Convert.ToInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : DateTime -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1396">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1396">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1397">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1397">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1398">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1398">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1399">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1399">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1400">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1400">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : decimal -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1401">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1401">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1402">Convierte el valor del número decimal especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1402">Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1403">
            <paramref name="value" />, redondeado al entero de 32 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1403">
              <paramref name="value" />, rounded to the nearest 32-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1404">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1404">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1405">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Decimal> valores en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1405">The following example attempts to convert each element in an array of <xref:System.Decimal> values to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#4)]
 [!code-vb[System.Convert.ToInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1406">
            <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1406">
              <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(double value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : double -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1407">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1407">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1408">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1408">Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1409">
            <paramref name="value" />, redondeado al entero de 32 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1409">
              <paramref name="value" />, rounded to the nearest 32-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1410">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1410">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1411">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Double> valores a aninteger.</span><span class="sxs-lookup"><span data-stu-id="da069-1411">The following example attempts to convert each element in an array of <xref:System.Double> values to aninteger.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#5)]
 [!code-vb[System.Convert.ToInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1412">
            <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1412">
              <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(short value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : int16 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1413">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1413">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1414">Convierte el valor del entero de 16 bits con signo especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1414">Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1415">Un entero de 32 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1415">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1416">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits con signo en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1416">The following example converts each element in an array of 16-bit signed integers to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#6)]
 [!code-vb[System.Convert.ToInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(int value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : int -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1417">Entero de 32 bits con signo que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1417">The 32-bit signed integer to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1418">Devuelve el entero de 32 bits con signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1418">Returns the specified 32-bit signed integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1419">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1419">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(long value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : int64 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1420">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1420">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1421">Convierte el valor del entero de 64 bits con signo especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1421">Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1422">Un entero de 32 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1422">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1423">El ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1423">The following example attempts to convert each element in an array of long integers to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#7)]
 [!code-vb[System.Convert.ToInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1424">
            <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1424">
              <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : obj -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1425">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1425">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1426">Convierte el valor del objeto especificado en un entero de 32 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1426">Converts the value of the specified object to a 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1427">Un entero de 32 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1427">A 32-bit signed integer equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1428">Si`value` no `null`, este método ajusta una llamada a la <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> implementación del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1428">If`value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1429">El ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1429">The following example attempts to convert each element in an object array to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#8)]
 [!code-vb[System.Convert.ToInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1430">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1430">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1431">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1431">
              <paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1432">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1432">-or-</span>
          </span>
          <span data-ttu-id="da069-1433">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1433">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1434">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1434">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : sbyte -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1435">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1435">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1436">Convierte el valor del entero de 8 bits con signo especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1436">Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1437">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1437">A 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1438">El ejemplo siguiente convierte cada elemento de una matriz de bytes con signo en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1438">The following example converts each element in an array of signed bytes to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#9)]
 [!code-vb[System.Convert.ToInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(float value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : single -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1439">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1439">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1440">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1440">Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1441">
            <paramref name="value" />, redondeado al entero de 32 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1441">
              <paramref name="value" />, rounded to the nearest 32-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1442">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1442">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1443">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Single> valores en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1443">The following example attempts to convert each element in an array of <xref:System.Single> values to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#10)]
 [!code-vb[System.Convert.ToInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1444">
            <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" /> o menor que <see cref="F:System.Int32.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1444">
              <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" /> or less than <see cref="F:System.Int32.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : string -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1445">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1445">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1446">Convierte la representación de cadena especificada de un número en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1446">Converts the specified string representation of a number to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1447">Un entero de 32 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1447">A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1448">Mediante el <xref:System.Convert.ToInt32%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType> método.`value`</span><span class="sxs-lookup"><span data-stu-id="da069-1448">Using the <xref:System.Convert.ToInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType> method.`value`</span></span> <span data-ttu-id="da069-1449">se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1449">is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-1450">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1450">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1451">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1451">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1452">El ejemplo siguiente se intenta convertir cada elemento de una matriz de cadena numérica en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1452">The following example attempts to convert each element in a numeric string array to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#11)]
 [!code-vb[System.Convert.ToInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1453">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1453">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1454">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1454">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : uint16 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1455">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1455">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1456">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1456">Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1457">Un entero de 32 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1457">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1458">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits sin signo en un entero.</span><span class="sxs-lookup"><span data-stu-id="da069-1458">The following example converts each element in an array of 16-bit unsigned integers to an integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#12)]
 [!code-vb[System.Convert.ToInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : uint32 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1459">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1459">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1460">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1460">Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1461">Un entero de 32 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1461">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1462">El ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros sin signo en un entero con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1462">The following example attempts to convert each element in an array of unsigned integers to a signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#13)]
 [!code-vb[System.Convert.ToInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1463">
            <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1463">
              <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : uint64 -&gt; int" Usage="System.Convert.ToInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1464">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1464">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1465">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1465">Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1466">Un entero de 32 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1466">A 32-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1467">El ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos sin signo en un entero con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1467">The following example attempts to convert each element in an array of unsigned long integers to a signed integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_1.cs#14)]
 [!code-vb[System.Convert.ToInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1468">
            <paramref name="value" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1468">
              <paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As Object, provider As IFormatProvider) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : obj * IFormatProvider -&gt; int" Usage="System.Convert.ToInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1469">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1469">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1470">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1470">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1471">Convierte el valor del objeto especificado en un entero de 32 bits con signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1471">Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1472">Un entero de 32 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1472">A 32-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1473">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1473">The return value is the result of invoking the <xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-1474">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1474">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-1475">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-1475">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-1476">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-1476">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1477">En el ejemplo siguiente se define una clase que implementa <xref:System.IConvertible> y una clase que implementa <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-1477">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-1478">Objetos de la clase que implementa <xref:System.IConvertible> contienen una matriz de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1478">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="da069-1479">Un objeto de cada clase se pasa a la `ToInt32` método.</span><span class="sxs-lookup"><span data-stu-id="da069-1479">An object of each class is passed to the `ToInt32` method.</span></span> <span data-ttu-id="da069-1480">Este método devuelve un promedio de la matriz de <xref:System.Double> valores, utilizando el objeto que implementa <xref:System.IFormatProvider> para determinar cómo se calcula el promedio.</span><span class="sxs-lookup"><span data-stu-id="da069-1480">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1481">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1481">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1482">
            <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1482">
              <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1483">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1483">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String, provider As IFormatProvider) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : string * IFormatProvider -&gt; int" Usage="System.Convert.ToInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1484">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1484">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1485">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1485">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1486">Convierte la representación de cadena especificada de un número en un entero de 32 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1486">Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1487">Un entero de 32 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1487">A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1488">El valor devuelto es el resultado de invocar el <xref:System.Int32.Parse%2A?displayProperty=nameWithType> método `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1488">The return value is the result of invoking the <xref:System.Int32.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="da069-1489">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1489">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-1490">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1490">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1491">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1491">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1492">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1492">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1493">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1493">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1494">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-1494">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="da069-1495">A continuación, intenta convertir cada elemento de una matriz de cadenas numéricas en un entero con ambos este proveedor y el <xref:System.Globalization.NumberFormatInfo> proveedor para la referencia cultural invariable.</span><span class="sxs-lookup"><span data-stu-id="da069-1495">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint32/cs/toint32_2.cs#15)]
 [!code-vb[System.Convert.ToInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint32/vb/toint32_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1496">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1496">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1497">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1497">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt32 (value As String, fromBase As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ToInt32(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToInt32 : string * int -&gt; int" Usage="System.Convert.ToInt32 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1498">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1498">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-1499">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1499">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1500">Convierte la representación de cadena de un número en una base especificada en un entero de 32 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1500">Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1501">Un entero de 32 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1501">A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1502">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-1502">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-1503">Dado que el signo negativo no es compatible con representaciones numéricas de que no sea de base 10, la <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> método supone que los números negativos utilizan dos representación del complemento.</span><span class="sxs-lookup"><span data-stu-id="da069-1503">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="da069-1504">En otras palabras, el método siempre interpreta el bit de orden superior binario de un entero (bit 31) como su bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1504">In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit.</span></span> <span data-ttu-id="da069-1505">Como resultado, es posible escribir código en el que no son de base 10 de número que está fuera del intervalo de la <xref:System.Int32> tipo de datos se convierte en un <xref:System.Int32> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-1505">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-1506">El siguiente ejemplo se aumenta <xref:System.Int32.MaxValue?displayProperty=nameWithType> por uno, convierte el número resultante en su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1506">The following example increments <xref:System.Int32.MaxValue?displayProperty=nameWithType> by one, converts the resulting number to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-1507">En lugar de producir una excepción, el método muestra el mensaje, "0 x 80000000 se convierte en -2147483648".</span><span class="sxs-lookup"><span data-stu-id="da069-1507">Instead of throwing an exception, the method displays the message, "0x80000000 converts to -2147483648."</span></span>  
  
 [!code-cpp[System.Convert.BaseConversion#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#1)]
 [!code-csharp[System.Convert.BaseConversion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#1)]
 [!code-vb[System.Convert.BaseConversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#1)]  
  
 <span data-ttu-id="da069-1508">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método usa la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-1508">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-1509">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos recuperando primero el signo del valor numérico antes de convertirlo en su representación de cadena hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-1509">As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="da069-1510">Producir una excepción si el valor original era positivo pero la conversión a un entero genera un valor negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-1510">Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</span></span>  
  
 [!code-cpp[System.Convert.BaseConversion#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cpp/toint_str_int32.cpp#2)]
 [!code-csharp[System.Convert.BaseConversion#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#2)]
 [!code-vb[System.Convert.BaseConversion#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-1511">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1511">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-1512">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1512">-or-</span>
          </span>
          <span data-ttu-id="da069-1513">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1513">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-1514">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1514">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1515">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1515">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-1516">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1516">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1517">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1517">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-1518">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1518">-or-</span>
          </span>
          <span data-ttu-id="da069-1519">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int32.MinValue" /> o mayor que <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1519">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1520">Convierte un valor especificado en un entero de 64 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1520">Converts a specified value to a 64-bit signed integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(bool value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : bool -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1521">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1521">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1522">Convierte el valor booleano especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1522">Converts the specified Boolean value to the equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1523">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1523">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1524">El ejemplo siguiente convierte la <xref:System.Boolean> valores `true` y `false` en enteros largos.</span><span class="sxs-lookup"><span data-stu-id="da069-1524">The following example converts the <xref:System.Boolean> values `true` and `false` to long integers.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#1)]
 [!code-vb[System.Convert.ToInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Byte) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : byte -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1525">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1525">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1526">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1526">Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1527">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1527">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1528">El ejemplo siguiente convierte cada elemento de una matriz de bytes en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1528">The following example converts each element in an array of bytes to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#2)]
 [!code-vb[System.Convert.ToInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Char) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(char value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : char -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1529">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1529">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1530">Convierte el valor del carácter Unicode especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1530">Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1531">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1531">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1532">El ejemplo siguiente convierte cada elemento de un <xref:System.Char> matriz a un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1532">The following example converts each element in a <xref:System.Char> array to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#3)]
 [!code-vb[System.Convert.ToInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As DateTime) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : DateTime -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1533">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1533">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1534">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1534">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1535">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1535">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1536">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1536">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1537">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1537">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Decimal) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : decimal -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1538">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1538">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1539">Convierte el valor del número decimal especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1539">Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1540">
            <paramref name="value" />, redondeado al entero de 64 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1540">
              <paramref name="value" />, rounded to the nearest 64-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1541">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1541">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1542">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Decimal> valores en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1542">The following example attempts to convert each element in an array of <xref:System.Decimal> values to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#4)]
 [!code-vb[System.Convert.ToInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1543">
            <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" /> o menor que <see cref="F:System.Int64.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1543">
              <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Double) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(double value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : double -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1544">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1544">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1545">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1545">Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1546">
            <paramref name="value" />, redondeado al entero de 64 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1546">
              <paramref name="value" />, rounded to the nearest 64-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1547">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1547">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1548">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Double> valores en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1548">The following example attempts to convert each element in an array of <xref:System.Double> values to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#5)]
 [!code-vb[System.Convert.ToInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1549">
            <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" /> o menor que <see cref="F:System.Int64.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1549">
              <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Short) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(short value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : int16 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1550">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1550">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1551">Convierte el valor del entero de 16 bits con signo especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1551">Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1552">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1552">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1553">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1553">The following example converts each element in an array of 16-bit integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#6)]
 [!code-vb[System.Convert.ToInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(int value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : int -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1554">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1554">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1555">Convierte el valor del entero de 32 bits con signo especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1555">Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1556">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1556">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(long value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : int64 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1557">Entero de 64 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1557">A 64-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1558">Devuelve el entero de 64 bits con signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1558">Returns the specified 64-bit signed integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1559">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1559">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1560">El ejemplo siguiente convierte cada elemento de una matriz de enteros en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1560">The following example converts each element in an array of integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#7)]
 [!code-vb[System.Convert.ToInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Object) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : obj -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1561">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1561">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1562">Convierte el valor del objeto especificado en un entero de 64 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1562">Converts the value of the specified object to a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1563">Un entero de 64 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1563">A 64-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1564">Si `value` no `null`, este método ajusta una llamada a la <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> implementación del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1564">If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> implementation of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1565">El ejemplo siguiente se intenta convertir cada elemento en una matriz de objetos en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1565">The following example attempts to convert each element in an object array to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#8)]
 [!code-vb[System.Convert.ToInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1566">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1566">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1567">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1567">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1568">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1568">-or-</span>
          </span>
          <span data-ttu-id="da069-1569">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1569">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1570">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1570">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As SByte) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : sbyte -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1571">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1571">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1572">Convierte el valor del entero de 8 bits con signo especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1572">Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1573">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1573">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1574">El ejemplo siguiente convierte cada elemento de una matriz de bytes con signo en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1574">The following example converts each element in a signed byte array to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#9)]
 [!code-vb[System.Convert.ToInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Single) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(float value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : single -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1575">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1575">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1576">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1576">Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1577">
            <paramref name="value" />, redondeado al entero de 64 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1577">
              <paramref name="value" />, rounded to the nearest 64-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1578">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1578">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1579">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Single> valores en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1579">The following example attempts to convert each element in an array of <xref:System.Single> values to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#10)]
 [!code-vb[System.Convert.ToInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1580">
            <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" /> o menor que <see cref="F:System.Int64.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1580">
              <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" /> or less than <see cref="F:System.Int64.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : string -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1581">Cadena que contiene un número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1581">A string that contains a number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1582">Convierte la representación de cadena especificada de un número en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1582">Converts the specified string representation of a number to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1583">Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1583">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1584">Mediante el <xref:System.Convert.ToInt64%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1584">Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-1585">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1585">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-1586">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1586">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1587">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1587">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1588">El ejemplo siguiente se intenta convertir cada elemento en una matriz de cadenas numéricas en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1588">The following example attempts to convert each element in an array of numeric strings to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#11)]
 [!code-vb[System.Convert.ToInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1589">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1589">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1590">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1590">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As UShort) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : uint16 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1591">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1591">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1592">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1592">Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1593">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1593">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1594">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits sin signo en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1594">The following example converts each element in an array of 16-bit unsigned integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#12)]
 [!code-vb[System.Convert.ToInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As UInteger) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : uint32 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1595">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1595">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1596">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1596">Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1597">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1597">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1598">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros sin signo en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1598">The following example converts each element in an array of unsigned integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#13)]
 [!code-vb[System.Convert.ToInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As ULong) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : uint64 -&gt; int64" Usage="System.Convert.ToInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1599">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1599">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1600">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1600">Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1601">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1601">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1602">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros largos sin signo en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1602">The following example attempts to convert each element in an array of unsigned long integers to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#14)]
 [!code-vb[System.Convert.ToInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1603">
            <paramref name="value" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1603">
              <paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As Object, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : obj * IFormatProvider -&gt; int64" Usage="System.Convert.ToInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1604">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1604">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1605">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1605">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1606">Convierte el valor del objeto especificado en un entero de 64 bits con signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1606">Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1607">Un entero de 64 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1607">A 64-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1608">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1608">The return value is the result of invoking the <xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-1609">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1609">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-1610">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-1610">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-1611">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-1611">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1612">En el ejemplo siguiente se define una clase que implementa <xref:System.IConvertible> y una clase que implementa <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="da069-1612">The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="da069-1613">Objetos de la clase que implementa <xref:System.IConvertible> contienen una matriz de <xref:System.Double> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1613">Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values.</span></span> <span data-ttu-id="da069-1614">Un objeto de cada clase se pasa a la `ToInt64` método.</span><span class="sxs-lookup"><span data-stu-id="da069-1614">An object of each class is passed to the `ToInt64` method.</span></span> <span data-ttu-id="da069-1615">Este método devuelve un promedio de la matriz de <xref:System.Double> valores, utilizando el objeto que implementa <xref:System.IFormatProvider> para determinar cómo se calcula el promedio.</span><span class="sxs-lookup"><span data-stu-id="da069-1615">This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.</span></span>  
  
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CPP/objectifp.cpp#1)]
 [!code-csharp[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/CS/objectifp.cs#1)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToXXX_Object_IFP/VB/objectifp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1616">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1616">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1617">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1617">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1618">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1618">-or-</span>
          </span>
          <span data-ttu-id="da069-1619">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1619">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1620">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1620">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : string * IFormatProvider -&gt; int64" Usage="System.Convert.ToInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1621">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1621">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1622">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1622">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1623">Convierte la representación de cadena especificada de un número en un entero de 64 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1623">Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1624">Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1624">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1625">El valor devuelto es el resultado de invocar el <xref:System.Int64.Parse%2A?displayProperty=nameWithType> método `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1625">The return value is the result of invoking the <xref:System.Int64.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="da069-1626">`provider` es un `IFormatProvider` instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1626">`provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-1627">El `NumberFormatInfo` objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1627">The `NumberFormatInfo` object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1628">Si `provider` es `null`, el `NumberFormatInfo` se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1628">If `provider` is `null`, the `NumberFormatInfo` for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1629">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1629">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1630">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1630">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1631">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-1631">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="da069-1632">A continuación, intenta convertir cada elemento de una matriz de cadenas numéricas en un entero con ambos este proveedor y el <xref:System.Globalization.NumberFormatInfo> proveedor para la referencia cultural invariable.</span><span class="sxs-lookup"><span data-stu-id="da069-1632">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_3.cs#16)]
 [!code-vb[System.Convert.ToInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1633">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1633">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1634">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1634">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToInt64(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToInt64 (value As String, fromBase As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long ToInt64(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToInt64 : string * int -&gt; int64" Usage="System.Convert.ToInt64 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1635">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1635">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-1636">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1636">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1637">Convierte la representación de cadena de un número en una base especificada en un entero de 64 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1637">Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1638">Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1638">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1639">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-1639">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-1640">Dado que el signo negativo no es compatible con representaciones numéricas de que no sea de base 10, la <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> método supone que los números negativos utilizan dos representación del complemento.</span><span class="sxs-lookup"><span data-stu-id="da069-1640">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="da069-1641">En otras palabras, el método siempre interpreta el bit de orden superior binario de un entero largo (bit 63) como su bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1641">In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit.</span></span> <span data-ttu-id="da069-1642">Como resultado, es posible escribir código en el que no son de base 10 de número que está fuera del intervalo de la <xref:System.Int64> tipo de datos se convierte en un <xref:System.Int64> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-1642">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-1643">El ejemplo siguiente convierte <xref:System.UInt64.MaxValue> a su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1643">The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-1644">En lugar de producir una excepción, el método muestra el mensaje "0xFFFFFFFFFFFFFFFF se convierte en -1".</span><span class="sxs-lookup"><span data-stu-id="da069-1644">Instead of throwing an exception, the method displays the message, "0xFFFFFFFFFFFFFFFF converts to -1."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#7)]
 [!code-vb[System.Convert.BaseConversion#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#7)]  
  
 <span data-ttu-id="da069-1645">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método usa la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-1645">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-1646">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos, determine primero si el valor representa sin signo o un tipo con signo al convertirlo en su representación de cadena hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-1646">As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="da069-1647">Producir una excepción si el valor original era un tipo sin signo pero la conversión a un entero genera un valor cuyo bit de inicio de sesión está activado.</span><span class="sxs-lookup"><span data-stu-id="da069-1647">Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#8)]
 [!code-vb[System.Convert.BaseConversion#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#8)]  
  
 <span data-ttu-id="da069-1648">El ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas como una cadena hexadecimal y convertirlo en un entero largo.</span><span class="sxs-lookup"><span data-stu-id="da069-1648">The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_2.cs#15)]
 [!code-vb[System.Convert.ToInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-1649">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1649">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-1650">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1650">-or-</span>
          </span>
          <span data-ttu-id="da069-1651">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1651">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-1652">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1652">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1653">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1653">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-1654">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1654">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1655">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1655">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-1656">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1656">-or-</span>
          </span>
          <span data-ttu-id="da069-1657">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Int64.MinValue" /> o mayor que <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1657">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToSByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1658">Convierte un valor especificado en un entero de 8 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1658">Converts a specified value to an 8-bit signed integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Boolean) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(bool value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : bool -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1659">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1659">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1660">Convierte el valor booleano especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1660">Converts the specified Boolean value to the equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1661">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1661">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1662">El ejemplo siguiente convierte los valores booleanos `true` y `false` para firmar los valores de byte.</span><span class="sxs-lookup"><span data-stu-id="da069-1662">The following example converts the Boolean values `true` and `false` to signed byte values.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#1)]
 [!code-vb[System.Convert.ToSByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Byte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : byte -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1663">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1663">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1664">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1664">Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1665">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1665">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1666">El ejemplo siguiente se intenta convertir cada elemento de una matriz de bytes en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1666">The following example attempts to convert each element in a byte array to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#2)]
 [!code-vb[System.Convert.ToSByte#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1667">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1667">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Char) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(char value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : char -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1668">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1668">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1669">Convierte el valor del carácter Unicode especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1669">Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1670">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1670">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1671">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Char> valores en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1671">The following example attempts to convert each element in an array of <xref:System.Char> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#3)]
 [!code-vb[System.Convert.ToSByte#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1672">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1672">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As DateTime) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : DateTime -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1673">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1673">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1674">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1674">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1675">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1675">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1676">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1676">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1677">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1677">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Decimal) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : decimal -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1678">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1678">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1679">Convierte el valor del número decimal especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1679">Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1680">
            <paramref name="value" />, redondeado al entero de 8 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1680">
              <paramref name="value" />, rounded to the nearest 8-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1681">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1681">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1682">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Decimal> valores en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1682">The following example attempts to convert each element in an array of <xref:System.Decimal> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#4)]
 [!code-vb[System.Convert.ToSByte#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1683">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1683">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Double) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(double value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : double -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1684">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1684">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1685">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1685">Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1686">
            <paramref name="value" />, redondeado al entero de 8 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1686">
              <paramref name="value" />, rounded to the nearest 8-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1687">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1687">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1688">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Double> valores en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1688">The following example attempts to convert each element in an array of <xref:System.Double> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#5)]
 [!code-vb[System.Convert.ToSByte#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1689">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1689">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Short) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(short value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : int16 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1690">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1690">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1691">Convierte el valor del entero de 16 bits con signo especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1691">Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1692">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1692">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1693">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros de 16 bits con signo en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1693">The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#6)]
 [!code-vb[System.Convert.ToSByte#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1694">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1694">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Integer) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(int value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : int -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1695">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1695">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1696">Convierte el valor del entero de 32 bits con signo especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1696">Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1697">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1697">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1698">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros con signo en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1698">The following example attempts to convert each element in an array of signed integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#7)]
 [!code-vb[System.Convert.ToSByte#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1699">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1699">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Long) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(long value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : int64 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1700">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1700">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1701">Convierte el valor del entero de 64 bits con signo especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1701">Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1702">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1702">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1703">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros largos en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1703">The following example attempts to convert each element in an array of long integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#8)]
 [!code-vb[System.Convert.ToSByte#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1704">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1704">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Object) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : obj -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1705">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1705">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1706">Convierte el valor del objeto especificado en un entero de 8 bits con signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1706">Converts the value of the specified object to an 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1707">Un entero de 8 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1707">An 8-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1708">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1708">The return value is the result of invoking the <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1709">El ejemplo siguiente se intenta convertir cada elemento en una matriz de objetos en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1709">The following example attempts to convert each element in an object array to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]
 [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1710">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1710">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1711">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1711">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1712">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1712">-or-</span>
          </span>
          <span data-ttu-id="da069-1713">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1713">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1714">
            <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1714">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : sbyte -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1715">Entero de 8 bits con signo que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1715">The 8-bit signed integer to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1716">Devuelve el entero de 8 bits con signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1716">Returns the specified 8-bit signed integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1717">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1717">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Single) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(float value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : single -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1718">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1718">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1719">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1719">Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1720">
            <paramref name="value" />, redondeado al entero de 8 bits con signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1720">
              <paramref name="value" />, rounded to the nearest 8-bit signed integer.</span>
          </span>
          <span data-ttu-id="da069-1721">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1721">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1722">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Single> valores en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1722">The following example attempts to convert each element in an array of <xref:System.Single> values to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#9)]
 [!code-vb[System.Convert.ToSByte#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1723">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1723">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : string -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1724">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1724">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1725">Convierte la representación de cadena especificada de un número en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1725">Converts the specified string representation of a number to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1726">Entero de 8 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si value es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1726">An 8-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1727">Mediante el <xref:System.Convert.ToSByte%28System.String%29> método es equivalente a pasar `value` a la <xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1727">Using the <xref:System.Convert.ToSByte%28System.String%29> method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-1728">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1728">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-1729">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1729">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1730">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1730">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1731">El ejemplo siguiente convierte las representaciones de cadena de <xref:System.SByte> valores con el `ToSByte` método, utilizando el formato predeterminado.</span><span class="sxs-lookup"><span data-stu-id="da069-1731">The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using default formatting.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]
 [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]
 [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1732">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1732">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1733">
            <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1733">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.SByte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As UShort) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : uint16 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1734">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1734">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1735">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1735">Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1736">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1736">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1737">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros de 16 bits sin signo en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1737">The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#11)]
 [!code-vb[System.Convert.ToSByte#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1738">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1738">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As UInteger) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : uint32 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1739">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1739">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1740">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1740">Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1741">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1741">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1742">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1742">The following example attempts to convert each element in an integer array to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#12)]
 [!code-vb[System.Convert.ToSByte#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1743">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1743">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As ULong) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToSByte : uint64 -&gt; sbyte" Usage="System.Convert.ToSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1744">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1744">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1745">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1745">Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1746">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1746">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1747">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros largos en un byte con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1747">The following example attempts to convert each element in an array of long integers to a signed byte.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte1.cs#13)]
 [!code-vb[System.Convert.ToSByte#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1748">
            <paramref name="value" /> es mayor que <see cref="F:System.SByte.MaxValue" /> o menor que <see cref="F:System.SByte.MinValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1748">
              <paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As Object, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSByte : obj * IFormatProvider -&gt; sbyte" Usage="System.Convert.ToSByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1749">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1749">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1750">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1750">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1751">Convierte el valor del objeto especificado en un entero de 8 bits con signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1751">Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1752">Un entero de 8 bits con signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1752">An 8-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1753">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1753">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-1754">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-1754">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-1755">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-1755">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1756">En el ejemplo siguiente se define un `ByteString` clase que almacena ambos firmados y sin firmar bytes como cadenas hexadecimales junto con un campo que indica el signo del byte.</span><span class="sxs-lookup"><span data-stu-id="da069-1756">The following example defines a `ByteString` class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte.</span></span> <span data-ttu-id="da069-1757">La clase `ByteString` implementa la interfaz <xref:System.IConvertible>.</span><span class="sxs-lookup"><span data-stu-id="da069-1757">The `ByteString` class implements the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="da069-1758">Su <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> llamadas al método el <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> método para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-1758">Its <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> method calls the <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> method to perform the conversion.</span></span> <span data-ttu-id="da069-1759">Si se produce un error, produce un <xref:System.OverflowException>.</span><span class="sxs-lookup"><span data-stu-id="da069-1759">If it fails, it throws an <xref:System.OverflowException>.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#14)]
 [!code-vb[System.Convert.ToSByte#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#14)]  
  
 <span data-ttu-id="da069-1760">El ejemplo siguiente se muestra cómo el <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> implementación de la `ByteString` clase llama a la <xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1760">The following example shows how the <xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType> implementation of the `ByteString` class is called by the <xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte2.cs#15)]
 [!code-vb[System.Convert.ToSByte#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1761">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1761">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1762">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1762">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1763">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1763">-or-</span>
          </span>
          <span data-ttu-id="da069-1764">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1764">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1765">
            <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1765">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSByte : string * IFormatProvider -&gt; sbyte" Usage="System.Convert.ToSByte (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1766">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1766">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1767">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1767">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1768">Convierte la representación de cadena especificada de un número en un entero de 8 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1768">Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1769">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1769">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1770">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1770">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-1771">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1771">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1772">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1772">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1773">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1773">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1774">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1774">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1775">El ejemplo siguiente convierte las representaciones de cadena de <xref:System.SByte> valores con el `ToSByte` método, utilizando un <xref:System.IFormatProvider> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1775">The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using an <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CPP/tosbyte.cpp#4)]
 [!code-csharp[System.Convert.ToSInts_String#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToSInts_String/CS/tosbyte.cs#4)]
 [!code-vb[System.Convert.ToSInts_String#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToSInts_String/VB/tosbyte.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="da069-1776">
            <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1776">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1777">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1777">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1778">
            <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1778">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.SByte.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSByte(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSByte (value As String, fromBase As Integer) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte ToSByte(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToSByte : string * int -&gt; sbyte" Usage="System.Convert.ToSByte (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1779">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1779">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-1780">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1780">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1781">Convierte la representación de cadena de un número en una base especificada en un entero de 8 bits con signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1781">Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1782">Entero de 8 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1782">An 8-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1783">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-1783">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-1784">Dado que el signo negativo no es compatible con representaciones numéricas de que no sea de base 10, la <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> método supone que los números negativos utilizan dos representación del complemento.</span><span class="sxs-lookup"><span data-stu-id="da069-1784">Because the negative sign is not supported for non-base 10 numeric representations, the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method assumes that negative numbers use two’s complement representation.</span></span> <span data-ttu-id="da069-1785">En otras palabras, el método siempre interpreta el bit de orden superior de un byte (bit 7) como su bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1785">In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit.</span></span> <span data-ttu-id="da069-1786">Como resultado, es posible escribir código en el que no son de base 10 de número que está fuera del intervalo de la <xref:System.SByte> tipo de datos se convierte en un <xref:System.SByte> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-1786">As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-1787">El ejemplo siguiente convierte <xref:System.Byte.MaxValue> a su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1787">The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-1788">En lugar de producir una excepción, el método muestra el mensaje "0xff se convierte en -1".</span><span class="sxs-lookup"><span data-stu-id="da069-1788">Instead of throwing an exception, the method displays the message, "0xff converts to -1."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#9)]
 [!code-vb[System.Convert.BaseConversion#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#9)]  
  
 <span data-ttu-id="da069-1789">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método usa la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-1789">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-1790">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos, determine primero si el valor representa sin signo o un tipo con signo al convertirlo en su representación de cadena hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-1790">As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</span></span> <span data-ttu-id="da069-1791">Producir una excepción si el valor original era un tipo sin signo pero la conversión a un byte con signo genera un valor cuyo bit de inicio de sesión está activado.</span><span class="sxs-lookup"><span data-stu-id="da069-1791">Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#10)]
 [!code-vb[System.Convert.BaseConversion#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#10)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-1792">El ejemplo siguiente se intenta interpretar los elementos en una matriz de cadenas como binaria, octal y la representación hexadecimal de valores numéricos para convertirlos en bytes sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-1792">The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.</span></span>  
  
 [!code-csharp[System.Convert.ToSByte#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosbyte/cs/tosbyte3.cs#16)]
 [!code-vb[System.Convert.ToSByte#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosbyte/vb/tosbyte3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-1793">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1793">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-1794">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1794">-or-</span>
          </span>
          <span data-ttu-id="da069-1795">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1795">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-1796">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1796">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1797">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1797">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-1798">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1798">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1799">
            <paramref name="value" />, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1799">
              <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-1800">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1800">-or-</span>
          </span>
          <span data-ttu-id="da069-1801">
            <paramref name="value" /> representa un número menor que <see cref="F:System.SByte.MinValue" /> o mayor que <see cref="F:System.SByte.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1801">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToSingle">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1802">Convierte un valor especificado en un número de punto flotante de precisión sencilla.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1802">Converts a specified value to a single-precision floating-point number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Boolean) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(bool value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : bool -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1803">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1803">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1804">Convierte el valor booleano especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1804">Converts the specified Boolean value to the equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1805">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1805">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1806">El ejemplo siguiente convierte los valores booleanos `true` y `false` a <xref:System.Single> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1806">The following example converts the Boolean values `true` and `false` to <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#1)]
 [!code-vb[System.Convert.ToSingle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Byte) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : byte -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1807">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1807">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1808">Convierte el valor del entero de 8 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1808">Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1809">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1809">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1810">El ejemplo siguiente convierte cada elemento de una matriz de valores de byte a una <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1810">The following example converts each element in an array of byte values to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#2)]
 [!code-vb[System.Convert.ToSingle#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Char) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(char value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : char -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1811">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1811">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1812">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1812">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1813">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1813">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1814">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1814">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1815">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1815">This conversion is not supported.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As DateTime) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : DateTime -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1816">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1816">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1817">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1817">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1818">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1818">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-1819">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1819">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1820">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1820">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Decimal) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : decimal -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1821">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1821">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1822">Convierte el valor del número decimal especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1822">Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1823">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1823">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-1824">
            <paramref name="value" /> se redondea utilizando el sistema de redondeo al valor más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1824">
              <paramref name="value" /> is rounded using rounding to nearest.</span>
          </span>
          <span data-ttu-id="da069-1825">Por ejemplo, cuando se redondea a dos decimales, el valor 2,345 se convierte en 2,34 y el valor 2,355 pasa a ser 2,36.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1825">For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1826">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Decimal> valores a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1826">The following example converts each element in an array of <xref:System.Decimal> values to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#3)]
 [!code-vb[System.Convert.ToSingle#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Double) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(double value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : double -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1827">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1827">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1828">Convierte el valor del número de punto flotante de precisión doble especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1828">Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1829">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1829">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="da069-1830">
            <paramref name="value" /> se redondea utilizando el sistema de redondeo al valor más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1830">
              <paramref name="value" /> is rounded using rounding to nearest.</span>
          </span>
          <span data-ttu-id="da069-1831">Por ejemplo, cuando se redondea a dos decimales, el valor 2,345 se convierte en 2,34 y el valor 2,355 pasa a ser 2,36.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1831">For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1832">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Double> valores a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1832">The following example converts each element in an array of <xref:System.Double> values to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#4)]
 [!code-vb[System.Convert.ToSingle#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Short) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(short value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : int16 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1833">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1833">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1834">Convierte el valor del entero de 16 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1834">Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1835">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1835">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1836">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1836">The following example converts each element in an array of 16-bit integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#5)]
 [!code-vb[System.Convert.ToSingle#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Integer) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(int value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : int -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1837">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1837">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1838">Convierte el valor del entero de 32 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1838">Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1839">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1839">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1840">El ejemplo siguiente convierte cada elemento de una matriz de enteros a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1840">The following example converts each element in an integer array to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#6)]
 [!code-vb[System.Convert.ToSingle#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Long) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(long value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : int64 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1841">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1841">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1842">Convierte el valor del entero de 64 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1842">Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1843">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1843">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1844">El ejemplo siguiente convierte cada elemento de una matriz de enteros largos en un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1844">The following example converts each element in an array of long integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#7)]
 [!code-vb[System.Convert.ToSingle#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Object) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : obj -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1845">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1845">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1846">Convierte el valor del objeto especificado en un número de punto flotante de precisión sencilla.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1846">Converts the value of the specified object to a single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1847">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1847">A single-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1848">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1848">The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1849">El ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1849">The following example attempts to convert each element in an object array to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#8)]
 [!code-vb[System.Convert.ToSingle#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1850">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1850">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1851">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1851">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-1852">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1852">-or-</span>
          </span>
          <span data-ttu-id="da069-1853">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1853">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1854">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1854">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As SByte) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : sbyte -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1855">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1855">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1856">Convierte el valor del entero de 8 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1856">Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1857">Un entero de 8 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1857">An 8-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1858">El ejemplo siguiente convierte cada elemento de una matriz de bytes con signo a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1858">The following example converts each element in a signed byte array to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#9)]
 [!code-vb[System.Convert.ToSingle#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(float value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : single -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1859">Número de punto flotante de precisión sencilla que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1859">The single-precision floating-point number to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1860">Devuelve el número de punto flotante de precisión sencilla especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1860">Returns the specified single-precision floating-point number; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1861">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1861">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Single" />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : string -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1862">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1862">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1863">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1863">Converts the specified string representation of a number to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1864">Un número de punto flotante de precisión sencilla equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1864">A single-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1865">Mediante el <xref:System.Convert.ToSingle%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1865">Using the <xref:System.Convert.ToSingle%28System.String%29> method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-1866">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1866">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-1867">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Single.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1867">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1868">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1868">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1869">El ejemplo siguiente se intenta convertir cada elemento de una matriz de cadenas numéricas a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1869">The following example attempts to convert each element in an array of numeric strings to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#10)]
 [!code-vb[System.Convert.ToSingle#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1870">
            <paramref name="value" /> no es un número con un formato válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1870">
              <paramref name="value" /> is not a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1871">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1871">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As UShort) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : uint16 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1872">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1872">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1873">Convierte el valor del entero de 16 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1873">Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1874">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1874">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1875">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits sin signo a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1875">The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#11)]
 [!code-vb[System.Convert.ToSingle#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As UInteger) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : uint32 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1876">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1876">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1877">Convierte el valor del entero de 32 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1877">Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1878">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1878">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1879">El ejemplo siguiente convierte cada elemento de una matriz de enteros sin signo a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1879">The following example converts each element in an array of unsigned integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#12)]
 [!code-vb[System.Convert.ToSingle#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As ULong) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToSingle : uint64 -&gt; single" Usage="System.Convert.ToSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1880">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1880">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1881">Convierte el valor del entero de 64 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1881">Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1882">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1882">A single-precision floating-point number that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1883">El ejemplo siguiente convierte cada elemento de una matriz de enteros largos sin signo a un <xref:System.Single> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1883">The following example converts each element in an array of unsigned long integers to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle1.cs#13)]
 [!code-vb[System.Convert.ToSingle#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As Object, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSingle : obj * IFormatProvider -&gt; single" Usage="System.Convert.ToSingle (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1884">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1884">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1885">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1885">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1886">Convierte el valor del objeto especificado en un número de punto flotante de precisión sencilla, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1886">Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1887">Un número de punto flotante de precisión sencilla equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1887">A single-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1888">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1888">The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-1889">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1889">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-1890">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-1890">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-1891">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-1891">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1892">En el ejemplo siguiente se define una clase `Temperature` que implementa la interfaz <xref:System.IConvertible>.</span><span class="sxs-lookup"><span data-stu-id="da069-1892">The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="da069-1893">Su implementación de la <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> método devuelve el valor interno de una privada <xref:System.Single> variable que representa la temperatura.</span><span class="sxs-lookup"><span data-stu-id="da069-1893">Its implementation of the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> method returns the internal value of a private <xref:System.Single> variable that represents the temperature.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#14)]
 [!code-vb[System.Convert.ToSingle#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#14)]  
  
 <span data-ttu-id="da069-1894">El ejemplo siguiente se muestra cómo una llamada a la <xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método, a su vez, llama a la <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> implementación de la `Temperature` clase.</span><span class="sxs-lookup"><span data-stu-id="da069-1894">The following example illustrates how a call to the <xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method, in turn, calls the <xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType> implementation of the `Temperature` class.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle2.cs#15)]
 [!code-vb[System.Convert.ToSingle#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1895">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1895">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-1896">
            <paramref name="value" /> no implementa <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1896">
              <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1897">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1897">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToSingle(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToSingle (value As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float ToSingle(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToSingle : string * IFormatProvider -&gt; single" Usage="System.Convert.ToSingle (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1898">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1898">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-1899">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1899">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1900">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión sencilla equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1900">Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1901">Un número de punto flotante de precisión sencilla equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1901">A single-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1902">El valor devuelto es el resultado de invocar el <xref:System.Single.Parse%2A?displayProperty=nameWithType> método `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1902">The return value is the result of invoking the <xref:System.Single.Parse%2A?displayProperty=nameWithType> method on `value`.</span></span>  
  
 <span data-ttu-id="da069-1903">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-1903">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-1904">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1904">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-1905">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1905">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-1906">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.Single.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-1906">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-1907">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-1907">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1908">En el ejemplo siguiente se usa <xref:System.IFormatProvider> objetos que representan las referencias culturales en-US y fr-FR cuando convierte los elementos de una matriz de cadenas numéricas a <xref:System.Single> valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1908">The following example uses <xref:System.IFormatProvider> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Convert.ToSingle#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tosingle/cs/tosingle3.cs#16)]
 [!code-vb[System.Convert.ToSingle#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tosingle/vb/tosingle3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-1909">
            <paramref name="value" /> no es un número con un formato válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1909">
              <paramref name="value" /> is not a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-1910">
            <paramref name="value" /> representa un número menor que <see cref="F:System.Single.MinValue" /> o mayor que <see cref="F:System.Single.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1910">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-1911">Convierte el valor especificado en su representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1911">Converts the specified value to its equivalent string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(bool value);" />
      <MemberSignature Language="F#" Value="static member ToString : bool -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1912">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1912">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1913">Convierte el valor booleano especificado en su representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1913">Converts the specified Boolean value to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1914">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1914">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1915">Esta implementación es idéntica a <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1915">This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="da069-1916">Devuelve <xref:System.Boolean.TrueString?displayProperty=nameWithType> para `true` valores y <xref:System.Boolean.FalseString?displayProperty=nameWithType> para `false` valores.</span><span class="sxs-lookup"><span data-stu-id="da069-1916">It returns <xref:System.Boolean.TrueString?displayProperty=nameWithType> for `true` values and <xref:System.Boolean.FalseString?displayProperty=nameWithType> for `false` values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1917">El ejemplo siguiente muestra la conversión de un <xref:System.Boolean> a un <xref:System.String>, usando `ToString`.</span><span class="sxs-lookup"><span data-stu-id="da069-1917">The following example illustrates the conversion of a <xref:System.Boolean> to a <xref:System.String>, using `ToString`.</span></span> <span data-ttu-id="da069-1918">También muestra que la cadena devuelta por la conversión es igual a cualquiera <xref:System.Boolean.TrueString?displayProperty=nameWithType> o <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1918">It also illustrates that the string returned by the conversion equals either <xref:System.Boolean.TrueString?displayProperty=nameWithType> or <xref:System.Boolean.FalseString?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Convert.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString_Bool1.cs#1)]
 [!code-vb[System.Convert.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString_Bool1.vb#1)]  
 [!code-fsharp[System.Convert.ToString#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.Convert.ToString/fs/ToString_Bool1.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToString : byte -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1919">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1919">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1920">Convierte el valor del entero de 8 bits sin signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1920">Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1921">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1921">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1922">Esta implementación es idéntica a <xref:System.Byte.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1922">This implementation is identical to <xref:System.Byte.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1923">El siguiente ejemplo convierte cada valor de un <xref:System.Byte> matriz en una cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-1923">The following example converts each value in a <xref:System.Byte> array to a string.</span></span>  
  
 [!code-csharp[System.Convert.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/ToString.Byte1.cs#3)]
 [!code-vb[System.Convert.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/ToString.Byte1.vb#3)]
 [!code-fsharp[System.Convert.ToString#3](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.Convert.ToString/fs/ToString_Byte1.fs#3)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char value);" />
      <MemberSignature Language="F#" Value="static member ToString : char -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1924">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1924">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1925">Convierte el valor del carácter Unicode especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1925">Converts the value of the specified Unicode character to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1926">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1926">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1927">Esta implementación es idéntica a <xref:System.Char.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1927">This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1928">El ejemplo siguiente se convierte un <xref:System.Char> a un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-1928">The following example converts a <xref:System.Char> to a <xref:System.String>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#14)]
 [!code-csharp[System.Convert Snippets#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#14)]
 [!code-vb[System.Convert Snippets#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As DateTime) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToString : DateTime -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1929">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1929">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1930">Convierte el valor de la estructura <see cref="T:System.DateTime" /> especificada en su representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1930">Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1931">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1931">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1932">Esta implementación es idéntica a <xref:System.DateTime.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1932">This implementation is identical to <xref:System.DateTime.ToString?displayProperty=nameWithType>.</span></span> <span data-ttu-id="da069-1933">Usa las convenciones de formato de la referencia cultural actual y el especificador de formato "G" para convertir un <xref:System.DateTime> valor a su representación de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-1933">It uses the formatting conventions of the current culture and the "G" format specifier to convert a <xref:System.DateTime> value to its string representation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1934">El ejemplo siguiente convierte cada elemento de una matriz de un <xref:System.DateTime> valor a un <xref:System.String> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-1934">The following example converts each element in an array of a <xref:System.DateTime> value to a <xref:System.String> value.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#1)]
 [!code-vb[System.Convert.ToString2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Decimal) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToString : decimal -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1935">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1935">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1936">Convierte el valor de un número decimal especificado en su representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1936">Converts the value of the specified decimal number to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1937">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1937">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1938">Esta implementación es idéntica a <xref:System.Decimal.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1938">This implementation is identical to <xref:System.Decimal.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1939">El ejemplo siguiente se convierte un <xref:System.Decimal> a un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-1939">The following example converts a <xref:System.Decimal> to a <xref:System.String>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#15)]
 [!code-csharp[System.Convert Snippets#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#15)]
 [!code-vb[System.Convert Snippets#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(double value);" />
      <MemberSignature Language="F#" Value="static member ToString : double -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1940">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1940">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1941">Convierte el valor del número de punto flotante de precisión doble especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1941">Converts the value of the specified double-precision floating-point number to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1942">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1942">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1943">Esta implementación es idéntica a <xref:System.Double.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1943">This implementation is identical to <xref:System.Double.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1944">El ejemplo siguiente se convierte un <xref:System.Double> a un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="da069-1944">The following example converts a <xref:System.Double> to a <xref:System.String>.</span></span>  
  
 [!code-cpp[System.Convert Snippets#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert Snippets/CPP/system.convert snippet.cpp#7)]
 [!code-csharp[System.Convert Snippets#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert Snippets/CS/system.convert snippet.cs#7)]
 [!code-vb[System.Convert Snippets#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert Snippets/VB/system.convert snippet.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value);" />
      <MemberSignature Language="F#" Value="static member ToString : int16 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1945">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1945">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1946">Convierte el valor del entero de 16 bits con signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1946">Converts the value of the specified 16-bit signed integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1947">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1947">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1948">Esta implementación es idéntica a <xref:System.Int16.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1948">This implementation is identical to <xref:System.Int16.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1949">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1949">The following example converts each element in an array of 16-bit integers to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#2)]
 [!code-vb[System.Convert.ToString2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value);" />
      <MemberSignature Language="F#" Value="static member ToString : int -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1950">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1950">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1951">Convierte el valor del entero de 32 bits con signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1951">Converts the value of the specified 32-bit signed integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1952">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1952">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1953">Esta implementación es idéntica a <xref:System.Int32.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1953">This implementation is identical to <xref:System.Int32.ToString?displayProperty=nameWithType>.</span></span> <span data-ttu-id="da069-1954">Da formato a `value` utilizando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-1954">It formats `value` by using the formatting conventions of the current thread culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1955">En el ejemplo siguiente se comparan los <xref:System.Convert.ToString%28System.Int32%29> método con el <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-1955">The following example compares the <xref:System.Convert.ToString%28System.Int32%29> method with the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method.</span></span> <span data-ttu-id="da069-1956">Define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que usa la cadena "menos" para representar el signo negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-1956">It defines a custom <xref:System.Globalization.NumberFormatInfo> object that uses the sting "minus" to represent the negative sign.</span></span> <span data-ttu-id="da069-1957">Convierte cada elemento de una matriz de enteros en su representación de cadena equivalente mediante el formato predeterminado (las convenciones de formato de la referencia cultural actual) y el proveedor de formato personalizado.</span><span class="sxs-lookup"><span data-stu-id="da069-1957">It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring7.cs#27)]
 [!code-vb[System.Convert.ToString2#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring7.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value);" />
      <MemberSignature Language="F#" Value="static member ToString : int64 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1958">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1958">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1959">Convierte el valor del entero de 64 bits con signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1959">Converts the value of the specified 64-bit signed integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1960">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1960">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1961">Esta implementación es idéntica a <xref:System.Int64.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1961">This implementation is identical to <xref:System.Int64.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1962">El ejemplo siguiente convierte cada elemento de una matriz de entero largo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1962">The following example converts each element in a long integer array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring6.cs#28)]
 [!code-vb[System.Convert.ToString2#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring6.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToString : obj -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1963">Objeto que proporciona el valor que se va a convertir, o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1963">An object that supplies the value to convert, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1964">Convierte el valor del objeto especificado en su representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1964">Converts the value of the specified object to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1965">Representación de cadena de <paramref name="value" /> o <see cref="F:System.String.Empty" /> si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1965">The string representation of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1966">Para convertir `value` en su representación de cadena, el método intenta llamar a la <xref:System.IConvertible.ToString%2A?displayProperty=nameWithType> implementací `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1966">To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=nameWithType> implementation of `value`.</span></span> <span data-ttu-id="da069-1967">Si `value` no implementa la <xref:System.IConvertible> interfaz, el método intenta llamar a la <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementací `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1967">If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation of `value`.</span></span> <span data-ttu-id="da069-1968">Si el valor no implementa la <xref:System.IFormattable> interfaz, las llamadas al método el `ToString` método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-1968">If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1969">El ejemplo siguiente convierte cada elemento de una matriz de objetos en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1969">The following example converts each element in an object array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#3)]
 [!code-vb[System.Convert.ToString2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToString : sbyte -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1970">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1970">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1971">Convierte el valor del entero de 8 bits con signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1971">Converts the value of the specified 8-bit signed integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1972">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1972">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1973">Esta implementación es idéntica a <xref:System.SByte.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1973">This implementation is identical to <xref:System.SByte.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1974">El ejemplo siguiente convierte cada elemento de una matriz de bytes con signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1974">The following example converts each element in a signed byte array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#4)]
 [!code-vb[System.Convert.ToString2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Single) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(float value);" />
      <MemberSignature Language="F#" Value="static member ToString : single -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1975">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1975">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1976">Convierte el valor del número de punto flotante de precisión sencilla especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1976">Converts the value of the specified single-precision floating-point number to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1977">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1977">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1978">Esta implementación es idéntica a <xref:System.Single.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1978">This implementation is identical to <xref:System.Single.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1979">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Single> valores en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1979">The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#5)]
 [!code-vb[System.Convert.ToString2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToString : string -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1980">Cadena que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1980">The string to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1981">Devuelve la instancia de la cadena especificada; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1981">Returns the specified string instance; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1982">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1982">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-1983">En el ejemplo siguiente se pasa una cadena a la <xref:System.Convert.ToString%28System.String%29> método y llama a la <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> método para confirmar que el método devuelve la cadena original.</span><span class="sxs-lookup"><span data-stu-id="da069-1983">The following example passes a string to the <xref:System.Convert.ToString%28System.String%29> method and calls the <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> method to confirm that the method returns the original string.</span></span> <span data-ttu-id="da069-1984">El ejemplo también se llama el <xref:System.String.IsInterned%2A?displayProperty=nameWithType> método para asegurarse de que las dos cadenas no son idénticas porque se aplica el método Intern la cadena original.</span><span class="sxs-lookup"><span data-stu-id="da069-1984">The example also calls the <xref:System.String.IsInterned%2A?displayProperty=nameWithType> method to ensure that the two strings are not identical because the original string is interned.</span></span>  
  
 [!code-csharp[System.Convert.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString/cs/tostring_string1.cs#2)]
 [!code-vb[System.Convert.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString/vb/tostring_string1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToString : uint16 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1985">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1985">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1986">Convierte el valor del entero de 16 bits sin signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1986">Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1987">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1987">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1988">Esta implementación es idéntica a <xref:System.UInt16.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1988">This implementation is identical to <xref:System.UInt16.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1989">El ejemplo siguiente convierte cada elemento de una matriz de valores enteros de 16 bits sin signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1989">The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#6)]
 [!code-vb[System.Convert.ToString2#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToString : uint32 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1990">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1990">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1991">Convierte el valor del entero de 32 bits sin signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1991">Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1992">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1992">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1993">Esta implementación es idéntica a <xref:System.UInt32.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1993">This implementation is identical to <xref:System.UInt32.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1994">El ejemplo siguiente convierte cada elemento de una matriz de enteros sin signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1994">The following example converts each element in an unsigned integer array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#7)]
 [!code-vb[System.Convert.ToString2#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToString : uint64 -&gt; string" Usage="System.Convert.ToString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-1995">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1995">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-1996">Convierte el valor del entero de 64 bits sin signo especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1996">Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-1997">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-1997">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-1998">Esta implementación es idéntica a <xref:System.UInt64.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-1998">This implementation is identical to <xref:System.UInt64.ToString?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-1999">El ejemplo siguiente convierte cada elemento de una matriz de entero largo sin signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-1999">The following example converts each element in an unsigned long integer array to its equivalent string representation.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring1.cs#8)]
 [!code-vb[System.Convert.ToString2#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Boolean, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(bool value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : bool * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2000">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2000">The Boolean value to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2001">Una instancia de un objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2001">An instance of an object.</span>
          </span>
          <span data-ttu-id="da069-2002">Este parámetro se ignora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2002">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2003">Convierte el valor booleano especificado en su representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2003">Converts the specified Boolean value to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2004">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2004">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2005">Esta implementación es idéntica a <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2005">This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="da069-2006">Devuelve <xref:System.Boolean.TrueString?displayProperty=nameWithType> para `true` valores y <xref:System.Boolean.FalseString?displayProperty=nameWithType> para `false` valores.</span><span class="sxs-lookup"><span data-stu-id="da069-2006">It returns <xref:System.Boolean.TrueString?displayProperty=nameWithType> for `true` values and <xref:System.Boolean.FalseString?displayProperty=nameWithType> for `false` values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2007">El ejemplo siguiente se convierte un <xref:System.Boolean> valor a un <xref:System.String> con el `ToString` método, utilizando un <xref:System.IFormatProvider> objeto que muestra el tipo de proveedor de formato para el que se llama.</span><span class="sxs-lookup"><span data-stu-id="da069-2007">The following example converts a <xref:System.Boolean> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called.</span></span> <span data-ttu-id="da069-2008">El ejemplo muestra que el <xref:System.IFormatProvider> no se hace referencia a objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2008">The example shows that the <xref:System.IFormatProvider> object is not referenced.</span></span>  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : byte * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2009">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2009">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2010">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2010">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2011">Convierte el valor del entero de 8 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2011">Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2012">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2012">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2013">Esta implementación es idéntica a <xref:System.Byte.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2013">This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2014">El ejemplo siguiente convierte cada elemento de una matriz de bytes sin signo en su representación de cadena equivalente usando las convenciones de formato de las referencias culturales en-US y fr-FR.</span><span class="sxs-lookup"><span data-stu-id="da069-2014">The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures.</span></span> <span data-ttu-id="da069-2015">Porque el especificador "G" de forma predeterminada devuelve solo los dígitos decimales en la representación de cadena del valor de un byte, el `provider` parámetro no afecta el formato de la cadena devuelta.</span><span class="sxs-lookup"><span data-stu-id="da069-2015">Because the "G" specifier by default outputs only decimal digits in a byte value's string representation, the `provider` parameter does not affect the formatting of the returned string.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#16)]
 [!code-vb[System.Convert.ToString2#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Byte,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Byte, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Byte value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : byte * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2016">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2016">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <param name="toBase">
          <span data-ttu-id="da069-2017">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2017">The base of the return value, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2018">Convierte el valor de un entero de 8 bits sin signo en su representación de cadena equivalente en una base especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2018">Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2019">Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2019">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2020">Si `toBase` no es igual a 10, la cadena devuelta por la <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType> método representa `value` sólo por su magnitud.</span><span class="sxs-lookup"><span data-stu-id="da069-2020">If `toBase` does not equal 10, the string that is returned by the <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType> method represents `value` by its magnitude only.</span></span> <span data-ttu-id="da069-2021">Si se llama al método para crear una cadena que serán convertida a un número, un método correspondiente que se da por supuesto una representación numérica de magnitud solamente debe llamarse para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-2021">If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="da069-2022">Estos métodos incluyen <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> o <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2022">Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2023">El ejemplo siguiente convierte cada elemento en una matriz de bytes en sus equivalente binario, hexadecimal, decimal y hexadecimal representaciones de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-2023">The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#9)]
 [!code-vb[System.Convert.ToString2#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#9)]
 [!code-fsharp[System.Convert.ToString2#9](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-2024">
            <paramref name="toBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2024">
              <paramref name="toBase" /> is not 2, 8, 10, or 16.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Char, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : char * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2025">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2025">The Unicode character to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2026">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2026">An object that supplies culture-specific formatting information.</span>
          </span>
          <span data-ttu-id="da069-2027">Este parámetro se ignora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2027">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2028">Convierte el valor del carácter Unicode especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2028">Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2029">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2029">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2030">Esta implementación es idéntica a <xref:System.Char.ToString?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2030">This implementation is identical to <xref:System.Char.ToString?displayProperty=nameWithType>.</span></span> <span data-ttu-id="da069-2031">El `provider` se omite el parámetro.</span><span class="sxs-lookup"><span data-stu-id="da069-2031">The `provider` parameter is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2032">El ejemplo siguiente se convierte un <xref:System.Char> valor a un <xref:System.String> con el `ToString` método, utilizando un <xref:System.IFormatProvider> objeto que muestra el tipo de proveedor de formato para el que se llama.</span><span class="sxs-lookup"><span data-stu-id="da069-2032">The following example converts a <xref:System.Char> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called.</span></span> <span data-ttu-id="da069-2033">El ejemplo muestra que el <xref:System.IFormatProvider> no se hace referencia a objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2033">The example shows that the <xref:System.IFormatProvider> object is not referenced.</span></span>  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As DateTime, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(DateTime value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : DateTime * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2034">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2034">The date and time value to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2035">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2035">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2036">Convierte el valor de la estructura <see cref="T:System.DateTime" /> especificada en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2036">Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2037">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2037">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2038">Esta implementación es idéntica a <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2038">This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2039">El ejemplo siguiente se convierte un <xref:System.DateTime> valor a su representación de cadena equivalente en ocho referencias culturales diferentes.</span><span class="sxs-lookup"><span data-stu-id="da069-2039">The following example converts a <xref:System.DateTime> value to its equivalent string representation in eight different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#13)]
 [!code-vb[System.Convert.ToString2#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Decimal, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Decimal value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : decimal * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2040">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2040">The decimal number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2041">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2041">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2042">Convierte el valor del número decimal especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2042">Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2043">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2043">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2044">Esta implementación es idéntica a <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2044">This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2045">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Decimal> valores en su representación de cadena equivalente en cuatro referencias culturales diferentes.</span><span class="sxs-lookup"><span data-stu-id="da069-2045">The following example converts each element in an array of <xref:System.Decimal> values to its equivalent string representation in four different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#14)]
 [!code-vb[System.Convert.ToString2#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Double,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Double, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(double value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : double * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2046">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2046">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2047">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2047">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2048">Convierte el valor del número de punto flotante de precisión doble especificado en la representación de cadena equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2048">Converts the value of the specified double-precision floating-point number to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2049">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2049">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2050">Esta implementación es idéntica a <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="da069-2050">This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType></span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2051">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Double> valores en su representación de cadena equivalente en cuatro referencias culturales diferentes.</span><span class="sxs-lookup"><span data-stu-id="da069-2051">The following example converts each element in an array of <xref:System.Double> values to its equivalent string representation in four different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#15)]
 [!code-vb[System.Convert.ToString2#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : int16 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2052">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2052">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2053">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2053">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2054">Convierte el valor del entero de 16 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2054">Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2055">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2055">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2056">Esta implementación es idéntica a <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2056">This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2057">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</span><span class="sxs-lookup"><span data-stu-id="da069-2057">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="da069-2058">A continuación, llama el <xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29> método para convertir cada elemento de una matriz de enteros de 16 bits en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2058">It then calls the <xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29> method to convert each element in an array of 16-bit integers to its equivalent string representation.</span></span> <span data-ttu-id="da069-2059">La conversión utiliza la referencia cultural invariable, así como las personalizadas <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2059">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#19)]
 [!code-vb[System.Convert.ToString2#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int16,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Short, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(short value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : int16 * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2060">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2060">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <param name="toBase">
          <span data-ttu-id="da069-2061">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2061">The base of the return value, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2062">Convierte el valor de un entero de 16 bits con signo en su representación de cadena equivalente en una base especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2062">Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2063">Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2063">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2064">Si `value` es positivo y `toBase` es 2, 8 o 16, la cadena devuelta usa la representación de signo y magnitud.</span><span class="sxs-lookup"><span data-stu-id="da069-2064">If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</span></span> <span data-ttu-id="da069-2065">Si `value` es negativo y `toBase` es 2, 8 o 16, la cadena devuelta usa dos representación del complemento.</span><span class="sxs-lookup"><span data-stu-id="da069-2065">If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation.</span></span> <span data-ttu-id="da069-2066">Esto significa que el bit de orden superior del byte de orden superior (bit 15) se interpreta como el bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2066">This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit.</span></span> <span data-ttu-id="da069-2067">Si el <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> método se llama para crear una cadena que serán convertida a un número, un método correspondiente que se da por supuesto una representación numérica similar debe llamarse para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-2067">If the <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="da069-2068">Estos métodos incluyen <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> y <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2068">Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2069">El ejemplo siguiente convierte cada elemento en una matriz de enteros de 16 bits con signo en sus representaciones de cadena binaria, octal, decimal y hexadecimal equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2069">The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#10)]
 [!code-vb[System.Convert.ToString2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#10)]
 [!code-fsharp[System.Convert.ToString2#10](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-2070">
            <paramref name="toBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2070">
              <paramref name="toBase" /> is not 2, 8, 10, or 16.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : int * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2071">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2071">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2072">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2072">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2073">Convierte el valor del entero de 32 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2073">Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2074">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2074">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2075">Esta implementación es idéntica a <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2075">This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2076">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</span><span class="sxs-lookup"><span data-stu-id="da069-2076">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="da069-2077">A continuación, llama el <xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29> método para convertir cada elemento de una matriz de enteros en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2077">It then calls the <xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29> method to convert each element in an array of integers to its equivalent string representation.</span></span> <span data-ttu-id="da069-2078">La conversión utiliza la referencia cultural invariable, así como las personalizadas <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2078">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#20)]
 [!code-vb[System.Convert.ToString2#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Integer, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(int value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : int * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2079">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2079">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <param name="toBase">
          <span data-ttu-id="da069-2080">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2080">The base of the return value, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2081">Convierte el valor de un entero de 32 bits con signo en su representación de cadena equivalente en una base especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2081">Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2082">Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2082">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2083">Si `value` es positivo y `toBase` es 2, 8 o 16, la cadena devuelta usa la representación de signo y magnitud.</span><span class="sxs-lookup"><span data-stu-id="da069-2083">If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</span></span> <span data-ttu-id="da069-2084">Si `value` es negativo y `toBase` es 2, 8 o 16, la cadena devuelta usa dos representación del complemento.</span><span class="sxs-lookup"><span data-stu-id="da069-2084">If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation.</span></span> <span data-ttu-id="da069-2085">Esto significa que el bit de orden superior del byte de orden superior (bit 31) se interpreta como el bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2085">This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit.</span></span> <span data-ttu-id="da069-2086">Si el <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> método se llama para crear una cadena que serán convertida a un número, un método correspondiente que se da por supuesto una representación numérica similar debe llamarse para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-2086">If the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="da069-2087">Estos métodos incluyen <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> y <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2087">Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2088">El ejemplo siguiente convierte cada elemento en una matriz de enteros en sus equivalente binario, hexadecimal, decimal y hexadecimal representaciones de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-2088">The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#11)]
 [!code-vb[System.Convert.ToString2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#11)]
 [!code-fsharp[System.Convert.ToString2#11](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-2089">
            <paramref name="toBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2089">
              <paramref name="toBase" /> is not 2, 8, 10, or 16.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : int64 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2090">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2090">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2091">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2091">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2092">Convierte el valor del entero de 64 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2092">Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2093">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2093">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2094">Esta implementación es idéntica a <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2094">This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2095">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</span><span class="sxs-lookup"><span data-stu-id="da069-2095">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="da069-2096">A continuación, llama el <xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29> método para convertir cada elemento de una matriz de entero largo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2096">It then calls the <xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29> method to convert each element in a long integer array to its equivalent string representation.</span></span> <span data-ttu-id="da069-2097">La conversión utiliza la referencia cultural invariable, así como las personalizadas <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2097">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#21)]
 [!code-vb[System.Convert.ToString2#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, int32 toBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Long, toBase As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(long value, int toBase);" />
      <MemberSignature Language="F#" Value="static member ToString : int64 * int -&gt; string" Usage="System.Convert.ToString (value, toBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2098">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2098">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <param name="toBase">
          <span data-ttu-id="da069-2099">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2099">The base of the return value, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2100">Convierte el valor de un entero de 64 bits con signo en su representación de cadena equivalente en una base especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2100">Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2101">Representación de cadena de <paramref name="value" /> en la base <paramref name="toBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2101">The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2102">Si `value` es positivo y `toBase` no es 10, la cadena devuelta usa la representación de signo y magnitud.</span><span class="sxs-lookup"><span data-stu-id="da069-2102">If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation.</span></span> <span data-ttu-id="da069-2103">Si `value` es negativo y `toBase` no es 10, la cadena devuelta usa dos representación del complemento.</span><span class="sxs-lookup"><span data-stu-id="da069-2103">If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation.</span></span> <span data-ttu-id="da069-2104">Esto significa que el bit de orden superior del byte de orden superior (bit 63) se interpreta como el bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2104">This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit.</span></span> <span data-ttu-id="da069-2105">Si el <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> método se llama para crear una cadena que serán convertida a un número, un método correspondiente que se da por supuesto una representación numérica similar debe llamarse para realizar la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-2105">If the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</span></span> <span data-ttu-id="da069-2106">Estos métodos incluyen <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> y <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2106">Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2107">El ejemplo siguiente convierte cada elemento de una matriz de entero largo en sus equivalente binario, hexadecimal, decimal y hexadecimal representaciones de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-2107">The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring2.cs#12)]
 [!code-vb[System.Convert.ToString2#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring2.vb#12)]  
 [!code-fsharp[System.Convert.ToString2#12](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.convert.tostring2/fs/tostring2.fs#12)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-2108">
            <paramref name="toBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2108">
              <paramref name="toBase" /> is not 2, 8, 10, or 16.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Object, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : obj * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2109">Objeto que proporciona el valor que se va a convertir, o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2109">An object that supplies the value to convert, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2110">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2110">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2111">Convierte el valor del objeto especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2111">Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2112">La representación de cadena de <paramref name="value" />, o <see cref="F:System.String.Empty" /> si <paramref name="value" /> es un objeto cuyo valor es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2112">The string representation of <paramref name="value" />, or <see cref="F:System.String.Empty" /> if <paramref name="value" /> is an object whose value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="da069-2113">Si el valor de <paramref name="value" /> es <see langword="null" />, el método devuelve <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2113">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2114">Si el `value` parámetro implementa el <xref:System.IConvertible> interfaz, las llamadas al método el <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> implementación de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2114">If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> implementation of `value`.</span></span> <span data-ttu-id="da069-2115">De lo contrario, si la `value` parámetro implementa el <xref:System.IFormattable> interfaz, las llamadas al método su <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> implementación.</span><span class="sxs-lookup"><span data-stu-id="da069-2115">Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="da069-2116">Si `value` no implementa ninguna interfaz, las llamadas al método el `value` del parámetro `ToString()` método y el `provider` se omite el parámetro.</span><span class="sxs-lookup"><span data-stu-id="da069-2116">If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored.</span></span>  
  
 <span data-ttu-id="da069-2117">El `provider` parámetro se usa si el `value` parámetro implementa el <xref:System.IConvertible> o <xref:System.IFormattable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-2117">The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="da069-2118">El uso más común de la `provider` parámetro consiste en especificar información específica de la referencia cultural usada en la conversión de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2118">The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`.</span></span> <span data-ttu-id="da069-2119">Por ejemplo, si la `value` parámetro es un número decimal negativo, el `provider` parámetro puede proporcionar información específica de la referencia cultural sobre la notación usada para el signo negativo y el separador decimal.</span><span class="sxs-lookup"><span data-stu-id="da069-2119">For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator.</span></span> <span data-ttu-id="da069-2120">El segundo ejemplo en la sección siguiente muestra un proveedor de formato que no proporciona información de formato de la referencia cultural.</span><span class="sxs-lookup"><span data-stu-id="da069-2120">The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2121">En el ejemplo siguiente se define un `Temperature` clase que invalide la <xref:System.Object.ToString%2A?displayProperty=nameWithType> método pero no implementa la <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-2121">The following example defines a `Temperature` class that overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method but does not implement the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="da069-2122">El ejemplo se muestra cómo las llamadas a la <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método, llame a su vez, el `Temperature.ToString` método.</span><span class="sxs-lookup"><span data-stu-id="da069-2122">The example illustrates how calls to the <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method, in turn, call the `Temperature.ToString` method.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring5.cs#26)]
 [!code-vb[System.Convert.ToString2#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring5.vb#26)]  
  
 <span data-ttu-id="da069-2123">En el ejemplo siguiente se define un `Temperature` clase que implementa el <xref:System.IFormattable> interfaz pero no implementa la <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-2123">The following example defines a `Temperature` class that implements the <xref:System.IFormattable> interface but does not implement the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="da069-2124">Su <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación representa el `Temperature` valor en grados centígrados, grados Fahrenheit o Kelvin, dependiendo de la cadena de formato.</span><span class="sxs-lookup"><span data-stu-id="da069-2124">Its <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation represents the `Temperature` value in Celsius, Fahrenheit, or Kelvin, depending on the format  string.</span></span> <span data-ttu-id="da069-2125">El ejemplo también define un `TemperatureProvider` clase que implementa <xref:System.IFormatProvider> y proporciona una cadena de formato generado aleatoriamente que se usa por la <xref:System.IFormattable> implementación de la `Temperature` clase.</span><span class="sxs-lookup"><span data-stu-id="da069-2125">The example also defines a `TemperatureProvider` class that implements <xref:System.IFormatProvider> and provides a randomly generated format string that is used by the <xref:System.IFormattable> implementation of the `Temperature` class.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring_obj30.cs#30)]
 [!code-vb[System.Convert.ToString2#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring_obj30.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.SByte,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As SByte, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::SByte value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : sbyte * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2126">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2126">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2127">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2127">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2128">Convierte el valor del entero de 8 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2128">Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2129">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2129">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2130">Esta implementación es idéntica a <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2130">This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2131">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</span><span class="sxs-lookup"><span data-stu-id="da069-2131">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="da069-2132">A continuación, llama el <xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método para convertir cada elemento de matriz de bytes con signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2132">It then calls the <xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method to convert each element in signed byte array to its equivalent string representation.</span></span> <span data-ttu-id="da069-2133">La conversión utiliza la referencia cultural invariable, así como las personalizadas <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2133">The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#17)]
 [!code-vb[System.Convert.ToString2#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.Single,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As Single, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(float value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : single * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2134">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2134">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2135">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2135">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2136">Convierte el valor del número de punto flotante de precisión sencilla especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2136">Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2137">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2137">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2138">Esta implementación es idéntica a <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2138">This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2139">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Single> valores en su representación de cadena equivalente en cuatro referencias culturales diferentes.</span><span class="sxs-lookup"><span data-stu-id="da069-2139">The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation in four different cultures.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#18)]
 [!code-vb[System.Convert.ToString2#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : string * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2140">Cadena que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2140">The string to return.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2141">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2141">An object that supplies culture-specific formatting information.</span>
          </span>
          <span data-ttu-id="da069-2142">Este parámetro se ignora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2142">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2143">Devuelve la instancia de la cadena especificada; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2143">Returns the specified string instance; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2144">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2144">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2145">El ejemplo siguiente se llama el `ToString` método con un <xref:System.String> parámetro.</span><span class="sxs-lookup"><span data-stu-id="da069-2145">The following example calls the `ToString` method with a <xref:System.String> parameter.</span></span> <span data-ttu-id="da069-2146">El método devuelve el sin modificar <xref:System.String> sin hacer referencia a la <xref:System.IFormatProvider> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2146">The method returns the unmodified <xref:System.String> without referencing the <xref:System.IFormatProvider> object.</span></span>  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CPP/nonnumeric.cpp#2)]
 [!code-csharp[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/CS/nonnumeric.cs#2)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.ToString.IFormatProvider/VB/nonnumeric.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UShort, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt16 value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : uint16 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2147">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2147">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2148">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2148">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2149">Convierte el valor del entero de 16 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2149">Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2150">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2150">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2151">Esta implementación es idéntica a <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2151">This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2152">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</span><span class="sxs-lookup"><span data-stu-id="da069-2152">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="da069-2153">A continuación, llama el <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> método para convertir un valor entero de 16 bits sin signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2153">It then calls the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method to convert a 16-bit unsigned integer value to its equivalent string representation.</span></span> <span data-ttu-id="da069-2154">La conversión utiliza la referencia cultural invariable y personalizado <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2154">The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-2155">El resultado indica que no se utiliza esta información de formato, ya que de forma predeterminada, el especificador de formato "G" no incluye un signo positivo con valores positivos.</span><span class="sxs-lookup"><span data-stu-id="da069-2155">The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#22)]
 [!code-vb[System.Convert.ToString2#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As UInteger, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt32 value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : uint32 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2156">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2156">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2157">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2157">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2158">Convierte el valor del entero de 32 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2158">Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2159">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2159">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2160">Esta implementación es idéntica a <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2160">This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2161">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</span><span class="sxs-lookup"><span data-stu-id="da069-2161">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="da069-2162">A continuación, llama el <xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29> método para convertir un valor entero sin signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2162">It then calls the <xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29> method to convert an unsigned integer value to its equivalent string representation.</span></span> <span data-ttu-id="da069-2163">La conversión utiliza la referencia cultural invariable y personalizado <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2163">The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-2164">El resultado indica que no se utiliza esta información de formato, ya que de forma predeterminada, el especificador de formato "G" no incluye un signo positivo con valores positivos.</span><span class="sxs-lookup"><span data-stu-id="da069-2164">The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#23)]
 [!code-vb[System.Convert.ToString2#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As ULong, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::UInt64 value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToString : uint64 * IFormatProvider -&gt; string" Usage="System.Convert.ToString (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2165">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2165">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2166">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2166">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2167">Convierte el valor del entero de 64 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2167">Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2168">Representación de cadena de <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2168">The string representation of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2169">Esta implementación es idéntica a <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="da069-2169">This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2170">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</span><span class="sxs-lookup"><span data-stu-id="da069-2170">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!".</span></span> <span data-ttu-id="da069-2171">A continuación, llama el <xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29> método para convertir un valor entero long sin signo en su representación de cadena equivalente.</span><span class="sxs-lookup"><span data-stu-id="da069-2171">It then calls the <xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29> method to convert an unsigned long integer value to its equivalent string representation.</span></span> <span data-ttu-id="da069-2172">La conversión utiliza la referencia cultural invariable y personalizado <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2172">The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-2173">El resultado indica que no se utiliza esta información de formato, ya que de forma predeterminada, el especificador de formato "G" no incluye un signo positivo con valores positivos.</span><span class="sxs-lookup"><span data-stu-id="da069-2173">The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</span></span>  
  
 [!code-csharp[System.Convert.ToString2#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.tostring2/cs/tostring3.cs#24)]
 [!code-vb[System.Convert.ToString2#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.tostring2/vb/tostring3.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-2174">Convierte un valor especificado en un entero de 16 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2174">Converts a specified value to a 16-bit unsigned integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Boolean) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(bool value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : bool -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2175">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2175">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2176">Convierte el valor booleano especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2176">Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2177">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2177">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2178">El ejemplo siguiente convierte los valores booleanos `true` y `false` a enteros sin signo de 16 bits.</span><span class="sxs-lookup"><span data-stu-id="da069-2178">The following example converts the Boolean values `true` and `false` to unsigned 16-bit integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#1)]
 [!code-vb[System.Convert.ToUInt16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Byte) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : byte -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2179">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2179">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2180">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2180">Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2181">Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2181">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2182">El ejemplo siguiente convierte cada elemento de una matriz de bytes en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2182">The following example converts each element in a byte array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#2)]
 [!code-vb[System.Convert.ToUInt16#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Char) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(char value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : char -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2183">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2183">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2184">Convierte el valor del carácter Unicode especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2184">Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2185">Entero de 16 bits sin signo que equivale a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2185">The 16-bit unsigned integer equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2186">El ejemplo siguiente convierte cada elemento de una matriz de caracteres en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2186">The following example converts each element in a character array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#3)]
 [!code-vb[System.Convert.ToUInt16#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As DateTime) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : DateTime -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2187">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2187">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2188">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2188">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2189">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2189">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-2190">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2190">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2191">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2191">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Decimal) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : decimal -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2192">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2192">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2193">Convierte el valor del número decimal especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2193">Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2194">
            <paramref name="value" />, redondeado al entero de 16 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2194">
              <paramref name="value" />, rounded to the nearest 16-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2195">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2195">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2196">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Decimal> valores a un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2196">The following example converts each element in an array of <xref:System.Decimal> values to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#4)]
 [!code-vb[System.Convert.ToUInt16#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2197">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2197">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Double) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(double value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : double -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2198">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2198">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2199">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2199">Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2200">
            <paramref name="value" />, redondeado al entero de 16 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2200">
              <paramref name="value" />, rounded to the nearest 16-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2201">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2201">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2202">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.Double> valores a un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2202">The following example converts each element in an array of <xref:System.Double> values to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#5)]
 [!code-vb[System.Convert.ToUInt16#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2203">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2203">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Short) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(short value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : int16 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2204">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2204">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2205">Convierte el valor del entero de 16 bits con signo especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2205">Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2206">Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2206">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2207">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros de 16 bits en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2207">The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#6)]
 [!code-vb[System.Convert.ToUInt16#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2208">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2208">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Integer) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(int value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : int -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2209">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2209">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2210">Convierte el valor del entero de 32 bits con signo especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2210">Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2211">Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2211">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2212">El ejemplo siguiente convierte cada elemento de una matriz de enteros en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2212">The following example converts each element in an integer array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#7)]
 [!code-vb[System.Convert.ToUInt16#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2213">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2213">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Long) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(long value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : int64 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2214">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2214">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2215">Convierte el valor del entero de 64 bits con signo especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2215">Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2216">Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2216">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2217">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros largos en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2217">The following example converts each element in a long integer array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#8)]
 [!code-vb[System.Convert.ToUInt16#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2218">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2218">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Object) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : obj -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2219">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2219">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2220">Convierte el valor del objeto especificado en un entero de 16 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2220">Converts the value of the specified object to a 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2221">Un entero de 16 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2221">A 16-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2222">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2222">The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2223">El ejemplo siguiente se intenta convertir cada elemento en una matriz de objetos en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2223">The following example attempts to convert each element in an object array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#9)]
 [!code-vb[System.Convert.ToUInt16#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2224">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2224">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2225">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2225">
              <paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-2226">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2226">-or-</span>
          </span>
          <span data-ttu-id="da069-2227">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2227">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2228">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2228">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As SByte) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : sbyte -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2229">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2229">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2230">Convierte el valor del entero de 8 bits con signo especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2230">Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2231">Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2231">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2232">El ejemplo siguiente convierte cada elemento de una matriz de bytes con signo en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2232">The following example converts each element in a signed byte array to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#10)]
 [!code-vb[System.Convert.ToUInt16#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2233">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2233">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Single) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(float value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : single -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2234">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2234">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2235">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2235">Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2236">
            <paramref name="value" />, redondeado al entero de 16 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2236">
              <paramref name="value" />, rounded to the nearest 16-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2237">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2237">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2238">El ejemplo siguiente convierte cada elemento de una matriz de <xref:System.String> valores a un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2238">The following example converts each element in an array of <xref:System.String> values to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#11)]
 [!code-vb[System.Convert.ToUInt16#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2239">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2239">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : string -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2240">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2240">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2241">Convierte la representación de cadena especificada de un número en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2241">Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2242">Un entero de 16 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2242">A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2243">Mediante el <xref:System.Convert.ToUInt16%28System.String%29> método es equivalente a pasar `value` a la <xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-2243">Using the <xref:System.Convert.ToUInt16%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-2244">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-2244">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-2245">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-2245">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-2246">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-2246">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2247">El ejemplo siguiente se intenta convertir cada elemento en una matriz de cadenas numéricas en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2247">The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#12)]
 [!code-vb[System.Convert.ToUInt16#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2248">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2248">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2249">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2249">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : uint16 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2250">Entero de 16 bits sin signo que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2250">The 16-bit unsigned integer to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2251">Devuelve el entero de 16 bits sin signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2251">Returns the specified 16-bit unsigned integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2252">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2252">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As UInteger) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : uint32 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2253">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2253">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2254">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2254">Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2255">Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2255">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2256">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros sin signo en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2256">The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#13)]
 [!code-vb[System.Convert.ToUInt16#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2257">
            <paramref name="value" /> es mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2257">
              <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As ULong) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : uint64 -&gt; uint16" Usage="System.Convert.ToUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2258">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2258">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2259">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2259">Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2260">Un entero de 16 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2260">A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2261">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros largos sin signo en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2261">The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_1.cs#14)]
 [!code-vb[System.Convert.ToUInt16#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2262">
            <paramref name="value" /> es mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2262">
              <paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As Object, provider As IFormatProvider) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : obj * IFormatProvider -&gt; uint16" Usage="System.Convert.ToUInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2263">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2263">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2264">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2264">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2265">Convierte el valor del objeto especificado en un entero de 16 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2265">Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2266">Un entero de 16 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2266">A 16-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2267">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2267">The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-2268">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2268">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-2269">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-2269">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-2270">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-2270">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2271">En el ejemplo siguiente se define un `HexString` clase que implementa el <xref:System.IConvertible> interfaz y que está diseñado para contener la representación de cadena de ambos valores de 16 bits con signo y de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2271">The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values.</span></span> <span data-ttu-id="da069-2272">La clase incluye un `Sign` propiedad que indica el signo de su valor hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-2272">The class includes a `Sign` property that indicates the sign of its hexadecimal value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#16)]
 [!code-vb[System.Convert.ToUInt16#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#16)]  
  
 <span data-ttu-id="da069-2273">El ejemplo siguiente muestra que una llamada a la <xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29> método que pasa un `HexString` objeto como un parámetro, se llama a su vez, el <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> implementación de la `HexString` clase.</span><span class="sxs-lookup"><span data-stu-id="da069-2273">The following example shows that a call to the <xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType> implementation of the `HexString` class.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_3.cs#17)]
 [!code-vb[System.Convert.ToUInt16#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_3.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2274">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2274">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2275">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2275">
              <paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-2276">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2276">-or-</span>
          </span>
          <span data-ttu-id="da069-2277">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2277">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2278">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2278">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String, provider As IFormatProvider) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : string * IFormatProvider -&gt; uint16" Usage="System.Convert.ToUInt16 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2279">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2279">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2280">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2280">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2281">Convierte la representación de cadena especificada de un número en un entero de 16 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2281">Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2282">Un entero de 16 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2282">A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2283">El valor devuelto es el resultado de invocar <xref:System.UInt16.Parse%2A?displayProperty=nameWithType> en `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2283">The return value is the result of invoking <xref:System.UInt16.Parse%2A?displayProperty=nameWithType> on `value`.</span></span>  
  
 <span data-ttu-id="da069-2284">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2284">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-2285">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2285">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-2286">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-2286">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-2287">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-2287">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-2288">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-2288">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2289">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-2289">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="da069-2290">A continuación, intenta convertir cada elemento de una matriz de cadenas numéricas en un entero con ambos este proveedor y el <xref:System.Globalization.NumberFormatInfo> proveedor para la referencia cultural invariable.</span><span class="sxs-lookup"><span data-stu-id="da069-2290">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_4.cs#18)]
 [!code-vb[System.Convert.ToUInt16#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2291">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2291">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2292">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2292">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt16(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt16 (value As String, fromBase As Integer) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 ToUInt16(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToUInt16 : string * int -&gt; uint16" Usage="System.Convert.ToUInt16 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2293">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2293">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-2294">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2294">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2295">Convierte la representación de cadena de un número en una base especificada en un entero de 16 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2295">Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2296">Un entero de 16 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2296">A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2297">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-2297">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-2298">Dado que el <xref:System.UInt16> tipo de datos admite valores sin signo, el <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> método supone que `value` se expresa mediante la representación binaria sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2298">Because the <xref:System.UInt16> data type supports unsigned values only, the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="da069-2299">En otras palabras, todos los 16 bits se utilizan para representar el valor numérico, y no está presente un bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2299">In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="da069-2300">Como resultado, es posible escribir código en el que un entero con signo de valor que está fuera del intervalo de la <xref:System.UInt16> tipo de datos se convierte en un <xref:System.UInt16> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-2300">As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-2301">El ejemplo siguiente convierte <xref:System.Int16.MinValue?displayProperty=nameWithType> a su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-2301">The following example converts <xref:System.Int16.MinValue?displayProperty=nameWithType> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-2302">En lugar de producir una excepción, el método muestra el mensaje, "0 x 8000 se convierte a 32768."</span><span class="sxs-lookup"><span data-stu-id="da069-2302">Instead of throwing an exception, the method displays the message, "0x8000 converts to 32768."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#11)]
 [!code-vb[System.Convert.BaseConversion#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#11)]  
  
 <span data-ttu-id="da069-2303">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-2303">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-2304">El ejemplo siguiente muestra una técnica para asegurarse de que el método no utiliza incorrectamente representación binaria para interpretar un valor que usa dos representación del complemento al convertir una cadena hexadecimal a un <xref:System.UInt16> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-2304">The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value.</span></span> <span data-ttu-id="da069-2305">El ejemplo determina si un valor representa con signo o entero sin signo mientras se está convirtiendo ese valor a su representación de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-2305">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="da069-2306">Cuando el ejemplo convierte el valor en un <xref:System.UInt16> valor, comprueba si el valor original era un entero con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2306">When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="da069-2307">Si es así, y si se establece su bit de orden superior (lo que indica que el valor original era negativo), el método produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-2307">If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#12)]
 [!code-vb[System.Convert.BaseConversion#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#12)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-2308">El ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas numéricas como un valor hexadecimal y convertirlo en un entero de 16 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2308">The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt16#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint16/cs/touint16_2.cs#15)]
 [!code-vb[System.Convert.ToUInt16#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint16/vb/touint16_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-2309">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2309">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-2310">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2310">-or-</span>
          </span>
          <span data-ttu-id="da069-2311">
            <paramref name="value" />, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2311">
              <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-2312">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2312">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2313">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2313">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-2314">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2314">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2315">
            <paramref name="value" />, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2315">
              <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-2316">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2316">-or-</span>
          </span>
          <span data-ttu-id="da069-2317">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt16.MinValue" /> o mayor que <see cref="F:System.UInt16.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2317">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-2318">Convierte un valor especificado en un entero de 32 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2318">Converts a specified value to a 32-bit unsigned integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Boolean) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(bool value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : bool -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2319">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2319">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2320">Convierte el valor booleano especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2320">Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2321">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2321">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2322">El ejemplo siguiente convierte los valores booleanos `true` y `false` a enteros sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2322">The following example converts the Boolean values `true` and `false` to unsigned integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#1)]
 [!code-vb[System.Convert.ToUInt32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Byte) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : byte -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2323">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2323">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2324">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2324">Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2325">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2325">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2326">El ejemplo siguiente convierte cada elemento de una matriz de bytes en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2326">The following example converts each element in a byte array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#2)]
 [!code-vb[System.Convert.ToUInt32#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Char) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(char value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : char -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2327">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2327">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2328">Convierte el valor del carácter Unicode especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2328">Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2329">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2329">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2330">El ejemplo siguiente convierte cada elemento de una matriz de caracteres en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2330">The following example converts each element in a character array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#3)]
 [!code-vb[System.Convert.ToUInt32#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As DateTime) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : DateTime -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2331">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2331">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2332">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2332">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2333">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2333">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-2334">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2334">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2335">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2335">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Decimal) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : decimal -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2336">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2336">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2337">Convierte el valor del número decimal especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2337">Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2338">
            <paramref name="value" />, redondeado al entero de 32 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2338">
              <paramref name="value" />, rounded to the nearest 32-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2339">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2339">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2340">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Decimal> valores en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2340">The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#4)]
 [!code-vb[System.Convert.ToUInt32#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2341">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2341">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Double) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(double value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : double -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2342">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2342">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2343">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2343">Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2344">
            <paramref name="value" />, redondeado al entero de 32 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2344">
              <paramref name="value" />, rounded to the nearest 32-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2345">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2345">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2346">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Double> valores en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2346">The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#5)]
 [!code-vb[System.Convert.ToUInt32#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2347">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2347">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Short) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(short value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : int16 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2348">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2348">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2349">Convierte el valor del entero de 16 bits con signo especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2349">Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2350">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2350">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2351">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros de 16 bits en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2351">The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#6)]
 [!code-vb[System.Convert.ToUInt32#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2352">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2352">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Integer) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(int value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : int -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2353">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2353">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2354">Convierte el valor del entero de 32 bits con signo especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2354">Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2355">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2355">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2356">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2356">The following example attempts to convert each element in an integer array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#7)]
 [!code-vb[System.Convert.ToUInt32#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2357">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2357">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Long) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(long value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : int64 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2358">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2358">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2359">Convierte el valor del entero de 64 bits con signo especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2359">Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2360">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2360">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2361">El ejemplo siguiente se intenta convertir cada elemento en una matriz de enteros largos en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2361">The following example attempts to convert each element in a long integer array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#8)]
 [!code-vb[System.Convert.ToUInt32#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2362">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2362">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Object) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : obj -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2363">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2363">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2364">Convierte el valor del objeto especificado en un entero de 32 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2364">Converts the value of the specified object to a 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2365">Un entero de 32 bits sin signo equivalente a <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2365">A 32-bit unsigned integer that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2366">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2366">The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2367">El ejemplo siguiente se intenta convertir cada elemento en una matriz de objetos en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2367">The following example attempts to convert each element in an object array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#9)]
 [!code-vb[System.Convert.ToUInt32#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2368">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2368">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2369">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2369">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-2370">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2370">-or-</span>
          </span>
          <span data-ttu-id="da069-2371">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2371">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2372">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2372">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As SByte) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : sbyte -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2373">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2373">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2374">Convierte el valor del entero de 8 bits con signo especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2374">Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2375">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2375">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2376">El ejemplo siguiente se intenta convertir cada elemento en una matriz de bytes con signo en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2376">The following example attempts to convert each element in a signed byte array to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#10)]
 [!code-vb[System.Convert.ToUInt32#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2377">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2377">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Single) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(float value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : single -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2378">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2378">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2379">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2379">Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2380">
            <paramref name="value" />, redondeado al entero de 32 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2380">
              <paramref name="value" />, rounded to the nearest 32-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2381">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2381">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2382">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Single> valores en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2382">The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#11)]
 [!code-vb[System.Convert.ToUInt32#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2383">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2383">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : string -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2384">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2384">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2385">Convierte la representación de cadena especificada de un número en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2385">Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2386">Un entero de 32 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2386">A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2387">Mediante el <xref:System.Convert.ToUInt32%28System.String%29> método es equivalente a pasar `value` a la <xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-2387">Using the <xref:System.Convert.ToUInt32%28System.String%29> method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-2388">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-2388">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-2389">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-2389">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-2390">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-2390">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2391">En el ejemplo siguiente, se interpreta los elementos de una matriz de cadenas como cadenas numéricas e intenta convertirlos a enteros sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2391">The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#12)]
 [!code-vb[System.Convert.ToUInt32#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2392">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2392">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2393">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2393">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As UShort) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : uint16 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2394">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2394">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2395">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2395">Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2396">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2396">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2397">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits sin signo en un valor entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2397">The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#13)]
 [!code-vb[System.Convert.ToUInt32#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : uint32 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2398">Entero de 32 bits sin signo que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2398">The 32-bit unsigned integer to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2399">Devuelve el entero de 32 bits sin signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2399">Returns the specified 32-bit unsigned integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2400">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2400">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As ULong) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : uint64 -&gt; uint32" Usage="System.Convert.ToUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2401">Entero de 64 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2401">The 64-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2402">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2402">Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2403">Un entero de 32 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2403">A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2404">El ejemplo siguiente se intenta convertir cada elemento de una matriz de entero largo sin signo en un valor entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2404">The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_1.cs#14)]
 [!code-vb[System.Convert.ToUInt32#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2405">
            <paramref name="value" /> es mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2405">
              <paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As Object, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : obj * IFormatProvider -&gt; uint32" Usage="System.Convert.ToUInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2406">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2406">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2407">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2407">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2408">Convierte el valor del objeto especificado en un entero de 32 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2408">Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2409">Un entero de 32 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2409">A 32-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2410">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2410">The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-2411">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2411">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-2412">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-2412">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-2413">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-2413">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2414">En el ejemplo siguiente se define un `HexString` clase que implementa el <xref:System.IConvertible> interfaz y que está diseñado para contener la representación de cadena de ambos valores de 32 bits con signo y 32 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2414">The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values.</span></span> <span data-ttu-id="da069-2415">La clase incluye un `Sign` propiedad que indica el signo de su valor hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-2415">The class includes a `Sign` property that indicates the sign of its hexadecimal value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#17)]
 [!code-vb[System.Convert.ToUInt32#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#17)]  
  
 <span data-ttu-id="da069-2416">El ejemplo siguiente muestra que una llamada a la <xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29> método que pasa un `HexString` objeto como un parámetro, se llama a su vez, el <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> implementación de la `HexString` clase.</span><span class="sxs-lookup"><span data-stu-id="da069-2416">The following example shows that a call to the <xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType> implementation of the `HexString` class.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_4.cs#18)]
 [!code-vb[System.Convert.ToUInt32#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2417">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2417">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2418">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2418">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-2419">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2419">-or-</span>
          </span>
          <span data-ttu-id="da069-2420">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2420">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2421">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2421">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String, provider As IFormatProvider) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : string * IFormatProvider -&gt; uint32" Usage="System.Convert.ToUInt32 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2422">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2422">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2423">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2423">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2424">Convierte la representación de cadena especificada de un número en un entero de 32 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2424">Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2425">Un entero de 32 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2425">A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2426">El valor devuelto es el resultado de invocar <xref:System.UInt32.Parse%2A?displayProperty=nameWithType> en `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2426">The return value is the result of invoking <xref:System.UInt32.Parse%2A?displayProperty=nameWithType> on `value`.</span></span>  
  
 <span data-ttu-id="da069-2427">`provider` es un <xref:System.IFormatProvider> instancia que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2427">`provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-2428">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2428">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-2429">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-2429">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-2430">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-2430">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-2431">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-2431">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2432">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-2432">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="da069-2433">A continuación, intenta convertir cada elemento de una matriz de cadenas numéricas en un entero con ambos este proveedor y el <xref:System.Globalization.NumberFormatInfo> proveedor para la referencia cultural invariable.</span><span class="sxs-lookup"><span data-stu-id="da069-2433">It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_2.cs#15)]
 [!code-vb[System.Convert.ToUInt32#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2434">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2434">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2435">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2435">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt32 (value As String, fromBase As Integer) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 ToUInt32(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToUInt32 : string * int -&gt; uint32" Usage="System.Convert.ToUInt32 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2436">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2436">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-2437">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2437">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2438">Convierte la representación de cadena de un número en una base especificada en un entero de 32 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2438">Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2439">Un entero de 32 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2439">A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2440">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-2440">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-2441">Dado que el <xref:System.UInt32> tipo de datos admite valores sin signo, el <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> método supone que `value` se expresa mediante la representación binaria sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2441">Because the <xref:System.UInt32> data type supports unsigned values only, the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="da069-2442">En otras palabras, los 32 bits se utilizan para representar el valor numérico, y no está presente un bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2442">In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="da069-2443">Como resultado, es posible escribir código en el que un entero con signo de valor que está fuera del intervalo de la <xref:System.UInt32> tipo de datos se convierte en un <xref:System.UInt32> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-2443">As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-2444">El ejemplo siguiente convierte <xref:System.Int32.MinValue> a su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-2444">The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-2445">En lugar de producir una excepción, el método muestra el mensaje, "0 x 80000000 se convierte a 2147483648".</span><span class="sxs-lookup"><span data-stu-id="da069-2445">Instead of throwing an exception, the method displays the message, "0x80000000 converts to 2147483648."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#13)]
 [!code-vb[System.Convert.BaseConversion#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#13)]  
  
 <span data-ttu-id="da069-2446">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-2446">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-2447">El ejemplo siguiente muestra una técnica para asegurarse de que el método no utiliza incorrectamente representación binaria para interpretar un valor que usa dos representación del complemento al convertir una cadena hexadecimal a un <xref:System.UInt32> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-2447">The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value.</span></span> <span data-ttu-id="da069-2448">El ejemplo determina si un valor representa con signo o entero sin signo mientras se está convirtiendo ese valor a su representación de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-2448">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="da069-2449">Cuando el ejemplo convierte el valor en un <xref:System.UInt32> valor, comprueba si el valor original era un entero con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2449">When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="da069-2450">Si es así, y si se establece su bit de orden superior (lo que indica que el valor original era negativo), el método produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-2450">If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#14)]
 [!code-vb[System.Convert.BaseConversion#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#14)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-2451">El ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas numéricas como un valor hexadecimal y convertirlo en un entero sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2451">The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt32#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint32/cs/touint32_3.cs#16)]
 [!code-vb[System.Convert.ToUInt32#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint32/vb/touint32_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-2452">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2452">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-2453">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2453">-or-</span>
          </span>
          <span data-ttu-id="da069-2454">
            <paramref name="value" />, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2454">
              <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-2455">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2455">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2456">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2456">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-2457">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2457">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2458">
            <paramref name="value" />, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2458">
              <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-2459">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2459">-or-</span>
          </span>
          <span data-ttu-id="da069-2460">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt32.MinValue" /> o mayor que <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2460">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="da069-2461">Convierte un valor especificado en un entero de 64 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2461">Converts a specified value to a 64-bit unsigned integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Boolean) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(bool value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : bool -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2462">Valor booleano que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2462">The Boolean value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2463">Convierte el valor booleano especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2463">Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2464">Número 1 si <paramref name="value" /> es <see langword="true" />; en caso contrario, 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2464">The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2465">El siguiente ejemplo convierte un valor booleano `true` y `false` valores enteros largos sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2465">The following example converts Boolean `true` and `false` values to unsigned long integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#1)]
 [!code-vb[System.Convert.ToUInt64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Byte) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Byte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : byte -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2466">Entero de 8 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2466">The 8-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2467">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2467">Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2468">Un entero de 64 bits con signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2468">A 64-bit signed integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2469">El ejemplo siguiente convierte cada elemento de una matriz de bytes en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2469">The following example converts each element in a byte array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#2)]
 [!code-vb[System.Convert.ToUInt64#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Char) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(char value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : char -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2470">Carácter Unicode que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2470">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2471">Convierte el valor del carácter Unicode especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2471">Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2472">Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2472">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2473">El ejemplo siguiente convierte cada elemento de una matriz de caracteres en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2473">The following example converts each element in a character array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#3)]
 [!code-vb[System.Convert.ToUInt64#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As DateTime) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(DateTime value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : DateTime -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2474">Valor de fecha y hora que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2474">The date and time value to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2475">Cuando se llama a este método, siempre se produce <see cref="T:System.InvalidCastException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2475">Calling this method always throws <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2476">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2476">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="da069-2477">No se devuelve ningún valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2477">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2478">No se admite esta conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2478">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Decimal) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : decimal -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2479">Número decimal que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2479">The decimal number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2480">Convierte el valor del número decimal especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2480">Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2481">
            <paramref name="value" />, redondeado al entero de 64 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2481">
              <paramref name="value" />, rounded to the nearest 64-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2482">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2482">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2483">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Decimal> valores en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2483">The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#4)]
 [!code-vb[System.Convert.ToUInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2484">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2484">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Double) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(double value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : double -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2485">Número de punto flotante de precisión doble que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2485">The double-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2486">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2486">Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2487">
            <paramref name="value" />, redondeado al entero de 64 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2487">
              <paramref name="value" />, rounded to the nearest 64-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2488">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2488">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2489">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Double> valores en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2489">The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#5)]
 [!code-vb[System.Convert.ToUInt64#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2490">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2490">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Double" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Short) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(short value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : int16 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2491">Entero de 16 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2491">The 16-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2492">Convierte el valor del entero de 16 bits con signo especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2492">Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2493">Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2493">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2494">El ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros de 16 bits en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2494">The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#6)]
 [!code-vb[System.Convert.ToUInt64#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2495">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2495">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Integer) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(int value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : int -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2496">Entero de 32 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2496">The 32-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2497">Convierte el valor del entero de 32 bits con signo especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2497">Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2498">Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2498">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2499">El ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2499">The following example attempts to convert each element in an array of integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#7)]
 [!code-vb[System.Convert.ToUInt64#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2500">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2500">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Long) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(long value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : int64 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2501">Entero de 64 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2501">The 64-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2502">Convierte el valor del entero de 64 bits con signo especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2502">Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2503">Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2503">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2504">El ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2504">The following example attempts to convert each element in an array of long integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#8)]
 [!code-vb[System.Convert.ToUInt64#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2505">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2505">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Object) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : obj -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2506">Objeto que implementa la interfaz <see cref="T:System.IConvertible" /> o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2506">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2507">Convierte el valor del objeto especificado en un entero de 64 bits sin signo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2507">Converts the value of the specified object to a 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2508">Un entero de 64 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2508">A 64-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2509">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2509">The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2510">El ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2510">The following example attempts to convert each element in an object array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#9)]
 [!code-vb[System.Convert.ToUInt64#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2511">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2511">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2512">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2512">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-2513">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2513">-or-</span>
          </span>
          <span data-ttu-id="da069-2514">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2514">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2515">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2515">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As SByte) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : sbyte -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2516">Entero de 8 bits con signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2516">The 8-bit signed integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2517">Convierte el valor del entero de 8 bits con signo especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2517">Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2518">Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2518">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2519">El ejemplo siguiente se intenta convertir cada elemento de una matriz de bytes con signo en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2519">The following example attempts to convert each element in a signed byte array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#10)]
 [!code-vb[System.Convert.ToUInt64#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2520">
            <paramref name="value" /> es menor que cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2520">
              <paramref name="value" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Single) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(float value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : single -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2521">Número de punto flotante de precisión sencilla que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2521">The single-precision floating-point number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2522">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2522">Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2523">
            <paramref name="value" />, redondeado al entero de 64 bits sin signo más próximo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2523">
              <paramref name="value" />, rounded to the nearest 64-bit unsigned integer.</span>
          </span>
          <span data-ttu-id="da069-2524">Si <paramref name="value" /> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2524">If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2525">El ejemplo siguiente se intenta convertir cada elemento de una matriz de <xref:System.Single> valores en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2525">The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned long integer.</span></span> <span data-ttu-id="da069-2526">El resultado muestra que los valores fraccionarios se redondean antes de realiza la conversión.</span><span class="sxs-lookup"><span data-stu-id="da069-2526">The output shows that fractional values are rounded before the conversion is performed.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#11)]
 [!code-vb[System.Convert.ToUInt64#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2527">
            <paramref name="value" /> es menor que cero o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2527">
              <paramref name="value" /> is less than zero or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Single" />
        <altmember cref="Overload:System.Math.Round" />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : string -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2528">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2528">A string that contains the number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2529">Convierte la representación de cadena especificada de un número en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2529">Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2530">Un entero de 64 bits con signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2530">A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2531">Mediante el <xref:System.Convert.ToInt64%28System.String%29> método es equivalente a pasar `value` a la <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="da069-2531">Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="da069-2532">`value` se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="da069-2532">`value` is interpreted by using the formatting conventions of the current thread culture.</span></span>  
  
 <span data-ttu-id="da069-2533">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-2533">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-2534">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-2534">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2535">En el ejemplo siguiente, se interpreta los elementos de una matriz de cadenas como cadenas numéricas e intenta convertirlos en enteros largos sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2535">The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#12)]
 [!code-vb[System.Convert.ToUInt64#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2536">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2536">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2537">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2537">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As UShort) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt16 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : uint16 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2538">Entero de 16 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2538">The 16-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2539">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2539">Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2540">Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2540">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2541">El ejemplo siguiente convierte cada elemento de una matriz de enteros de 16 bits sin signo en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2541">The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#13)]
 [!code-vb[System.Convert.ToUInt64#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As UInteger) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : uint32 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2542">Entero de 32 bits sin signo que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2542">The 32-bit unsigned integer to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2543">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2543">Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2544">Un entero de 64 bits sin signo equivalente a <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2544">A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="da069-2545">El ejemplo siguiente convierte cada elemento de una matriz de enteros sin signo en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2545">The following example converts each element in an unsigned integer array to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_1.cs#14)]
 [!code-vb[System.Convert.ToUInt64#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : uint64 -&gt; uint64" Usage="System.Convert.ToUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2546">Entero de 64 bits sin signo que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2546">The 64-bit unsigned integer to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2547">Devuelve el entero de 64 bits sin signo especificado; no se efectúa una conversión real.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2547">Returns the specified 64-bit unsigned integer; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2548">El parámetro <paramref name="value" /> se devuelve sin cambios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2548">
              <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As Object, provider As IFormatProvider) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::Object ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : obj * IFormatProvider -&gt; uint64" Usage="System.Convert.ToUInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2549">Objeto que implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2549">An object that implements the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2550">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2550">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2551">Convierte el valor del objeto especificado en un entero de 64 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2551">Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2552">Un entero de 64 bits sin signo equivalente a <paramref name="value" />, o cero si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2552">A 64-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2553">El valor devuelto es el resultado de invocar el <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> método del tipo subyacente de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2553">The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> method of the underlying type of `value`.</span></span>  
  
 <span data-ttu-id="da069-2554">`provider` permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2554">`provider` enables the user to specify culture-specific conversion information about the contents of `value`.</span></span> <span data-ttu-id="da069-2555">Por ejemplo, si `value` es un <xref:System.String> que representa un número, `provider` podría proporcionar información específica de la referencia cultural sobre la notación que se utiliza para representar ese número.</span><span class="sxs-lookup"><span data-stu-id="da069-2555">For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.</span></span>  
  
 <span data-ttu-id="da069-2556">Omitir los tipos base `provider`; sin embargo, se puede usar el parámetro si `value` es un tipo definido por el usuario que implementa el <xref:System.IConvertible> interfaz.</span><span class="sxs-lookup"><span data-stu-id="da069-2556">The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2557">En el ejemplo siguiente se define un `HexString` clase que implementa el <xref:System.IConvertible> interfaz y que está diseñado para contener la representación de cadena de ambos valores de 64 bits con signo y de 64 bits sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2557">The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values.</span></span> <span data-ttu-id="da069-2558">La clase incluye un `Sign` propiedad que indica el signo de su valor hexadecimal.</span><span class="sxs-lookup"><span data-stu-id="da069-2558">The class includes a `Sign` property that indicates the sign of its hexadecimal value.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#17)]
 [!code-vb[System.Convert.ToUInt64#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#17)]  
  
 <span data-ttu-id="da069-2559">El ejemplo siguiente muestra que una llamada a la <xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29> método que pasa un `HexString` objeto como un parámetro, se llama a su vez, el <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> implementación de la `HexString` clase.</span><span class="sxs-lookup"><span data-stu-id="da069-2559">The following example shows that a call to the <xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29> method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType> implementation of the `HexString` class.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_4.cs#18)]
 [!code-vb[System.Convert.ToUInt64#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_4.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2560">
            <paramref name="value" /> no tiene un formato adecuado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2560">
              <paramref name="value" /> is not in an appropriate format.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="da069-2561">
            <paramref name="value" /> no implementa la interfaz <see cref="T:System.IConvertible" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2561">
              <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</span>
          </span>
          <span data-ttu-id="da069-2562">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2562">-or-</span>
          </span>
          <span data-ttu-id="da069-2563">No se admite la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2563">The conversion is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2564">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2564">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String, provider As IFormatProvider) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : string * IFormatProvider -&gt; uint64" Usage="System.Convert.ToUInt64 (value, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2565">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2565">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="da069-2566">Objeto que proporciona información de formato específica de la referencia cultural.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2566">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2567">Convierte la representación de cadena especificada de un número en un entero de 64 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2567">Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2568">Un entero de 64 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2568">A 64-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2569">El valor devuelto es el resultado de invocar <xref:System.UInt64.Parse%2A?displayProperty=nameWithType> en `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2569">The return value is the result of invoking <xref:System.UInt64.Parse%2A?displayProperty=nameWithType> on `value`.</span></span>  
  
 <span data-ttu-id="da069-2570">`provider` es un <xref:System.IFormatProvider> implementación que obtiene un <xref:System.Globalization.NumberFormatInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="da069-2570">`provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="da069-2571">El <xref:System.Globalization.NumberFormatInfo> objeto proporciona información específica de la referencia cultural sobre el formato de `value`.</span><span class="sxs-lookup"><span data-stu-id="da069-2571">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="da069-2572">Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> objeto se usa la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="da069-2572">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
 <span data-ttu-id="da069-2573">Si prefiere no se controla una excepción si se produce un error en la conversión, puede llamar a la <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> método en su lugar.</span><span class="sxs-lookup"><span data-stu-id="da069-2573">If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=nameWithType> method instead.</span></span> <span data-ttu-id="da069-2574">Devuelve un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no.</span><span class="sxs-lookup"><span data-stu-id="da069-2574">It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="da069-2575">En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</span><span class="sxs-lookup"><span data-stu-id="da069-2575">The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</span></span> <span data-ttu-id="da069-2576">A continuación, intenta convertir cada elemento de una matriz de cadenas numéricas en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2576">It then attempts to convert each element of a numeric string array to an unsigned long integer.</span></span> <span data-ttu-id="da069-2577">La conversión utiliza tanto el proveedor personalizado y el <xref:System.Globalization.NumberFormatInfo> proveedor para la referencia cultural invariable.</span><span class="sxs-lookup"><span data-stu-id="da069-2577">The conversion uses both the custom provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_2.cs#15)]
 [!code-vb[System.Convert.ToUInt64#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_2.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2578">
            <paramref name="value" /> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2578">
              <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2579">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2579">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, int32 fromBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.ToUInt64(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUInt64 (value As String, fromBase As Integer) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 ToUInt64(System::String ^ value, int fromBase);" />
      <MemberSignature Language="F#" Value="static member ToUInt64 : string * int -&gt; uint64" Usage="System.Convert.ToUInt64 (value, fromBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="da069-2580">Cadena que contiene el número que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2580">A string that contains the number to convert.</span>
          </span>
        </param>
        <param name="fromBase">
          <span data-ttu-id="da069-2581">Base del número de <c>value</c>, que debe ser 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2581">The base of the number in <c>value</c>, which must be 2, 8, 10, or 16.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="da069-2582">Convierte la representación de cadena de un número en una base especificada en un entero de 64 bits sin signo equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2582">Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="da069-2583">Un entero de 64 bits sin signo equivalente al número de <paramref name="value" />, o 0 (cero) si <paramref name="value" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2583">A 64-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da069-2584">Si `fromBase` es 16, puede anteponer el número especificado por el `value` parámetro con "0 x" o "0 X".</span><span class="sxs-lookup"><span data-stu-id="da069-2584">If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".</span></span>  
  
 <span data-ttu-id="da069-2585">Dado que el <xref:System.UInt64> tipo de datos admite valores sin signo, el <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> método supone que `value` se expresa mediante la representación binaria sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2585">Because the <xref:System.UInt64> data type supports unsigned values only, the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method assumes that `value` is expressed using unsigned binary representation.</span></span> <span data-ttu-id="da069-2586">En otras palabras, todas las de 64 bits se utilizan para representar el valor numérico, y no está presente un bit de signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2586">In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent.</span></span> <span data-ttu-id="da069-2587">Como resultado, es posible escribir código en el que un entero largo con signo de valor que está fuera del intervalo de la <xref:System.UInt64> tipo de datos se convierte en un <xref:System.UInt64> valor sin que el método que se produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-2587">As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception.</span></span> <span data-ttu-id="da069-2588">El ejemplo siguiente convierte <xref:System.Int64.MinValue> a su representación de cadena hexadecimal y, a continuación, llama a la <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> método.</span><span class="sxs-lookup"><span data-stu-id="da069-2588">The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="da069-2589">En lugar de producir una excepción, el método muestra el mensaje, "0 x 8000000000000000 se convierte en 9223372036854775808".</span><span class="sxs-lookup"><span data-stu-id="da069-2589">Instead of throwing an exception, the method displays the message, "0x8000000000000000 converts to 9223372036854775808."</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#15)]
 [!code-vb[System.Convert.BaseConversion#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#15)]  
  
 <span data-ttu-id="da069-2590">Al realizar operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="da069-2590">When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</span></span> <span data-ttu-id="da069-2591">El ejemplo siguiente muestra una técnica para asegurarse de que el método no utiliza incorrectamente representación binaria para interpretar un valor que usa dos representación del complemento al convertir una cadena hexadecimal a un <xref:System.UInt64> valor.</span><span class="sxs-lookup"><span data-stu-id="da069-2591">The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value.</span></span> <span data-ttu-id="da069-2592">El ejemplo determina si un valor representa con signo o entero sin signo mientras se está convirtiendo ese valor a su representación de cadena.</span><span class="sxs-lookup"><span data-stu-id="da069-2592">The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</span></span> <span data-ttu-id="da069-2593">Cuando el ejemplo convierte el valor en un <xref:System.UInt64> valor, comprueba si el valor original era un entero con signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2593">When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer.</span></span> <span data-ttu-id="da069-2594">Si es así, y si se establece su bit de orden superior (lo que indica que el valor original era negativo), el método produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="da069-2594">If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</span></span>  
  
 [!code-csharp[System.Convert.BaseConversion#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Convert.BaseConversion/cs/Conversion.cs#16)]
 [!code-vb[System.Convert.BaseConversion#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Convert.BaseConversion/vb/Conversion.vb#16)]  
  
   
  
## Examples  
 <span data-ttu-id="da069-2595">El ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas numéricas como un valor hexadecimal y convertirlo en un entero largo sin signo.</span><span class="sxs-lookup"><span data-stu-id="da069-2595">The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.</span></span>  
  
 [!code-csharp[System.Convert.ToUInt64#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.touint64/cs/touint64_3.cs#16)]
 [!code-vb[System.Convert.ToUInt64#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.touint64/vb/touint64_3.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="da069-2596">
            <paramref name="fromBase" /> no es 2, 8, 10 o 16.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2596">
              <paramref name="fromBase" /> is not 2, 8, 10, or 16.</span>
          </span>
          <span data-ttu-id="da069-2597">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2597">-or-</span>
          </span>
          <span data-ttu-id="da069-2598">
            <paramref name="value" />, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2598">
              <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="da069-2599">
            <paramref name="value" /> es <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2599">
              <paramref name="value" /> is <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="da069-2600">
            <paramref name="value" /> contiene un carácter que no es un dígito válido en la base especificada por <paramref name="fromBase" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2600">
              <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />.</span>
          </span>
          <span data-ttu-id="da069-2601">Si el primer carácter de <paramref name="value" /> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <paramref name="value" /> contiene caracteres finales no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2601">The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="da069-2602">
            <paramref name="value" />, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2602">
              <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</span>
          </span>
          <span data-ttu-id="da069-2603">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2603">-or-</span>
          </span>
          <span data-ttu-id="da069-2604">
            <paramref name="value" /> representa un número menor que <see cref="F:System.UInt64.MinValue" /> o mayor que <see cref="F:System.UInt64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="da069-2604">
              <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryFromBase64Chars">
      <MemberSignature Language="C#" Value="public static bool TryFromBase64Chars (ReadOnlySpan&lt;char&gt; chars, Span&lt;byte&gt; bytes, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFromBase64Chars(valuetype System.ReadOnlySpan`1&lt;char&gt; chars, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFromBase64Chars (chars As ReadOnlySpan(Of Char), bytes As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFromBase64Chars(ReadOnlySpan&lt;char&gt; chars, Span&lt;System::Byte&gt; bytes, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member TryFromBase64Chars : ReadOnlySpan&lt;char&gt; * Span&lt;byte&gt; *  -&gt; bool" Usage="System.Convert.TryFromBase64Chars (chars, bytes, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="chars">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFromBase64String">
      <MemberSignature Language="C#" Value="public static bool TryFromBase64String (string s, Span&lt;byte&gt; bytes, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFromBase64String(string s, valuetype System.Span`1&lt;unsigned int8&gt; bytes, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFromBase64String (s As String, bytes As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryFromBase64String(System::String ^ s, Span&lt;System::Byte&gt; bytes, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="static member TryFromBase64String : string * Span&lt;byte&gt; *  -&gt; bool" Usage="System.Convert.TryFromBase64String (s, bytes, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="bytes" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryToBase64Chars">
      <MemberSignature Language="C#" Value="public static bool TryToBase64Chars (ReadOnlySpan&lt;byte&gt; bytes, Span&lt;char&gt; chars, out int charsWritten, Base64FormattingOptions options = System.Base64FormattingOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryToBase64Chars(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes, valuetype System.Span`1&lt;char&gt; chars, [out] int32&amp; charsWritten, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryToBase64Chars (bytes As ReadOnlySpan(Of Byte), chars As Span(Of Char), ByRef charsWritten As Integer, Optional options As Base64FormattingOptions = System.Base64FormattingOptions.None) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryToBase64Chars : ReadOnlySpan&lt;byte&gt; * Span&lt;char&gt; *  * Base64FormattingOptions -&gt; bool" Usage="System.Convert.TryToBase64Chars (bytes, chars, charsWritten, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="chars" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="chars">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>