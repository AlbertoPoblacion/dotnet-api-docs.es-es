<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Convert.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe073bd516e9adc2eacdb9cda5fd35509153dd358a16.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bd516e9adc2eacdb9cda5fd35509153dd358a16</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a base data type to another base data type.</source>
          <target state="translated">Convierte un tipo de datos base en otro tipo de datos base.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The static methods of the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class are primarily used to support conversion to and from the base data types in the .NET Framework.</source>
          <target state="translated">Los métodos estáticos de la <ph id="ph1">&lt;xref:System.Convert&gt;</ph> clase se utilizan principalmente para admitir la conversión a y desde los tipos de datos base en .NET Framework.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The supported base types are <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Char&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Byte&gt;</ph>, <ph id="ph5">&lt;xref:System.Int16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.Int64&gt;</ph>, <ph id="ph8">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph11">&lt;xref:System.Single&gt;</ph>, <ph id="ph12">&lt;xref:System.Double&gt;</ph>, <ph id="ph13">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph14">&lt;xref:System.DateTime&gt;</ph> and <ph id="ph15">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Los tipos base admitidos son <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Char&gt;</ph>, <ph id="ph3">&lt;xref:System.SByte&gt;</ph>, <ph id="ph4">&lt;xref:System.Byte&gt;</ph>, <ph id="ph5">&lt;xref:System.Int16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.Int64&gt;</ph>, <ph id="ph8">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph11">&lt;xref:System.Single&gt;</ph>, <ph id="ph12">&lt;xref:System.Double&gt;</ph>, <ph id="ph13">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph14">&lt;xref:System.DateTime&gt;</ph> y <ph id="ph15">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class includes methods to support  other kinds of conversions.</source>
          <target state="translated">Además, la <ph id="ph1">&lt;xref:System.Convert&gt;</ph> clase incluye métodos para admitir otros tipos de conversiones.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This topic consists of the following sections:</source>
          <target state="translated">Este tema consta de las siguientes secciones:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Conversions to and from Base Types<ept id="p1">](#Base)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Conversiones de tipos Base<ept id="p1">](#Base)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Non-Decimal Numbers<ept id="p1">](#NonDecimal)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Números enteros<ept id="p1">](#NonDecimal)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Conversions from Custom Objects to Base Types<ept id="p1">](#Custom)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Conversiones de objetos personalizados a tipos Base<ept id="p1">](#Custom)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Culture-Specific Formatting Information<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Información de formato específica de la referencia cultural<ept id="p1">](#Culture)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Base64 Encoding<ept id="p1">](#Base64)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Codificación Base64<ept id="p1">](#Base64)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><bpt id="p1">[</bpt>Other Common Conversions<ept id="p1">](#Other)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Otras conversiones comunes<ept id="p1">](#Other)</ept></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions to and from Base Types</source>
          <target state="translated">Conversiones de tipos Base</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A conversion method exists to convert every base type to every other base type.</source>
          <target state="translated">Existe un método de conversión para convertir a cada tipo base para todos los demás tipos base.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type.</source>
          <target state="translated">Sin embargo, la llamada real a un método de conversión determinado puede generar uno de cinco resultados, dependiendo del valor del tipo base en tiempo de ejecución y el tipo de base de destino.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>These five outcomes are:</source>
          <target state="translated">Estos cinco resultados son:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>No conversion.</source>
          <target state="translated">Ninguna conversión.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when an attempt is made to convert from a type to itself (for example, by calling <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType&gt;</ph> with an argument of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>).</source>
          <target state="translated">Esto se produce cuando se realiza un intento para convertir de un tipo a sí mismo (por ejemplo, mediante una llamada a <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=nameWithType&gt;</ph> con un argumento de tipo <ph id="ph2">&lt;xref:System.Int32&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>In this case, the method simply returns an instance of the original type.</source>
          <target state="translated">En este caso, el método simplemente devuelve una instancia del tipo original.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Una clase <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when a particular conversion is not supported.</source>
          <target state="translated">Esto se produce cuando no se admite una conversión determinada.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> is thrown for the following conversions:</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> se produce para las conversiones siguientes:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from <ph id="ph1">&lt;xref:System.Char&gt;</ph> to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Single&gt;</ph>, <ph id="ph4">&lt;xref:System.Double&gt;</ph>, <ph id="ph5">&lt;xref:System.Decimal&gt;</ph>, or <ph id="ph6">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">Conversiones de <ph id="ph1">&lt;xref:System.Char&gt;</ph> a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Single&gt;</ph>, <ph id="ph4">&lt;xref:System.Double&gt;</ph>, <ph id="ph5">&lt;xref:System.Decimal&gt;</ph>, o <ph id="ph6">&lt;xref:System.DateTime&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Single&gt;</ph>, <ph id="ph3">&lt;xref:System.Double&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, or <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> to <ph id="ph6">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">Conversiones de <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Single&gt;</ph>, <ph id="ph3">&lt;xref:System.Double&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, o <ph id="ph5">&lt;xref:System.DateTime&gt;</ph> a <ph id="ph6">&lt;xref:System.Char&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> to any other type except <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Conversiones de <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> a cualquier otro tipo excepto <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from any other type, except <ph id="ph1">&lt;xref:System.String&gt;</ph>, to <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</source>
          <target state="translated">Conversiones de cualquier otro tipo, excepto <ph id="ph1">&lt;xref:System.String&gt;</ph>a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;xref:System.FormatException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format.</source>
          <target state="translated">Esto se produce cuando se produce un error en el intento de convertir un valor de cadena en cualquier otro tipo base porque la cadena no está en el formato correcto.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The exception is thrown for the following conversions:</source>
          <target state="translated">La excepción se produce para las conversiones siguientes:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value does not equal <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Una cadena que se puede convertir en un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor no es igual a <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> o <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value consists of multiple characters.</source>
          <target state="translated">Una cadena que se puede convertir en un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor consta de varios caracteres.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to any numeric type is not recognized as a valid number.</source>
          <target state="translated">Una cadena que se puede convertir a cualquier tipo numérico no se reconoce como un número válido.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A string to be converted to a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> is not recognized as a valid date and time value.</source>
          <target state="translated">Una cadena que se puede convertir en un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> no se reconoce como un valor de hora y fecha válida.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>A successful conversion.</source>
          <target state="translated">Una conversión correcta.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.</source>
          <target state="translated">Para las conversiones entre dos tipos base diferentes no aparece en los resultados anteriores, todas las conversiones de ampliación, así como todas las conversiones de restricción que no tienen como resultado una pérdida de datos se realizará correctamente y el método devolverá un valor de tipo base concreto.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</source>
          <target state="translated">Una clase <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>This occurs when a narrowing conversion results in a loss of data.</source>
          <target state="translated">Esto ocurre cuando una conversión de restricción produce una pérdida de datos.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For example, trying to convert a <ph id="ph1">&lt;xref:System.Int32&gt;</ph> instance whose value is 10000 to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> type throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph> because 10000 is outside the range of the <ph id="ph4">&lt;xref:System.Byte&gt;</ph> data type.</source>
          <target state="translated">Por ejemplo, se intenta convertir un <ph id="ph1">&lt;xref:System.Int32&gt;</ph> instancia cuyo valor es 10000 a un <ph id="ph2">&lt;xref:System.Byte&gt;</ph> escriba produce un <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph> porque 10000 está fuera del intervalo de la <ph id="ph4">&lt;xref:System.Byte&gt;</ph> tipo de datos.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits).</source>
          <target state="translated">No se producirá una excepción si la conversión de un tipo numérico produce una pérdida de precisión (es decir, la pérdida de algunos dígitos menos significativos).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.</source>
          <target state="translated">Sin embargo, se producirá una excepción si el resultado es mayor que puede representarse por tipo de valor devuelto del método de conversión.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For example, when a <ph id="ph1">&lt;xref:System.Double&gt;</ph> is converted to a <ph id="ph2">&lt;xref:System.Single&gt;</ph>, a loss of precision might occur but no exception is thrown.</source>
          <target state="translated">Por ejemplo, cuando un <ph id="ph1">&lt;xref:System.Double&gt;</ph> se convierte en un <ph id="ph2">&lt;xref:System.Single&gt;</ph>, se puede producir una pérdida de precisión, pero se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, if the magnitude of the <ph id="ph1">&lt;xref:System.Double&gt;</ph> is too large to be represented by a <ph id="ph2">&lt;xref:System.Single&gt;</ph>, an overflow exception is thrown.</source>
          <target state="translated">Sin embargo, si la magnitud de la <ph id="ph1">&lt;xref:System.Double&gt;</ph> es demasiado grande para representarlo mediante un <ph id="ph2">&lt;xref:System.Single&gt;</ph>, se produce una excepción de desbordamiento.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Non-Decimal Numbers</source>
          <target state="translated">Números enteros</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Convert&gt;</ph> clase incluye métodos estáticos que puede llamar para convertir valores enteros en representaciones de cadena no decimales y convertir las cadenas que representan los números no decimal en valores enteros.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Each of these conversion methods includes a <ph id="ph1">`base`</ph> argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10).</source>
          <target state="translated">Cada uno de estos métodos de conversión incluye un <ph id="ph1">`base`</ph> argumento que le permite especificar el sistema numérico; binaria (base 2), octal (base 8) y hexadecimal (base 16), así como número decimal (base 10).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:</source>
          <target state="translated">Hay un conjunto de métodos para convertir cada uno de los tipos enteros primitivos conforme a CLS en una cadena y otro para convertir una cadena en cada uno de los tipos primitivos de enteros:</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a byte value to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29&gt;</ph> y <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir un valor de byte a y desde una cadena en una base especificada.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 16-bit signed integer to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> y <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir un entero de 16 bits con signo a y desde una cadena en una base especificada.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 32-bit signed integer to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> y <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir un entero de 32 bits con signo a y desde una cadena en una base especificada.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph>, to convert a 64-bit signed integer to and from a string in a specified base.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> y <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir un entero con signo de 64 bits a y desde una cadena en una base especificada.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of a byte value in a specified format to a signed byte.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir la representación de cadena de un valor de bytes en un formato especificado en un byte con signo.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir la representación de cadena de un entero en un formato especificado en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir la representación de cadena de un entero en un formato especificado en un entero de 32 bits sin signo.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph>, para convertir la representación de cadena de un entero en un formato especificado en un entero de 64 bits sin signo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The following example converts the value of <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> to a string in all supported numeric formats.</source>
          <target state="translated">En el ejemplo siguiente se convierte el valor de <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> en una cadena con todos los formatos de numéricos compatibles.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It then converts the string value back to a <ph id="ph1">&lt;xref:System.Int16&gt;</ph> value.</source>
          <target state="translated">Después, el valor de cadena vuelve a convertir un <ph id="ph1">&lt;xref:System.Int16&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions from Custom Objects to Base Types</source>
          <target state="translated">Conversiones de objetos personalizados a tipos Base</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>In addition to supporting conversions between the base types, the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> method supports conversion of any custom type to any base type.</source>
          <target state="translated">Además de admitir las conversiones entre los tipos base, el <ph id="ph1">&lt;xref:System.Convert&gt;</ph> método admite la conversión de cualquier tipo personalizado a cualquier tipo base.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>To do this, the custom type must implement the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface, which defines methods for converting the implementing type to each of the base types.</source>
          <target state="translated">Para ello, el tipo personalizado debe implementar la <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interfaz, que define los métodos para convertir el tipo de implementación para cada uno de los tipos base.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversions that are not supported by a particular type should throw an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Las conversiones que no son compatibles con un tipo determinado se deberían iniciar un <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>When the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method is passed a custom type as its first parameter, or when the <ph id="ph2">`Convert.To`</ph><bpt id="p1">*</bpt>Type<ept id="p1">*</ept> method (such as <ph id="ph3">&lt;xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph4">&lt;xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> is called and passed an instance of a custom type as its first parameter, the <ph id="ph5">&lt;xref:System.Convert&gt;</ph> method, in turn, calls the custom type's <ph id="ph6">&lt;xref:System.IConvertible&gt;</ph> implementation to perform the conversion.</source>
          <target state="translated">Cuando el <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> método se pasa un tipo personalizado como su primer parámetro, o cuando la <ph id="ph2">`Convert.To`</ph> <bpt id="p1">*</bpt>tipo<ept id="p1">*</ept> método (como <ph id="ph3">&lt;xref:System.Convert.ToInt32%28System.Object%29?displayProperty=nameWithType&gt;</ph> o <ph id="ph4">&lt;xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> se llama y se pasa una instancia de un tipo personalizado como su primer parámetro, el <ph id="ph5">&lt;xref:System.Convert&gt;</ph> método, llama a su vez, el tipo personalizado <ph id="ph6">&lt;xref:System.IConvertible&gt;</ph> implementación para realizar la conversión.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For more information, see <bpt id="p1">[</bpt>Type Conversion in the .NET Framework<ept id="p1">](~/docs/standard/base-types/type-conversion.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>conversión de tipos en .NET Framework<ept id="p1">](~/docs/standard/base-types/type-conversion.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Culture-Specific Formatting Information</source>
          <target state="translated">Información de formato específica de la referencia cultural</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>All the base type conversion methods and the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method include overloads that have a parameter of type <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">Todos los métodos de conversión de tipo base y la <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> método incluyen sobrecargas que tienen un parámetro de tipo <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For example, the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType&gt;</ph> method has the following two overloads:</source>
          <target state="translated">Por ejemplo, el <ph id="ph1">&lt;xref:System.Convert.ToBoolean%2A?displayProperty=nameWithType&gt;</ph> método tiene las siguientes dos sobrecargas:</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter can supply culture-specific formatting information to assist the conversion process.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parámetro puede proporcionar información de formato específica de la referencia cultural para ayudar en el proceso de conversión.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, it is ignored by most of the base type conversion methods.</source>
          <target state="translated">Sin embargo, se omite la mayoría de los métodos de conversión de tipo base.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It is used only by the following base type conversion methods.If a <ph id="ph1">`null`</ph><ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argument is passed to these methods, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Se utiliza únicamente por los siguientes métodos de conversión de tipo base. Si un <ph id="ph1">`null`</ph> <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argumento se pasa a estos métodos, el <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> se usa el objeto que representa la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>By methods that convert a value to a numeric type.</source>
          <target state="translated">Los métodos que convierten un valor a un tipo numérico.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter is used by the overload that has parameters of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parámetro se utiliza la sobrecarga que tiene parámetros de tipo <ph id="ph2">&lt;xref:System.String&gt;</ph> y <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It is also used by the overload that has parameters of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> if the object's run-time type is a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">También se usa la sobrecarga que tiene parámetros de tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph> y <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> si el objeto del tiempo de ejecución tipo es un <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>By methods that convert a value to a date and time.</source>
          <target state="translated">Los métodos que convierten un valor a una fecha y hora.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter is used by the overload that has parameters of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parámetro se utiliza la sobrecarga que tiene parámetros de tipo <ph id="ph2">&lt;xref:System.String&gt;</ph> y <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>It is also used by the overload that has parameters of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> if the object's run-time type is a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">También se usa la sobrecarga que tiene parámetros de tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph> y <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> si el objeto del tiempo de ejecución tipo es un <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>By the <ph id="ph1">&lt;xref:System.Convert.ToString%2A?displayProperty=nameWithType&gt;</ph> overloads that include an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter and that convert either a numeric value to a string or a <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> value to a string.</source>
          <target state="translated">Por el <ph id="ph1">&lt;xref:System.Convert.ToString%2A?displayProperty=nameWithType&gt;</ph> sobrecargas que incluyen un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parámetro y que convertir un valor numérico en una cadena o un <ph id="ph3">&lt;xref:System.DateTime&gt;</ph> valor en una cadena.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>However, any user-defined type that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> can make use of the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter.</source>
          <target state="translated">Sin embargo, cualquier tipo definido por el usuario que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> puede hacer uso de la <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Base64 Encoding</source>
          <target state="translated">Codificación Base64</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Base64 encoding converts binary data to a string.</source>
          <target state="translated">Codificación Base64, datos binarios convierte en una cadena.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters.</source>
          <target state="translated">Datos expresados como dígitos en base 64 se pueden transmitir fácilmente a través de canales de datos que solo se pueden transmitir caracteres de 7 bits.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <ph id="ph2">&lt;xref:System.String&gt;</ph> or to and from an array of Unicode characters consisting of base-64 digit characters.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert&gt;</ph> clase incluye los siguientes métodos para admitir la codificación base64: un conjunto de métodos admite la conversión de una matriz de bytes desde y hacia un <ph id="ph2">&lt;xref:System.String&gt;</ph> o a y desde una matriz de caracteres Unicode que consta de caracteres de dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph>, which converts a byte array to a base64-encoded string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph>, que convierte una matriz de bytes en una cadena codificada en base64.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph>, which converts a byte array to a base64-encoded character array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph>, que convierte una matriz de bytes en una matriz de caracteres con codificación base64.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph>, which converts a base64-encoded string to a byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph>, que convierte una cadena codificada en base64 en una matriz de bytes.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source><ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph>, which converts a base64-encoded character array to a byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph>, que convierte una matriz de caracteres con codificación base64 en una matriz de bytes.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Other Common Conversions</source>
          <target state="translated">Otras conversiones comunes</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class.</source>
          <target state="translated">Puede utilizar otras clases de .NET Framework para realizar algunas conversiones que no son compatibles con los métodos estáticos de la <ph id="ph1">&lt;xref:System.Convert&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>These include:</source>
          <target state="translated">Se incluyen los siguientes:</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Conversion to byte arrays</source>
          <target state="translated">Conversión a matrices de bytes</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class  provides methods that convert the primitive numeric types (including <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>) to byte arrays and from byte arrays back to primitive data types.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> clase proporciona métodos que convierten los tipos numéricos primitivos (incluidos los <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>) para matrices de bytes y desde el byte matrices volver a tipos de datos primitivos.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>Character encoding and decoding</source>
          <target state="translated">Codificación de caracteres y descodificación</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class and its derived classes (such as <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.UTF8Encoding&gt;</ph>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> clase y sus clases derivadas (como <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> y <ph id="ph3">&lt;xref:System.Text.UTF8Encoding&gt;</ph>) proporciona métodos para codificar una matriz de caracteres o una cadena (es decir, convertirlas en una matriz de bytes en una codificación determinada) y para descodificar una matriz de bytes codificada (es decir, convertir una matriz de bytes a caracteres Unicode codificados en UTF16.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>For more information, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept></source>
          <target state="translated">Para obtener más información, vea <bpt id="p1">[</bpt>codificación de caracteres en .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept></target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Convert">
          <source>The following example demonstrates some of the conversion methods in the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Convert.ToBoolean%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Convert.ToString%2A&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente muestra algunos de los métodos de conversión en el <ph id="ph1">&lt;xref:System.Convert&gt;</ph> de la clase, incluidos los <ph id="ph2">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Convert.ToBoolean%2A&gt;</ph>, y <ph id="ph4">&lt;xref:System.Convert.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Returns an object of a specified type whose value is equivalent to a specified object.</source>
          <target state="translated">Devuelve un objeto de un tipo especificado cuyo valor es equivalente a un objeto especificado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The type of object to return.</source>
          <target state="translated">Tipo de objeto que se va a devolver.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>Returns an object of the specified type and whose value is equivalent to the specified object.</source>
          <target state="translated">Devuelve un objeto del tipo especificado y cuyo valor es equivalente al objeto especificado.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>An object whose type is <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Objeto cuyo tipo es <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> y cuyo valor es equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> is not a value type.</source>
          <target state="translated">Una referencia nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic), si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph> y <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> no es un tipo de valor.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to <ph id="ph3">`conversionType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> es un método de conversión de uso general que convierte el objeto especificado por <ph id="ph2">`value`</ph> a <ph id="ph3">`conversionType`</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type, and <ph id="ph2">`conversionType`</ph> can also be a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object that represents any base or custom type.</source>
          <target state="translated">El <ph id="ph1">`value`</ph> parámetro puede ser un objeto de cualquier tipo, y <ph id="ph2">`conversionType`</ph> también puede ser un <ph id="ph3">&lt;xref:System.Type&gt;</ph> objeto que representa cualquier tipo base o personalizado.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que la conversión se realiza correctamente, <ph id="ph1">`value`</ph> debe implementar la <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz, dado que el método simplemente ajusta una llamada a un correspondiente <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The method requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`conversionType`</ph> be supported.</source>
          <target state="translated">El método requiere que la conversión de <ph id="ph1">`value`</ph> a <ph id="ph2">`conversionType`</ph> deben admitir.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>This method uses the current thread's culture for the conversion.</source>
          <target state="translated">Este método usa la referencia cultural del subproceso actual para la conversión.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo siguiente se muestra el uso del método <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> is a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> y <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> es un tipo de valor.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format recognized by <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato reconocido por <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número que está fuera del intervalo de <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> method can convert an enumeration value to another type.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> método puede convertir un valor de enumeración a otro tipo.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration.</source>
          <target state="translated">Sin embargo, no puede convertir a otro tipo a un valor de enumeración, incluso si el tipo de origen es el tipo subyacente de la enumeración.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">Para convertir a un tipo en un valor de enumeración, utilice un operador de conversión (en C#) o una función de conversión (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The following example illustrates the conversion to and from a <bpt id="p1">&lt;c&gt;</bpt>Continent<ept id="p1">&lt;/c&gt;</ept> enumeration value.</source>
          <target state="translated">En el ejemplo siguiente se muestra la conversión a y desde una <bpt id="p1">&lt;c&gt;</bpt>continente<ept id="p1">&lt;/c&gt;</ept> valor de enumeración.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> method can convert a nullable type to another type.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type)" /&gt;</ph> método puede convertir un tipo que acepta valores NULL en otro tipo.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>However, it cannot convert another type to a value of a nullable type, even if <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is the underlying type of the <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>.To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">Sin embargo, no puede convertir otro tipo en un valor de un tipo que acepta valores NULL, incluso si <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> es el tipo subyacente de la <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>. Para realizar la conversión, puede utilizar un operador de conversión (en C#) o una función de conversión (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type)">
          <source>The following example illustrates the conversion to and from a nullable type.</source>
          <target state="translated">En el ejemplo siguiente se muestra la conversión a y desde un tipo que acepta valores NULL.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The type of object to return.</source>
          <target state="translated">Tipo de objeto que se va a devolver.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>Returns an object of the specified type whose value is equivalent to the specified object.</source>
          <target state="translated">Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>An object whose underlying type is <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Objeto cuyo tipo subyacente es <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> y cuyo valor es equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> is <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph>, or <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</source>
          <target state="translated">Una referencia nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph> y <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> es <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph> u <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to a predefined type specified by <ph id="ph3">`typeCode`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> es un método de conversión de uso general que convierte el objeto especificado por <ph id="ph2">`value`</ph> a un tipo predefinido especificado por <ph id="ph3">`typeCode`</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type.</source>
          <target state="translated">El <ph id="ph1">`value`</ph> parámetro puede ser un objeto de cualquier tipo.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que la conversión se realiza correctamente, <ph id="ph1">`value`</ph> debe implementar la <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz, dado que el método simplemente ajusta una llamada a un correspondiente <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The method also requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`typeCode`</ph> be supported.</source>
          <target state="translated">El método también requiere que la conversión de <ph id="ph1">`value`</ph> a <ph id="ph2">`typeCode`</ph> deben admitir.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> method does not support the conversion of <ph id="ph2">`value`</ph> to a custom type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> método no admite la conversión de <ph id="ph2">`value`</ph> a un tipo personalizado.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>To perform such a conversion, call the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29&gt;</ph> method.</source>
          <target state="translated">Para llevar a cabo este tipo de conversión, llame a la <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>The following example illustrates how to use the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> method to change an <ph id="ph2">&lt;xref:System.Object&gt;</ph> to the type specified by the <ph id="ph3">&lt;xref:System.TypeCode&gt;</ph> parameter, if possible.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%29&gt;</ph> método para cambiar un <ph id="ph2">&lt;xref:System.Object&gt;</ph> al tipo especificado por el <ph id="ph3">&lt;xref:System.TypeCode&gt;</ph> parámetro, si es posible.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> specifies a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> y <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> especifica un tipo de valor.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format recognized by the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato reconocido por el tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número que está fuera del intervalo del tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
          <source><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The type of object to return.</source>
          <target state="translated">Tipo de objeto que se va a devolver.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Returns an object of the specified type whose value is equivalent to the specified object.</source>
          <target state="translated">Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>A parameter supplies culture-specific formatting information.</source>
          <target state="translated">Un parámetro proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>An object whose type is <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Objeto cuyo tipo es <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> y cuyo valor es equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, if the <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> and <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> are equal.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> si el tipo <ph id="ph2">&lt;see cref="T:System.Type" /&gt;</ph> de <ph id="ph3">&lt;paramref name="value" /&gt;</ph> y <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> son iguales.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> is not a value type.</source>
          <target state="translated">Una referencia nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic), si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph> y <ph id="ph4">&lt;paramref name="conversionType" /&gt;</ph> no es un tipo de valor.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to <ph id="ph3">`conversionType`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> es un método de conversión de uso general que convierte el objeto especificado por <ph id="ph2">`value`</ph> a <ph id="ph3">`conversionType`</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type, and <ph id="ph2">`conversionType`</ph> can also be a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object that represents any base or custom type.</source>
          <target state="translated">El <ph id="ph1">`value`</ph> parámetro puede ser un objeto de cualquier tipo, y <ph id="ph2">`conversionType`</ph> también puede ser un <ph id="ph3">&lt;xref:System.Type&gt;</ph> objeto que representa cualquier tipo base o personalizado.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que la conversión se realiza correctamente, <ph id="ph1">`value`</ph> debe implementar la <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz, dado que el método simplemente ajusta una llamada a un correspondiente <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The method requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`conversionType`</ph> be supported.</source>
          <target state="translated">El método requiere que la conversión de <ph id="ph1">`value`</ph> a <ph id="ph2">`conversionType`</ph> deben admitir.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that supplies formatting information for the conversion.</source>
          <target state="translated">El <ph id="ph1">`provider`</ph> parámetro es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementación que proporciona información de formato para la conversión.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Whether and how this parameter is used depends on the underlying <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementation.</source>
          <target state="translated">Cuándo y cómo se utiliza este parámetro depende subyacente <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is a base data type, <ph id="ph2">`provider`</ph> is used only for the following conversions:</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es un tipo de datos base, <ph id="ph2">`provider`</ph> solo se usa para las conversiones siguientes:</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Conversion from a number to a string, or from a string to a number.</source>
          <target state="translated">Conversión de un número en una cadena o de una cadena en un número.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, or a custom <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementation that returns a <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> debe ser un <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto, un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto o un personalizado <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementación que devuelve un <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>However, because the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method performs the conversion using the default "G" format specifier, the <ph id="ph2">`provider`</ph> parameter has no effect if <ph id="ph3">`value`</ph> or the target type is an unsigned integer.</source>
          <target state="translated">Sin embargo, dado que la <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método realiza la conversión mediante el especificador de formato "G" de forma predeterminada, el <ph id="ph2">`provider`</ph> parámetro no tiene ningún efecto si <ph id="ph3">`value`</ph> o el tipo de destino es un entero sin signo.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> se usa el objeto que representa la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>Conversion from a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a string, or from a string to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value.</source>
          <target state="translated">Conversión de un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor como una cadena o de una cadena a un <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> debe ser un <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> o <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> se usa el objeto que representa la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is an application-defined type, its <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementation may use the <ph id="ph3">`provider`</ph> parameter.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es un tipo definido por la aplicación, su <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementación puede usar el <ph id="ph3">`provider`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">En el ejemplo siguiente se define una clase <ph id="ph1">`Temperature`</ph> que implementa la interfaz <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example creates an instance of the <ph id="ph1">`Temperature`</ph> class and calls the <ph id="ph2">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> method to convert it to the basic numeric types supported by the .NET Framework and to a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se crea una instancia de la <ph id="ph1">`Temperature`</ph> clase y llamadas a la <ph id="ph2">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> método para convertir en los tipos numéricos básicos compatibles con .NET Framework y a un <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>It illustrates that the <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> method wraps a call to the source type's <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementation.</source>
          <target state="translated">Ilustra que el <ph id="ph1">&lt;xref:System.Convert.ChangeType%2A&gt;</ph> método contiene una llamada para el tipo de origen <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> is a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> y <ph id="ph3">&lt;paramref name="conversionType" /&gt;</ph> es un tipo de valor.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format for <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph> recognized by <ph id="ph3">&lt;paramref name="provider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato para <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph> que <ph id="ph3">&lt;paramref name="provider" /&gt;</ph> reconozca.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número que está fuera del intervalo de <ph id="ph2">&lt;paramref name="conversionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> method can convert an enumeration value to another type.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> método puede convertir un valor de enumeración a otro tipo.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>However, it cannot convert another type to an enumeration value, even if the source type is the underlying type of the enumeration.</source>
          <target state="translated">Sin embargo, no puede convertir a otro tipo a un valor de enumeración, incluso si el tipo de origen es el tipo subyacente de la enumeración.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>To convert a type to an enumeration value, use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">Para convertir a un tipo en un valor de enumeración, utilice un operador de conversión (en C#) o una función de conversión (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example illustrates the conversion to and from a <bpt id="p1">&lt;c&gt;</bpt>Continent<ept id="p1">&lt;/c&gt;</ept> enumeration value.</source>
          <target state="translated">En el ejemplo siguiente se muestra la conversión a y desde una <bpt id="p1">&lt;c&gt;</bpt>continente<ept id="p1">&lt;/c&gt;</ept> valor de enumeración.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> method can convert a nullable type to another type.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)" /&gt;</ph> método puede convertir un tipo que acepta valores NULL en otro tipo.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>However, it cannot convert another type to a value of a nullable type, even if <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> is the underlying type of the <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>.</source>
          <target state="translated">Sin embargo, no puede convertir otro tipo en un valor de un tipo que acepta valores NULL, incluso si <ph id="ph1">&lt;paramref name="conversionType" /&gt;</ph> es el tipo subyacente de la <ph id="ph2">&lt;see cref="T:System.Nullable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>To perform the conversion, you can use a casting operator (in C#) or a conversion function (in Visual Basic).</source>
          <target state="translated">Para realizar la conversión, puede utilizar un operador de conversión (en C#) o una función de conversión (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
          <source>The following example illustrates the conversion to and from a nullable type.</source>
          <target state="translated">En el ejemplo siguiente se muestra la conversión a y desde un tipo que acepta valores NULL.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The type of object to return.</source>
          <target state="translated">Tipo de objeto que se va a devolver.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Returns an object of the specified type whose value is equivalent to the specified object.</source>
          <target state="translated">Devuelve un objeto del tipo especificado cuyo valor es equivalente al objeto especificado.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>A parameter supplies culture-specific formatting information.</source>
          <target state="translated">Un parámetro proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>An object whose underlying type is <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> and whose value is equivalent to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Objeto cuyo tipo subyacente es <ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> y cuyo valor es equivalente a <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph> and <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> is <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph>, or <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</source>
          <target state="translated">Una referencia nula (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph> y <ph id="ph4">&lt;paramref name="typeCode" /&gt;</ph> es <ph id="ph5">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph>, <ph id="ph6">&lt;see cref="F:System.TypeCode.String" /&gt;</ph> u <ph id="ph7">&lt;see cref="F:System.TypeCode.Object" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> is a general-purpose conversion method that converts the object specified by <ph id="ph2">`value`</ph> to a predefined type specified by <ph id="ph3">`typeCode`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> es un método de conversión de uso general que convierte el objeto especificado por <ph id="ph2">`value`</ph> a un tipo predefinido especificado por <ph id="ph3">`typeCode`</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The <ph id="ph1">`value`</ph> parameter can be an object of any type.</source>
          <target state="translated">El <ph id="ph1">`value`</ph> parámetro puede ser un objeto de cualquier tipo.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>For the conversion to succeed, <ph id="ph1">`value`</ph> must implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, because the method simply wraps a call to an appropriate <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> method.</source>
          <target state="translated">Para que la conversión se realiza correctamente, <ph id="ph1">`value`</ph> debe implementar la <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz, dado que el método simplemente ajusta una llamada a un correspondiente <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The method also requires that conversion of <ph id="ph1">`value`</ph> to <ph id="ph2">`typeCode`</ph> be supported.</source>
          <target state="translated">El método también requiere que la conversión de <ph id="ph1">`value`</ph> a <ph id="ph2">`typeCode`</ph> deben admitir.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method does not support the conversion of <ph id="ph2">`value`</ph> to a custom type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método no admite la conversión de <ph id="ph2">`value`</ph> a un tipo personalizado.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>To perform such a conversion, call the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">Para llevar a cabo este tipo de conversión, llame a la <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that supplies formatting information for the conversion.</source>
          <target state="translated">El <ph id="ph1">`provider`</ph> parámetro es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementación que proporciona información de formato para la conversión.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Whether and how this parameter is used depends on the underlying <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementation.</source>
          <target state="translated">Cuándo y cómo se utiliza este parámetro depende subyacente <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is a base data type, <ph id="ph2">`provider`</ph> is used only for the following conversions.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es un tipo de datos base, <ph id="ph2">`provider`</ph> solo se usa para las conversiones siguientes.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>If a <ph id="ph1">`null`</ph><ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argument is passed to these methods, the <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Si un <ph id="ph1">`null`</ph> <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> argumento se pasa a estos métodos, el <ph id="ph3">&lt;xref:System.Globalization.CultureInfo&gt;</ph> se usa el objeto que representa la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Conversion from a number to a string, or from a string to a number.</source>
          <target state="translated">Conversión de un número en una cadena o de una cadena en un número.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object, a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, or a custom <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementation that returns a <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> debe ser un <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objeto, un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto o un personalizado <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> implementación que devuelve un <ph id="ph5">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>However, because the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method performs the conversion using the default "G" format specifier, the <ph id="ph2">`provider`</ph> parameter has no effect if <ph id="ph3">`value`</ph> or the target type is an unsigned integer.</source>
          <target state="translated">Sin embargo, dado que la <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método realiza la conversión mediante el especificador de formato "G" de forma predeterminada, el <ph id="ph2">`provider`</ph> parámetro no tiene ningún efecto si <ph id="ph3">`value`</ph> o el tipo de destino es un entero sin signo.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>Conversion from a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a string, or from a string to a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value.</source>
          <target state="translated">Conversión de un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor como una cadena o de una cadena a un <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> must be a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> debe ser un <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> o <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> is an application-defined type, its <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementation may use the <ph id="ph3">`provider`</ph> parameter.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es un tipo definido por la aplicación, su <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> implementación puede usar el <ph id="ph3">`provider`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The following example defines a custom format provider named <ph id="ph1">`InterceptProvider`</ph> that indicates when its <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method is called and returns a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the fr-FR culture and a <ph id="ph4">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object for the en-US culture.</source>
          <target state="translated">En el ejemplo siguiente se define un proveedor de formato personalizado denominado <ph id="ph1">`InterceptProvider`</ph> que indica cuándo se su <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> método se llama y devuelve un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> para la referencia cultural fr-FR y un <ph id="ph4">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto para la referencia cultural en-US.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>This format provider is used in all calls to the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">Este proveedor de formato se utiliza en todas las llamadas a la <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The example then creates an array with a <ph id="ph1">&lt;xref:System.Double&gt;</ph> and a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value and makes repeated calls to <ph id="ph3">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> with each value and each member of the <ph id="ph4">&lt;xref:System.TypeCode&gt;</ph> enumeration.</source>
          <target state="translated">El ejemplo crea una matriz con un <ph id="ph1">&lt;xref:System.Double&gt;</ph> y un <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valor y hace que las llamadas repetidas a <ph id="ph3">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29&gt;</ph> con cada valor y cada miembro de la <ph id="ph4">&lt;xref:System.TypeCode&gt;</ph> enumeración.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>The example illustrates when the method uses the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parameter and also illustrates the use of the <ph id="ph2">`provider`</ph> parameter to perform culture-sensitive formatting.</source>
          <target state="translated">El ejemplo se muestra cuando se utiliza el método la <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> parámetro y también muestra el uso de la <ph id="ph2">`provider`</ph> parámetro para realizar el formato dependiente de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> specifies a value type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> y <ph id="ph3">&lt;paramref name="typeCode" /&gt;</ph> especifica un tipo de valor.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in a format for the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type recognized by <ph id="ph3">&lt;paramref name="provider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> tiene un formato para el tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> que no reconoce <ph id="ph3">&lt;paramref name="provider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is out of the range of the <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número que está fuera del intervalo del tipo <ph id="ph2">&lt;paramref name="typeCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="typeCode" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="F:System.Convert.DBNull">
          <source>A constant that represents a database column that is absent of data; that is, database null.</source>
          <target state="translated">Una constante que representa una columna de base de datos sin datos; es decir, el valor Null de las bases de datos.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Convert.DBNull">
          <source>The <ph id="ph1">&lt;xref:System.Convert.DBNull&gt;</ph> field is equivalent to <ph id="ph2">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>, as the following example shows.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.DBNull&gt;</ph> campo es equivalente a <ph id="ph2">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>, como se muestra en el ejemplo siguiente.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>A Unicode character array.</source>
          <target state="translated">Matriz de caracteres Unicode.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posición en <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The number of elements in <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> que se van a convertir.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</source>
          <target state="translated">Convierte un subconjunto de una matriz de caracteres Unicode, que codifica los datos binarios como dígitos en base 64, en una matriz equivalente de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Parameters specify the subset in the input array and the number of elements to convert.</source>
          <target state="translated">Los parámetros especifican el subconjunto de la matriz de entrada y el número de elementos que se convierten.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>An array of 8-bit unsigned integers equivalent to <ph id="ph1">&lt;paramref name="length" /&gt;</ph> elements at position <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> in <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">Matriz de enteros de 8 bits sin signo que equivale a un número <ph id="ph1">&lt;paramref name="length" /&gt;</ph> de elementos en la posición <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">`inArray`</ph> is composed of base-64 digits, white-space characters, and trailing padding characters.</source>
          <target state="translated"><ph id="ph1">`inArray`</ph> se compone de dígitos de base 64, caracteres de espacio en blanco y caracteres de relleno final.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", caracteres en minúscula "a" a "z", "0" al "9", los números y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</source>
          <target state="translated">Los caracteres de espacio en blanco y sus nombres Unicode y puntos de código hexadecimal son: tabulación (carácter de tabulación, u+0009), nueva línea (avance de línea, U + 000A), retorno de carro (retorno de carro, U+000D) y espacio en blanco (espacio, u+0020).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>An arbitrary number of white-space characters can appear in <ph id="ph1">`inArray`</ph> because all white-space characters are ignored.</source>
          <target state="translated">Un número arbitrario de caracteres de espacio en blanco puede aparecer en <ph id="ph1">`inArray`</ph> porque se omiten todos los caracteres de espacio en blanco.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">El carácter no tiene valor, "=", se utiliza para el relleno final.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The end of <ph id="ph1">`inArray`</ph> can consist of zero, one, or two padding characters.</source>
          <target state="translated">Final de <ph id="ph1">`inArray`</ph> puede consistir en cero, uno o dos caracteres de relleno.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph> method is designed to process a single character array that contains all the data to be decoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%2A&gt;</ph> método está diseñado para procesar una matriz de caracteres única que contiene todos los datos que se desea descodificar.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>To decode base-64 character data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para descodificar los datos de carácter de base 64 de un flujo, use la <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to decode UUencoded (base-64) data and save it as binary output.</source>
          <target state="translated">En el ejemplo siguiente se muestra el uso de la <ph id="ph1">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> método para descodificar datos en formato UUENCODE (base 64) y guardarlos en formato binario.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> methods.</source>
          <target state="translated">En el ejemplo siguiente se muestra la <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%2CSystem.Base64FormattingOptions%29&gt;</ph> y <ph id="ph2">&lt;xref:System.Convert.FromBase64CharArray%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The input is divided into groups of three bytes (24 bits) each.</source>
          <target state="translated">La entrada se divide en grupos de tres bytes (24 bits) cada uno.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</source>
          <target state="translated">Por lo tanto, cada grupo consta de cuatro números de 6 bits donde cada número está comprendido entre 0 y 63 decimal.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>In this example, there are 85 3-byte groups with one byte remaining.</source>
          <target state="translated">En este ejemplo, hay 85 grupos de 3 bytes con un byte restante.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</source>
          <target state="translated">El primer grupo consta de los valores hexadecimales 00, 01 y 02, que producen cuatro valores de 6 bits iguales a 0, 0, 4 y 2 decimales.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>Those four values correspond to the base-64 digits, "A", "A", "E", and "C", at the beginning of the output.</source>
          <target state="translated">Los cuatro valores corresponden a los dígitos de base 64, "A", "A", "E" y "C", al principio de la salida.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</source>
          <target state="translated">Si no existe un número entero de grupos de 3 bytes, los bytes restantes se rellenan con ceros para formar un grupo completo.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>In this example, the value of the last byte is hexadecimal FF.</source>
          <target state="translated">En este ejemplo, el valor del último byte es FF hexadecimal.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</source>
          <target state="translated">Los 6 primeros bits son iguales al decimal 63, que corresponde al dígito en base 64 "/" al final de la salida, y los 2 bits siguientes se rellenan con ceros para producir el decimal 48, que corresponde a los dígitos de base 64 "w".</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The last two 6-bit values are padding and correspond to the valueless padding character, "=".</source>
          <target state="translated">Los dos últimos valores de 6 bits son el relleno y corresponden a la no tiene valor "=" carácter de relleno.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="length" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> indicates a position not within <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> más <ph id="ph2">&lt;paramref name="length" /&gt;</ph> indica una posición de carácter que no se encuentra dentro de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The length of <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>, ignoring white-space characters, is not zero or a multiple of 4.</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>, sin tener en cuenta los espacios en blanco, no es cero ni un múltiplo de 4.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source>The format of <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is invalid.</source>
          <target state="translated">El formato de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> contiene un carácter que no está en base 64, más de dos caracteres de relleno o un carácter entre los caracteres de relleno que no es un espacio en blanco.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The string to convert.</source>
          <target state="translated">Cadena que se va a convertir.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</source>
          <target state="translated">Convierte la cadena especificada, que codifica los datos binarios como dígitos en base 64, en una matriz equivalente de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>An array of 8-bit unsigned integers that is equivalent to <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</source>
          <target state="translated">Una matriz de enteros de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source><ph id="ph1">`s`</ph> is composed of base-64 digits, white-space characters, and trailing padding characters.</source>
          <target state="translated"><ph id="ph1">`s`</ph> se compone de dígitos de base 64, caracteres de espacio en blanco y caracteres de relleno final.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", caracteres en minúscula "a" a "z", "0" al "9", los números y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020).</source>
          <target state="translated">Los caracteres de espacio en blanco y sus nombres Unicode y puntos de código hexadecimal son: tabulación (carácter de tabulación, u+0009), nueva línea (avance de línea, U + 000A), retorno de carro (retorno de carro, U+000D) y espacio en blanco (espacio, u+0020).</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>An arbitrary number of white-space characters can appear in <ph id="ph1">`s`</ph> because all white-space characters are ignored.</source>
          <target state="translated">Un número arbitrario de caracteres de espacio en blanco puede aparecer en <ph id="ph1">`s`</ph> porque se omiten todos los caracteres de espacio en blanco.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">El carácter no tiene valor, "=", se utiliza para el relleno final.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The end of <ph id="ph1">`s`</ph> can consist of zero, one, or two padding characters.</source>
          <target state="translated">Final de <ph id="ph1">`s`</ph> puede consistir en cero, uno o dos caracteres de relleno.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> method is designed to process a single string that contains all the data to be decoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> método está diseñado para procesar una única cadena que contiene todos los datos que se desea descodificar.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>To decode base-64 character data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para descodificar los datos de carácter de base 64 de un flujo, use la <ph id="ph1">&lt;xref:System.Security.Cryptography.FromBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to convert a byte array to a UUencoded (base-64) string, and then calls the <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to restore the original byte array.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para convertir una matriz de bytes en una cadena con codificación UUEncode (base 64) y, a continuación, llama el <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método para restaurar la matriz de bytes original.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The following is a more complex example that creates a 20-element array of 32-bit integers.</source>
          <target state="translated">El siguiente es un ejemplo más complejo que crea una matriz de 20 elementos de enteros de 32 bits.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>It then uses the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">A continuación, utiliza el <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> método para convertir cada elemento en una matriz de bytes, que se almacena en la posición adecuada en un búfer mediante una llamada a la <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>This buffer is then passed to the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to create a UUencoded (base-64) string.</source>
          <target state="translated">Este búfer se pasa a continuación el <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para crear una cadena con codificación UUEncode (base 64).</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to decode the UUencoded string, and calls the <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</source>
          <target state="translated">A continuación, se llama la <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método para descodificar la cadena con codificación UUEncode y llama el <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> método para convertir cada conjunto de cuatro bytes (el tamaño de un entero de 32 bits) en un entero.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The output from the example shows that the original array has been successfully restored.</source>
          <target state="translated">El resultado del ejemplo muestra que la matriz original se ha restaurado correctamente.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The length of <ph id="ph1">&lt;paramref name="s" /&gt;</ph>, ignoring white-space characters, is not zero or a multiple of 4.</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="s" /&gt;</ph>, sin tener en cuenta los espacios en blanco, no es cero ni un múltiplo de 4.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source>The format of <ph id="ph1">&lt;paramref name="s" /&gt;</ph> is invalid.</source>
          <target state="translated">El formato de <ph id="ph1">&lt;paramref name="s" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Convert.FromBase64String(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph> contiene un carácter que no está en base 64, más de dos caracteres de relleno o un carácter entre los caracteres de relleno que no es un espacio en blanco.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Convert.GetTypeCode(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Convert.GetTypeCode(System.Object)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> for the specified object.</source>
          <target state="translated">Devuelve el <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> del objeto especificado.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Convert.GetTypeCode(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> for <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph3">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph> if <ph id="ph4">&lt;paramref name="value" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> para <ph id="ph2">&lt;paramref name="value" /&gt;</ph> o <ph id="ph3">&lt;see cref="F:System.TypeCode.Empty" /&gt;</ph> si <ph id="ph4">&lt;paramref name="value" /&gt;</ph> es <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>An object.</source>
          <target state="translated">Objeto.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>Returns an indication whether the specified object is of type <ph id="ph1">&lt;see cref="T:System.DBNull" /&gt;</ph>.</source>
          <target state="translated">Devuelve una indicación en la que se precisa si el objeto especificado es de tipo <ph id="ph1">&lt;see cref="T:System.DBNull" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Convert.IsDBNull(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is of type <ph id="ph3">&lt;see cref="T:System.DBNull" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es de tipo <ph id="ph3">&lt;see cref="T:System.DBNull" /&gt;</ph>; en caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> method tests whether the <ph id="ph2">`value`</ph> parameter is equal to <ph id="ph3">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> método pruebas si el <ph id="ph2">`value`</ph> es igual al parámetro <ph id="ph3">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>It is equivalent to the following code:</source>
          <target state="translated">Es equivalente al código siguiente:</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source><ph id="ph1">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph> is used to indicate a value that is missing.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.DBNull.Value?displayProperty=nameWithType&gt;</ph> se utiliza para indicar un valor que falta.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>It is not equivalent to <ph id="ph1">`null`</ph> or to <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">No es equivalente a <ph id="ph1">`null`</ph> o a <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>Therefore, code such as <ph id="ph1">`Convert.IsDBNull(null)`</ph> in C# or <ph id="ph2">`Convert.IsDBNull(Nothing)`</ph> in Visual Basic returns<ph id="ph3">`false`</ph>.</source>
          <target state="translated">Por lo tanto, un código como <ph id="ph1">`Convert.IsDBNull(null)`</ph> en C# o <ph id="ph2">`Convert.IsDBNull(Nothing)`</ph> en Visual Basic devuelve<ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object to retrieve survey data from a database.</source>
          <target state="translated">En el ejemplo siguiente se usa un <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> objeto que se va a recuperar datos de la encuesta de una base de datos.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>It assigns each row's field values to an array, and then passes each array element to the <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> method.</source>
          <target state="translated">Asigna valores de los campos de cada fila en una matriz y, a continuación, pasa cada elemento de matriz el <ph id="ph1">&lt;xref:System.Convert.IsDBNull%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>If the method returns <ph id="ph1">`true`</ph>, the example assigns the string "NA" to the array element.</source>
          <target state="translated">Si el método devuelve <ph id="ph1">`true`</ph>, en el ejemplo se asigna la cadena "NA" para el elemento de matriz.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.IsDBNull(System.Object)">
          <source>The array is then added to the <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView.Rows%2A&gt;</ph> collection of a <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType&gt;</ph> control.</source>
          <target state="translated">La matriz, a continuación, se agrega a la <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView.Rows%2A&gt;</ph> colección de un <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView?displayProperty=nameWithType&gt;</ph> control.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</source>
          <target state="translated">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>An input array of 8-bit unsigned integers.</source>
          <target state="translated">Matriz de entrada de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posición en <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> que se van a convertir.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>An output array of Unicode characters.</source>
          <target state="translated">Matriz de salida de caracteres Unicode.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posición en <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</source>
          <target state="translated">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</source>
          <target state="translated">Los parámetros especifican los subconjuntos como posiciones de desplazamiento en las matrices de entrada y salida, así como el número de elementos de la matriz de entrada que se van a convertir.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A 32-bit signed integer containing the number of bytes in <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated">Entero de 32 bits con signo que contiene el número de bytes de <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The subset of <ph id="ph1">`length`</ph> elements of <ph id="ph2">`inArray`</ph> starting at position <ph id="ph3">`offsetIn`</ph>, are taken as a numeric value and converted to a subset of elements in <ph id="ph4">`outArray`</ph> starting at position <ph id="ph5">`offsetOut`</ph>.</source>
          <target state="translated">El subconjunto de <ph id="ph1">`length`</ph> elementos de <ph id="ph2">`inArray`</ph> a partir de posición <ph id="ph3">`offsetIn`</ph>, se toman como un valor numérico y se convierte en un subconjunto de elementos de <ph id="ph4">`outArray`</ph> a partir de posición <ph id="ph5">`offsetOut`</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The return value indicates the number of converted elements in <ph id="ph1">`outArray`</ph>.</source>
          <target state="translated">El valor devuelto indica el número de elementos convertidos en <ph id="ph1">`outArray`</ph>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The subset of <ph id="ph1">`outArray`</ph> consists of base-64 digits.</source>
          <target state="translated">El subconjunto de <ph id="ph1">`outArray`</ph> consta de dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" al "9" y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">El carácter no tiene valor, "=", se utiliza para el relleno final.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">El <ph id="ph1">`offset`</ph> y <ph id="ph2">`length`</ph> parámetros son números con signo de 32 bits.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">`offsetIn`</ph> and <ph id="ph2">`offsetOut`</ph> parameters are zero-based array positions.</source>
          <target state="translated">El <ph id="ph1">`offsetIn`</ph> y <ph id="ph2">`offsetOut`</ph> parámetros son posiciones de matriz de base cero.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método está diseñado para procesar una matriz de byte único que contiene todos los datos que se desea codificar.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To create a base-64 character array from a byte stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para crear una matriz de caracteres de base 64 de una secuencia de bytes, use la <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following example demonstrates using the <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método UUencode (codificado en base 64) una secuencia binaria y, a continuación, guardar la codificación en un archivo.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> or <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> o <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph> o <ph id="ph3">&lt;paramref name="length" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> y <ph id="ph2">&lt;paramref name="length" /&gt;</ph> es mayor que la longitud de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> plus the number of elements to return is greater than the length of <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> y el número de elementos a devolver es mayor que la longitud de <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>An input array of 8-bit unsigned integers.</source>
          <target state="translated">Matriz de entrada de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posición en <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> que se van a convertir.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>An output array of Unicode characters.</source>
          <target state="translated">Matriz de salida de caracteres Unicode.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A position within <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posición en <bpt id="p1">&lt;c&gt;</bpt>outArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> to insert a line break every 76 characters, or <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> to not insert line breaks.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> para insertar un salto de línea cada 76 caracteres o <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> para no insertar saltos de línea.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits.</source>
          <target state="translated">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en un subconjunto equivalente de una matriz de caracteres Unicode codificada con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</source>
          <target state="translated">Los parámetros especifican los subconjuntos como posiciones de desplazamiento en las matrices de entrada y salida, el número de elementos de la matriz de entrada que se convierten y si se insertan saltos de línea en la matriz de salida.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A 32-bit signed integer containing the number of bytes in <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated">Entero de 32 bits con signo que contiene el número de bytes de <ph id="ph1">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The subset of <ph id="ph1">`length`</ph> elements of the <ph id="ph2">`inArray`</ph> parameter starting at position <ph id="ph3">`offsetIn`</ph>, are taken as a numeric value and converted to a subset of elements in the <ph id="ph4">`outArray`</ph> parameter starting at position <ph id="ph5">`offsetOut`</ph>.</source>
          <target state="translated">El subconjunto de <ph id="ph1">`length`</ph> elementos de la <ph id="ph2">`inArray`</ph> parámetro que empieza en la posición <ph id="ph3">`offsetIn`</ph>, se toman como un valor numérico y se convierte en un subconjunto de elementos de la <ph id="ph4">`outArray`</ph> parámetro que empieza en la posición <ph id="ph5">`offsetOut`</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The return value indicates the number of converted elements in <ph id="ph1">`outArray`</ph>.</source>
          <target state="translated">El valor devuelto indica el número de elementos convertidos en <ph id="ph1">`outArray`</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The subset of <ph id="ph1">`outArray`</ph> consists of base-64 digits.</source>
          <target state="translated">El subconjunto de <ph id="ph1">`outArray`</ph> consta de dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" al "9" y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The valueless character "=" is used for trailing padding.</source>
          <target state="translated">El carácter sin valor "=" se usa para el relleno final.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">El <ph id="ph1">`offset`</ph> y <ph id="ph2">`length`</ph> parámetros son números con signo de 32 bits.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offsetIn`</ph> and <ph id="ph2">`offsetOut`</ph> parameters are zero-based array positions.</source>
          <target state="translated">El <ph id="ph1">`offsetIn`</ph> y <ph id="ph2">`offsetOut`</ph> parámetros son posiciones de matriz de base cero.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método está diseñado para procesar una matriz de byte único que contiene todos los datos que se desea codificar.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>To create a base-64 character array from a byte stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para crear una matriz de caracteres de base 64 de una secuencia de bytes, use la <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is set to <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</source>
          <target state="translated">Si el <ph id="ph1">`options`</ph> parámetro está establecido en <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> y el resultado de la conversión tiene más de 76 caracteres, se inserta un salto de línea cada 76 caracteres.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</source>
          <target state="translated">Un salto de línea se define como un carácter de retorno de carro (U+000D) seguido por una línea fuente carácter (U + 000A).</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <bpt id="p1">[</bpt><ph id="ph1">https://www.rfc-editor.org/</ph><ept id="p1">](https://www.rfc-editor.org/)</ept>.</source>
          <target state="translated">Para obtener más información, vea RFC 2045, "Multipurpose Internet Mail Extensions", en <bpt id="p1">[</bpt> <ph id="ph1">https://www.rfc-editor.org/</ph> <ept id="p1">](https://www.rfc-editor.org/)</ept>.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo siguiente se muestra el <ph id="ph1">&lt;xref:System.Convert.ToBase64CharArray%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The input is divided into groups of three bytes (24 bits) each.</source>
          <target state="translated">La entrada se divide en grupos de tres bytes (24 bits) cada uno.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</source>
          <target state="translated">Por lo tanto, cada grupo consta de cuatro números de 6 bits donde cada número está comprendido entre 0 y 63 decimal.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>In this example, there are 85 3-byte groups with one byte remaining.</source>
          <target state="translated">En este ejemplo, hay 85 grupos de 3 bytes con un byte restante.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</source>
          <target state="translated">El primer grupo consta de los valores hexadecimales 00, 01 y 02, que producen cuatro valores de 6 bits iguales a 0, 0, 4 y 2 decimales.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</source>
          <target state="translated">Los cuatro valores corresponden a lo dígitos de base 64 "A", "A", "E" y "C" al principio de la salida.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</source>
          <target state="translated">Si no existe un número entero de grupos de 3 bytes, los bytes restantes se rellenan con ceros para formar un grupo completo.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>In this example, the value of the last byte is hexadecimal FF.</source>
          <target state="translated">En este ejemplo, el valor del último byte es FF hexadecimal.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</source>
          <target state="translated">Los 6 primeros bits son iguales al decimal 63, que corresponde al dígito en base 64 "/" al final de la salida, y los 2 bits siguientes se rellenan con ceros para producir el decimal 48, que corresponde a los dígitos de base 64 "w".</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>The last two 6-bit values are padding and correspond to the valueless padding character, "=".</source>
          <target state="translated">Los dos últimos valores de 6 bits son el relleno y corresponden a la no tiene valor "=" carácter de relleno.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> or <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> o <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph>, <ph id="ph2">&lt;paramref name="offsetOut" /&gt;</ph> o <ph id="ph3">&lt;paramref name="length" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offsetIn" /&gt;</ph> y <ph id="ph2">&lt;paramref name="length" /&gt;</ph> es mayor que la longitud de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> plus the number of elements to return is greater than the length of <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offsetOut" /&gt;</ph> y el número de elementos a devolver es mayor que la longitud de <ph id="ph2">&lt;paramref name="outArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> no es un valor <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts the value of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Convierte el valor de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Matriz de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Convierte una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The string representation, in base 64, of the contents of <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena, en base 64, del contenido de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The elements of <ph id="ph1">`inArray`</ph> are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.</source>
          <target state="translated">Los elementos de <ph id="ph1">`inArray`</ph> se toman como un valor numérico y se convierte en una representación de cadena que se codifica con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" al "9" y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">El carácter no tiene valor, "=", se utiliza para el relleno final.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método está diseñado para procesar una matriz de byte único que contiene todos los datos que se desea codificar.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar datos desde una secuencia, utilice la <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>Ordinarily, the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is not used to round-trip a  UUEncoded (base-64 encoded) string.</source>
          <target state="translated">Normalmente, el <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método no es permiten ida y vuelta un con codificación UUEncode (codificado en base 64) cadena.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>That is, if you decode a string by calling the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> method, then encode the returned byte array by calling the <ph id="ph2">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method, the resulting string will not necessarily be identical to the original string.</source>
          <target state="translated">Es decir, si se descodifica una cadena mediante una llamada a la <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A&gt;</ph> método, codificar, a continuación, la matriz de bytes devuelta llamando el <ph id="ph2">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método, la cadena resultante no será necesariamente idéntica a la cadena original.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The string will round-trip only if the original string is a valid base-64 encoded string.</source>
          <target state="translated">La cadena estará ida y vuelta sólo si la cadena original es una cadena codificada en base 64 válida.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to convert a byte array to a UUencoded (base-64) string, and then calls the <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to restore the original byte array.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para convertir una matriz de bytes en una cadena con codificación UUEncode (base 64) y, a continuación, llama el <ph id="ph2">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método para restaurar la matriz de bytes original.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The following is a more complex example that creates a 20-element array of 32-bit integers.</source>
          <target state="translated">El siguiente es un ejemplo más complejo que crea una matriz de 20 elementos de enteros de 32 bits.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>It then uses the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">A continuación, utiliza el <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=nameWithType&gt;</ph> método para convertir cada elemento en una matriz de bytes, que se almacena en la posición adecuada en un búfer mediante una llamada a la <ph id="ph2">&lt;xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>This buffer is then passed to the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> method to create a UUencoded (base-64) string.</source>
          <target state="translated">Este búfer se pasa a continuación el <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%29&gt;</ph> método para crear una cadena con codificación UUEncode (base 64).</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> method to decode the UUencoded string, and calls the <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method to convert each set of four bytes (the size of a 32-bit integer) to an integer.</source>
          <target state="translated">A continuación, se llama la <ph id="ph1">&lt;xref:System.Convert.FromBase64String%28System.String%29&gt;</ph> método para descodificar la cadena con codificación UUEncode y llama el <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType&gt;</ph> método para convertir cada conjunto de cuatro bytes (el tamaño de un entero de 32 bits) en un entero.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source>The output from the example shows that the original array has been successfully restored.</source>
          <target state="translated">El resultado del ejemplo muestra que la matriz original se ha restaurado correctamente.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Matriz de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> to insert a line break every 76 characters, or <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> to not insert line breaks.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> para insertar un salto de línea cada 76 caracteres o <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> para no insertar saltos de línea.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Convierte una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>A parameter specifies whether to insert line breaks in the return value.</source>
          <target state="translated">Un parámetro especifica si se insertan saltos de línea en el valor devuelto.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The string representation in base 64 of the elements in <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena en base 64 de los elementos de <ph id="ph1">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The elements of the <ph id="ph1">`inArray`</ph> parameter are taken as a numeric value and converted to a string representation in base 64.</source>
          <target state="translated">Los elementos de la <ph id="ph1">`inArray`</ph> parámetro se toman como un valor numérico y se convierte en una representación de cadena en base 64.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" al "9" y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The valueless character "=" is used for trailing padding.</source>
          <target state="translated">El carácter sin valor "=" se usa para el relleno final.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método está diseñado para procesar una matriz de byte único que contiene todos los datos que se desea codificar.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar datos desde una secuencia, utilice la <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is set to <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</source>
          <target state="translated">Si el <ph id="ph1">`options`</ph> parámetro está establecido en <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> y el resultado de la conversión tiene más de 76 caracteres, se inserta un salto de línea cada 76 caracteres.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</source>
          <target state="translated">Un salto de línea se define como un carácter de retorno de carro (U+000D) seguido por una línea fuente carácter (U + 000A).</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array.</source>
          <target state="translated">Dado que los saltos de línea se consideran caracteres de espacio en blanco en una codificación de Base64, éstos se omitirán al convertir una base 64 de cadena a una matriz de bytes codificada.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window.</source>
          <target state="translated">Los saltos de línea son convenientes simplemente al mostrar la cadena codificada a un control o un dispositivo como una ventana de consola.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <bpt id="p1">[</bpt><ph id="ph1">https://www.rfc-editor.org/</ph><ept id="p1">](https://www.rfc-editor.org/)</ept>.</source>
          <target state="translated">Para obtener más información, vea RFC 2045, "Multipurpose Internet Mail Extensions", en <bpt id="p1">[</bpt> <ph id="ph1">https://www.rfc-editor.org/</ph> <ept id="p1">](https://www.rfc-editor.org/)</ept>.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType&gt;</ph> with a <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType&gt;</ph> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.</source>
          <target state="translated">El ejemplo siguiente se llama el <ph id="ph1">&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=nameWithType&gt;</ph> con un <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks?displayProperty=nameWithType&gt;</ph> argumento para Insertar línea se interrumpe en la cadena que se genera al codificar una matriz de bytes de elemento de 100.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source>As the output from the example shows, the <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType&gt;</ph> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.</source>
          <target state="translated">Como la salida se muestra en el ejemplo, la <ph id="ph1">&lt;xref:System.Convert.FromBase64String%2A?displayProperty=nameWithType&gt;</ph> funciona correctamente en la restauración de la matriz de bytes original; los caracteres de salto de línea se omiten durante la conversión.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> no es un valor <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Matriz de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>An offset in <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posición de desplazamiento en <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> que se van a convertir.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</source>
          <target state="translated">Los parámetros especifican el subconjunto como una posición de desplazamiento en la matriz de entrada y el número de elementos de la matriz que se van a convertir.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The string representation in base 64 of <ph id="ph1">&lt;paramref name="length" /&gt;</ph> elements of <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, starting at position <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena en base 64 de los elementos <ph id="ph1">&lt;paramref name="length" /&gt;</ph> de <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, empezando en la posición <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The elements of <ph id="ph1">`inArray`</ph> are taken as a numeric value and converted to a string representation in base 64.</source>
          <target state="translated">Los elementos de <ph id="ph1">`inArray`</ph> se toman como un valor numérico y se convierte en una representación de cadena en base 64.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" al "9" y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The valueless character, "=", is used for trailing padding.</source>
          <target state="translated">El carácter no tiene valor, "=", se utiliza para el relleno final.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">El <ph id="ph1">`offset`</ph> y <ph id="ph2">`length`</ph> parámetros son números con signo de 32 bits.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter is zero-based.</source>
          <target state="translated">El <ph id="ph1">`offset`</ph> parámetro está basado en cero.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método está diseñado para procesar una matriz de byte único que contiene todos los datos que se desea codificar.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar datos desde una secuencia, utilice la <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="length" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> y <ph id="ph2">&lt;paramref name="length" /&gt;</ph> es mayor que la longitud de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>An array of 8-bit unsigned integers.</source>
          <target state="translated">Matriz de enteros de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>An offset in <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posición de desplazamiento en <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Número de elementos de <bpt id="p1">&lt;c&gt;</bpt>inArray<ept id="p1">&lt;/c&gt;</ept> que se van a convertir.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> to insert a line break every 76 characters, or <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> to not insert line breaks.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /&gt;</ph> para insertar un salto de línea cada 76 caracteres o <ph id="ph2">&lt;see cref="F:System.Base64FormattingOptions.None" /&gt;</ph> para no insertar saltos de línea.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</source>
          <target state="translated">Convierte un subconjunto de una matriz de enteros de 8 bits sin signo en su representación de cadena equivalente, que se codifica con dígitos de base 64.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</source>
          <target state="translated">Los parámetros especifican el subconjunto como una posición de desplazamiento en la matriz de entrada, el número de elementos en la matriz que se convierten y si se insertan saltos de línea en el valor devuelto.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The string representation in base 64 of <ph id="ph1">&lt;paramref name="length" /&gt;</ph> elements of <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, starting at position <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena en base 64 de los elementos <ph id="ph1">&lt;paramref name="length" /&gt;</ph> de <ph id="ph2">&lt;paramref name="inArray" /&gt;</ph>, empezando en la posición <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The elements of the <ph id="ph1">`inArray`</ph> parameter are taken as a numeric value and converted to a string representation in base 64.</source>
          <target state="translated">Los elementos de la <ph id="ph1">`inArray`</ph> parámetro se toman como un valor numérico y se convierte en una representación de cadena en base 64.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/".</source>
          <target state="translated">Los dígitos de base 64 en orden ascendente desde cero son los caracteres en mayúsculas "A" a "Z", los caracteres en minúscula "a" a "z", los números del "0" al "9" y los símbolos "+" y "/".</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The valueless character "=" is used for trailing padding.</source>
          <target state="translated">El carácter sin valor "=" se usa para el relleno final.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offset`</ph> and <ph id="ph2">`length`</ph> parameters are 32-bit signed numbers.</source>
          <target state="translated">El <ph id="ph1">`offset`</ph> y <ph id="ph2">`length`</ph> parámetros son números con signo de 32 bits.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">`offset`</ph> parameter is zero-based.</source>
          <target state="translated">El <ph id="ph1">`offset`</ph> parámetro está basado en cero.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method is designed to process a single byte array that contains all the data to be encoded.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método está diseñado para procesar una matriz de byte único que contiene todos los datos que se desea codificar.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>To encode data from a stream, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Para codificar datos desde una secuencia, utilice la <ph id="ph1">&lt;xref:System.Security.Cryptography.ToBase64Transform?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>If the <ph id="ph1">`options`</ph> parameter is set to <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters.</source>
          <target state="translated">Si el <ph id="ph1">`options`</ph> parámetro está establecido en <ph id="ph2">&lt;xref:System.Base64FormattingOptions.InsertLineBreaks&gt;</ph> y el resultado de la conversión tiene más de 76 caracteres, se inserta un salto de línea cada 76 caracteres.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A).</source>
          <target state="translated">Un salto de línea se define como un carácter de retorno de carro (U+000D) seguido por una línea fuente carácter (U + 000A).</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at <bpt id="p1">[</bpt><ph id="ph1">https://www.rfc-editor.org/</ph><ept id="p1">](https://www.rfc-editor.org/)</ept>.</source>
          <target state="translated">Para obtener más información, vea RFC 2045, "Multipurpose Internet Mail Extensions", en <bpt id="p1">[</bpt> <ph id="ph1">https://www.rfc-editor.org/</ph> <ept id="p1">](https://www.rfc-editor.org/)</ept>.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo siguiente se muestra el <ph id="ph1">&lt;xref:System.Convert.ToBase64String%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The input is divided into groups of three bytes (24 bits) each.</source>
          <target state="translated">La entrada se divide en grupos de tres bytes (24 bits) cada uno.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63.</source>
          <target state="translated">Por lo tanto, cada grupo consta de cuatro números de 6 bits donde cada número está comprendido entre 0 y 63 decimal.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>In this example, there are 85 3-byte groups with one byte remaining.</source>
          <target state="translated">En este ejemplo, hay 85 grupos de 3 bytes con un byte restante.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2.</source>
          <target state="translated">El primer grupo consta de los valores hexadecimales 00, 01 y 02, que producen cuatro valores de 6 bits iguales a 0, 0, 4 y 2 decimales.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.</source>
          <target state="translated">Los cuatro valores corresponden a lo dígitos de base 64 "A", "A", "E" y "C" al principio de la salida.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group.</source>
          <target state="translated">Si no existe un número entero de grupos de 3 bytes, los bytes restantes se rellenan con ceros para formar un grupo completo.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>In this example, the value of the last byte is hexadecimal FF.</source>
          <target state="translated">En este ejemplo, el valor del último byte es FF hexadecimal.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w".</source>
          <target state="translated">Los 6 primeros bits son iguales al decimal 63, que corresponde al dígito en base 64 "/" al final de la salida, y los 2 bits siguientes se rellenan con ceros para producir el decimal 48, que corresponde a los dígitos de base 64 "w".</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>The last two 6-bit values are padding and correspond to the valueless padding character, "=".</source>
          <target state="translated">Los dos últimos valores de 6 bits son el relleno y corresponden a la no tiene valor "=" carácter de relleno.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="inArray" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="length" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is greater than the length of <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> y <ph id="ph2">&lt;paramref name="length" /&gt;</ph> es mayor que la longitud de <ph id="ph3">&lt;paramref name="inArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> no es un valor <ph id="ph2">&lt;see cref="T:System.Base64FormattingOptions" /&gt;</ph> válido.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to an equivalent Boolean value.</source>
          <target state="translated">Convierte un valor especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Boolean)">
          <source>The Boolean value to return.</source>
          <target state="translated">Valor booleano que se va a devolver.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Boolean)">
          <source>Returns the specified Boolean value; no actual conversion is performed.</source>
          <target state="translated">Devuelve el valor booleano especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Byte)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>The following example demonstrates that an attempt to convert a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a Boolean type throws <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra que un intento para convertir un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor a un tipo Boolean produce <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source>The number to convert.</source>
          <target state="translated">Número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Decimal)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Double)">
          <source>The following example converts a Boolean to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> and a <ph id="ph2">&lt;xref:System.Double&gt;</ph> to a Boolean value.</source>
          <target state="translated">En el ejemplo siguiente se convierte un valor booleano para un <ph id="ph1">&lt;xref:System.Double&gt;</ph> y un <ph id="ph2">&lt;xref:System.Double&gt;</ph> a un valor booleano.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Int16)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Int16&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Int32)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Int64)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>Converts the value of a specified object to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor de un objeto especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> or <ph id="ph2">&lt;see langword="false" /&gt;</ph>, which reflects the value returned by invoking the <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> method for the underlying type of <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Valor <ph id="ph1">&lt;see langword="true" /&gt;</ph> o <ph id="ph2">&lt;see langword="false" /&gt;</ph>, que refleja el valor devuelto al invocar el método <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> para el tipo subyacente de <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>, el método devuelve <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>The following example converts an array of object values to <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de valores de objeto <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a string that does not equal <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es una cadena que no es igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> o <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> is not supported.</source>
          <target state="translated">La conversión de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> no se admite.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.SByte)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Single)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Single)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source>A string that contains the value of either <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated">Cadena que contiene el valor de <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> o de <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source>Converts the specified string representation of a logical value to its Boolean equivalent.</source>
          <target state="translated">Convierte la representación de cadena especificada de un valor lógico en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, or <ph id="ph4">&lt;see langword="false" /&gt;</ph> if <ph id="ph5">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> or <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es igual a <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, o <ph id="ph4">&lt;see langword="false" /&gt;</ph> si <ph id="ph5">&lt;paramref name="value" /&gt;</ph> es igual a <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> o <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>For a successful conversion to occur, the <ph id="ph1">`value`</ph> parameter must equal either <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph>, a constant whose value is <ph id="ph3">`True`</ph>, <ph id="ph4">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, a constant whose value is <ph id="ph5">`False`</ph>, or it must be <ph id="ph6">`null`</ph>.</source>
          <target state="translated">Para realizar una conversión correcta para que se produzca, el <ph id="ph1">`value`</ph> parámetro debe ser igual a uno <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph>, una constante cuyo valor es <ph id="ph3">`True`</ph>, <ph id="ph4">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, una constante cuyo valor es <ph id="ph5">`False`</ph>, o debe ser <ph id="ph6">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>In comparing <ph id="ph1">`value`</ph> with <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, the method ignores case as well as leading and trailing white space.</source>
          <target state="translated">En la comparación de <ph id="ph1">`value`</ph> con <ph id="ph2">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> y <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>, el método omite los espacios en blanco, así como iniciales y finales mayúsculas.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType&gt;</ph> method to convert various strings to Boolean values.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType&gt;</ph> método para convertir varias cadenas en valores booleanos.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not equal to <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ni a <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.UInt16)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.UInt32)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un valor booleano equivalente.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not zero; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es distinto de cero; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.UInt64)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valores <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un valor booleano equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> or <ph id="ph2">&lt;see langword="false" /&gt;</ph>, which reflects the value returned by invoking the <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> method for the underlying type of <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Valor <ph id="ph1">&lt;see langword="true" /&gt;</ph> o <ph id="ph2">&lt;see langword="false" /&gt;</ph>, que refleja el valor devuelto al invocar el método <ph id="ph3">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph> para el tipo subyacente de <ph id="ph4">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>, el método devuelve <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The base types ignore the <ph id="ph1">`provider`</ph> parameter; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto el <ph id="ph1">`provider`</ph> parámetro; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> y una clase que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Objetos de la clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> contienen una matriz de <ph id="ph2">&lt;xref:System.Double&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">Un objeto de cada clase se pasa a la <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>This method returns <ph id="ph1">`true`</ph> if any of the non-discarded array values are non-zero.</source>
          <target state="translated">Este método devuelve <ph id="ph1">`true`</ph> si alguno de los valores de matriz no descartados es distinto de cero.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object determines how elements are discarded for this calculation.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objeto determina cómo se descartan los elementos para este cálculo.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a string that does not equal <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es una cadena que no es igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> o <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> is not supported.</source>
          <target state="translated">La conversión de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.Boolean" /&gt;</ph> no se admite.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>A string that contains the value of either <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated">Cadena que contiene el valor de <ph id="ph1">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> o de <ph id="ph2">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un valor lógico en un valor booleano equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, or <ph id="ph4">&lt;see langword="false" /&gt;</ph> if <ph id="ph5">&lt;paramref name="value" /&gt;</ph> equals <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> or <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es igual a <ph id="ph3">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph>, o <ph id="ph4">&lt;see langword="false" /&gt;</ph> si <ph id="ph5">&lt;paramref name="value" /&gt;</ph> es igual a <ph id="ph6">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph> o <ph id="ph7">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Boolean.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not equal to <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es igual a <ph id="ph2">&lt;see cref="F:System.Boolean.TrueString" /&gt;</ph> ni a <ph id="ph3">&lt;see cref="F:System.Boolean.FalseString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to an 8-bit unsigned integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Boolean)">
          <source>The following example illustrates the conversion of <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se muestra la conversión de <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Byte)">
          <source>The 8-bit unsigned integer to return.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a devolver.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Byte)">
          <source>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 8 bits sin signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>This method returns an unsigned byte value that represents the numeric code of the <ph id="ph1">&lt;xref:System.Char&gt;</ph> object passed to it.</source>
          <target state="translated">Este método devuelve un valor de byte sin signo que representa el código numérico de la <ph id="ph1">&lt;xref:System.Char&gt;</ph> objeto pasa a él.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>In the .NET Framework, a <ph id="ph1">&lt;xref:System.Char&gt;</ph> object is a 16-bit value.</source>
          <target state="translated">En .NET Framework, un <ph id="ph1">&lt;xref:System.Char&gt;</ph> objeto es un valor de 16 bits.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.</source>
          <target state="translated">Esto significa que el método es adecuado para devolver los códigos numéricos de caracteres en el intervalo de caracteres ASCII o en los intervalos Unicode C0 controles y alfabeto Latín básico y controles de C1 y Latín-1 adicional, de u+0000 a U + 00FF.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Char)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número mayor que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>The number to convert.</source>
          <target state="translated">Número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea al entero de 8 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Decimal)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> and a <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> value to a <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> y un <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> valor a un <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea al entero de 8 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Double)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> and a <ph id="ph3">&lt;xref:System.Double&gt;</ph> value to a <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> y un <ph id="ph3">&lt;xref:System.Double&gt;</ph> valor a un <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Int16)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Int16&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Int32)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Int64)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.Int64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>Converts the value of the specified object to an 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 8 bits sin signo.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no <ph id="ph2">`null`</ph>, este método contiene una llamada a la <ph id="ph3">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> implementación del tipo subyacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%29&gt;</ph> method to convert an array of objects to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%29&gt;</ph> método para convertir una matriz de objetos que se <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in the property format for a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato de propiedad válido para un valor <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source>Conversion from <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to the <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> type is not supported.</source>
          <target state="translated">La conversión de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en un tipo <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> no se admite.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source>The 8-bit signed integer to be converted.</source>
          <target state="translated">El entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.SByte)">
          <source>The following example converts an array of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source>A single-precision floating-point number.</source>
          <target state="translated">Número de punto flotante de precisión sencilla.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea al entero de 8 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Single)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Byte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>The following example defines a string array and attempts to convert each string to a <ph id="ph1">&lt;xref:System.Byte&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de cadenas y se intenta convertir cada cadena a un <ph id="ph1">&lt;xref:System.Byte&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>Note that while a <ph id="ph1">`null`</ph> string parses to zero, <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> throws a <ph id="ph3">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">Tenga en cuenta que mientras un <ph id="ph1">`null`</ph> cadena se analiza en cero, <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> produce una <ph id="ph3">&lt;xref:System.FormatException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String)">
          <source>Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.</source>
          <target state="translated">Tenga en cuenta que mientras espacios iniciales y finales se analizan correctamente, aplicar formato a símbolos, como símbolos de moneda, separadores de grupos o separadores decimales, no lo hace.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.UInt16)">
          <source>The following example converts an array of unsigned 16-bit integers to <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros de 16 bits sin signo a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.UInt32)">
          <source>The following example converts an array of unsigned integers to <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros sin signo a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.UInt64)">
          <source>The following example converts an array of unsigned long integers to <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros largos sin signo a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 8 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`ByteString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">En el ejemplo siguiente se define una clase <ph id="ph1">`ByteString`</ph> que implementa la interfaz <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.</source>
          <target state="translated">La clase almacena la representación de cadena de un valor de byte junto con un campo de inicio de sesión, por lo que puede representar ambos valores de byte con signo y sin signo.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>The following example instantiates several <ph id="ph1">`ByteString`</ph> objects and calls the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method to convert them to byte values.</source>
          <target state="translated">En el ejemplo siguiente se crea una instancia de varias <ph id="ph1">`ByteString`</ph> objetos y llamadas a la <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método convertirlas en valores de tipo byte.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>It illustrates that the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method wraps a call to the <ph id="ph2">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> method of the object to be converted.</source>
          <target state="translated">Ilustra que el <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método contiene una llamada a la <ph id="ph2">&lt;xref:System.IConvertible.ToByte%2A?displayProperty=nameWithType&gt;</ph> método del objeto que se va a convertir.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in the property format for a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato de propiedad válido para un valor <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source>Conversion from <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to the <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> type is not supported.</source>
          <target state="translated">La conversión de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en un tipo <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> no se admite.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 8 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>An 8-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual del objeto.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Byte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>The following example creates a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that defines the positive sign as "pos" and the negative sign as "neg", which it uses in calls to the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">En el ejemplo siguiente se crea un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que define el signo positivo como "pos" y el signo negativo como "neg", que se utiliza en llamadas a la <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method repeatedly to convert each element in a string array to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> value.</source>
          <target state="translated">A continuación, se llama la <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29&gt;</ph> método varias veces para convertir cada elemento de una matriz de cadenas a un <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 8 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>An 8-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Byte&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Dado que la <ph id="ph1">&lt;xref:System.Byte&gt;</ph> tipo de datos admite valores sin signo, solo el <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> método supone que <ph id="ph3">`value`</ph> se expresa mediante la representación binaria sin signo.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>In other words, all eight bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">En otras palabras, todos los ocho bits se utilizan para representar el valor numérico y un bit de inicio de sesión no está presente.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed byte value that is out of the range of the <ph id="ph1">&lt;xref:System.Byte&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que un byte con signo de un valor que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.Byte&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.Byte&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.SByte.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El ejemplo siguiente se convierte <ph id="ph1">&lt;xref:System.SByte.MinValue&gt;</ph> a su representación de cadena hexadecimal y, a continuación, las llamadas del <ph id="ph2">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x80 converts to 128."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0 x 80 se convierte en 128".</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se muestra una técnica para asegurarse de que el método no utiliza incorrectamente sin signo representación binaria cuando convierte una representación de cadena hexadecimal a un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">El ejemplo determina si un valor representa un con signo o un entero sin signo mientras que convierte ese valor en su representación de cadena.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>When the example converts the value back to a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Cuando el ejemplo se convierte el valor de vuelta a un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor, comprueba si el valor original era un entero con signo.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.</source>
          <target state="translated">Si es así, y su bit de orden superior está establecido (lo que indica que el valor es negativo y que utiliza los dos es el complemento en lugar de la representación binaria sin signo), el método produce una excepción.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.</source>
          <target state="translated">Como alternativa, en el ejemplo siguiente se intenta interpretar una matriz de cadenas como la representación de valores binarios, octales, decimales y hexadecimales.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Convert.ToByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Byte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Byte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a Unicode character.</source>
          <target state="translated">Convierte un valor especificado en un carácter Unicode.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en el carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Byte)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Byte)">
          <source>The following example converts an array of unsigned bytes to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de bytes sin signo a <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Char)">
          <source>The Unicode character to return.</source>
          <target state="translated">Carácter Unicode que se va a devolver.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Char)">
          <source>Returns the specified Unicode character value; no actual conversion is performed.</source>
          <target state="translated">Devuelve el valor del carácter Unicode especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>The following example attempts to convert a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to <ph id="ph2">&lt;xref:System.Char&gt;</ph>, and throws <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> on failure.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir un <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> a <ph id="ph2">&lt;xref:System.Char&gt;</ph>y produce <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> en caso de error.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Int16)">
          <source>The following example converts an array of signed 16-bit integers to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros de 16 bits con signo a <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Int32)">
          <source>The following example converts an array of signed integers to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros con signo a <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Int64)">
          <source>The following example attempts to convert a long integer to a <ph id="ph1">&lt;xref:System.Char&gt;</ph>, and throws a <ph id="ph2">&lt;xref:System.OverflowException&gt;</ph> on failure.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir un entero largo a un <ph id="ph1">&lt;xref:System.Char&gt;</ph>y produce una <ph id="ph2">&lt;xref:System.OverflowException&gt;</ph> en caso de error.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>Converts the value of the specified object to a Unicode character.</source>
          <target state="translated">Convierte el valor del objeto especificado en un carácter Unicode.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>A Unicode character that is equivalent to value, or <ph id="ph1">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode que es equivalente a value o <ph id="ph1">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no <ph id="ph2">`null`</ph>, este método contiene una llamada a la <ph id="ph3">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> implementación del tipo subyacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object)">
          <source>The following example attempts to convert each element in an object array to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos para un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a null string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es una cadena nula.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> is not supported.</source>
          <target state="translated">La conversión de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> no se admite.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.SByte)">
          <source>The following example converts an array of signed bytes to <ph id="ph1">&lt;xref:System.Char&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de bytes con signo a <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>A string of length 1.</source>
          <target state="translated">Una cadena de longitud 1.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>Converts the first character of a specified string to a Unicode character.</source>
          <target state="translated">Convierte el primer carácter de una cadena especificada en un carácter Unicode.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>A Unicode character that is equivalent to the first and only character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente al primer y único carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source><ph id="ph1">`value`</ph> must be a string that contains a single character.</source>
          <target state="translated"><ph id="ph1">`value`</ph> debe ser una cadena que contiene un único carácter.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String)">
          <source>The following example converts each element in a string array to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de cadenas a un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String)">
          <source>The length of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not 1.</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es 1.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en el carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integers to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros de 16 bits sin signo a un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en el carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.UInt32)">
          <source>The following example converts each element in an array of unsigned integers to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros sin signo a un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en el carácter Unicode equivalente.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.UInt64)">
          <source>The following example converts each element in an array of unsigned long integers to a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros largos sin signo a un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en su carácter Unicode equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>A Unicode character that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode que es equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph> o <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> si <ph id="ph3">&lt;paramref name="value" /&gt;</ph> es <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToChar%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> y una clase que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Objetos de la clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> contienen una matriz de <ph id="ph2">&lt;xref:System.Double&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToChar`</ph> method.</source>
          <target state="translated">Un objeto de cada clase se pasa a la <ph id="ph1">`ToChar`</ph> método.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>This method returns a character whose Unicode value is the average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método devuelve un carácter cuyo Unicode valor es el promedio de la matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores, utilizando el objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar cómo se calcula el promedio.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a null string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es una cadena nula.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source>The conversion of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> is not supported.</source>
          <target state="translated">La conversión de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> no se admite.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que <ph id="ph2">&lt;see cref="F:System.Char.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Char.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>A string of length 1 or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Una cadena de longitud 1 o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</source>
          <target state="translated">Convierte el primer carácter de una cadena especificada en un carácter Unicode, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>A Unicode character that is equivalent to the first and only character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un carácter Unicode equivalente al primer y único carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`value`</ph> must be a string that contains a single character.</source>
          <target state="translated"><ph id="ph1">`value`</ph> debe ser una cadena que contiene un único carácter.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Char.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>The following example converts a string representation of a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value with the <ph id="ph2">`ToChar`</ph> method, using an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object that displays the type of the format provider for which it is called.</source>
          <target state="translated">En el ejemplo siguiente se convierte una representación de cadena de un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor con el <ph id="ph2">`ToChar`</ph> método, con un <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> objeto que muestra el tipo de proveedor de formato para el que se llama.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>The example shows that the format provider is not referenced.</source>
          <target state="translated">El ejemplo muestra que el proveedor de formato no se hace referencia.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
          <source>The length of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not 1.</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es 1.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> value.</source>
          <target state="translated">Convierte un valor especificado en un valor <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Boolean)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Byte)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.DateTime)">
          <source>A date and time value.</source>
          <target state="translated">Valor de fecha y hora.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.DateTime)">
          <source>Returns the specified <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> object; no actual conversion is performed.</source>
          <target state="translated">Devuelve el objeto <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.DateTime)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>The number to convert.</source>
          <target state="translated">Número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Decimal)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>The double-precision floating-point value to convert.</source>
          <target state="translated">Valor de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Double)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int16)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int32)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Int64)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>Converts the value of the specified object to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> object.</source>
          <target state="translated">Convierte el valor del objeto especificado en un objeto <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or a date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Fecha y hora equivalente del valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o fecha y hora equivalente de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> si <ph id="ph3">&lt;paramref name="value" /&gt;</ph> es <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>For the conversion to succeed, the runtime type of the <ph id="ph1">`value`</ph> parameter must be either a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> or a <ph id="ph3">&lt;xref:System.String&gt;</ph>, or <ph id="ph4">`value`</ph> must be <ph id="ph5">`null`</ph>.</source>
          <target state="translated">Para que la conversión se realiza correctamente, el tipo en tiempo de ejecución de la <ph id="ph1">`value`</ph> parámetro debe ser un <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> o un <ph id="ph3">&lt;xref:System.String&gt;</ph>, o <ph id="ph4">`value`</ph> debe ser <ph id="ph5">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>Otherwise, the method throws an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">En caso contrario, el método produce una <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>In addition, if <ph id="ph1">`value`</ph> is a string, it must contain a valid representation of a date and time value in the current culture or a <ph id="ph2">&lt;xref:System.FormatException&gt;</ph> is thrown.</source>
          <target state="translated">Además, si <ph id="ph1">`value`</ph> es una cadena, debe contener una representación válida de un valor de fecha y hora en la referencia cultural actual o una <ph id="ph2">&lt;xref:System.FormatException&gt;</ph> se produce.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Convert.ToDateTime%28System.Object%29&gt;</ph> method with a variety of <ph id="ph2">&lt;xref:System.Object&gt;</ph> variables.</source>
          <target state="translated">El ejemplo siguiente se llama el <ph id="ph1">&lt;xref:System.Convert.ToDateTime%28System.Object%29&gt;</ph> método con una variedad de <ph id="ph2">&lt;xref:System.Object&gt;</ph> variables.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a valid date and time value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un valor de fecha y hora válido.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.SByte)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>The single-precision floating-point value to convert.</source>
          <target state="translated">Valor de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Single)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The string representation of a date and time.</source>
          <target state="translated">Representación en forma de cadena de una fecha y hora.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source>Converts the specified string representation of a date and time to an equivalent date and time value.</source>
          <target state="translated">Convierte la representación de cadena especificada de una fecha y hora en un valor de fecha y hora equivalente.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or the date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Fecha y hora equivalente del valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o la fecha y hora equivalente de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> si <ph id="ph3">&lt;paramref name="value" /&gt;</ph> es <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, the return value is the result of invoking the <ph id="ph3">&lt;xref:System.DateTime.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph4">`value`</ph> using the formatting information in a <ph id="ph5">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that is initialized for the current culture.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no es <ph id="ph2">`null`</ph>, el valor devuelto es el resultado de invocar la <ph id="ph3">&lt;xref:System.DateTime.Parse%2A?displayProperty=nameWithType&gt;</ph> método <ph id="ph4">`value`</ph> usando la información de formato en un <ph id="ph5">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto que se inicializa para la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The <ph id="ph1">`value`</ph> argument must contain the representation of a date and time in one of the formats described in the <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> topic.</source>
          <target state="translated">El <ph id="ph1">`value`</ph> argumento debe contener la representación de una fecha y hora en uno de los formatos descritos en el <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> tema.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If <ph id="ph1">`value`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.DateTime.MinValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">`value`</ph> es <ph id="ph2">`null`</ph>, el método devuelve <ph id="ph3">&lt;xref:System.DateTime.MinValue?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>This method tries to parse <ph id="ph1">`value`</ph> completely and avoid throwing a <ph id="ph2">&lt;xref:System.FormatException&gt;</ph>.</source>
          <target state="translated">Este método intenta analizar <ph id="ph1">`value`</ph> completamente y evitar que se produzca una <ph id="ph2">&lt;xref:System.FormatException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>It completes missing month, day, and year information with the current date.</source>
          <target state="translated">Completa falta el mes, día y la información del año con la fecha actual.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If <ph id="ph1">`value`</ph> contains only a date and no time, this method assumes a time of midnight.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> contiene solo una fecha y ninguna hora, este método supone que la hora de la medianoche.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>Any leading, inner, or trailing white-space characters in <ph id="ph1">`value`</ph> are ignored.</source>
          <target state="translated">Cualquier iniciales, centrales o finales caracteres de espacio en blanco en <ph id="ph1">`value`</ph> se omiten.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Convert.ToDateTime%2A&gt;</ph> method to convert various string representations of dates and times to <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Convert.ToDateTime%2A&gt;</ph> método para convertir varias representaciones de cadena de fechas y horas a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a properly formatted date and time string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es una cadena de fecha y hora con un formato incorrecto.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt16)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt32)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.UInt64)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> object, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un objeto <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph>, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or the date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Fecha y hora equivalente del valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o la fecha y hora equivalente de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> si <ph id="ph3">&lt;paramref name="value" /&gt;</ph> es <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a date, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that date.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa una fecha, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar esa fecha.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is involved in the conversion of <ph id="ph2">`value`</ph> if the runtime type of <ph id="ph3">`value`</ph> is a <ph id="ph4">&lt;xref:System.String&gt;</ph>, or if <ph id="ph5">`value`</ph> is a user-defined type whose <ph id="ph6">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> implementation makes use of <ph id="ph7">`provider`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> está implicado en la conversión de <ph id="ph2">`value`</ph> si el tipo de runtime de <ph id="ph3">`value`</ph> es un <ph id="ph4">&lt;xref:System.String&gt;</ph>, o si <ph id="ph5">`value`</ph> está definido por el usuario escriba cuya <ph id="ph6">&lt;xref:System.IConvertible.ToDateTime%2A?displayProperty=nameWithType&gt;</ph> implementación hace uso de <ph id="ph7">`provider`</ph>.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>If the runtime type of <ph id="ph1">`value`</ph> is <ph id="ph2">&lt;xref:System.String&gt;</ph> and <ph id="ph3">`provider`</ph> is <ph id="ph4">`null`</ph>, the <ph id="ph5">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is used.</source>
          <target state="translated">Si el tipo de runtime de <ph id="ph1">`value`</ph> es <ph id="ph2">&lt;xref:System.String&gt;</ph> y <ph id="ph3">`provider`</ph> es <ph id="ph4">`null`</ph>, el <ph id="ph5">&lt;xref:System.Globalization.CultureInfo&gt;</ph> se usa el objeto que representa la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The following example defines a custom format provider, <ph id="ph1">`CustomProvider`</ph>, whose <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method outputs a message to the console that it has been invoked, and then returns the <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object of the culture whose name was passed as a parameter to its class constructor.</source>
          <target state="translated">En el ejemplo siguiente se define un proveedor de formato personalizado, <ph id="ph1">`CustomProvider`</ph>, cuyo <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> método genera un mensaje en la consola que se ha invocado y, a continuación, devuelve el <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto de la referencia cultural cuyo nombre se pasa como parámetro a su clase constructor.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>Each of these <ph id="ph1">`CustomProvider`</ph> objects is used to convert the elements in an object array to date and time values.</source>
          <target state="translated">Cada una de estas <ph id="ph1">`CustomProvider`</ph> objetos se usa para convertir los elementos de una matriz de objetos con valores de fecha y hora.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The output indicates that the <ph id="ph1">`CustomProvider`</ph> object is used in the conversion only when the type of the <ph id="ph2">`value`</ph> parameter is a <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">El resultado indica que la <ph id="ph1">`CustomProvider`</ph> objeto se usa en la conversión solo cuando el tipo de la <ph id="ph2">`value`</ph> parámetro es un <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a valid date and time value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un valor de fecha y hora válido.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>A string that contains a date and time to convert.</source>
          <target state="translated">Cadena que contiene una fecha y hora que se van a convertir.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en una fecha y hora equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The date and time equivalent of the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or the date and time equivalent of <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Fecha y hora equivalente del valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o la fecha y hora equivalente de <ph id="ph2">&lt;see cref="F:System.DateTime.MinValue" /&gt;</ph> si <ph id="ph3">&lt;paramref name="value" /&gt;</ph> es <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.DateTime.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of date values with the <ph id="ph1">`ToDateTime`</ph> method, using an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">En el ejemplo siguiente se convierte representaciones de cadena de valores de fecha con el <ph id="ph1">`ToDateTime`</ph> método, con un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a properly formatted date and time string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es una cadena de fecha y hora con un formato incorrecto.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a decimal number.</source>
          <target state="translated">Convierte un valor especificado en un número decimal.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent decimal number.</source>
          <target state="translated">Convierte el valor booleano especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Boolean)">
          <source>The following example illustrates the conversion of <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> to <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se muestra la conversión de <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en el número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>The decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Byte)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>The following example attempts to convert a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value to <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>, and throws <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> upon failure.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>y produce <ph id="ph3">&lt;xref:System.InvalidCastException&gt;</ph> en caso de error.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Decimal)">
          <source>A decimal number.</source>
          <target state="translated">Número decimal.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Decimal)">
          <source>Returns the specified decimal number; no actual conversion is performed.</source>
          <target state="translated">Devuelve el número decimal especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value returned by this method contains a maximum of 15 significant digits.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor devuelto por este método contiene un máximo de 15 dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>If the <ph id="ph1">`value`</ph> parameter contains more than 15 significant digits, it is rounded using rounding to nearest.</source>
          <target state="translated">Si el <ph id="ph1">`value`</ph> parámetro contiene más de 15 dígitos significativos, se redondea utilizando el redondeo al más cercano.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The following example illustrates how the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType&gt;</ph> method uses rounding to nearest to return a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value with 15 significant digits.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo el <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType&gt;</ph> método utiliza el redondeo al más cercano a devolver un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor con 15 dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Double)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Int16)">
          <source>The following example converts an array of 16-bit signed integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros con signo de 16 bits a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Int32)">
          <source>The following example converts an array of signed integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros con signo a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Int64)">
          <source>The following example converts an <ph id="ph1">&lt;xref:System.Int64&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>Converts the value of the specified object to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del objeto especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>The following example tries to convert each element in an object array to a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos para un <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato adecuado para un tipo <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en el número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.SByte)">
          <source>The following example converts each element in an array of signed bytes to a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes con signo a un <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en el número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value returned by this method contains a maximum of seven significant digits.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor devuelto por este método contiene un máximo de siete dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>If the <ph id="ph1">`value`</ph> parameter contains more than seven significant digits, it is rounded using rounding to nearest.</source>
          <target state="translated">Si el <ph id="ph1">`value`</ph> parámetro contiene más de siete dígitos significativos, se redondea utilizando el redondeo al más cercano.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The following example illustrates how the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Single%29&gt;</ph> method uses rounding to nearest to return a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value with seven significant digits.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo el <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Single%29&gt;</ph> método utiliza el redondeo al más cercano a devolver un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor con siete dígitos significativos.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Single)">
          <source>The following example tries to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores a un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">Cadena que contiene un número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source>Converts the specified string representation of a number to an equivalent decimal number.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source>A decimal number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Decimal.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>The following example illustrates the use of <ph id="ph1">`ToDecimal`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra el uso de <ph id="ph1">`ToDecimal`</ph>.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String)">
          <source>It attempts to convert a <ph id="ph1">&lt;xref:System.String&gt;</ph> to a <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>, and throws the possible exceptions that may arise during the conversion.</source>
          <target state="translated">Intenta convertir un <ph id="ph1">&lt;xref:System.String&gt;</ph> a un <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>e inicia las excepciones posibles que pueden surgir durante la conversión.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un número con un formato válido.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>The decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.UInt16)">
          <source>The following example converts an array of 16-bit unsigned integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros de 16 bits sin signo a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.UInt32)">
          <source>The following example converts an array of unsigned integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros sin signo a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un número decimal equivalente.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.UInt64)">
          <source>The following example converts an array of unsigned long integers to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte una matriz de enteros largos sin signo a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un número decimal equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>A decimal number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">En el ejemplo siguiente se define una clase <ph id="ph1">`Temperature`</ph> que implementa la interfaz <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The following example shows that when a <ph id="ph1">`Temperature`</ph> object is passed as a parameter to the <ph id="ph2">&lt;xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method, the <ph id="ph3">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`Temperature`</ph> class is called to perform the conversion.</source>
          <target state="translated">En el ejemplo siguiente se muestra que cuando un <ph id="ph1">`Temperature`</ph> objeto se pasa como un parámetro a la <ph id="ph2">&lt;xref:System.Convert.ToDecimal%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método, el <ph id="ph3">&lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=nameWithType&gt;</ph> implementación de la <ph id="ph4">`Temperature`</ph> clase se llama para realizar la conversión.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato adecuado para un tipo <ph id="ph2">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">Cadena que contiene un número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un número decimal equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>A decimal number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número decimal equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Decimal.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.Decimal.Parse%2A?displayProperty=nameWithType&gt;</ph> método en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Decimal.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source>The following example attempts to convert an array of strings to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values by using <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objects that represent two different cultures.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir una matriz de cadenas a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores usando <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objetos que representan dos referencias culturales diferentes.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un número con un formato válido.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Decimal.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a double-precision floating-point number.</source>
          <target state="translated">Convierte un valor especificado en un número de punto flotante de precisión doble.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor booleano especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Boolean)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>The double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Byte)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Decimal)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Double)">
          <source>The double-precision floating-point number to return.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a devolver.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Double)">
          <source>Returns the specified double-precision floating-point number; no actual conversion is performed.</source>
          <target state="translated">Devuelve el número de punto flotante de precisión doble especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>A double-precision floating-point number equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Int16)">
          <source>The following example converts each element in an array of 16-bit signed integers to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros con signo de 16 bits a una <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Int32)">
          <source>The following example converts an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Int64)">
          <source>The following example converts each element in an array of signed long integers to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros largos con signo a un <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>Converts the value of the specified object to a double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del objeto especificado en un número de punto flotante de precisión doble.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no <ph id="ph2">`null`</ph>, este método contiene una llamada a la <ph id="ph3">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> implementación del tipo subyacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object)">
          <source>The following example attempts to convert each value in an object array to a <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir los valores en una matriz de objetos a un <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato adecuado para un tipo <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>The 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.SByte)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> valores a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Single)">
          <source>The single-precision floating-point number.</source>
          <target state="translated">Número de punto flotante de precisión sencilla.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Single)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Single)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source>A double-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToDouble%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToDouble%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>The following example attempts to convert each element in an array of numeric strings to a <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de cadenas numéricas en un <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String)">
          <source>The example's output is from a system whose current culture is en-US.</source>
          <target state="translated">El resultado del ejemplo es de un sistema cuya referencia cultural actual es en-US.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un número con un formato válido.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.UInt16)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valores a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.UInt32)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> valores a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un número de punto flotante de precisión doble equivalente.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.UInt64)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valores a un <ph id="ph2">&lt;xref:System.Double&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un número de punto flotante de precisión doble, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>A double-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToDouble%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> y una clase que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Objetos de la clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> contienen una matriz de <ph id="ph2">&lt;xref:System.Double&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToDouble`</ph> method.</source>
          <target state="translated">Un objeto de cada clase se pasa a la <ph id="ph1">`ToDouble`</ph> método.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método devuelve un promedio de la matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores, utilizando el objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar cómo se calcula el promedio.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato adecuado para un tipo <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión doble equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>A double-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión doble equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> método en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values with the <ph id="ph2">`ToDouble`</ph> method, using an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">En el ejemplo siguiente se convierte las representaciones de cadena de <ph id="ph1">&lt;xref:System.Double&gt;</ph> los valores que tienen la <ph id="ph2">`ToDouble`</ph> método, con un <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un número con un formato válido.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 16-bit signed integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to <ph id="ph3">&lt;xref:System.Int16&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte los valores booleanos <ph id="ph1">`true`</ph> y <ph id="ph2">`false`</ph> a <ph id="ph3">&lt;xref:System.Int16&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Byte)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Byte&gt;</ph> valores a un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Char)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores a un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea al entero de 16 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores a un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source>The example illustrates that any fractional part of a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value is rounded when performing the conversion.</source>
          <target state="translated">El ejemplo muestra que cualquier parte fraccionaria de un <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valor se redondea al realizar la conversión.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea al entero de 16 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Double)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores a un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Double)">
          <source>The example illustrates that any fractional part of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value is rounded before performing the conversion.</source>
          <target state="translated">El ejemplo muestra que cualquier parte fraccionaria de un <ph id="ph1">&lt;xref:System.Double&gt;</ph> valor se redondea antes de realizar la conversión.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int16)">
          <source>The 16-bit signed integer to return.</source>
          <target state="translated">Entero de 16 bits con signo que se va a devolver.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int16)">
          <source>Returns the specified 16-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 16 bits con signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>The 16-bit signed integer equivalent of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Entero de 16 bits con signo que equivale a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Int32)">
          <source>The following example attempts to convert each element in an array of integers to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>Converts the value of the specified object to a 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no <ph id="ph2">`null`</ph>, este método contiene una llamada a la <ph id="ph3">&lt;xref:System.IConvertible.ToInt16%2A?displayProperty=nameWithType&gt;</ph> implementación del tipo subyacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object)">
          <source>The following example attempts to convert each element in an object array to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for an <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato adecuado para un tipo <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>A 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.SByte)">
          <source>The following example converts each element in an array of signed bytes to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes con signo en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea al entero de 16 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores a un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source>A 16-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String)">
          <source>The following example converts string representations of 16-bit integers with the <ph id="ph1">`ToInt16`</ph> method, using default formatting.</source>
          <target state="translated">En el ejemplo siguiente se convierte las representaciones de cadena de enteros de 16 bits con el <ph id="ph1">`ToInt16`</ph> método, utilizando el formato predeterminado.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source>The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros de 16 bits sin signo en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source>The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros sin signo en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos sin signo en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 16 bits con signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>A 16-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> y una clase que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Objetos de la clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> contienen una matriz de <ph id="ph2">&lt;xref:System.Double&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToInt16`</ph> method.</source>
          <target state="translated">Un objeto de cada clase se pasa a la <ph id="ph1">`ToInt16`</ph> método.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método devuelve un promedio de la matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores, utilizando el objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar cómo se calcula el promedio.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format for an <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un formato adecuado para un tipo <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 16 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>A 16-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Int16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of 16-bit integers with the <ph id="ph1">`ToInt16`</ph> method, using an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">En el ejemplo siguiente se convierte las representaciones de cadena de enteros de 16 bits con el <ph id="ph1">`ToInt16`</ph> método, con un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 16 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>A 16-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Como el signo negativo no se admite para representaciones numéricas de no sea de base 10, la <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> método supone que los números negativos utilizan la representación complementaria de dos.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit.</source>
          <target state="translated">En otras palabras, el método siempre interpreta el bit binario de orden superior de un entero (bit 15) como su bit de signo.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.Int16&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.Int16&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que no sea de base 10 de número que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.Int16&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.Int16&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The following example increments <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> by one, converts the resulting number to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El siguiente ejemplo se aumenta <ph id="ph1">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph> en uno, convierte el número resultante en su representación de cadena hexadecimal y, a continuación, llama a la <ph id="ph2">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x8000 converts to -32768."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0 x 8000 se convierte en -32768".</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</source>
          <target state="translated">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos recuperando primero el signo del valor numérico antes de convertirla en su representación de cadena hexadecimal.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</source>
          <target state="translated">Inicia una excepción si el valor original era positivo pero la conversión a un entero genera un valor negativo.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadena como una cadena hexadecimal y convertirlo en un entero de 16 bits con signo.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 32-bit signed integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Boolean)">
          <source>The following example converts the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values <ph id="ph2">`true`</ph> and <ph id="ph3">`false`</ph> to integers.</source>
          <target state="translated">El siguiente ejemplo se convierte el <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valores <ph id="ph2">`true`</ph> y <ph id="ph3">`false`</ph> a enteros.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Byte)">
          <source>The following example converts each element in an array of bytes to an integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes en un entero.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Char)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Char%29&gt;</ph> method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the <ph id="ph2">`value`</ph> argument.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Char%29&gt;</ph> método devuelve un entero de 32 bits con signo que representa la unidad de código con codificación UTF-16 de la <ph id="ph2">`value`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Char)">
          <source>If <ph id="ph1">`value`</ph> is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no es un suplente bajo o suplente alto, el valor devuelto también representa el punto de código Unicode de valor.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Char)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to an integer.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores en un entero.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 32 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores en un entero.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 32 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to aninteger.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores a aninteger.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Int16)">
          <source>The following example converts each element in an array of 16-bit signed integers to an integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits con signo en un entero.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int32)">
          <source>The 32-bit signed integer to return.</source>
          <target state="translated">Entero de 32 bits con signo que se va a devolver.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int32)">
          <source>Returns the specified 32-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 32 bits con signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to an integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un entero.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>Converts the value of the specified object to a 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>A 32-bit signed integer equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object)">
          <source>If<ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si<ph id="ph1">`value`</ph> no <ph id="ph2">`null`</ph>, este método contiene una llamada a la <ph id="ph3">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> implementación del tipo subyacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object)">
          <source>The following example attempts to convert each element in an object array to an integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the  <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>A 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.SByte)">
          <source>The following example converts each element in an array of signed bytes to an integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes con signo en un entero.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 32 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to an integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores en un entero.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source>A 32-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.<ph id="ph4">`value`</ph></source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Int32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.<ph id="ph4">`value`</ph></target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated">se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String)">
          <source>The following example attempts to convert each element in a numeric string array to an integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de cadena numérica en un entero.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.UInt16)">
          <source>The following example converts each element in an array of 16-bit unsigned integers to an integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits sin signo en un entero.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source>The following example attempts to convert each element in an array of unsigned integers to a signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros sin signo en un entero con signo.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to a signed integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos sin signo en un entero con signo.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 32 bits con signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>A 32-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToInt32%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> y una clase que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Objetos de la clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> contienen una matriz de <ph id="ph2">&lt;xref:System.Double&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToInt32`</ph> method.</source>
          <target state="translated">Un objeto de cada clase se pasa a la <ph id="ph1">`ToInt32`</ph> método.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método devuelve un promedio de la matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores, utilizando el objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar cómo se calcula el promedio.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 32 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>A 32-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Int32.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.Int32.Parse%2A?displayProperty=nameWithType&gt;</ph> método en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Int32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">A continuación, intenta convertir cada elemento de una matriz de cadena numérica en un entero utilizando este proveedor de ambos y <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> proveedor para la referencia cultural invariable.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 32 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>A 32-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Como el signo negativo no se admite para representaciones numéricas de no sea de base 10, la <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> método supone que los números negativos utilizan la representación complementaria de dos.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit.</source>
          <target state="translated">En otras palabras, el método siempre interpreta el bit binario de orden superior de un entero (bit 31) como su bit de signo.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.Int32&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que no sea de base 10 de número que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.Int32&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.Int32&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>The following example increments <ph id="ph1">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> by one, converts the resulting number to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El siguiente ejemplo se aumenta <ph id="ph1">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> en uno, convierte el número resultante en su representación de cadena hexadecimal y, a continuación, llama a la <ph id="ph2">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x80000000 converts to -2147483648."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0 x 80000000 se convierte en -2147483648".</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation.</source>
          <target state="translated">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos recuperando primero el signo del valor numérico antes de convertirla en su representación de cadena hexadecimal.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.</source>
          <target state="translated">Inicia una excepción si el valor original era positivo pero la conversión a un entero genera un valor negativo.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 64-bit signed integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 64 bits con signo.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Boolean)">
          <source>The following example converts the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values <ph id="ph2">`true`</ph> and <ph id="ph3">`false`</ph> to long integers.</source>
          <target state="translated">El siguiente ejemplo se convierte el <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valores <ph id="ph2">`true`</ph> y <ph id="ph3">`false`</ph> en enteros largos.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Byte)">
          <source>The following example converts each element in an array of bytes to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes en un entero largo.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Char)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Char)">
          <source>The following example converts each element in a <ph id="ph1">&lt;xref:System.Char&gt;</ph> array to a long integer.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de un <ph id="ph1">&lt;xref:System.Char&gt;</ph> matriz a un entero largo.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 64 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores en un entero largo.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 64 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores en un entero largo.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Int16)">
          <source>The following example converts each element in an array of 16-bit integers to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits en un entero largo.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int32)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int64)">
          <source>A 64-bit signed integer.</source>
          <target state="translated">Entero de 64 bits con signo.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int64)">
          <source>Returns the specified 64-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 64 bits con signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Int64)">
          <source>The following example converts each element in an array of integers to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros en un entero largo.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>Converts the value of the specified object to a 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 64 bits con signo.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object)">
          <source>If <ph id="ph1">`value`</ph> is not <ph id="ph2">`null`</ph>, this method wraps a call to the <ph id="ph3">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> implementation of the underlying type of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no <ph id="ph2">`null`</ph>, este método contiene una llamada a la <ph id="ph3">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> implementación del tipo subyacente de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object)">
          <source>The following example attempts to convert each element in an object array to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero largo.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.SByte)">
          <source>The following example converts each element in a signed byte array to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes con signo en un entero largo.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 64 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores en un entero largo.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">Cadena que contiene un número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String)">
          <source>The following example attempts to convert each element in an array of numeric strings to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de cadenas numéricas en un entero largo.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.UInt16)">
          <source>The following example converts each element in an array of 16-bit unsigned integers to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits sin signo en un entero largo.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.UInt32)">
          <source>The following example converts each element in an array of unsigned integers to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros sin signo en un entero largo.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos sin signo en un entero largo.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 64 bits con signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToInt64%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The following example defines a class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> and a class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se define una clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> y una clase que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>Objects of the class that implements <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> hold an array of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">Objetos de la clase que implementa <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> contienen una matriz de <ph id="ph2">&lt;xref:System.Double&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>An object of each class is passed to the <ph id="ph1">`ToInt64`</ph> method.</source>
          <target state="translated">Un objeto de cada clase se pasa a la <ph id="ph1">`ToInt64`</ph> método.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>This method returns an average of the array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, using the object that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> to determine how to calculate the average.</source>
          <target state="translated">Este método devuelve un promedio de la matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores, utilizando el objeto que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> para determinar cómo se calcula el promedio.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 64 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Int64.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.Int64.Parse%2A?displayProperty=nameWithType&gt;</ph> método en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">`IFormatProvider`</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">`IFormatProvider`</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`NumberFormatInfo`</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">`NumberFormatInfo`</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">`NumberFormatInfo`</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">`NumberFormatInfo`</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Int64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">A continuación, intenta convertir cada elemento de una matriz de cadena numérica en un entero utilizando este proveedor de ambos y <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> proveedor para la referencia cultural invariable.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 64 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Como el signo negativo no se admite para representaciones numéricas de no sea de base 10, la <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> método supone que los números negativos utilizan la representación complementaria de dos.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit.</source>
          <target state="translated">En otras palabras, el método siempre interpreta el bit binario de orden superior de un entero largo (bit 63) como su bit de signo.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.Int64&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que no sea de base 10 de número que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.Int64&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.Int64&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.UInt64.MaxValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El ejemplo siguiente se convierte <ph id="ph1">&lt;xref:System.UInt64.MaxValue&gt;</ph> a su representación de cadena hexadecimal y, a continuación, las llamadas del <ph id="ph2">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0xFFFFFFFFFFFFFFFF converts to -1."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0xFFFFFFFFFFFFFFFF se convierte en -1".</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</source>
          <target state="translated">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos determinando primero si un valor representa sin signo o un tipo con signo al convertirlo en su representación de cadena hexadecimal.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.</source>
          <target state="translated">Inicia una excepción si el valor original era un tipo sin signo pero la conversión a un entero genera un valor cuyo bit de signo está activo.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadena como una cadena hexadecimal y convertirlo en un entero largo.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="M:System.Convert.ToInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Int64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to an 8-bit signed integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 8 bits con signo.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to signed byte values.</source>
          <target state="translated">En el ejemplo siguiente se convierte los valores booleanos <ph id="ph1">`true`</ph> y <ph id="ph2">`false`</ph> para firmados valores de tipo byte.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Byte)">
          <source>The following example attempts to convert each element in a byte array to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de bytes en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Char)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Char&gt;</ph> valores en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Char)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 8 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 8 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Int16)">
          <source>The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros de 16 bits con signo en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Int32)">
          <source>The following example attempts to convert each element in an array of signed integers to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros con signo en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>Converts the value of the specified object to an 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 8 bits con signo.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object)">
          <source>The following example attempts to convert each element in an object array to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.SByte)">
          <source>The 8-bit signed integer to return.</source>
          <target state="translated">Entero de 8 bits con signo que se va a devolver.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.SByte)">
          <source>Returns the specified 8-bit signed integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 8 bits con signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 8-bit signed integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 8 bits con signo más próximo.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source>An 8-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Entero de 8 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si value es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String)">
          <source>The following example converts string representations of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values with the <ph id="ph2">`ToSByte`</ph> method, using default formatting.</source>
          <target state="translated">En el ejemplo siguiente se convierte las representaciones de cadena de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> los valores que tienen la <ph id="ph2">`ToSByte`</ph> método, utilizando el formato predeterminado.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source>The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros de 16 bits sin signo en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source>The following example attempts to convert each element in an integer array to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source>The following example attempts to convert each element in an array of long integers to a signed byte.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un byte con signo.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> or less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph> o menor que <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 8 bits con signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`ByteString`</ph> class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`ByteString`</ph> clase que almacena tanto signed y unsigned bytes como cadenas hexadecimales junto con un campo que indica el signo del byte.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`ByteString`</ph> class implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">La clase <ph id="ph1">`ByteString`</ph> implementa la interfaz <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method to perform the conversion.</source>
          <target state="translated">Su <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> llamadas al método el <ph id="ph2">&lt;xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> método para realizar la conversión.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>If it fails, it throws an <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</source>
          <target state="translated">Si se produce un error, produce un <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The following example shows how the <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph2">`ByteString`</ph> class is called by the <ph id="ph3">&lt;xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">El siguiente ejemplo se muestra cómo el <ph id="ph1">&lt;xref:System.IConvertible.ToSByte%2A?displayProperty=nameWithType&gt;</ph> implementación de la <ph id="ph2">`ByteString`</ph> clase se denomina la <ph id="ph3">&lt;xref:System.Convert.ToSByte%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 8 bits con signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.SByte.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source>The following example converts string representations of <ph id="ph1">&lt;xref:System.SByte&gt;</ph> values with the <ph id="ph2">`ToSByte`</ph> method, using an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">En el ejemplo siguiente se convierte las representaciones de cadena de <ph id="ph1">&lt;xref:System.SByte&gt;</ph> los valores que tienen la <ph id="ph2">`ToSByte`</ph> método, con un <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 8 bits con signo equivalente.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>An 8-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Entero de 8 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Because the negative sign is not supported for non-base 10 numeric representations, the <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that negative numbers use two’s complement representation.</source>
          <target state="translated">Como el signo negativo no se admite para representaciones numéricas de no sea de base 10, la <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> método supone que los números negativos utilizan la representación complementaria de dos.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit.</source>
          <target state="translated">En otras palabras, el método siempre interpreta el bit de orden superior de un byte (bit 7) como su bit de signo.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <ph id="ph1">&lt;xref:System.SByte&gt;</ph> data type is converted to an <ph id="ph2">&lt;xref:System.SByte&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que no sea de base 10 de número que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.SByte&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.SByte&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Byte.MaxValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El ejemplo siguiente se convierte <ph id="ph1">&lt;xref:System.Byte.MaxValue&gt;</ph> a su representación de cadena hexadecimal y, a continuación, las llamadas del <ph id="ph2">&lt;xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0xff converts to -1."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0xff se convierte en -1".</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation.</source>
          <target state="translated">Como se muestra en el ejemplo siguiente, puede asegurarse de que el método controla apropiadamente los desbordamientos determinando primero si un valor representa sin signo o un tipo con signo al convertirlo en su representación de cadena hexadecimal.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.</source>
          <target state="translated">Inicia una excepción si el valor original era un tipo sin signo pero la conversión a un byte con signo genera un valor cuyo bit de signo está activo.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.</source>
          <target state="translated">En el ejemplo siguiente se intenta interpretar los elementos en una matriz de cadenas como binaria, octal y la representación hexadecimal de valores numéricos para convertirlos en bytes sin signo.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 signed number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número con signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSByte(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a single-precision floating-point number.</source>
          <target state="translated">Convierte un valor especificado en un número de punto flotante de precisión sencilla.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor booleano especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to <ph id="ph3">&lt;xref:System.Single&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se convierte los valores booleanos <ph id="ph1">`true`</ph> y <ph id="ph2">`false`</ph> a <ph id="ph3">&lt;xref:System.Single&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Byte)">
          <source>The following example converts each element in an array of byte values to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de valores de byte a una <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Char)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is rounded using rounding to nearest.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea utilizando el sistema de redondeo al valor más próximo.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</source>
          <target state="translated">Por ejemplo, cuando se redondea a dos decimales, el valor 2,345 se convierte en 2,34 y el valor 2,355 pasa a ser 2,36.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Decimal)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores a un <ph id="ph2">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is rounded using rounding to nearest.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> se redondea utilizando el sistema de redondeo al valor más próximo.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Double)">
          <source>For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</source>
          <target state="translated">Por ejemplo, cuando se redondea a dos decimales, el valor 2,345 se convierte en 2,34 y el valor 2,355 pasa a ser 2,36.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Double)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to a <ph id="ph2">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores a un <ph id="ph2">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Int16)">
          <source>The following example converts each element in an array of 16-bit integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros de 16 bits a una <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Int32)">
          <source>The following example converts each element in an integer array to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">En el siguiente ejemplo se convierte cada elemento de una matriz de enteros en un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Int64)">
          <source>The following example converts each element in an array of long integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros largos a un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>Converts the value of the specified object to a single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del objeto especificado en un número de punto flotante de precisión sencilla.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object)">
          <source>The following example attempts to convert each element in an object array to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos para un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>An 8-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 8 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.SByte)">
          <source>The following example converts each element in a signed byte array to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de byte con signo a un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Single)">
          <source>The single-precision floating-point number to return.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a devolver.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Single)">
          <source>Returns the specified single-precision floating-point number; no actual conversion is performed.</source>
          <target state="translated">Devuelve el número de punto flotante de precisión sencilla especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source>A single-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String)">
          <source>The following example attempts to convert each element in an array of numeric strings to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de cadenas numéricas en un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un número con un formato válido.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros de 16 bits sin signo a un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.UInt32)">
          <source>The following example converts each element in an array of unsigned integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros sin signo a un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un número de punto flotante de precisión sencilla equivalente.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.UInt64)">
          <source>The following example converts each element in an array of unsigned long integers to a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros largos sin signo a un <ph id="ph1">&lt;xref:System.Single&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un número de punto flotante de precisión sencilla, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>A single-precision floating-point number that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">En el ejemplo siguiente se define una clase <ph id="ph1">`Temperature`</ph> que implementa la interfaz <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>Its implementation of the <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> method returns the internal value of a private <ph id="ph2">&lt;xref:System.Single&gt;</ph> variable that represents the temperature.</source>
          <target state="translated">Su implementación de la <ph id="ph1">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> método devuelve el valor interno de una privada <ph id="ph2">&lt;xref:System.Single&gt;</ph> variable que representa la temperatura.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source>The following example illustrates how a call to the <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method, in turn, calls the <ph id="ph2">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph3">`Temperature`</ph> class.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo una llamada a la <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método, a su vez, llama a la <ph id="ph2">&lt;xref:System.IConvertible.ToSingle%2A?displayProperty=nameWithType&gt;</ph> implementación de la <ph id="ph3">`Temperature`</ph> clase.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un número de punto flotante de precisión sencilla equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>A single-precision floating-point number that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un número de punto flotante de precisión sencilla equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.Single.Parse%2A?displayProperty=nameWithType&gt;</ph> method on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.Single.Parse%2A?displayProperty=nameWithType&gt;</ph> método en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.Single.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source>The following example uses <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <ph id="ph2">&lt;xref:System.Single&gt;</ph> values.</source>
          <target state="translated">En el ejemplo siguiente se utiliza <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objetos que representan las referencias culturales en-US y fr-FR cuando convierte los elementos de una matriz de cadenas numéricas para <ph id="ph2">&lt;xref:System.Single&gt;</ph> valores.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es un número con un formato válido.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" uid="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.Single.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.Single.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts the specified value to its equivalent string representation.</source>
          <target state="translated">Convierte el valor especificado en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean)">
          <source>Converts the specified Boolean value to its equivalent string representation.</source>
          <target state="translated">Convierte el valor booleano especificado en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>It returns <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`true`</ph> values and <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> for <ph id="ph4">`false`</ph> values.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`true`</ph> valores y <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> para <ph id="ph4">`false`</ph> valores.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>The following example illustrates the conversion of a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>, using <ph id="ph3">`ToString`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra la conversión de un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> a una <ph id="ph2">&lt;xref:System.String&gt;</ph>con <ph id="ph3">`ToString`</ph>.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean)">
          <source>It also illustrates that the string returned by the conversion equals either <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">También muestra que la cadena devuelta por la conversión toma el valor <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> o <ph id="ph2">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Byte.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Byte.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte)">
          <source>The following example converts each value in a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array to a string.</source>
          <target state="translated">El siguiente ejemplo convierte cada valor de un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matriz en una cadena.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char)">
          <source>Converts the value of the specified Unicode character to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Char.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Char.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Char&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Char&gt;</ph> a una <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime)">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> to its equivalent string representation.</source>
          <target state="translated">Convierte el valor de la estructura <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> especificada en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.DateTime.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.DateTime.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime)">
          <source>It uses the formatting conventions of the current culture and the "G" format specifier to convert a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to its string representation.</source>
          <target state="translated">Usa las convenciones de formato de la referencia cultural actual y el especificador de formato "G" para convertir un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor en su representación de cadena.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime)">
          <source>The following example converts each element in an array of a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to a <ph id="ph2">&lt;xref:System.String&gt;</ph> value.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.String&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal)">
          <source>Converts the value of the specified decimal number to its equivalent string representation.</source>
          <target state="translated">Convierte el valor de un número decimal especificado en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Decimal.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Decimal.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> a una <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Double.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Double.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Double&gt;</ph> to a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Double&gt;</ph> a una <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int16.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Int16.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16)">
          <source>The following example converts each element in an array of 16-bit integers to its equivalent string representation.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros de 16 bits en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int32.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Int32.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>It formats <ph id="ph1">`value`</ph> by using the formatting conventions of the current thread culture.</source>
          <target state="translated">Se da formato <ph id="ph1">`value`</ph> usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>The following example compares the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%29&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
          <target state="translated">En el ejemplo siguiente se comparan los <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%29&gt;</ph> método con el <ph id="ph2">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>It defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that uses the sting "minus" to represent the negative sign.</source>
          <target state="translated">Define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que utiliza la cadena "menos" para representar el signo negativo.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32)">
          <source>It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.</source>
          <target state="translated">Convierte cada elemento de una matriz de enteros en su representación de cadena equivalente usando el formato predeterminado (las convenciones de formato de la referencia cultural actual) y el proveedor de formato personalizado.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int64.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Int64.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64)">
          <source>The following example converts each element in a long integer array to its equivalent string representation.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de entero largo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object)">
          <source>An object that supplies the value to convert, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que proporciona el valor que se va a convertir, o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object)">
          <source>Converts the value of the specified object to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del objeto especificado en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> o <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> si <ph id="ph3">&lt;paramref name="value" /&gt;</ph> es <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>To convert <ph id="ph1">`value`</ph> to its string representation, the method tries to call the <ph id="ph2">&lt;xref:System.IConvertible.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation of <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Para convertir <ph id="ph1">`value`</ph> en su representación de cadena, el método intenta llamar a la <ph id="ph2">&lt;xref:System.IConvertible.ToString%2A?displayProperty=nameWithType&gt;</ph> implementación de <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>If <ph id="ph1">`value`</ph> does not implement the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, the method tries to call the <ph id="ph3">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no implementa la <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz, el método intenta llamar a la <ph id="ph3">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementación de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>If value does not implement the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, the method calls the <ph id="ph2">`ToString`</ph> method of the underlying type of <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Si el valor no implementa la <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> de la interfaz, las llamadas al método el <ph id="ph2">`ToString`</ph> método del tipo subyacente de <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object)">
          <source>The following example converts each element in an object array to its equivalent string representation.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de objetos en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.SByte.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.SByte.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte)">
          <source>The following example converts each element in a signed byte array to its equivalent string representation.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes con signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Single.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Single.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to its equivalent string representation.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String)">
          <source>The string to return.</source>
          <target state="translated">Cadena que se va a devolver.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String)">
          <source>Returns the specified string instance; no actual conversion is performed.</source>
          <target state="translated">Devuelve la instancia de la cadena especificada; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String)">
          <source>The following example passes a string to the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.String%29&gt;</ph> method and calls the <ph id="ph2">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> method to confirm that the method returns the original string.</source>
          <target state="translated">En el ejemplo siguiente se pasa una cadena a la <ph id="ph1">&lt;xref:System.Convert.ToString%28System.String%29&gt;</ph> método y llama el <ph id="ph2">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType&gt;</ph> método para confirmar que el método devuelve la cadena original.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String)">
          <source>The example also calls the <ph id="ph1">&lt;xref:System.String.IsInterned%2A?displayProperty=nameWithType&gt;</ph> method to ensure that the two strings are not identical because the original string is interned.</source>
          <target state="translated">El ejemplo también se llama el <ph id="ph1">&lt;xref:System.String.IsInterned%2A?displayProperty=nameWithType&gt;</ph> método para asegurarse de que las dos cadenas no son idénticas porque se aplica el método Intern la cadena original.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt16.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.UInt16.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de valores enteros de 16 bits sin signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt32.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.UInt32.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32)">
          <source>The following example converts each element in an unsigned integer array to its equivalent string representation.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de enteros sin signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt64.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.UInt64.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64)">
          <source>The following example converts each element in an unsigned long integer array to its equivalent string representation.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de entero largo sin signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>An instance of an object.</source>
          <target state="translated">Una instancia de un objeto.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>Converts the specified Boolean value to its equivalent string representation.</source>
          <target state="translated">Convierte el valor booleano especificado en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Boolean.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>It returns <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`true`</ph> values and <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> for <ph id="ph4">`false`</ph> values.</source>
          <target state="translated">Devuelve <ph id="ph1">&lt;xref:System.Boolean.TrueString?displayProperty=nameWithType&gt;</ph> para <ph id="ph2">`true`</ph> valores y <ph id="ph3">&lt;xref:System.Boolean.FalseString?displayProperty=nameWithType&gt;</ph> para <ph id="ph4">`false`</ph> valores.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to a <ph id="ph2">&lt;xref:System.String&gt;</ph> with the <ph id="ph3">`ToString`</ph> method, using an <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> object that displays the type of the format provider for which it is called.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.String&gt;</ph> con el <ph id="ph3">`ToString`</ph> método, con un <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> objeto que muestra el tipo de proveedor de formato para el que se llama.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
          <source>The example shows that the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object is not referenced.</source>
          <target state="translated">En el ejemplo se muestra que la <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objeto no se hace referencia.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Byte.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Byte.ToString%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de bytes sin signo en su representación de cadena equivalente usando las convenciones de formato de las referencias culturales en-US y fr-FR.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
          <source>Because the "G" specifier by default outputs only decimal digits in a byte value's string representation, the <ph id="ph1">`provider`</ph> parameter does not affect the formatting of the returned string.</source>
          <target state="translated">Dado que el especificador "G" de forma predeterminada presenta únicamente los dígitos decimales en la representación de cadena del valor de un byte, el <ph id="ph1">`provider`</ph> parámetro no afecta a la aplicación de formato de la cadena devuelta.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Convierte el valor de un entero de 8 bits sin signo en su representación de cadena equivalente en una base especificada.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en la base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>If <ph id="ph1">`toBase`</ph> does not equal 10, the string that is returned by the <ph id="ph2">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method represents <ph id="ph3">`value`</ph> by its magnitude only.</source>
          <target state="translated">Si <ph id="ph1">`toBase`</ph> no es igual a 10, la cadena devuelta por la <ph id="ph2">&lt;xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> método representa <ph id="ph3">`value`</ph> sólo por su magnitud.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion.</source>
          <target state="translated">Si se llama al método para crear una cadena que se convierten a un número, un método correspondiente que suponga una representación numérica de magnitud solamente debe llamarse para llevar a cabo la conversión.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Estos métodos incluyen <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> o <ph id="ph2">&lt;xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source>The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes en sus equivalente binario, hexadecimal, decimal y hexadecimal representaciones de cadena.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Byte,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Char.ToString?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Char.ToString?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is ignored.</source>
          <target state="translated">El <ph id="ph1">`provider`</ph> parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.Char&gt;</ph> value to a <ph id="ph2">&lt;xref:System.String&gt;</ph> with the <ph id="ph3">`ToString`</ph> method, using an <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> object that displays the type of the format provider for which it is called.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.Char&gt;</ph> valor a un <ph id="ph2">&lt;xref:System.String&gt;</ph> con el <ph id="ph3">`ToString`</ph> método, con un <ph id="ph4">&lt;xref:System.IFormatProvider&gt;</ph> objeto que muestra el tipo de proveedor de formato para el que se llama.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
          <source>The example shows that the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> object is not referenced.</source>
          <target state="translated">En el ejemplo se muestra que la <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> objeto no se hace referencia.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor de la estructura <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> especificada en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
          <source>The following example converts a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> value to its equivalent string representation in eight different cultures.</source>
          <target state="translated">El ejemplo siguiente se convierte un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> valor en su representación de cadena equivalente en ocho referencias culturales diferentes.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del número decimal especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to its equivalent string representation in four different cultures.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores en su representación de cadena equivalente en cuatro referencias culturales diferentes.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en la representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">Esta implementación es idéntica a <ph id="ph1">&lt;xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to its equivalent string representation in four different cultures.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores en su representación de cadena equivalente en cuatro referencias culturales diferentes.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29&gt;</ph> method to convert each element in an array of 16-bit integers to its equivalent string representation.</source>
          <target state="translated">A continuación, llama el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.IFormatProvider%29&gt;</ph> método para convertir cada elemento de una matriz de enteros de 16 bits en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">La conversión utiliza la referencia cultural invariable, así como las personalizadas <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Convierte el valor de un entero de 16 bits con signo en su representación de cadena equivalente en una base especificada.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en la base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is positive and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es positivo y <ph id="ph2">`toBase`</ph> es 2, 8 o 16, la cadena devuelta usa la representación de signo y magnitud.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is negative and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses two's complement representation.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es negativo y <ph id="ph2">`toBase`</ph> es 2, 8 o 16, la cadena devuelta usa la representación complementaria de dos.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit.</source>
          <target state="translated">Esto significa que el bit de orden superior del byte de orden superior (bit 15) se interpreta como el bit de signo.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29&gt;</ph> método se llama para crear una cadena que se convierten a un número, un método correspondiente que suponga una representación numérica similar debe llamarse para llevar a cabo la conversión.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Estos métodos incluyen <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source>The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits con signo en sus equivalente binario, octal, decimal y hexadecimal representaciones de cadena.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int16,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29&gt;</ph> method to convert each element in an array of integers to its equivalent string representation.</source>
          <target state="translated">A continuación, llama el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.IFormatProvider%29&gt;</ph> método para convertir cada elemento de una matriz de enteros en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">La conversión utiliza la referencia cultural invariable, así como las personalizadas <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Convierte el valor de un entero de 32 bits con signo en su representación de cadena equivalente en una base especificada.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en la base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is positive and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses sign-and-magnitude representation.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es positivo y <ph id="ph2">`toBase`</ph> es 2, 8 o 16, la cadena devuelta usa la representación de signo y magnitud.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is negative and <ph id="ph2">`toBase`</ph> is 2, 8, or 16, the returned string uses two's complement representation.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es negativo y <ph id="ph2">`toBase`</ph> es 2, 8 o 16, la cadena devuelta usa la representación complementaria de dos.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit.</source>
          <target state="translated">Esto significa que el bit de orden superior del byte de orden superior (bit 31) se interpreta como el bit de signo.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29&gt;</ph> método se llama para crear una cadena que se convierten a un número, un método correspondiente que suponga una representación numérica similar debe llamarse para llevar a cabo la conversión.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Estos métodos incluyen <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source>The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros en sus equivalente binario, hexadecimal, decimal y hexadecimal representaciones de cadena.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29&gt;</ph> method to convert each element in a long integer array to its equivalent string representation.</source>
          <target state="translated">A continuación, llama el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.IFormatProvider%29&gt;</ph> método para convertir cada elemento de una matriz de entero largo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">La conversión utiliza la referencia cultural invariable, así como las personalizadas <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The base of the return value, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del valor devuelto, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</source>
          <target state="translated">Convierte el valor de un entero de 64 bits con signo en su representación de cadena equivalente en una base especificada.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> in base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> en la base <ph id="ph2">&lt;paramref name="toBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is positive and <ph id="ph2">`toBase`</ph> is not 10, the returned string uses sign-and-magnitude representation.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es positivo y <ph id="ph2">`toBase`</ph> no es 10, la cadena devuelta usa la representación de signo y magnitud.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>If <ph id="ph1">`value`</ph> is negative and <ph id="ph2">`toBase`</ph> is not 10, the returned string uses two's complement representation.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> es negativo y <ph id="ph2">`toBase`</ph> no es 10, la cadena devuelta usa la representación complementaria de dos.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit.</source>
          <target state="translated">Esto significa que el bit de orden superior del byte de orden superior (bit 63) se interpreta como el bit de signo.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29&gt;</ph> método se llama para crear una cadena que se convierten a un número, un método correspondiente que suponga una representación numérica similar debe llamarse para llevar a cabo la conversión.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>Such methods include <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Estos métodos incluyen <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source>The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de entero largo en sus equivalente binario, hexadecimal, decimal y hexadecimal representaciones de cadena.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Int64,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="toBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>An object that supplies the value to convert, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que proporciona el valor que se va a convertir, o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> if <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is an object whose value is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph> si <ph id="ph3">&lt;paramref name="value" /&gt;</ph> es un objeto cuyo valor es <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, the method returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>, el método devuelve <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>If the <ph id="ph1">`value`</ph> parameter implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, the method calls the <ph id="ph3">&lt;xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementation of <ph id="ph4">`value`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">`value`</ph> parámetro implementa la <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> de la interfaz, las llamadas al método el <ph id="ph3">&lt;xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementación de <ph id="ph4">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>Otherwise, if the <ph id="ph1">`value`</ph> parameter implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface, the method calls its <ph id="ph3">&lt;xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">De lo contrario, si la <ph id="ph1">`value`</ph> parámetro implementa la <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interfaz, las llamadas al método su <ph id="ph3">&lt;xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`value`</ph> implements neither interface, the method calls the <ph id="ph2">`value`</ph> parameter's <ph id="ph3">`ToString()`</ph> method, and the <ph id="ph4">`provider`</ph> parameter is ignored.</source>
          <target state="translated">Si <ph id="ph1">`value`</ph> no implementa ninguna interfaz, las llamadas al método el <ph id="ph2">`value`</ph> del parámetro <ph id="ph3">`ToString()`</ph> método y el <ph id="ph4">`provider`</ph> parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is used if the <ph id="ph2">`value`</ph> parameter implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> or <ph id="ph4">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
          <target state="translated">El <ph id="ph1">`provider`</ph> parámetro se utiliza si el <ph id="ph2">`value`</ph> parámetro implementa la <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> o <ph id="ph4">&lt;xref:System.IFormattable&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The most common use of the <ph id="ph1">`provider`</ph> parameter is to specify culture-specific information used in the conversion of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El uso más común de la <ph id="ph1">`provider`</ph> parámetro consiste en especificar información específica de la referencia cultural utilizada en la conversión de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>For example, if the <ph id="ph1">`value`</ph> parameter is a negative decimal number, the <ph id="ph2">`provider`</ph> parameter can supply culture-specific information about the notation used for the negative sign and decimal separator.</source>
          <target state="translated">Por ejemplo, si la <ph id="ph1">`value`</ph> parámetro es un número decimal negativo, el <ph id="ph2">`provider`</ph> parámetro puede proporcionar información específica de la referencia cultural acerca de la notación usada para el signo negativo y el separador decimal.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.</source>
          <target state="translated">El segundo ejemplo en la sección siguiente muestra un proveedor de formato que no proporciona información de formato de cuenta de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that overrides the <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method but does not implement the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`Temperature`</ph> clase que invalide la <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> método pero no implementa la <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The example illustrates how calls to the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method, in turn, call the <ph id="ph2">`Temperature.ToString`</ph> method.</source>
          <target state="translated">El ejemplo se muestra cómo las llamadas a la <ph id="ph1">&lt;xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método, a su vez, llama a la <ph id="ph2">`Temperature.ToString`</ph> método.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that implements the <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interface but does not implement the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`Temperature`</ph> clase que implementa el <ph id="ph2">&lt;xref:System.IFormattable&gt;</ph> interfaz pero no implementa la <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation represents the <ph id="ph2">`Temperature`</ph> value in Celsius, Fahrenheit, or Kelvin, depending on the format  string.</source>
          <target state="translated">Su <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementación representa el <ph id="ph2">`Temperature`</ph> valor en grados centígrados, grados Fahrenheit o grados Kelvin, dependiendo de la cadena de formato.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
          <source>The example also defines a <ph id="ph1">`TemperatureProvider`</ph> class that implements <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> and provides a randomly generated format string that is used by the <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> implementation of the <ph id="ph4">`Temperature`</ph> class.</source>
          <target state="translated">El ejemplo también define un <ph id="ph1">`TemperatureProvider`</ph> clase que implementa <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> y proporciona una cadena de formato generado aleatoriamente que se usa por la <ph id="ph3">&lt;xref:System.IFormattable&gt;</ph> implementación de la <ph id="ph4">`Temperature`</ph> clase.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method to convert each element in signed byte array to its equivalent string representation.</source>
          <target state="translated">A continuación, llama el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.SByte%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> método para convertir cada elemento de matriz de bytes con signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
          <source>The conversion uses the invariant culture as well as the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">La conversión utiliza la referencia cultural invariable, así como las personalizadas <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to its equivalent string representation in four different cultures.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores en su representación de cadena equivalente en cuatro referencias culturales diferentes.</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>The string to return.</source>
          <target state="translated">Cadena que se va a devolver.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">Este parámetro se ignora.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>Returns the specified string instance; no actual conversion is performed.</source>
          <target state="translated">Devuelve la instancia de la cadena especificada; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>The following example calls the <ph id="ph1">`ToString`</ph> method with a <ph id="ph2">&lt;xref:System.String&gt;</ph> parameter.</source>
          <target state="translated">El ejemplo siguiente se llama el <ph id="ph1">`ToString`</ph> método con un <ph id="ph2">&lt;xref:System.String&gt;</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.String,System.IFormatProvider)">
          <source>The method returns the unmodified <ph id="ph1">&lt;xref:System.String&gt;</ph> without referencing the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> object.</source>
          <target state="translated">El método devuelve el sin modificar <ph id="ph1">&lt;xref:System.String&gt;</ph> sin hacer referencia a la <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> method to convert a 16-bit unsigned integer value to its equivalent string representation.</source>
          <target state="translated">A continuación, llama el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29&gt;</ph> método para convertir un valor entero de 16 bits sin signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The conversion uses both the invariant culture and the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">La conversión utiliza la referencia cultural invariable y personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
          <source>The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</source>
          <target state="translated">El resultado indica que no se utiliza esta información de formato, porque de forma predeterminada, el especificador de formato "G" no incluye un signo positivo con valores positivos.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29&gt;</ph> method to convert an unsigned integer value to its equivalent string representation.</source>
          <target state="translated">A continuación, llama el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt32%2CSystem.IFormatProvider%29&gt;</ph> método para convertir un valor entero sin signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The conversion uses both the invariant culture and the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">La conversión utiliza la referencia cultural invariable y personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
          <source>The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</source>
          <target state="translated">El resultado indica que no se utiliza esta información de formato, porque de forma predeterminada, el especificador de formato "G" no incluye un signo positivo con valores positivos.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en su representación de cadena equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Representación de cadena de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>This implementation is identical to <ph id="ph1">&lt;xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Esta implementación es idéntica al <ph id="ph1">&lt;xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> class that defines its negative sign as the string "~" and its positive sign as the string "!".</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> clase que define el signo negativo como la cadena "~"y su signo positivo como la cadena"!".</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29&gt;</ph> method to convert an unsigned long integer value to its equivalent string representation.</source>
          <target state="translated">A continuación, llama el <ph id="ph1">&lt;xref:System.Convert.ToString%28System.UInt64%2CSystem.IFormatProvider%29&gt;</ph> método para convertir un valor entero long sin signo en su representación de cadena equivalente.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The conversion uses both the invariant culture and the custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">La conversión utiliza la referencia cultural invariable y personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
          <source>The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.</source>
          <target state="translated">El resultado indica que no se utiliza esta información de formato, porque de forma predeterminada, el especificador de formato "G" no incluye un signo positivo con valores positivos.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 16-bit unsigned integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to unsigned 16-bit integers.</source>
          <target state="translated">En el ejemplo siguiente se convierte los valores booleanos <ph id="ph1">`true`</ph> y <ph id="ph2">`false`</ph> a enteros sin signo de 16 bits.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Byte)">
          <source>The following example converts each element in a byte array to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>The 16-bit unsigned integer equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Entero de 16 bits sin signo que equivale a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Char)">
          <source>The following example converts each element in a character array to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de caracteres en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 16 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an unsigned 16-bit integer.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 16 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Double)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to an unsigned 16-bit integer.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source>The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros de 16 bits en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source>The following example converts each element in an integer array to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source>The following example converts each element in a long integer array to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros largos en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>Converts the value of the specified object to a 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>The following example attempts to convert each element in an object array to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the  <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source>The following example converts each element in a signed byte array to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes con signo en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 16-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 16 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Single)">
          <source>The following example converts each element in an array of <ph id="ph1">&lt;xref:System.String&gt;</ph> values to an unsigned 16-bit integer.</source>
          <target state="translated">El siguiente ejemplo convierte cada elemento de una matriz de <ph id="ph1">&lt;xref:System.String&gt;</ph> valores en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source>A 16-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.UInt16.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String)">
          <source>The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de cadena numérica en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt16)">
          <source>The 16-bit unsigned integer to return.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a devolver.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt16)">
          <source>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 16 bits sin signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source>The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros sin signo en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source>The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos sin signo en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 16 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>A 16-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`HexString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`HexString`</ph> clase que implementa el <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz y que está diseñado para contener la representación de cadena de ambos valores de 16 bits con signo y de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The class includes a <ph id="ph1">`Sign`</ph> property that indicates the sign of its hexadecimal value.</source>
          <target state="translated">La clase incluye una <ph id="ph1">`Sign`</ph> propiedad que indica el signo de su valor hexadecimal.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The following example shows that a call to the <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method that passes a <ph id="ph2">`HexString`</ph> object as a parameter, in turn, calls the <ph id="ph3">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`HexString`</ph> class.</source>
          <target state="translated">En el ejemplo siguiente se muestra que una llamada a la <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método que pasa un <ph id="ph2">`HexString`</ph> objeto como un parámetro, se llama a su vez, el <ph id="ph3">&lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=nameWithType&gt;</ph> implementación de la <ph id="ph4">`HexString`</ph> clase.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the  <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 16 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>A 16-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking <ph id="ph1">&lt;xref:System.UInt16.Parse%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar <ph id="ph1">&lt;xref:System.UInt16.Parse%2A?displayProperty=nameWithType&gt;</ph> en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.UInt16.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">A continuación, intenta convertir cada elemento de una matriz de cadena numérica en un entero utilizando este proveedor de ambos y <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> proveedor para la referencia cultural invariable.</target>       </trans-unit>
        <trans-unit id="2304" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="2305" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2306" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2307" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2308" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 16 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2309" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>A 16-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 16 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="2311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Dado que la <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> tipo de datos admite valores sin signo, solo el <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> método supone que <ph id="ph3">`value`</ph> se expresa mediante la representación binaria sin signo.</target>       </trans-unit>
        <trans-unit id="2312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">En otras palabras, todos los 16 bits se utilizan para representar el valor numérico y un bit de inicio de sesión no está presente.</target>       </trans-unit>
        <trans-unit id="2313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed integer value that is out of the range of the <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que un entero con signo de valor que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="2314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Int16.MinValue?displayProperty=nameWithType&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El ejemplo siguiente se convierte <ph id="ph1">&lt;xref:System.Int16.MinValue?displayProperty=nameWithType&gt;</ph> a su representación de cadena hexadecimal y, a continuación, las llamadas del <ph id="ph2">&lt;xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x8000 converts to 32768."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0 x 8000 se convierte en 32768".</target>       </trans-unit>
        <trans-unit id="2316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="2317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se muestra una técnica para asegurarse de que el método no utiliza incorrectamente representación binaria para interpretar un valor que usa la representación complementaria de dos al convertir una cadena hexadecimal en un <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="2318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">El ejemplo determina si un valor representa un con signo o un entero sin signo mientras que convierte ese valor en su representación de cadena.</target>       </trans-unit>
        <trans-unit id="2319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>When the example converts the value to a <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Cuando el ejemplo convierte el valor a un <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valor, comprueba si el valor original era un entero con signo.</target>       </trans-unit>
        <trans-unit id="2320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</source>
          <target state="translated">Si es así, y si su bit de orden superior está establecido (lo que indica que el valor original era negativo), el método produce una excepción.</target>       </trans-unit>
        <trans-unit id="2321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas numéricas como un valor hexadecimal y convertirlo en un entero de 16 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2322" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2323" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2324" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="2325" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2326" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2327" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="2328" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="2329" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2330" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt16(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt16.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt16.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2331" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 32-bit unsigned integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 32 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2332" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2333" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2334" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="2335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Boolean)">
          <source>The following example converts the Boolean values <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> to unsigned integers.</source>
          <target state="translated">En el ejemplo siguiente se convierte los valores booleanos <ph id="ph1">`true`</ph> y <ph id="ph2">`false`</ph> a enteros sin signo.</target>       </trans-unit>
        <trans-unit id="2336" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2337" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2338" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Byte)">
          <source>The following example converts each element in a byte array to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2340" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2341" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2342" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Char)">
          <source>The following example converts each element in a character array to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de caracteres en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2344" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2345" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2346" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="2347" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="2348" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="2349" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2350" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2351" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 32 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2352" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2354" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2355" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2356" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2357" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 32 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2358" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2360" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2361" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2362" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2363" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source>The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros de 16 bits en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2365" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2366" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2367" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2368" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source>The following example attempts to convert each element in an integer array to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2370" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2371" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2372" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2373" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source>The following example attempts to convert each element in a long integer array to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2375" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2376" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2377" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>Converts the value of the specified object to a 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 32 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2378" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>The following example attempts to convert each element in an object array to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2381" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="2382" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2383" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2384" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="2385" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2386" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2387" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2388" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source>The following example attempts to convert each element in a signed byte array to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de bytes con signo en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2390" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2391" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2392" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2393" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 32-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 32 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2394" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2396" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2397" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2398" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2399" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source>A 32-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.UInt32.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="2402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="2403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="2404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String)">
          <source>The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.</source>
          <target state="translated">En el ejemplo siguiente se interpreta los elementos de una matriz de cadenas como cadenas numéricas e intenta convertirlos en enteros sin signo.</target>       </trans-unit>
        <trans-unit id="2405" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="2406" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2407" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2408" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2409" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.UInt16)">
          <source>The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits sin signo en un valor entero sin signo.</target>       </trans-unit>
        <trans-unit id="2411" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt32)">
          <source>The 32-bit unsigned integer to return.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a devolver.</target>       </trans-unit>
        <trans-unit id="2412" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt32)">
          <source>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 32 bits sin signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="2413" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="2414" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>The 64-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2415" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits sin signo especificado en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2416" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source>The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de entero largo sin signo en un valor entero sin signo.</target>       </trans-unit>
        <trans-unit id="2418" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es mayor que <ph id="ph2">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2419" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2420" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2421" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 32 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2422" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>A 32-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="2426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="2427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`HexString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`HexString`</ph> clase que implementa el <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz y que está diseñado para contener la representación de cadena de ambos valores de 32 bits con signo y de 32 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The class includes a <ph id="ph1">`Sign`</ph> property that indicates the sign of its hexadecimal value.</source>
          <target state="translated">La clase incluye una <ph id="ph1">`Sign`</ph> propiedad que indica el signo de su valor hexadecimal.</target>       </trans-unit>
        <trans-unit id="2429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The following example shows that a call to the <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method that passes a <ph id="ph2">`HexString`</ph> object as a parameter, in turn, calls the <ph id="ph3">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`HexString`</ph> class.</source>
          <target state="translated">En el ejemplo siguiente se muestra que una llamada a la <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método que pasa un <ph id="ph2">`HexString`</ph> objeto como un parámetro, se llama a su vez, el <ph id="ph3">&lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=nameWithType&gt;</ph> implementación de la <ph id="ph4">`HexString`</ph> clase.</target>       </trans-unit>
        <trans-unit id="2430" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="2431" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2432" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2433" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="2434" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2435" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2436" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2437" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 32 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2438" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>A 32-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking <ph id="ph1">&lt;xref:System.UInt32.Parse%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar <ph id="ph1">&lt;xref:System.UInt32.Parse%2A?displayProperty=nameWithType&gt;</ph> en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instance that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> instancia que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual.</target>       </trans-unit>
        <trans-unit id="2443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.UInt32.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="2444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="2445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</target>       </trans-unit>
        <trans-unit id="2446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an integer using both this provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">A continuación, intenta convertir cada elemento de una matriz de cadena numérica en un entero utilizando este proveedor de ambos y <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> proveedor para la referencia cultural invariable.</target>       </trans-unit>
        <trans-unit id="2447" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="2448" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2449" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2450" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2451" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 32 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2452" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>A 32-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 32 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="2454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Dado que la <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> tipo de datos admite valores sin signo, solo el <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> método supone que <ph id="ph3">`value`</ph> se expresa mediante la representación binaria sin signo.</target>       </trans-unit>
        <trans-unit id="2455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">En otras palabras, los 32 bits se utilizan para representar el valor numérico y un bit de inicio de sesión no está presente.</target>       </trans-unit>
        <trans-unit id="2456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed integer value that is out of the range of the <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que un entero con signo de valor que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="2457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Int32.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El ejemplo siguiente se convierte <ph id="ph1">&lt;xref:System.Int32.MinValue&gt;</ph> a su representación de cadena hexadecimal y, a continuación, las llamadas del <ph id="ph2">&lt;xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x80000000 converts to 2147483648."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0 x 80000000 se convierte a 2147483648".</target>       </trans-unit>
        <trans-unit id="2459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="2460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se muestra una técnica para asegurarse de que el método no utiliza incorrectamente representación binaria para interpretar un valor que usa la representación complementaria de dos al convertir una cadena hexadecimal en un <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="2461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">El ejemplo determina si un valor representa un con signo o un entero sin signo mientras que convierte ese valor en su representación de cadena.</target>       </trans-unit>
        <trans-unit id="2462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>When the example converts the value to a <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Cuando el ejemplo convierte el valor a un <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> valor, comprueba si el valor original era un entero con signo.</target>       </trans-unit>
        <trans-unit id="2463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</source>
          <target state="translated">Si es así, y si su bit de orden superior está establecido (lo que indica que el valor original era negativo), el método produce una excepción.</target>       </trans-unit>
        <trans-unit id="2464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas numéricas como un valor hexadecimal y convertirlo en un entero sin signo.</target>       </trans-unit>
        <trans-unit id="2465" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2466" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2467" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="2468" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2469" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2470" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="2471" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="2472" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2473" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt32(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt32.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2474" translate="yes" xml:space="preserve" uid="T:System.Convert">
          <source>Converts a specified value to a 64-bit unsigned integer.</source>
          <target state="translated">Convierte un valor especificado en un entero de 64 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2475" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>The Boolean value to convert.</source>
          <target state="translated">Valor booleano que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2476" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor booleano especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2477" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>The number 1 if <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>; otherwise, 0.</source>
          <target state="translated">Número 1 si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="true" /&gt;</ph>; en caso contrario, 0.</target>       </trans-unit>
        <trans-unit id="2478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Boolean)">
          <source>The following example converts Boolean <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph> values to unsigned long integers.</source>
          <target state="translated">En el ejemplo siguiente se convierte un valor booleano <ph id="ph1">`true`</ph> y <ph id="ph2">`false`</ph> valores enteros largos sin signo.</target>       </trans-unit>
        <trans-unit id="2479" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>The 8-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 8 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2480" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2481" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>A 64-bit signed integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Byte)">
          <source>The following example converts each element in a byte array to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de bytes en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2483" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>The Unicode character to convert.</source>
          <target state="translated">Carácter Unicode que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2484" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del carácter Unicode especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2485" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Char)">
          <source>The following example converts each element in a character array to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de caracteres en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2487" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>The date and time value to convert.</source>
          <target state="translated">Valor de fecha y hora que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2488" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>Calling this method always throws <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">Cuando se llama a este método, siempre se produce <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2489" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="2490" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>No value is returned.</source>
          <target state="translated">No se devuelve ningún valor.</target>       </trans-unit>
        <trans-unit id="2491" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.DateTime)">
          <source>This conversion is not supported.</source>
          <target state="translated">No se admite esta conversión.</target>       </trans-unit>
        <trans-unit id="2492" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>The decimal number to convert.</source>
          <target state="translated">Número decimal que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2493" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número decimal especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2494" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 64 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2495" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> valores en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2497" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Decimal)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2498" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>The double-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión doble que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2499" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión doble especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2500" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 64 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2501" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Double)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Double&gt;</ph> valores en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2503" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Double)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2504" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>The 16-bit signed integer to convert.</source>
          <target state="translated">Entero de 16 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2505" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits con signo especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2506" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source>The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros de 16 bits en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2508" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2509" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>The 32-bit signed integer to convert.</source>
          <target state="translated">Entero de 32 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2510" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits con signo especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2511" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source>The following example attempts to convert each element in an array of integers to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2513" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2514" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>The 64-bit signed integer to convert.</source>
          <target state="translated">Entero de 64 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2515" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 64 bits con signo especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2516" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source>The following example attempts to convert each element in an array of long integers to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de enteros largos en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2518" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2519" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface, or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> o <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2520" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>Converts the value of the specified object to a 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 64 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2521" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>The following example attempts to convert each element in an object array to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de objetos en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2524" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="2525" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2526" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2527" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="2528" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2529" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>The 8-bit signed integer to convert.</source>
          <target state="translated">Entero de 8 bits con signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2530" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 8 bits con signo especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2531" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source>The following example attempts to convert each element in a signed byte array to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de bytes con signo en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2533" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.SByte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="2534" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>The single-precision floating-point number to convert.</source>
          <target state="translated">Número de punto flotante de precisión sencilla que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2535" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del número de punto flotante de precisión sencilla especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2536" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, rounded to the nearest 64-bit unsigned integer.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, redondeado al entero de 64 bits sin signo más próximo.</target>       </trans-unit>
        <trans-unit id="2537" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</source>
          <target state="translated">Si <ph id="ph1">&lt;paramref name="value" /&gt;</ph> está en medio de dos números enteros, se devuelve el número par, es decir, 4,5 se convierte en 4 y 5,5 se convierte en 6.</target>       </trans-unit>
        <trans-unit id="2538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>The following example attempts to convert each element in an array of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta convertir cada elemento de una matriz de <ph id="ph1">&lt;xref:System.Single&gt;</ph> valores en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Single)">
          <source>The output shows that fractional values are rounded before the conversion is performed.</source>
          <target state="translated">El resultado muestra que los valores fraccionarios se redondean antes de realiza la conversión.</target>       </trans-unit>
        <trans-unit id="2540" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Single)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than zero or greater than <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que cero o mayor que <ph id="ph2">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2541" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2542" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2543" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source>A 64-bit signed integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits con signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> method is equivalent to passing <ph id="ph2">`value`</ph> to the <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.String%29&gt;</ph> método es equivalente a pasar <ph id="ph2">`value`</ph> a la <ph id="ph3">&lt;xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source><ph id="ph1">`value`</ph> is interpreted by using the formatting conventions of the current thread culture.</source>
          <target state="translated"><ph id="ph1">`value`</ph> se interpreta usando las convenciones de formato de la referencia cultural del subproceso actual.</target>       </trans-unit>
        <trans-unit id="2546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="2547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="2548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String)">
          <source>The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.</source>
          <target state="translated">En el ejemplo siguiente se interpreta los elementos de una matriz de cadenas como cadenas numéricas e intenta convertirlos en enteros largos sin signo.</target>       </trans-unit>
        <trans-unit id="2549" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="2550" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2551" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>The 16-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 16 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2552" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 16 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2553" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.UInt16)">
          <source>The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros de 16 bits sin signo en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2555" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>The 32-bit unsigned integer to convert.</source>
          <target state="translated">Entero de 32 bits sin signo que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2556" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte el valor del entero de 32 bits sin signo especificado en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2557" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.UInt32)">
          <source>The following example converts each element in an unsigned integer array to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se convierte cada elemento de una matriz de enteros sin signo en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2559" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt64)">
          <source>The 64-bit unsigned integer to return.</source>
          <target state="translated">Entero de 64 bits sin signo que se va a devolver.</target>       </trans-unit>
        <trans-unit id="2560" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt64)">
          <source>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</source>
          <target state="translated">Devuelve el entero de 64 bits sin signo especificado; no se efectúa una conversión real.</target>       </trans-unit>
        <trans-unit id="2561" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is returned unchanged.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> se devuelve sin cambios.</target>       </trans-unit>
        <trans-unit id="2562" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>An object that implements the <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated">Objeto que implementa la interfaz <ph id="ph1">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2563" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2564" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en un entero de 64 bits sin signo, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2565" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>A 64-bit unsigned integer that is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or zero if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o cero si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The return value is the result of invoking the <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> method of the underlying type of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar la <ph id="ph1">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> método del tipo subyacente de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> enables the user to specify culture-specific conversion information about the contents of <ph id="ph2">`value`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> permite al usuario especificar la información de conversión específica de la referencia cultural sobre el contenido de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>For example, if <ph id="ph1">`value`</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that represents a number, <ph id="ph3">`provider`</ph> could supply culture-specific information about the notation used to represent that number.</source>
          <target state="translated">Por ejemplo, si <ph id="ph1">`value`</ph> es un <ph id="ph2">&lt;xref:System.String&gt;</ph> que representa un número, <ph id="ph3">`provider`</ph> podría proporcionar información específica de la referencia cultural acerca de la notación utilizada para representar ese número.</target>       </trans-unit>
        <trans-unit id="2569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The base types ignore <ph id="ph1">`provider`</ph>; however, the parameter may be used if <ph id="ph2">`value`</ph> is a user-defined type that implements the <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated">Los tipos base pasan por alto <ph id="ph1">`provider`</ph>; sin embargo, el parámetro puede usarse si <ph id="ph2">`value`</ph> es un tipo definido por el usuario que implementa el <ph id="ph3">&lt;xref:System.IConvertible&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="2570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The following example defines a <ph id="ph1">`HexString`</ph> class that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`HexString`</ph> clase que implementa el <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaz y que está diseñado para contener la representación de cadena de ambos valores de 64 bits con signo y de 64 bits sin signo.</target>       </trans-unit>
        <trans-unit id="2571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The class includes a <ph id="ph1">`Sign`</ph> property that indicates the sign of its hexadecimal value.</source>
          <target state="translated">La clase incluye una <ph id="ph1">`Sign`</ph> propiedad que indica el signo de su valor hexadecimal.</target>       </trans-unit>
        <trans-unit id="2572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The following example shows that a call to the <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> method that passes a <ph id="ph2">`HexString`</ph> object as a parameter, in turn, calls the <ph id="ph3">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> implementation of the <ph id="ph4">`HexString`</ph> class.</source>
          <target state="translated">En el ejemplo siguiente se muestra que una llamada a la <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.Object%2CSystem.IFormatProvider%29&gt;</ph> método que pasa un <ph id="ph2">`HexString`</ph> objeto como un parámetro, se llama a su vez, el <ph id="ph3">&lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=nameWithType&gt;</ph> implementación de la <ph id="ph4">`HexString`</ph> clase.</target>       </trans-unit>
        <trans-unit id="2573" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not in an appropriate format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no tiene un formato adecuado.</target>       </trans-unit>
        <trans-unit id="2574" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not implement the <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no implementa la interfaz <ph id="ph2">&lt;see cref="T:System.IConvertible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2575" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2576" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source>The conversion is not supported.</source>
          <target state="translated">No se admite la conversión.</target>       </trans-unit>
        <trans-unit id="2577" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2578" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2579" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Objeto que proporciona información de formato específica de la referencia cultural.</target>       </trans-unit>
        <trans-unit id="2580" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</source>
          <target state="translated">Convierte la representación de cadena especificada de un número en un entero de 64 bits sin signo equivalente, usando la información de formato específica de la referencia cultural indicada.</target>       </trans-unit>
        <trans-unit id="2581" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>A 64-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The return value is the result of invoking <ph id="ph1">&lt;xref:System.UInt64.Parse%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El valor devuelto es el resultado de invocar <ph id="ph1">&lt;xref:System.UInt64.Parse%2A?displayProperty=nameWithType&gt;</ph> en <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">`provider`</ph> is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that obtains a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> es un <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementación que obtiene un <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="2584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object provides culture-specific information about the format of <ph id="ph2">`value`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto proporciona información específica de la referencia cultural acerca del formato de <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="2585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.</source>
          <target state="translated">Si <ph id="ph1">`provider`</ph> es <ph id="ph2">`null`</ph>, el <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> se usa la referencia cultural actual del objeto.</target>       </trans-unit>
        <trans-unit id="2586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>If you prefer not to handle an exception if the conversion fails, you can call the <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> method instead.</source>
          <target state="translated">Si prefiere no controlar una excepción si se produce un error en la conversión, puede llamar a la <ph id="ph1">&lt;xref:System.UInt64.TryParse%2A?displayProperty=nameWithType&gt;</ph> método en su lugar.</target>       </trans-unit>
        <trans-unit id="2587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>It returns a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the conversion succeeded or failed.</source>
          <target state="translated">Devuelve un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valor que indica si la conversión se realizó correctamente o no.</target>       </trans-unit>
        <trans-unit id="2588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The following example defines a custom <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign.</source>
          <target state="translated">En el ejemplo siguiente se define un personalizado <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> objeto que reconoce la cadena "pos" como el signo positivo y la cadena "neg" como el signo negativo.</target>       </trans-unit>
        <trans-unit id="2589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>It then attempts to convert each element of a numeric string array to an unsigned long integer.</source>
          <target state="translated">A continuación, intenta convertir cada elemento de una matriz de cadena numérica en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source>The conversion uses both the custom provider and the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> provider for the invariant culture.</source>
          <target state="translated">La conversión utiliza tanto el proveedor personalizado y el <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> proveedor para la referencia cultural invariable.</target>       </trans-unit>
        <trans-unit id="2591" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> does not consist of an optional sign followed by a sequence of digits (0 through 9).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no está compuesto por un signo opcional seguido de una serie de dígitos (del 0 al 9).</target>       </trans-unit>
        <trans-unit id="2592" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2593" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>A string that contains the number to convert.</source>
          <target state="translated">Cadena que contiene el número que se va a convertir.</target>       </trans-unit>
        <trans-unit id="2594" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The base of the number in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, which must be 2, 8, 10, or 16.</source>
          <target state="translated">Base del número de <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>, que debe ser 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2595" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</source>
          <target state="translated">Convierte la representación de cadena de un número en una base especificada en un entero de 64 bits sin signo equivalente.</target>       </trans-unit>
        <trans-unit id="2596" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>A 64-bit unsigned integer that is equivalent to the number in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, or 0 (zero) if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un entero de 64 bits sin signo equivalente al número de <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, o 0 (cero) si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>If <ph id="ph1">`fromBase`</ph> is 16, you can prefix the number specified by the <ph id="ph2">`value`</ph> parameter with "0x" or "0X".</source>
          <target state="translated">Si <ph id="ph1">`fromBase`</ph> es 16, puede anteponer el número especificado por el <ph id="ph2">`value`</ph> parámetro con "0 x" o "0 X".</target>       </trans-unit>
        <trans-unit id="2598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> data type supports unsigned values only, the <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> method assumes that <ph id="ph3">`value`</ph> is expressed using unsigned binary representation.</source>
          <target state="translated">Dado que la <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> tipo de datos admite valores sin signo, solo el <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> método supone que <ph id="ph3">`value`</ph> se expresa mediante la representación binaria sin signo.</target>       </trans-unit>
        <trans-unit id="2599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent.</source>
          <target state="translated">En otras palabras, todas las de 64 bits se utilizan para representar el valor numérico y un bit de inicio de sesión no está presente.</target>       </trans-unit>
        <trans-unit id="2600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>As a result, it is possible to write code in which a signed long integer value that is out of the range of the <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> data type is converted to a <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> value without the method throwing an exception.</source>
          <target state="translated">Como resultado, es posible escribir código en el que un entero largo con signo de valor que está fuera del intervalo de la <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> tipo de datos se convierte en un <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> valor sin el método de generación de una excepción.</target>       </trans-unit>
        <trans-unit id="2601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The following example converts <ph id="ph1">&lt;xref:System.Int64.MinValue&gt;</ph> to its hexadecimal string representation, and then calls the <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">El ejemplo siguiente se convierte <ph id="ph1">&lt;xref:System.Int64.MinValue&gt;</ph> a su representación de cadena hexadecimal y, a continuación, las llamadas del <ph id="ph2">&lt;xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="2602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>Instead of throwing an exception, the method displays the message, "0x8000000000000000 converts to 9223372036854775808."</source>
          <target state="translated">En lugar de producir una excepción, el método muestra el mensaje "0 x 8000000000000000 se convierte en 9223372036854775808".</target>       </trans-unit>
        <trans-unit id="2603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value.</source>
          <target state="translated">Cuando se realizan operaciones binarias o conversiones numéricas, siempre es responsabilidad del desarrollador para comprobar que un método u operador utiliza la representación numérica adecuada para interpretar un valor determinado.</target>       </trans-unit>
        <trans-unit id="2604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> value.</source>
          <target state="translated">En el ejemplo siguiente se muestra una técnica para asegurarse de que el método no utiliza incorrectamente representación binaria para interpretar un valor que usa la representación complementaria de dos al convertir una cadena hexadecimal en un <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valor.</target>       </trans-unit>
        <trans-unit id="2605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation.</source>
          <target state="translated">El ejemplo determina si un valor representa un con signo o un entero sin signo mientras que convierte ese valor en su representación de cadena.</target>       </trans-unit>
        <trans-unit id="2606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>When the example converts the value to a <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> value, it checks whether the original value was a signed integer.</source>
          <target state="translated">Cuando el ejemplo convierte el valor a un <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valor, comprueba si el valor original era un entero con signo.</target>       </trans-unit>
        <trans-unit id="2607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.</source>
          <target state="translated">Si es así, y si su bit de orden superior está establecido (lo que indica que el valor original era negativo), el método produce una excepción.</target>       </trans-unit>
        <trans-unit id="2608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.</source>
          <target state="translated">En el ejemplo siguiente se intenta interpretar cada elemento de una matriz de cadenas numéricas como un valor hexadecimal y convertirlo en un entero largo sin signo.</target>       </trans-unit>
        <trans-unit id="2609" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> is not 2, 8, 10, or 16.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fromBase" /&gt;</ph> no es 2, 8, 10 o 16.</target>       </trans-unit>
        <trans-unit id="2610" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2611" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="2612" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2613" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contains a character that is not a valid digit in the base specified by <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> contiene un carácter que no es un dígito válido en la base especificada por <ph id="ph2">&lt;paramref name="fromBase" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2614" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>The exception message indicates that there are no digits to convert if the first character in <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is invalid; otherwise, the message indicates that <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contains invalid trailing characters.</source>
          <target state="translated">Si el primer carácter de <ph id="ph1">&lt;paramref name="value" /&gt;</ph> no es válido, el mensaje de excepción indica que no hay dígitos para convertir; de lo contrario, el mensaje indica que <ph id="ph2">&lt;paramref name="value" /&gt;</ph> contiene caracteres finales no válidos.</target>       </trans-unit>
        <trans-unit id="2615" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>, que representa un número sin signo que no está en base 10, con un signo negativo como prefijo.</target>       </trans-unit>
        <trans-unit id="2616" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="2617" translate="yes" xml:space="preserve" uid="M:System.Convert.ToUInt64(System.String,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> representa un número menor que <ph id="ph2">&lt;see cref="F:System.UInt64.MinValue" /&gt;</ph> o mayor que <ph id="ph3">&lt;see cref="F:System.UInt64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>