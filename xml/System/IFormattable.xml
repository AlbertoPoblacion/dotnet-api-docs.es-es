<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2576510961cb47b6ac9c492844f7dae58d8f64e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48589821" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona funciones para convertir el valor de un objeto al formato de una representación de cadena.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IFormattable> interfaz convierte un objeto en su representación de cadena según una cadena de formato y un proveedor de formato.  
  
 Normalmente, una cadena de formato define la apariencia general de un objeto. Por ejemplo, .NET Framework admite lo siguiente:  
  
-   Cadenas de formato estándar para dar formato a valores de enumeración (consulte [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   Cadenas de formato estándar y personalizados para dar formato a valores numéricos (consulte [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   Cadenas de formato estándar y personalizados para dar formato a valores de fecha y hora (vea [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   Cadenas de formato estándar y personalizados para dar formato a los intervalos de tiempo (consulte [cadenas de formato TimeSpan estándar](~/docs/standard/base-types/standard-timespan-format-strings.md) y [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 También puede definir sus propias cadenas de formato para admitir el formato de los tipos definidos por la aplicación.  
  
 Un proveedor de formato devuelve un objeto de formato que normalmente define los símbolos usados para convertir un objeto en su representación de cadena. Por ejemplo, al convertir un número en un valor de divisa, un proveedor de formato define el símbolo de moneda que aparece en la cadena de resultado. .NET Framework define tres proveedores de formato:  
  
-   El <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> (clase), que devuelve un <xref:System.Globalization.NumberFormatInfo> objeto para dar formato a valores numéricos, o un <xref:System.Globalization.DateTimeFormatInfo> objeto para dar formato a valores de fecha y hora.  
  
-   El <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> (clase), que devuelve una instancia de sí mismo para dar formato a valores numéricos.  
  
-   El <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> (clase), que devuelve una instancia de sí mismo para dar formato a valores de fecha y hora.  
  
 Además, puede definir sus propios proveedores de formato personalizado para proporcionar específicas de referencias culturales, profesión o específica o información específica de la industria usado en el formato. Para obtener más información sobre la implementación de formato personalizado mediante un proveedor de formato personalizado, consulte <xref:System.ICustomFormatter>.  
  
 El <xref:System.IFormattable> interfaz define un método único, <xref:System.IFormattable.ToString%2A>, que proporciona servicios de formato para el tipo de implementación. El <xref:System.IFormattable.ToString%2A> método puede llamarse directamente. Además, se llama de forma automática el <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> y <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> métodos y también mediante métodos que usan el [característica de formato compuesto](~/docs/standard/base-types/composite-formatting.md) en .NET Framework. Estos métodos incluyen <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.String.Format%2A?displayProperty=nameWithType>, y <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, entre otros. El <xref:System.IFormattable.ToString%2A> se llama al método para cada elemento de formato de cadena de formato del método.  
  
 El <xref:System.IFormattable> interfaz se implementa mediante los tipos de base de datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una clase `Temperature` que implementa la interfaz <xref:System.IFormattable> . La clase admite cuatro especificadores de formato: "G" y "C", que indican que la temperatura se mostrará en Celsius; "F", lo que indica que la temperatura que se mostrará en grados Fahrenheit; y "K", lo que indica que la temperatura que se mostrará en grados Kelvin. Además, el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación también puede tratar una cadena de formato es `null` o está vacío. Los otros dos `ToString` métodos definidos por el `Temperature` clase ajustar simplemente una llamada a la <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 El ejemplo siguiente, a continuación, llama el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación directamente o mediante una cadena de formato compuesto.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Las clases que necesitan más control sobre el formato de cadenas que <see cref="M:System.Object.ToString" /> proporciona debe implementar <see cref="T:System.IFormattable" />.  
  
Una clase que implementa <see cref="T:System.IFormattable" /> debe ser compatible con el especificador de formato (general) de "G". El especificador "G", además de la clase puede definir la lista de especificadores de formato que admite. Además, la clase debe estar preparada para controlar un especificador de formato es <see langword="null" />. Para obtener más información sobre el formato y códigos de formato, vea [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md)</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Aplicar formato a tipos en .NET</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Formato que se usará.  
  
O bien 
Una referencia nula (<see langword="Nothing" /> en Visual Basic) para usar el formato predeterminado definido para el tipo de la implementación de <see cref="T:System.IFormattable" />.</param>
        <param name="formatProvider">Proveedor que se va a usar para dar formato al valor.  
  
O bien 
Una referencia nula (<see langword="Nothing" /> en Visual Basic) para obtener la información de formato numérico de la configuración regional actual del sistema operativo.</param>
        <summary>Da formato al valor de la instancia actual usando el formato especificado.</summary>
        <returns>Valor de la instancia actual en el formato especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IFormattable.ToString%2A> método convierte un valor en una representación de cadena que puede expresarse de varias maneras. Su formato preciso depende de símbolos específicos o un orden especificado definido por referencias culturales específicas, profesiones o industrias. Puede llamar al método directamente. También se llama de forma automática el <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> y <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> métodos y los métodos que utilizan el formato compuesto la característica en .NET Framework, como <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, y <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (Para obtener más información, consulte [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).)  
  
 Llamada de métodos de formato compuesto el <xref:System.IFormattable.ToString%2A> método una vez para cada elemento de formato en una cadena de formato. Los parámetros pasados al método dependen el método de formato específico que se llama y el contenido del elemento de formato, como sigue:  
  
-   Si el elemento de formato no incluye una cadena de formato (por ejemplo, si el elemento de formato es simplemente `{0}`), se pasa `null` como el valor de la <xref:System.String?displayProperty=nameWithType> parámetro.  
  
-   Si el elemento de formato incluye una cadena de formato (por ejemplo, `{0:G}`), que se pasa la cadena de formato como el valor de la <xref:System.String?displayProperty=nameWithType> parámetro.  
  
-   Si la llamada al método original no incluye un <xref:System.IFormatProvider?displayProperty=nameWithType> parámetro, <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> se pasa como el valor de la <xref:System.IFormatProvider?displayProperty=nameWithType> parámetro.  
  
-   Si la llamada al método original incluye un <xref:System.IFormatProvider?displayProperty=nameWithType> parámetro, el proveedor que se proporciona en la llamada al método se pasa como el valor de la <xref:System.IFormatProvider?displayProperty=nameWithType> parámetro.  
  
> [!NOTE]
>  Un objeto <xref:System.IFormattable.ToString%2A> implementación llama a métodos de formato compuesto solo si no se les pasa un <xref:System.ICustomFormatter> proveedor de formato, o si el <xref:System.ICustomFormatter.Format%2A> devuelve el método del proveedor de formato personalizado `null`.  
  
 .NET Framework incluye tres proveedores de formato, que implementan la <xref:System.IFormatProvider> interfaz:  
  
-   <xref:System.Globalization.NumberFormatInfo> Proporciona numérico, como los caracteres que se usará para separar los decimales y separadores de grupo, información de formato y la ortografía y la selección de ubicación de símbolos de moneda en valores monetarios.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> Proporciona información de formato de fecha y relacionados con el tiempo, como la posición del mes, día y el año en un patrón de fecha.  
  
-   <xref:System.Globalization.CultureInfo> contiene la información en una referencia cultural concreta, incluida la información de formato numérico y la información de formato relacionadas con la hora y fecha de formato predeterminado.  
  
 Además, puede definir su propio proveedor de formato personalizado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un `Temperature` clase que implementa el <xref:System.IFormattable.ToString%2A> método. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.IFormattable> clase.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>El <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> método debe ser compatible con el especificador de formato (general) de "G". El especificador "G", además de la clase puede definir la lista de especificadores de formato que admite. Además, la clase debe estar preparada para controlar un especificador de formato es <see langword="null" />. Para obtener más información sobre el formato y códigos de formato, vea [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md).</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>