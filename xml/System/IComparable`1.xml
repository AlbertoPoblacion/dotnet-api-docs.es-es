<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5931aa26cc190dfe5da0d88c66d2c06eaa43d705" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58727332" /></Metadata><TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">El tipo de objeto que se va a comparar.</typeparam>
    <summary>Define un método de comparación generalizado, implementado por un tipo de valor o clase con el fin de crear un método de comparación específico del tipo para ordenar instancias.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta interfaz se implementa mediante tipos cuyos valores se pueden ordenar y proporciona un método de comparación fuertemente tipado para ordenar los miembros de un objeto de colección genérica. Por ejemplo, un número puede ser mayor que un segundo número, y puede aparecer una cadena en orden alfabético antes que otro. Requiere que implementar los tipos definan un único método, <xref:System.IComparable%601.CompareTo%28%600%29>, que indica si la posición de la instancia actual en el criterio de ordenación es anterior, posterior o igual que un segundo objeto del mismo tipo. Normalmente, no se llama al método directamente desde el código del desarrollador. En su lugar, se llama automáticamente mediante métodos como <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> y <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Normalmente, los tipos que proporcionan un <xref:System.IComparable%601> implementación también implementan la <xref:System.IEquatable%601> interfaz. El <xref:System.IEquatable%601> interfaz define el <xref:System.IEquatable%601.Equals%2A> método, que determina la igualdad de las instancias del tipo de implementación.  
  
 La implementación de la <xref:System.IComparable%601.CompareTo%28%600%29> método debe devolver un <xref:System.Int32> que tiene uno de estos tres valores, como se muestra en la tabla siguiente.  
  
|Valor|Significado|  
|-----------|-------------|  
|Menor que cero|Este objeto precede el objeto especificado por el <xref:System.IComparable%601.CompareTo%2A> método en el criterio de ordenación.|  
|Cero|Instancia actual se produce en la misma posición en el criterio de ordenación que el objeto especificado por el <xref:System.IComparable%601.CompareTo%2A> argumento del método.|  
|Mayor que cero|Instancia actual sigue al objeto especificado por el <xref:System.IComparable%601.CompareTo%2A> argumento del método en el criterio de ordenación.|  
  
 Todos los tipos numéricos (como <xref:System.Int32> y <xref:System.Double>) implementar <xref:System.IComparable%601>, al igual <xref:System.String>, <xref:System.Char>, y <xref:System.DateTime>. Tipos personalizados también deben proporcionar su propia implementación de <xref:System.IComparable%601> para permitir que las instancias de objeto ordenar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se ilustra la implementación de <xref:System.IComparable%601> para una sencilla `Temperature` objeto. El ejemplo se crea un <xref:System.Collections.Generic.SortedList%602> colección de cadenas con `Temperature` claves de objeto y agrega varios pares de temperaturas y las cadenas a la lista fuera de la secuencia. En la llamada a la <xref:System.Collections.Generic.SortedList%602.Add%2A> método, el <xref:System.Collections.Generic.SortedList%602> colección utiliza el <xref:System.IComparable%601> implementación para ordenar las entradas de lista, que, a continuación, se muestran en orden creciente de temperatura.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Reemplace el parámetro de tipo de la <see cref="T:System.IComparable`1" /> interfaz con el tipo que implementa esta interfaz.  
  
Si implementa <see cref="T:System.IComparable`1" />, debería sobrecargar el <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, y <see langword="op_LessThanOrEqual" /> operadores para devolver valores que son coherentes con <see cref="M:System.IComparable`1.CompareTo(`0)" />. Además, también debe implementar <see cref="T:System.IEquatable`1" />. Consulte la <see cref="T:System.IEquatable`1" /> artículo para obtener información completa.</para></block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : 'T -&gt; int" Usage="iComparable.CompareTo other" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(T other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Objeto que se va a comparar con esta instancia.</param>
        <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
        <returns>Un valor que indica el orden relativo de los objetos que se están comparando. El valor devuelto tiene los siguientes significados: 
 <list type="table"><listheader><term> Valor 
 </term><description> Significado 
 </description></listheader><item><term> Menor que cero 
 </term><description> Esta instancia es anterior a <paramref name="other" /> en el criterio de ordenación.  
  
 </description></item><item><term> Cero 
 </term><description> Esta instancia se produce en la misma posición del criterio de ordenación que <paramref name="other" />.  
  
 </description></item><item><term> Mayor que cero 
 </term><description> Esta instancia sigue a <paramref name="other" /> en el criterio de ordenación.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> Proporciona un método de comparación fuertemente tipado para ordenar los miembros de un objeto de colección genérica. Por este motivo, normalmente no se llama directamente desde el código del desarrollador. En su lugar, se llama automáticamente mediante métodos como <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> y <xref:System.Collections.Generic.SortedList%602.Add%2A>.  
  
 Este método es solo una definición y debe implementarse mediante un tipo específico de clase o el valor surta efecto. El significado de las comparaciones especificado en la sección ("precede a", "se produce en la misma posición que" y "sigue) depende de la implementación concreta de valores devueltos.  
  
 Por definición, cualquier objeto es mayor que `null`, y dos referencias null son iguales entre sí.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se ilustra la implementación de <xref:System.IComparable%601> para una sencilla `Temperature` objeto. El ejemplo se crea un <xref:System.Collections.Generic.SortedList%602> colección de cadenas con `Temperature` claves de objeto y agrega varios pares de temperaturas y las cadenas a la lista fuera de la secuencia. En la llamada a la <xref:System.Collections.Generic.SortedList%602.Add%2A> método, el <xref:System.Collections.Generic.SortedList%602> colección utiliza el <xref:System.IComparable%601> implementación para ordenar las entradas de lista, que, a continuación, se muestran en orden creciente de temperatura.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Para los objetos A, B y C, deben cumplirse las siguientes condiciones: 
 <c>A.CompareTo (a)</c> debe devolver cero.  
  
Si <c>a.CompareTo (b)</c> , a continuación, devuelve cero <c>B.CompareTo</c> debe devolver cero.  
  
Si <c>a.CompareTo (b)</c> devuelve cero y <c>b.CompareTo (c)</c> , a continuación, devuelve cero <c>a.CompareTo (c)</c> debe devolver cero.  
  
Si <c>a.CompareTo (b)</c> devuelve un valor distinto de cero, a continuación, <c>B.CompareTo</c> es necesario para devolver un valor de signo contrario.  
  
Si <c>a.CompareTo (b)</c> devuelve un valor <paramref name="x" /> que no es igual a cero, y <c>b.CompareTo (c)</c> devuelve un valor <paramref name="y" /> del mismo signo que <paramref name="x" />, a continuación, <c>a.CompareTo (c)</c> es necesario para devolver un valor del mismo signo que <paramref name="x" /> y <paramref name="y" />.</para></block>
        <block subset="none" type="usage"><para>Use el <see cref="M:System.IComparable`1.CompareTo(`0)" /> método para determinar el orden de las instancias de una clase.</para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>