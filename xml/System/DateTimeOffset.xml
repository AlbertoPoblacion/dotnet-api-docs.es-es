<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0121851dad511751c9beb499045b55b619cc57c7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433729" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTimeOffset" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTimeOffset&#xA;Implements IComparable, IComparable(Of DateTimeOffset), IDeserializationCallback, IEquatable(Of DateTimeOffset), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTimeOffset = struct&#xA;    interface IFormattable&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset> estructura incluye un <xref:System.DateTime> valor, junto con un <xref:System.DateTimeOffset.Offset%2A> propiedad que define la diferencia entre la actual <xref:System.DateTimeOffset> la fecha y la hora y la hora Universal coordinada (UTC) de la instancia. Dado que define exactamente una fecha y hora con respecto a la hora UTC, la <xref:System.DateTimeOffset> estructura no incluye un `Kind` miembro, como la <xref:System.DateTime> estructura hace. Representa las fechas y horas con valores cuya hora UTC va desde la medianoche 12:00:00, el 1 de enero, 0001 D.c. (Era común), a las 11:59:59 P.M. del 31 de diciembre de 9999 D.C. (E.C.).  
  
 El componente de tiempo de un <xref:System.DateTimeOffset> valor se mide en unidades de 100 nanosegundos denominadas pasos, y una fecha concreta es el número de pasos transcurridos desde la medianoche de 12:00 del 1 de enero de 0001 D.C. (E.C.) en el <xref:System.Globalization.GregorianCalendar> calendario. Un <xref:System.DateTimeOffset> valor siempre se expresa en el contexto explícito o calendario predeterminado. Los pasos que se atribuye al leap segundos no se incluyen en el número total de pasos.  
  
> [!NOTE]
>  Si está trabajando con un valor de pasos que desea convertir en algún otro intervalo de tiempo, como minutos o segundos, debe usar el <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, o <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> constante para realizar la conversión. Por ejemplo agregar el número de segundos representado por un número especificado de pasos a la <xref:System.DateTimeOffset.Second%2A> componente de un <xref:System.DateTimeOffset> valor, puede usar la expresión `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  
 Aunque un <xref:System.DateTimeOffset> valor incluye un desplazamiento, no es una estructura de datos totalmente compatible con zona horaria. Aunque un desplazamiento de UTC es una característica de una zona horaria, no identifica inequívocamente una zona horaria. No sólo varias zonas horarias comparten el mismo desplazamiento de hora UTC, pero el desplazamiento de una sola zona horaria cambia si observa el horario de verano. Esto significa que, tan pronto como un <xref:System.DateTimeOffset> valor se desasocie de su zona horaria, ya no se puede vinculada inequívocamente a su zona horaria original.  
  
 Dado que <xref:System.DateTimeOffset> es una estructura, un <xref:System.DateTimeOffset> objeto que se ha declarado pero no en caso contrario, inicializado contiene los valores predeterminados para cada uno de sus campos de miembro. Esto significa que su <xref:System.DateTimeOffset.DateTime%2A> propiedad está establecida en <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> y su <xref:System.DateTimeOffset.Offset%2A> propiedad está establecida en <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Puede crear un nuevo <xref:System.DateTimeOffset> valor mediante una llamada a cualquiera de las sobrecargas de su constructor, que son similares a los constructores sobrecargados de la <xref:System.DateTime> estructura. También puede crear un nuevo <xref:System.DateTimeOffset> valor asignándole un <xref:System.DateTime> valor. Se trata de una conversión implícita; no requiere un operador de conversión (en C#) o llamar a un método de conversión (en Visual Basic). También se puede inicializar un <xref:System.DateTimeOffset> valor de la representación de cadena de una fecha y hora mediante una llamada a una serie de métodos, que incluyen de análisis de cadenas estáticas <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, y <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 Los miembros de la <xref:System.DateTimeOffset> estructura proporcionan funcionalidad en las áreas siguientes:  
  
-   Fecha y hora aritmético.  
  
     Puede agregar o restar fechas o intervalos de tiempo de un determinado <xref:System.DateTimeOffset> valor. Operaciones aritméticas con <xref:System.DateTimeOffset> valores, al contrario que con <xref:System.DateTime> valores, ajuste las diferencias en los desplazamientos de hora al devolver un resultado. Por ejemplo, el siguiente código utiliza <xref:System.DateTime> las variables que se resta la hora local actual de la hora UTC actual. El código utiliza <xref:System.DateTimeOffset> variables para realizar la misma operación. El resultado de restar con <xref:System.DateTime> valores devuelve la diferencia de la zona horaria local a la hora UTC, mientras la resta con <xref:System.DateTimeOffset> valores devuelve <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
     [!code-csharp[System.DateTimeOffset.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Type/cs/Type.cs#1)]
     [!code-vb[System.DateTimeOffset.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Type/vb/Type.vb#1)]  
  
-   Las operaciones de conversión del tipo.  
  
     Puede convertir <xref:System.DateTimeOffset> valores <xref:System.DateTimeOffset.DateTime%2A> valores y viceversa.  
  
-   Operaciones de extracción y manipulación de tiempo.  
  
     Puede extraer la fecha o la hora de un <xref:System.DateTimeOffset> valor. También puede recuperar el valor de una determinada <xref:System.DateTimeOffset> componente, como el año o el mes.  
  
-   Conversión de fecha y hora.  
  
     Puede convertir cualquier <xref:System.DateTimeOffset> valor a otro <xref:System.DateTimeOffset> valor que representa el mismo punto en el tiempo en otra zona horaria. Sin embargo, se aplican las reglas de ajuste de una zona horaria sólo en el caso de los <xref:System.DateTimeOffset.ToLocalTime%2A> método, que convierte un <xref:System.DateTimeOffset> valor a la fecha y hora en la zona del sistema local.  
  
-   Comparación de fecha y hora.  
  
     Puede determinar si alguno determinado <xref:System.DateTimeOffset> valor es anterior, igual o posterior a otro <xref:System.DateTimeOffset> valor. Antes de realizar la comparación, todos los valores se convierten a UTC.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime -&gt; DateTimeOffset" Usage="new System.DateTimeOffset dateTime" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento de este constructor depende del valor de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad de la `dateTime` parámetro:  
  
-   Si el valor de <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeOffset.DateTime%2A> propiedad de la nueva instancia se establece igual que `dateTime`y el <xref:System.DateTimeOffset.Offset%2A> propiedad está establecida en <xref:System.TimeSpan.Zero>.  
  
-   Si el valor de <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, <xref:System.DateTimeOffset.DateTime%2A> propiedad de la nueva instancia se establece igual que `dateTime`y el <xref:System.DateTimeOffset.Offset%2A> propiedad se establece igual que el desplazamiento de zona de horaria actual del sistema local.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo el valor de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad de la `dateTime` parámetro afecta al valor de fecha y hora que es devuelta por este constructor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#1)]
 [!code-vb[System.DateTimeOffset.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : DateTime * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (dateTime, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento de este constructor depende en parte del valor de la <xref:System.DateTime.Kind%2A> propiedad de la `dateTime` parámetro:  
  
-   Si el valor de <xref:System.DateTime.Kind%2A> es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, el valor de la `offset` parámetro debe ser 0 o un <xref:System.ArgumentException> se produce.  
  
-   Si el valor de <xref:System.DateTime.Kind%2A> es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, el valor de la `offset` parámetro debe ser igual al desplazamiento de la zona horaria local de la hora Universal coordinada (UTC) para esa fecha en particular o un <xref:System.ArgumentException> se produce.  
  
-   Si el valor de <xref:System.DateTime.Kind%2A> es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, el `offset` parámetro puede tener cualquier valor válido.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo inicializar una <xref:System.DateTimeOffset> objeto con una fecha y hora y el desplazamiento de la zona horaria local cuando esa zona horaria no se conoce de antemano.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#3)]
 [!code-vb[System.DateTimeOffset.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="offset" /> does not equal zero.  -or-  <paramref name="dateTime.Kind" /> equals <see cref="F:System.DateTimeKind.Local" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.  -or-  <paramref name="offset" /> is not specified in whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  -or-  <see cref="P:System.DateTimeOffset.UtcDateTime" /> is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(long ticks, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int64 * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (ticks, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, se intenta llamar a la <xref:System.DateTimeOffset.%23ctor%2A> constructor para crear instancias de un <xref:System.DateTimeOffset> valor con una hora local y un desplazamiento distinto de que la hora local zona produce un <xref:System.ArgumentException>. Puede utilizar esta sobrecarga de la <xref:System.DateTimeOffset> constructor para evitar esta limitación. En el ejemplo siguiente se utiliza el número de la hora local de pasos para crear instancias de un <xref:System.DateTimeOffset> valor cuyo desplazamiento no representa necesariamente que la hora local:  
  
 [!code-csharp[System.DateTimeOffset.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#4)]
 [!code-vb[System.DateTimeOffset.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#4)]  
  
   
  
## Examples  
 En el ejemplo siguiente se inicializa un <xref:System.DateTimeOffset> objeto utilizando el número de pasos en una fecha arbitraria (en este caso, el 16 de julio de 2007, a la 1:32 P.M.) con un desplazamiento de -5.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#2)]
 [!code-vb[System.DateTimeOffset.Constructors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> is not specified in whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.  -or-  <paramref name="ticks" /> is less than <see langword="DateTimeOffset.MinValue.Ticks" /> or greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.  -or-  <paramref name="Offset" /> s less than -14 hours or greater than 14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta `year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTimeOffset> valor usando el año, mes y día en otro calendario, llamada la <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructor.  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTimeOffset> objeto mediante el uso de la <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> sobrecarga del constructor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#5)]
 [!code-vb[System.DateTimeOffset.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than one or greater than 9999.  -or-  <paramref name="month" /> is less than one or greater than 12.  -or-  <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than zero or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  -or-  The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta `year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTimeOffset> valor usando el año, mes y día en otro calendario, llamada la <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructor.  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTimeOffset> objeto mediante el uso de la <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.TimeSpan%29?displayProperty=nameWithType> sobrecarga del constructor.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#7)]
 [!code-vb[System.DateTimeOffset.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than one or greater than 9999.  -or-  <paramref name="month" /> is less than one or greater than 12.  -or-  <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than zero or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.  -or-  <paramref name="offset" /> is less than -14 or greater than 14.  -or-  The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, TimeSpan offset);" />
      <MemberSignature Language="F#" Value="new DateTimeOffset : int * int * int * int * int * int * int * System.Globalization.Calendar * TimeSpan -&gt; DateTimeOffset" Usage="new System.DateTimeOffset (year, month, day, hour, minute, second, millisecond, calendar, offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `year`, `month`, `day`, `hour`, `minute`, `second`, y `millisecond` todos los parámetros reflejan los valores expresados en el calendario especificado por el `calendar` parámetro. Se produce una excepción si estos valores forman una fecha y hora que no se puede expresar mediante el uso de este calendario.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza instancias de ambos el <xref:System.Globalization.HebrewCalendar> clase y la <xref:System.Globalization.HijriCalendar> clase para crear instancias de un <xref:System.DateTimeOffset> valor. Que, a continuación, se muestra la fecha en la consola usando los calendarios respectivos y el calendario gregoriano.  
  
 [!code-csharp[System.DateTimeOffset.Constructors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/cs/Constructors.cs#8)]
 [!code-vb[System.DateTimeOffset.Constructors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Constructors/vb/Constructors.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> cannot be <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's <see langword="MinSupportedDateTime.Year" /> or greater than <see langword="MaxSupportedDateTime.Year" />.  -or-  <paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than zero or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.  -or-  <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  -or-  The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.  -or-  The <see cref="P:System.DateTimeOffset.UtcDateTime" /> property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Add(TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Add timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified time interval to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.DateTimeOffset.Add%2A> método para agregar más de un tipo de intervalo de tiempo (días, horas, minutos, segundos o milisegundos) en una sola operación. El comportamiento de este método es idéntico para el operador de suma. El <xref:System.DateTimeOffset> estructura también admite los métodos de suma especializados (como <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, y <xref:System.DateTimeOffset.AddMinutes%2A>) para cada intervalo de tiempo.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `timeSpan` a la fecha y hora.  
  
 El <xref:System.DateTimeOffset.Add%2A> método no afecta al valor del elemento actual <xref:System.DateTimeOffset> del objeto <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 Dado que un <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.Add%2A> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada mientras se realizan la fecha y hora aritmético.  
  
 Si el `timeSpan` parámetro es `null`, este método devuelve el valor de la versión original <xref:System.DateTimeOffset> objeto sin cambios.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una matriz de <xref:System.TimeSpan> objetos que representan las horas de vuelo entre destinos. El <xref:System.DateTimeOffset.Add%2A> método, a continuación, agrega estas horas para un <xref:System.DateTimeOffset> objeto que representa el tiempo de despegue inicial de un vuelo. El resultado refleja la hora de llegada programada en cada destino.  
  
 [!code-csharp[System.DateTimeOffset.Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#1)]
 [!code-vb[System.DateTimeOffset.Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (days As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddDays(double days);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddDays days" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">A number of whole and fractional days. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La parte fraccionaria de los `days` parámetro es la parte fraccionaria de un día. Por ejemplo, 4,5 equivale a 4 días, 12 horas, 0 minutos, 0 segundos, 0 milisegundos. El `days` parámetro se redondea al milisegundo más cercano.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `days` a la fecha y hora.  
  
 Dado que un <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.AddDays%2A> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada mientras se realizan la fecha y hora aritmético.  
  
 La conversión de intervalos de tiempo de menos de un día en una fracción puede implicar una pérdida de precisión. Si esto le resulta problemático, puede usar el <xref:System.DateTimeOffset.Add%2A> método, que le permite especificar más de un tipo de intervalo de tiempo en una única llamada al método y elimina la necesidad de convertir los intervalos de tiempo en partes fraccionarias de un día.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.AddDays%2A> método para enumerar las fechas que caen el lunes, el inicio de la semana laboral, en marzo de 2008.  
  
 [!code-csharp[System.DateTimeOffset.Methods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#2)]
 [!code-vb[System.DateTimeOffset.Methods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (hours As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddHours(double hours);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddHours hours" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">A number of whole and fractional hours. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La parte fraccionaria de los `hours` parámetro es la parte fraccionaria de una hora. Por ejemplo, 4,5 equivale a 4 horas, 30 minutos, 0 segundos, 0 milisegundos. El `hours` parámetro se redondea al milisegundo más cercano.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `hours` a la fecha y hora.  
  
 Dado que un <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.AddHours%2A> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada mientras se realizan la fecha y hora aritmético.  
  
 La conversión de intervalos de tiempo de menos de una hora en una fracción puede implicar una pérdida de precisión. (Por ejemplo, un minuto es el 0,01666 de una hora). Si esto le resulta problemático, puede usar el <xref:System.DateTimeOffset.Add%2A> método, que le permite especificar más de un tipo de intervalo de tiempo en una única llamada al método y elimina la necesidad de convertir los intervalos de tiempo en partes fraccionarias de una hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.AddHours%2A> método para enumerar las horas de inicio de trabajo se desplaza de una semana determinada en una oficina que tiene dos turnos de ocho horas al día.  
  
 [!code-csharp[System.DateTimeOffset.Methods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#3)]
 [!code-vb[System.DateTimeOffset.Methods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (milliseconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMilliseconds(double milliseconds);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">A number of whole and fractional milliseconds. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La parte fraccionaria de los `milliseconds` parámetro es la parte fraccionaria de un milisegundo. Por ejemplo, 4,5 equivale a 4 milisegundos y 5000 pasos, donde un milisegundo equivale a 10.000 pasos. Sin embargo, `milliseconds` se redondea al milisegundo más cercano; todos los valores de.5 o más se redondean hacia arriba.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `milliseconds` a la fecha y hora.  
  
 Dado que un <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.AddMilliseconds%2A> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada mientras se realizan la fecha y hora aritmético.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (minutes As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMinutes(double minutes);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMinutes minutes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">A number of whole and fractional minutes. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La parte fraccionaria de los `minutes` parámetro es la parte fraccionaria de un minuto. Por ejemplo, 4,5 equivale a 4 minutos, 30 segundos, 0 milisegundos. El `minutes` parámetro se redondea al milisegundo más cercano.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `minutes` a la fecha y hora.  
  
 Dado que un <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.AddMinutes%2A> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada mientras se realizan la fecha y hora aritmético.  
  
 La conversión de intervalos de tiempo de menos de un minuto en una fracción puede implicar una pérdida de precisión. (Por ejemplo, un segundo es el 0,01666 de un minuto). Si esto le resulta problemático, puede usar el <xref:System.DateTimeOffset.Add%2A> método, que le permite especificar más de un tipo de intervalo de tiempo en una única llamada al método y elimina la necesidad de convertir los intervalos de tiempo en partes fraccionarias de un minuto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of whole months. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la mayoría de los otros métodos que agregan una unidad de intervalo de tiempo única (como minutos o días) a un valor de fecha y hora, <xref:System.DateTimeOffset.AddMonths%2A> no le permite agregar partes fraccionarias de un mes. Para agregar una hora que está formada por otras unidades de tiempo además de los meses para un <xref:System.DateTimeOffset> objeto, utilice el <xref:System.DateTimeOffset.Add%2A> método.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `months` a la fecha y hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.AddMonths%2A> método para mostrar la fecha de inicio de cada trimestre del año 2007.  
  
 [!code-csharp[System.DateTimeOffset.Methods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#4)]
 [!code-vb[System.DateTimeOffset.Methods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (seconds As Double) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTimeOffset" Usage="dateTimeOffset.AddSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">A number of whole and fractional seconds. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La parte fraccionaria de los `seconds` parámetro es la parte fraccionaria de un segundo. En la tabla siguiente se muestra el valor de fracciones de segundo.  
  
|Segundo valor|Equivalente|  
|------------------|----------------|  
|segundo.1|100 milisegundos|  
|segundo.01|10 milisegundos|  
|segundo.001|1 milisegundo|  
  
 El `seconds` parámetro se redondea al milisegundo más cercano.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `minutes` a la fecha y hora.  
  
 Dado que un <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.AddSeconds%2A> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada mientras se realizan la fecha y hora aritmético.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (ticks As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddTicks(long ticks);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTimeOffset" Usage="dateTimeOffset.AddTicks ticks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A number of 100-nanosecond ticks. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una marca de verificación representa 100 nanosegundos o una diez millonésima de segundo. Dado que un TIC es un intervalo de tiempo muy pequeño y preciso, cualquier unidad de tiempo mayor se puede expresar como un número de pasos sin una pérdida de precisión.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `minutes` a la fecha y hora.  
  
 En la tabla siguiente se muestra el número de pasos en un intervalo de tiempo determinado.  
  
|intervalo de tiempo|Número de pasos|  
|-------------------|---------------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|Semana|6,048,000,000,000|  
|Mes|Depende de número de días del mes.|  
|No bisiesto|315,360,000,000,000|  
|Año bisiesto|316,224,000,000,000|  
  
 Dado que un <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.AddTicks%2A> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada mientras se realizan la fecha y hora aritmético.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (years As Integer) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset AddYears(int years);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTimeOffset" Usage="dateTimeOffset.AddYears years" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">A number of years. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of years represented by <paramref name="years" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la mayoría de los otros métodos que agregan una unidad de intervalo de tiempo única (como minutos o días) a un valor de fecha y hora, <xref:System.DateTimeOffset.AddYears%2A> no le permite agregar partes fraccionarias de un año. Para agregar una hora que está compuesta de otras unidades de tiempo además de los años para un <xref:System.DateTimeOffset> objeto, utilice el <xref:System.DateTimeOffset.Add%2A> método.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `months` a la fecha y hora.  
  
   
  
## Examples  
 En los Estados Unidos, licencias de conducir no se pueden emitir a personas menores de 16 años de edad. En el ejemplo siguiente se muestra la última fecha posible en el que se debe procedentes de una persona con el fin de obtener legalmente un permiso de conducción.  
  
 [!code-csharp[System.DateTimeOffset.Methods#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#6)]
 [!code-vb[System.DateTimeOffset.Methods#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (first As DateTimeOffset, second As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTimeOffset * DateTimeOffset -&gt; int" Usage="System.DateTimeOffset.Compare (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">The first object to compare.</param>
        <param name="second">The second object to compare.</param>
        <summary>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>
        <returns>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.  
  
 <list type="table"><listheader><term> Return value  </term><description> Meaning  </description></listheader><item><term> Less than zero  </term><description><paramref name="first" /> is earlier than <paramref name="second" />.  </description></item><item><term> Zero  </term><description><paramref name="first" /> is equal to <paramref name="second" />.  </description></item><item><term> Greater than zero  </term><description><paramref name="first" /> is later than <paramref name="second" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para realizar la comparación, el método convierte el `first` y `second` parámetros en hora Universal coordinada (UTC) antes de realizar la comparación. El método es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#1)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#1)]  
  
 En otras palabras, el <xref:System.DateTimeOffset.Compare%2A> método determina si dos <xref:System.DateTimeOffset> objetos representan un único punto en el tiempo. Compara directamente las fechas y horas ni los desplazamientos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra las llamadas a la <xref:System.DateTimeOffset.Compare%2A> método para comparar <xref:System.DateTimeOffset> objetos.  
  
 [!code-csharp[System.DateTimeOffset.Methods#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods2.cs#7)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods2.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As DateTimeOffset) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTimeOffset -&gt; int&#xA;override this.CompareTo : DateTimeOffset -&gt; int" Usage="dateTimeOffset.CompareTo other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.  
  
 <list type="table"><listheader><term> Return Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.  </description></item><item><term> Zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.  </description></item><item><term> Greater than zero.  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método compara <xref:System.DateTimeOffset> objetos comparando sus <xref:System.DateTimeOffset.UtcDateTime%2A> valores; es decir, determina si los dos objetos representan un único punto en el tiempo e indica si el objeto actual es anterior, posterior o igual que el `other`parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra las llamadas a la <xref:System.DateTimeOffset.CompareTo%2A> método para comparar <xref:System.DateTimeOffset> objetos.  
  
 [!code-csharp[System.DateTimeOffset.Methods#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods3.cs#8)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods3.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTimeOffset.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>A <see cref="T:System.DateTime" /> valor que representa el componente de fecha del elemento actual <see cref="T:System.DateTimeOffset" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad quita cualquier parte significativa del componente horario de un <xref:System.DateTimeOffset> de objetos y devuelve sólo su componente de fecha significativo. Por ejemplo, si la <xref:System.DateTimeOffset> objeto tiene un valor de fecha y hora de "1/12/07 4:01 pm + 7:30", la propiedad devuelve un <xref:System.DateTime> valor de "1/12/07 12:00:00 AM". El <xref:System.DateTime> , a continuación, se muestra el valor mediante el uso de cualquiera de los especificadores de formato estándar o personalizado que muestran sólo las fechas. (Vea la sección ejemplo para ver una ilustración).  
  
 El valor de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad de devuelto <xref:System.DateTime> objeto siempre es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. No se ve afectado por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 Para mostrar una fecha sin su componente de tiempo, también puede utilizar el "D" o "d"; los especificadores de formato Para ver una ilustración, vea la sección ejemplo.  
  
   
  
## Examples  
 En el ejemplo siguiente se recupera el valor de la <xref:System.DateTimeOffset.Date%2A> propiedad para una fecha específica. A continuación, se muestra ese valor en la consola usando algunos especificadores de formato de solo fecha estándar y personalizados.  
  
 [!code-csharp[System.DateTimeOffset.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#1)]
 [!code-vb[System.DateTimeOffset.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateTime : DateTime" Usage="System.DateTimeOffset.DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>La fecha y hora del elemento actual <see cref="T:System.DateTimeOffset" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.DateTime%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 Esta propiedad devuelve la fecha y el componente de tiempo de un <xref:System.DateTimeOffset> objeto, lo que resulta útil para llevar a cabo <xref:System.DateTimeOffset> a <xref:System.DateTime> conversión. Por ejemplo, si la <xref:System.DateTimeOffset> objeto tiene un valor de fecha y hora de "1/12/07 4:01 pm + 7:30", la propiedad devuelve una fecha de "1/12/07 4:01 pm".  
  
 El valor de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad de devuelto <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.DateTimeOffset.DateTime%2A> propiedad que se va a convertir la hora devuelta por la <xref:System.DateTimeOffset.Now%2A> y <xref:System.DateTimeOffset.UtcNow%2A> propiedades <xref:System.DateTime> valores.  
  
 [!code-csharp[System.DateTimeOffset.Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#2)]
 [!code-vb[System.DateTimeOffset.Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.LocalDateTime" />
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTimeOffset.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El componente de día de la actual <see cref="T:System.DateTimeOffset" /> objeto, expresado como un valor entre 1 y 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Day%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 También puede crear una representación de cadena de un <xref:System.DateTimeOffset> componente de día del objeto mediante una llamada a la <xref:System.DateTimeOffset.ToString%2A> método con los especificadores de formato personalizado "d" o "dd".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el componente de día de un <xref:System.DateTimeOffset> objeto de tres maneras diferentes:  
  
-   Al recuperar el valor de la <xref:System.DateTimeOffset.Day%2A> propiedad.  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "d".  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "dd".  
  
 [!code-csharp[System.DateTimeOffset.Properties#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#10)]
 [!code-vb[System.DateTimeOffset.Properties#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTimeOffset.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>Uno de los valores de enumeración que indica el día de la semana de la actual <see cref="T:System.DateTimeOffset" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de las constantes de la <xref:System.DayOfWeek> enumeración comprendido entre <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> a <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Si se convierte en un entero, su valor comprendido entre cero (lo que indica <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) a seis (que indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 También puede mostrar el nombre del día de una fecha determinada mediante el especificador de formato "D" o el especificador de formato personalizado "dddd". Por ejemplo:  
  
 [!code-csharp[System.DateTimeOffset.Properties#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#4)]
 [!code-vb[System.DateTimeOffset.Properties#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#4)]  
  
 Tenga en cuenta que la cadena devuelta mediante una llamada a la `ToString` método de la <xref:System.DayOfWeek> miembro de enumeración devuelto por esta propiedad no se localiza. Para extraer una cadena que contiene el nombre del día de la referencia cultural actual o de una referencia cultural concreta, llame a la <xref:System.DateTimeOffset.ToString%2A> método con el especificador de formato personalizado "dddd". Por ejemplo, el código siguiente muestra el nombre del día de una fecha mediante el `fr-fr` referencia cultural.  
  
 [!code-csharp[System.DateTimeOffset.Properties#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#5)]
 [!code-vb[System.DateTimeOffset.Properties#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#5)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el nombre de día de la semana del primer día de cada mes del año 2008.  
  
 [!code-csharp[System.DateTimeOffset.Properties#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#3)]
 [!code-vb[System.DateTimeOffset.Properties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTimeOffset.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El día del año del elemento actual <see cref="T:System.DateTimeOffset" /> objeto, expresado como un valor entre 1 y 366.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether two <see cref="T:System.DateTimeOffset" /> objects are equal, or a <see cref="T:System.DateTimeOffset" /> object is equal to a specified object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de realizar la comparación, este método convierte los valores de ambos <xref:System.DateTimeOffset> objetos en hora Universal coordinada (UTC). El método es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#2)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#2)]  
  
 En otras palabras, el <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> método determina si dos <xref:System.DateTimeOffset> objetos representan un único punto en el tiempo. Compara directamente las fechas y horas ni los desplazamientos. Para determinar si dos <xref:System.DateTimeOffset> objetos representan la misma hora y tienen el mismo valor de desplazamiento, use la <xref:System.DateTimeOffset.EqualsExact%2A> método.  
  
 A <xref:System.DateTimeOffset> objeto que no sea `null` se considera que es una versión posterior (o posterior) que uno que sea `null`.  
  
 Esta sobrecarga de la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> método implementa el <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> método. Ofrece un rendimiento ligeramente mejor que la <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> sobrecarga porque el `other` parámetro no tiene que convertirse a partir de un objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra las llamadas a la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%29> método para probar <xref:System.DateTimeOffset> objetos de igualdad con el actual <xref:System.DateTimeOffset> objeto.  
  
 [!code-csharp[System.DateTimeOffset.Methods#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#9)]
 [!code-vb[System.DateTimeOffset.Methods#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTimeOffset.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de realizar la comparación, este método convierte los valores de actual <xref:System.DateTimeOffset> objeto y el `obj` parámetro a la hora Universal coordinada (UTC). El método es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#3)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#3)]  
  
 En otras palabras, el <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=nameWithType> método determina si la actual <xref:System.DateTimeOffset> objeto y un objeto especificado representan un único punto en el tiempo. Compara directamente las fechas y horas ni los desplazamientos. Para determinar si dos <xref:System.DateTimeOffset> objetos representan la misma hora y tienen el mismo valor de desplazamiento, use la <xref:System.DateTimeOffset.EqualsExact%2A> método.  
  
 Si `obj` es `null`, o si el tiempo de ejecución de tipo de `obj` no <xref:System.DateTimeOffset>, el método devuelve `false`.  
  
   
  
## Examples  
 En el ejemplo siguiente se indica si la actual <xref:System.DateTimeOffset> objeto es igual que los otros <xref:System.DateTimeOffset> objetos, así como en una referencia nula y un <xref:System.DateTime> objeto.  
  
 [!code-csharp[System.DateTimeOffset.Methods#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#10)]
 [!code-vb[System.DateTimeOffset.Methods#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (first As DateTimeOffset, second As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.Equals (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">The first object to compare.</param>
        <param name="second">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
        <returns>
          <see langword="true" /> if the two <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de realizar la comparación, este método convierte ambos <xref:System.DateTimeOffset> objetos en hora Universal coordinada (UTC). El método es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 En otras palabras, el <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> método determina si los dos <xref:System.DateTimeOffset> objetos representan un único punto en el tiempo. Compara directamente las fechas y horas ni los desplazamientos. Para determinar si dos <xref:System.DateTimeOffset> objetos representan la misma hora y tienen el mismo valor de desplazamiento, use la <xref:System.DateTimeOffset.EqualsExact%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra las llamadas a la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29> método para probar varios pares de <xref:System.DateTimeOffset> objetos de igualdad.  
  
 [!code-csharp[System.DateTimeOffset.Methods#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#11)]
 [!code-vb[System.DateTimeOffset.Methods#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function EqualsExact (other As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EqualsExact(DateTimeOffset other);" />
      <MemberSignature Language="F#" Value="member this.EqualsExact : DateTimeOffset -&gt; bool" Usage="dateTimeOffset.EqualsExact other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same <see cref="P:System.DateTimeOffset.Offset" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que varias zonas horarias comparten un desplazamiento único, un valor devuelto de `true` no garantiza que el actual y la `other` objeto representan veces en la misma zona horaria.  
  
 A diferencia de la <xref:System.DateTimeOffset.EqualsExact%2A> /método siguiente, las sobrecargas de la <xref:System.DateTimeOffset.Equals%2A> método determinar si dos <xref:System.DateTimeOffset> valores representan un único punto en el tiempo. No indican que dos valores tengan la misma fecha y hora, así como el mismo desplazamiento.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.DateTimeOffset.EqualsExact%2A> método para comparar similar <xref:System.DateTimeOffset> objetos.  
  
 [!code-csharp[System.DateTimeOffset.Methods#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#12)]
 [!code-vb[System.DateTimeOffset.Methods#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time, expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuándo una aplicación crea, tiene acceso o escribe en un archivo.  
  
 Hora de un archivo de Windows es directamente accesible a través de la API de Windows mediante una llamada a la `GetFileTime` función, que devuelve un `FILETIME` estructura. El parámetro de función único es el identificador del archivo cuya información de hora se va a recuperar. El identificador de archivo se recupera mediante una llamada a la `CreateFile` (función). El `FILETIME` la estructura `dwHighDateTime` miembro contiene los cuatro bytes de orden superior de la hora de archivo y su `dwLowDateTime` miembro contiene los cuatro bytes de orden inferior. El ejemplo siguiente muestra cómo recuperar valores de hora de archivo de Windows y convertirlos a <xref:System.DateTimeOffset> valores.  
  
 Valores de hora de archivo de Windows también pueden crearse desde <xref:System.DateTime> valores mediante una llamada a la <xref:System.DateTime.ToFileTime%2A?displayProperty=nameWithType> y <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=nameWithType> métodos y de <xref:System.DateTimeOffset> valores mediante una llamada a la <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa la API de Windows para recuperar los tiempos de archivo de Windows para el archivo ejecutable WordPad.  
  
 [!code-csharp[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/cs/FileTime.cs#1)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.FromFileTime/vb/FileTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="filetime" /> is less than zero.  -or-  <paramref name="filetime" /> is greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeMilliseconds (long milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeMilliseconds(int64 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeMilliseconds (milliseconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeMilliseconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeMilliseconds milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="milliseconds">A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
        <summary>Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
        <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Offset%2A> valor de propiedad de devuelto <xref:System.DateTimeOffset> instancia es <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, que representa la hora Universal coordinada. Se puede convertir a la hora en una zona horaria concreta mediante una llamada a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="milliseconds" /> is less than  -62,135,596,800,000.  -or-  <paramref name="milliseconds" /> is greater than 253,402,300,799,999.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="FromUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromUnixTimeSeconds (seconds As Long) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset FromUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="static member FromUnixTimeSeconds : int64 -&gt; DateTimeOffset" Usage="System.DateTimeOffset.FromUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.</param>
        <summary>Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref="T:System.DateTimeOffset" /> value.</summary>
        <returns>A date and time value that represents the same moment in time as the Unix time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Offset%2A> valor de propiedad de devuelto <xref:System.DateTimeOffset> instancia es <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, que representa la hora Universal coordinada. Se puede convertir a la hora en una zona horaria concreta mediante una llamada a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="seconds" /> is less than  -62,135,596,800.  -or-  <paramref name="seconds" /> is greater than 253,402,300,799.</exception>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTimeOffset.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTimeOffset.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El componente de hora del elemento actual <see cref="T:System.DateTimeOffset" /> objeto. Esta propiedad usa un reloj de 24 horas; el valor va de 0 a 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Hour%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 También puede crear una representación de cadena de un <xref:System.DateTimeOffset> componente de hora del objeto mediante una llamada a la <xref:System.DateTimeOffset.ToString%2A> método con la "H", o especificadores de formato personalizado "HH".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el componente de hora de un <xref:System.DateTimeOffset> objeto de tres maneras diferentes:  
  
-   Al recuperar el valor de la <xref:System.DateTimeOffset.Hour%2A> propiedad.  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "H".  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> especificador de formato de método con "HH".  
  
 [!code-csharp[System.DateTimeOffset.Properties#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#6)]
 [!code-vb[System.DateTimeOffset.Properties#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.LocalDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime LocalDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalDateTime : DateTime" Usage="System.DateTimeOffset.LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>La fecha y hora local del elemento actual <see cref="T:System.DateTimeOffset" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si es necesario, el <xref:System.DateTimeOffset.LocalDateTime%2A> propiedad convierte actual <xref:System.DateTimeOffset> fecha y hora a fecha y la hora del sistema local del objeto. La conversión es una operación de dos pasos:  
  
1.  La propiedad convierte actual <xref:System.DateTimeOffset> tiempo del objeto en la hora Universal coordinada (UTC).  
  
2.  La propiedad, a continuación, convierte UTC a la hora local.  
  
 No hay horas no válidas y horas ambiguas se asignan a la hora estándar de la zona local. (Sin embargo, la conversión puede crear una anomalía: si un <xref:System.DateTimeOffset> valor que se deriva del equipo local refleja una fecha y hora ambigua, que el valor se puede convertir en una hora UTC y luego de nuevo a una hora local que difiere de la hora original.)  La propiedad aplica ninguna regla de ajuste en la zona horaria local cuando realiza esta conversión.  
  
 Esta propiedad devuelve la fecha y el componente de tiempo de un <xref:System.DateTimeOffset> objeto, lo que resulta útil para <xref:System.DateTimeOffset> a <xref:System.DateTime> conversión. Además de realizar cualquier conversión de hora necesaria, esta propiedad es distinta de la <xref:System.DateTimeOffset.DateTime%2A> propiedad estableciendo el valor de la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> el objeto a <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra varias conversiones de <xref:System.DateTimeOffset> valores a los horarios locales la zona horaria del Pacífico Zona horaria estándar del Pacífico. Tenga en cuenta que las últimas tres horas son ambiguas; la propiedad asigna a todos ellos a una sola fecha y hora en la zona horaria estándar del Pacífico.  
  
 [!code-csharp[System.DateTimeOffset.Properties#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#7)]
 [!code-vb[System.DateTimeOffset.Properties#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTimeOffset" Usage="System.DateTimeOffset.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante es 31/12/9999 11:59:59 P.M. + 00:00.  
  
 El <xref:System.DateTimeOffset.MaxValue> propiedad se utiliza para determinar si el valor de un nuevo <xref:System.DateTimeOffset> objeto o la <xref:System.DateTimeOffset> valor devuelto por una operación aritmética es igual o anterior a este valor máximo del intervalo. Si no es así, el método produce una <xref:System.ArgumentOutOfRangeException>. Cualquier <xref:System.DateTimeOffset> valor se convierte en la hora Universal coordinada (UTC) antes de que el método Compare con <xref:System.DateTimeOffset.MaxValue>.  Esto significa que un <xref:System.DateTimeOffset> valor cuya fecha y hora están cerca del intervalo máximo, pero cuyo desplazamiento es negativo, se puede producir una excepción. Por ejemplo, el valor 31/12/9999 11:00 P.M. -02:00 está fuera del intervalo porque es una hora posterior a <xref:System.DateTimeOffset.MaxValue> cuando se convierte a UTC.  
  
 Algunos calendarios, como el <xref:System.Globalization.UmAlQuraCalendar>, admiten un intervalo de fechas superior que es anterior a <xref:System.DateTime.MaxValue>. En estos casos, se intenta tener acceso a <xref:System.DateTime.MaxValue> en asignaciones de variables o formato y las operaciones de análisis puede producir un <xref:System.ArgumentOutOfRangeException>. En lugar de recuperar el valor de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, puede recuperar el valor del valor de fecha válido más reciente de la referencia cultural especificada desde la <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=nameWithType> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current or specified culture's default calendar.</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTimeOffset.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El componente de milisegundos del elemento actual <see cref="T:System.DateTimeOffset" /> objeto, expresado como un número entero entre 0 y 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También puede crear una representación de cadena de un <xref:System.DateTimeOffset> componente de milisegundos del objeto mediante una llamada a la <xref:System.DateTimeOffset.ToString%2A> método con el especificador de formato personalizado "fff".  
  
 Si basan en las propiedades como <xref:System.DateTimeOffset.Now%2A> o <xref:System.DateTimeOffset.UtcNow%2A> para realizar el seguimiento con precisión el número de milisegundos transcurridos, la precisión del componente de milisegundos de la hora depende de la resolución del reloj del sistema. En Windows NT 3.5 y versiones posterior y los sistemas operativos Windows Vista, la resolución del reloj es aproximadamente de 10 a 15 milisegundos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el número de milisegundos de un <xref:System.DateTimeOffset> objeto mediante un especificador de formato personalizado y obtener acceso directamente a la <xref:System.DateTimeOffset.Millisecond%2A> propiedad.  
  
 [!code-csharp[System.DateTimeOffset.Properties#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#12)]
 [!code-vb[System.DateTimeOffset.Properties#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTimeOffset.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El componente de minutos del elemento actual <see cref="T:System.DateTimeOffset" /> objeto, expresado como un número entero entre 0 y 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Minute%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 También puede crear una representación de cadena de un <xref:System.DateTimeOffset> componente de minutos del objeto mediante una llamada a la <xref:System.DateTimeOffset.ToString%2A> método con la "m" o especificadores de formato personalizado "mm".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el componente de minutos de un <xref:System.DateTimeOffset> objeto de tres maneras diferentes:  
  
-   Al recuperar el valor de la <xref:System.DateTimeOffset.Minute%2A> propiedad.  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "m".  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "mm".  
  
 [!code-csharp[System.DateTimeOffset.Properties#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#8)]
 [!code-vb[System.DateTimeOffset.Properties#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTimeOffset" Usage="System.DateTimeOffset.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante es 1/1/0001 12:00:00 A.M. + 00:00.  
  
 El <xref:System.DateTimeOffset.MinValue> propiedad se utiliza para determinar si el valor de un nuevo <xref:System.DateTimeOffset> objeto o la <xref:System.DateTimeOffset> valor devuelto por una operación aritmética es igual o posterior a este valor mínimo del intervalo. Si no es así, el método produce una <xref:System.ArgumentOutOfRangeException>. Cualquier <xref:System.DateTimeOffset> valor se convierte en la hora Universal coordinada (UTC) antes de que el método realiza la comparación con <xref:System.DateTimeOffset.MinValue>.  Esto significa que un <xref:System.DateTimeOffset> valor cuya fecha y hora están cerca del intervalo mínimo, pero cuyo desplazamiento es positivo, se puede producir una excepción. Por ejemplo, el valor 1/1/0001 1:00:00 A.M. + 02:00 está fuera del intervalo porque es una hora anterior a <xref:System.DateTimeOffset.MinValue> cuando se convierte a UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTimeOffset.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El componente de mes del elemento actual <see cref="T:System.DateTimeOffset" /> objeto, expresado como un número entero entre 1 y 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Month%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 También puede crear una representación de cadena de un <xref:System.DateTimeOffset> componente de mes del objeto mediante una llamada a la <xref:System.DateTimeOffset.ToString%2A> método con los especificadores de formato personalizado "M" o "MM".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el componente de mes de un <xref:System.DateTimeOffset> valor de tres maneras diferentes:  
  
-   Al recuperar el valor de la <xref:System.DateTimeOffset.Month%2A> propiedad.  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "M".  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "MM".  
  
 [!code-csharp[System.DateTimeOffset.Properties#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#9)]
 [!code-vb[System.DateTimeOffset.Properties#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset Now { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTimeOffset" Usage="System.DateTimeOffset.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>
        <value>Un <see cref="T:System.DateTimeOffset" /> objeto cuya fecha y hora es la hora local actual y cuyo desplazamiento es el desplazamiento de la zona horaria local de la hora Universal coordinada (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La precisión del componente de milisegundos de la hora local actual depende de la resolución del reloj del sistema. En Windows NT 3.5 y versiones posterior y los sistemas operativos Windows Vista, la resolución del reloj es aproximadamente de 10 a 15 milisegundos.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza el <xref:System.DateTimeOffset.Now%2A> propiedad que se va a recuperar la fecha y hora actuales y lo muestra con cada uno de los [cadenas con formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) compatible con la <xref:System.DateTimeOffset> tipo.  
  
 [!code-csharp[System.DateTimeOffset.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.now/cs/now1.cs#1)]
 [!code-vb[System.DateTimeOffset.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.now/vb/now1.vb#1)]  
  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.Now%2A> y <xref:System.DateTimeOffset.Millisecond%2A> propiedades para determinar la resolución del reloj del sistema. Muestra el tiempo solo cuando ha cambiado el valor de su componente de milisegundos.  
  
 [!code-csharp[System.DateTimeOffset.Properties#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#11)]
 [!code-vb[System.DateTimeOffset.Properties#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Offset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : TimeSpan" Usage="System.DateTimeOffset.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time's offset from Coordinated Universal Time (UTC).</summary>
        <value>La diferencia entre la actual <see cref="T:System.DateTimeOffset" /> valor de hora y la hora Universal coordinada (UTC) del objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.TimeSpan.Hours%2A> propiedad de devuelto <xref:System.TimeSpan> objeto puede oscilar entre-14 horas a 14 horas.  
  
 El valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad es precisa hasta el minuto.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.Offset%2A> propiedad para mostrar la diferencia de la hora local de la hora Universal coordinada (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Properties#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#13)]
 [!code-vb[System.DateTimeOffset.Properties#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator + (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator +(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset + timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The object to add the time interval to.</param>
        <param name="timeSpan">The time interval to add.</param>
        <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</summary>
        <returns>An object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_Addition%2A> método define la operación de suma para <xref:System.DateTimeOffset> valores. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#1)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#1)]  
  
 Los lenguajes que no admiten operadores personalizados ni sobrecarga de operadores pueden llamar el <xref:System.DateTimeOffset.Add%2A> método en su lugar.  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Add%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_Equality%2A> método define el funcionamiento del operador de igualdad para <xref:System.DateTimeOffset> objetos. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#2)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#2)]  
  
 Antes de evaluar la `left` y `right` operandos de igualdad, el operador convierte ambos valores en la hora Universal coordinada (UTC). La operación es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 En otras palabras, el <xref:System.DateTimeOffset.op_Equality%2A> método determina si los dos <xref:System.DateTimeOffset> objetos representan un único punto en el tiempo. Compara directamente las fechas y horas ni los desplazamientos. Para determinar si dos <xref:System.DateTimeOffset> objetos representan la misma hora y tienen el mismo valor de desplazamiento, use la <xref:System.DateTimeOffset.EqualsExact%2A> método.  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_GreaterThan%2A> método define el funcionamiento del operador para mayor que <xref:System.DateTimeOffset> objetos. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#3)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#3)]  
  
 Los lenguajes que no admiten operadores personalizados pueden llamar el <xref:System.DateTimeOffset.Compare%2A> método en su lugar. También puede llamar a la <xref:System.DateTimeOffset.op_GreaterThan%2A> método directamente, como en el ejemplo siguiente se muestra.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#4)]  
  
 Antes de evaluar la `left` y `right` operandos, el operador convierte ambos valores en la hora Universal coordinada (UTC). La operación es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#5)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#5)]  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is the same as or later than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_GreaterThan%2A> método define la operación de mayor o igual que el operador para <xref:System.DateTimeOffset> objetos. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#5)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#5)]  
  
 Los lenguajes que no admiten operadores personalizados pueden llamar el <xref:System.DateTimeOffset.Compare%2A> método en su lugar. Algunos lenguajes también pueden llamar el <xref:System.DateTimeOffset.op_GreaterThanOrEqual%2A> método directamente, como en el ejemplo siguiente se muestra.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#6)]  
  
 Antes de evaluar la `left` y `right` operandos, el operador convierte ambos valores en la hora Universal coordinada (UTC). La operación es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#6)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#6)]  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator DateTimeOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : DateTime -&gt; DateTimeOffset" Usage="System.DateTimeOffset.op_Implicit dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The object to convert.</param>
        <summary>Defines an implicit conversion of a <see cref="T:System.DateTime" /> object to a <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>The converted object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_Implicit%2A> método permite al compilador que convierta automáticamente un <xref:System.DateTime> el objeto a un <xref:System.DateTimeOffset> objeto sin un operador de conversión explícito (en C#) o una llamada a una función de conversión (en Visual Basic). Define una conversión de ampliación que no implican la pérdida de datos y no se inicia una <xref:System.OverflowException>. El <xref:System.DateTimeOffset.op_Implicit%2A> método hace que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#7)]
 [!code-vb[System.DateTimeOffset.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#7)]  
  
 Este método es equivalente a la <xref:System.DateTimeOffset.%23ctor%2A> constructor. El desplazamiento del resultante <xref:System.DateTimeOffset> objeto depende del valor de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad de la `dateTime` parámetro:  
  
-   Si el valor de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, la fecha y hora de la <xref:System.DateTimeOffset> objeto está establecido en `dateTime`y su <xref:System.DateTimeOffset.Offset%2A> propiedad está establecida en 0.  
  
-   Si el valor de la <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, la fecha y hora de la <xref:System.DateTimeOffset> objeto está establecido en `dateTime`y su <xref:System.DateTimeOffset.Offset%2A> propiedad se establece igual que el desplazamiento de zona de horaria actual del sistema local.  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.%23ctor%28System.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="System.DateTimeOffset.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> do not have the same <see cref="P:System.DateTimeOffset.UtcDateTime" /> value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_Inequality%2A> método define el funcionamiento del operador de desigualdad para <xref:System.DateTimeOffset> objetos. Siempre devuelve el resultado opuesto de <xref:System.DateTimeOffset.op_Equality%2A>. El <xref:System.DateTimeOffset.op_Inequality%2A> método permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#8)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#8)]  
  
 Antes de evaluar la `left` y `right` operandos de igualdad, el operador convierte ambos valores en la hora Universal coordinada (UTC). La operación es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#4)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#4)]  
  
 En otras palabras, el <xref:System.DateTimeOffset.op_Inequality%2A> método determina si los dos <xref:System.DateTimeOffset> objetos representan distintos puntos en el tiempo. Compara directamente las fechas y horas ni los desplazamientos.  
  
 Los lenguajes que no admiten operadores personalizados pueden llamar el <xref:System.DateTimeOffset.Compare%2A> método en su lugar. Además, algunos lenguajes también pueden llamar el <xref:System.DateTimeOffset.op_Inequality%2A> método directamente, como en el ejemplo siguiente se muestra.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#9)]  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_LessThan%2A> método define el funcionamiento del operador para menor que <xref:System.DateTimeOffset> objetos. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#10)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#10)]  
  
 Antes de evaluar la `left` y `right` operandos, el operador convierte ambos operandos en hora Universal coordinada (UTC). La operación es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#8)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#8)]  
  
 Los lenguajes que no admiten operadores personalizados pueden llamar el <xref:System.DateTimeOffset.Compare%2A> método en su lugar. Además, algunos lenguajes también pueden llamar el <xref:System.DateTimeOffset.op_LessThan%2A> método directamente, como en el ejemplo siguiente se muestra.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#11)]  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As DateTimeOffset, right As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTimeOffset * DateTimeOffset -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="left" /> is earlier than the <see cref="P:System.DateTimeOffset.UtcDateTime" /> value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> método define la operación de la menor o igual al operador para <xref:System.DateTimeOffset> objetos. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#12)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#12)]  
  
 Los lenguajes que no admiten operadores personalizados pueden llamar el <xref:System.DateTimeOffset.Compare%2A> método en su lugar. Algunos lenguajes también pueden llamar el <xref:System.DateTimeOffset.op_LessThanOrEqual%2A> método directamente, como en el ejemplo siguiente se muestra.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#13)]  
  
 Antes de evaluar la `left` y `right` operandos, el operador convierte ambos valores en la hora Universal coordinada (UTC). La operación es equivalente a la siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Syntax#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/cs/Syntax.cs#9)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Syntax/vb/Syntax.vb#9)]  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Compare%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified <see cref="T:System.DateTimeOffset" /> or <see cref="T:System.TimeSpan" /> object from a <see cref="T:System.DateTimeOffset" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (left As DateTimeOffset, right As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * DateTimeOffset -&gt; TimeSpan" Usage="left - right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The minuend.</param>
        <param name="right">The subtrahend.</param>
        <summary>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</summary>
        <returns>An object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_Subtraction%2A> método define la operación de resta para <xref:System.DateTimeOffset> objetos. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#14)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#14)]  
  
 Los lenguajes que no admiten operadores personalizados ni sobrecarga de operadores pueden llamar el <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> método en su lugar.  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset operator - (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset operator -(DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTimeOffset * TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset - timeSpan" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time object to subtract from.</param>
        <param name="timeSpan">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</summary>
        <returns>An object that is equal to the value of <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.op_Subtraction%2A> método define la operación de resta para <xref:System.DateTimeOffset> objetos. Permite que el código como el siguiente:  
  
 [!code-csharp[System.DateTimeOffset.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/cs/Operators.cs#15)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Operators/vb/Operators.vb#15)]  
  
 Los lenguajes que no admiten operadores personalizados ni sobrecarga de operadores pueden llamar el <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método en su lugar.  
  
 El método equivalente para este operador es <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>.]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <altmember cref="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <summary>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTimeOffset.Parse%28System.String%29> analiza una cadena con tres elementos que pueden aparecer en cualquier orden y están delimitados por espacios en blanco. Estos tres elementos son como se muestra en la tabla siguiente.  
  
|Elemento|Ejemplo|  
|-------------|-------------|  
|\<Fecha >|"2/10/2007"|  
|\<Hora >|"1:02:03 P.M."|  
|\<Desplazamiento >|"-7:30"|  
  
 Aunque cada uno de estos elementos es opcional, \<desplazamiento > no puede aparecer por sí mismo. Debe proporcionarse junto con cualquiera \<fecha > o \<tiempo >. Si \<fecha > falta, su valor predeterminado valor es el día actual. Si \<tiempo > falta, su valor predeterminado es de valor 12:00:00 AM. Si \<fecha > está presente, pero su año componente consta de dos dígitos, se convierte en un año de calendario actual de la referencia cultural actual en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Si \<desplazamiento > falta, su valor predeterminado es de valor el desplazamiento de la zona horaria local. \<Desplazamiento > puede representar un desplazamiento positivo o negativo de hora Universal coordinada (UTC). En cualquier caso, \<desplazamiento > debe incluir un símbolo de signo.  
  
 El `input` cadena se analiza utilizando la información de formato en un <xref:System.Globalization.DateTimeFormatInfo> objeto que se inicializa para la referencia cultural actual. Para analizar una cadena que contiene un formato designado que no se corresponde necesariamente con el formato de la referencia cultural actual, use el <xref:System.DateTimeOffset.ParseExact%2A> método y proporcione un especificador de formato.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTimeOffset.Parse%28System.String%29> método para analizar varias cadenas de fecha y hora. En el ejemplo se incluye las salidas de 22 de marzo de 2007, en un sistema cuya referencia cultural es en-us.  
  
 [!code-csharp[System.DateTimeOffset.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#1)]
 [!code-vb[System.DateTimeOffset.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific format information about <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método analiza una cadena con tres elementos que pueden aparecer en cualquier orden y están delimitados por espacios en blanco. Estos tres elementos se muestran en la tabla siguiente.  
  
|Elemento|Ejemplo|  
|-------------|-------------|  
|\<Fecha >|"2/10/2007"|  
|\<Hora >|"1:02:03 P.M."|  
|\<Desplazamiento >|"-7:30"|  
  
 Aunque cada uno de estos elementos es opcional, \<desplazamiento > no puede aparecer por sí mismo. Debe proporcionarse junto con cualquiera \<fecha > o \<tiempo >. Si \<fecha > falta, su valor predeterminado valor es el día actual. Si \<fecha > está presente, pero su año componente consta de dos dígitos, se convierte en un año en el `provider` calendario actual del parámetro en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Si \<tiempo > falta, su valor predeterminado es de valor 12:00:00 AM. Si \<desplazamiento > falta, su valor predeterminado es de valor el desplazamiento de la zona horaria local. \<Desplazamiento > puede representar un desplazamiento positivo o negativo de hora Universal coordinada (UTC). En cualquier caso, \<desplazamiento > debe incluir un símbolo de signo.  
  
 El formato de estos tres elementos se define mediante el `formatProvider` parámetro, que puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo formato se usa en la `input` parámetro. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato usado en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatprovider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El signo positivo o negativo usado en \<desplazamiento > debe ser + o -. No está definido por el <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> o <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propiedades de la <xref:System.Globalization.NumberFormatInfo> objeto de la `formatProvider` parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se analiza la fecha y cadenas de hora que tienen el formato para la referencia cultural fr-fr y mostrarlos con el sistema local predeterminada en-de la referencia cultural.  
  
 [!code-csharp[System.DateTimeOffset.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#2)]
 [!code-vb[System.DateTimeOffset.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As ReadOnlySpan(Of Char), Optional formatProvider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset Parse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.Parse (input, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific format information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método analiza una cadena con tres elementos que pueden aparecer en cualquier orden y están delimitados por espacios en blanco. Estos tres elementos se muestran en la tabla siguiente.  
  
|Elemento|Ejemplo|  
|-------------|-------------|  
|\<Fecha >|"2/10/2007"|  
|\<Hora >|"1:02:03 P.M."|  
|\<Desplazamiento >|"-7:30"|  
  
 Aunque cada uno de estos elementos es opcional, \<desplazamiento > no puede aparecer por sí mismo. Debe proporcionarse junto con cualquiera \<fecha > o \<tiempo >. Si \<fecha > falta, su valor predeterminado valor es el día actual. Si \<fecha > está presente, pero su año componente consta de dos dígitos, se convierte en un año en el `provider` calendario actual del parámetro en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Si \<tiempo > falta, su valor predeterminado es de valor 12:00:00 AM. Si \<desplazamiento > falta, su valor predeterminado valor es el desplazamiento de la zona horaria local, o <xref:System.TimeSpan.Zero?displayProperty=nameWithType> si la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> se expresa en el `styles` parámetro. Si \<desplazamiento > está presente, puede representar un desplazamiento positivo o negativo de hora Universal coordinada (UTC). En cualquier caso, \<desplazamiento > debe incluir un símbolo de signo.  
  
 El formato de estos tres elementos se define mediante el `formatProvider` parámetro, que puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo formato se usa en la `input` parámetro. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato usado en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 También se puede incluir entre cada elemento por espacio en blanco inicial o final y el \<fecha > y \<tiempo > elementos pueden incluir espacios en blanco internos (por ejemplo, 6:00:00). Solo el \<desplazamiento > componente no puede incluir espacios en blanco internos.  
  
 Si `formatprovider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El signo positivo o negativo usado en \<desplazamiento > debe ser + o -. No está definido por el <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> o <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propiedades de la <xref:System.Globalization.NumberFormatInfo> objeto devuelto por la `formatProvider` parámetro.  
  
 La siguiente tabla muestra los miembros de la <xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> enumeración que se admiten.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza la cadena representada por `input` y, si es necesario, lo convierte a UTC. Es equivalente a analizar una cadena y, a continuación, llamar a la <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> método devuelto <xref:System.DateTimeOffset> objeto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Aunque sea válido, este valor se omite. Espacio en blanco interno se permite en el \<fecha > y \<tiempo > elementos.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Aunque sea válido, este valor se omite. Espacios en blanco iniciales se permiten delante de cada componente en la cadena analizada.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Aunque sea válido, este valor se omite. Se permite el espacio en blanco final delante de cada componente en la cadena analizada.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Éste es el comportamiento predeterminado. No se puede invalidar proporcionando más restrictiva <xref:System.Globalization.DateTimeStyles> valor de enumeración, como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Indica que, si la `input` parámetro no tiene un \<desplazamiento > elemento, se debe proporcionar el desplazamiento de la zona horaria local. Éste es el comportamiento predeterminado de la <xref:System.DateTimeOffset.Parse%2A> método.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Indica que, si la `input` parámetro no tiene un \<desplazamiento > elemento, debe proporcionar el desplazamiento de UTC (00:00).|  
|<xref:System.Globalization.DateTimeStyles.None>|Aunque sea válido, este valor se omite y no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Dado que la <xref:System.DateTimeOffset> estructura no incluye un `Kind` este valor de la propiedad no tiene ningún efecto.|  
  
 Solo el <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> valor no es compatible. Un <xref:System.ArgumentException> se produce si este valor se incluye en el `styles` parámetro.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el efecto de pasar el <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType>, <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType>, y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> valores a la `styles` parámetro de la <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
 [!code-csharp[System.DateTimeOffset.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/cs/ParseExamples.cs#3)]
 [!code-vb[System.DateTimeOffset.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Parse/vb/ParseExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  -or-  <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <altmember cref="Overload:System.DateTimeOffset.TryParse" />
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent. The format of the string representation must match a specified format exactly.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the expected format of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> método analiza la representación de cadena de una fecha, que debe estar en el formato definido por el `format` parámetro. También requiere que el \<fecha >, \<tiempo >, y \<desplazamiento > los elementos de la representación de cadena de una fecha y hora aparecen en el orden especificado por `format`. Si el `input` cadena no coincide con este `format` parámetro, el método produce una <xref:System.FormatException>.  En cambio, el <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha en cualquiera de los formatos reconocidos por el proveedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. <xref:System.DateTimeOffset.Parse%2A> También permite la \<fecha >, \<tiempo >, y \<desplazamiento > elementos de la representación de cadena de una fecha y hora en aparecer en cualquier orden.  
  
 El `format` parámetro es una cadena que contiene un especificador de formato estándar único o uno o varios especificadores de formato personalizado que definen el formato requerido de la `input` parámetro. Para obtener más información sobre los códigos de formato válidos, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` incluye la `z`, `zz`, o `zzz` especificadores de formato personalizado para indicar que un desplazamiento debe estar presente en `input`, ese desplazamiento debe incluir un signo negativo o un signo positivo. Si el inicio de sesión no está presente, el método produce una <xref:System.FormatException>.  
  
 Si `format` requiere que `input` contenga una fecha pero no una hora, resultante <xref:System.DateTimeOffset> objeto se le asigna una hora de la medianoche (0: 00:00). Si `format` requiere que `input` contenga una hora pero no una fecha, resultante <xref:System.DateTimeOffset> objeto se asigna la fecha actual en el sistema local. Si `format` no requiere que `input` contienen un desplazamiento resultante <xref:System.DateTimeOffset> se le asigna el desplazamiento de zona horaria del sistema local.  
  
 La fecha en particular y símbolos de tiempo y las cadenas usadas en `input` definido por el `formatProvider` parámetro, tal y como es el formato exacto de `input` si `format` es una cadena de especificador de formato estándar. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural en función del `input` se interpreta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatprovider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método con especificadores de formato estándar y personalizados y la referencia cultural de todos los idiomas para analizar varias cadenas de fecha y hora.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.  -or-  <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  -or-  <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="format" /> is an empty string.  -or-  The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTimeOffset.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTimeOffset" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, format, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the expected format of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha, que debe estar en el formato definido por el `format` parámetro. También requiere que el \<fecha >, \<tiempo >, y \<desplazamiento > los elementos de la representación de cadena de una fecha y hora aparecen en el orden especificado por `format`. Si el `input` cadena no coincide con el patrón de la `format` parámetro, con las variaciones definidas por el `styles` parámetro, el método produce una <xref:System.FormatException>.  En cambio, el <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha en cualquiera de los formatos reconocidos por el proveedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. <xref:System.DateTimeOffset.Parse%2A> También permite la \<fecha >, \<tiempo >, y \<desplazamiento > elementos de la representación de cadena de una fecha y hora en aparecer en cualquier orden.  
  
 El `format` parámetro es una cadena que contiene un especificador de formato estándar único o uno o varios especificadores de formato personalizado que definen el modelo necesario de la `input` parámetro. Para obtener más información sobre los códigos de formato válidos, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` incluye la `z`, `zz`, o `zzz` especificadores de formato personalizado para indicar que un desplazamiento debe estar presente en `input`, ese desplazamiento debe incluir un signo negativo o un signo positivo. Si el inicio de sesión no está presente, el método produce una <xref:System.FormatException>.  
  
 Si `format` requiere que `input` contenga una fecha pero no una hora, resultante <xref:System.DateTimeOffset> objeto se le asigna una hora de la medianoche (0: 00:00). Si `format` requiere que `input` contenga una hora pero no una fecha, resultante <xref:System.DateTimeOffset> objeto se asigna la fecha actual en el sistema local. Si `format` no requiere que `input` contenga un desplazamiento, el desplazamiento del resultante <xref:System.DateTimeOffset> objeto depende del valor de la `styles` parámetro. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeLocal>, el desplazamiento de la zona horaria local se asigna a la <xref:System.DateTimeOffset> objeto. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, el desplazamiento de hora Universal coordinada (UTC), o + 00:00, se asigna a la <xref:System.DateTimeOffset> objeto. Si no se especifica ninguno de estos valores, se utiliza el desplazamiento de la zona horaria local.  
  
 La fecha en particular y símbolos de tiempo y las cadenas usadas en `input` definido por el `formatProvider` parámetro. Lo mismo puede decirse de formato preciso de `input`si `format` es una cadena de especificador de formato estándar. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural en función del `input` se interpreta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define los símbolos y el formato en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatprovider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro define si se permite el espacio en blanco en la cadena de entrada, indica cómo se analizan las cadenas sin un componente de desplazamiento explícito y admite la conversión de UTC como parte de la operación de análisis. Todos los miembros de la <xref:System.Globalization.DateTimeStyles> enumeración se admiten excepto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. En la tabla siguiente se muestra el efecto de cada miembro admitido.  
  
|Miembro `DateTimeStyles`|Comportamiento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `input` y, si es necesario, lo convierte a UTC. Es equivalente a analizar una cadena y, a continuación, llamar a la <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> método devuelto <xref:System.DateTimeOffset> objeto.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si `format` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de la zona horaria local. Este es el valor predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si `format` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espacios en blanco internos no especificados por `format`. Espacio en blanco adicional pueden aparecer entre los componentes de fecha y hora y dentro de los componentes individuales y se omite al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` para incluir espacios iniciales no especificados por `format`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` para incluir espacios finales no especificados por `format`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espacios iniciales, finales e internos no especificados por `format`. Todos los caracteres de espacio en blanco adicionales no especificados en `format` se omiten al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que ese espacio en blanco adicional no está permitida en `input`. Espacio en blanco deben aparecer exactamente como se especifica en `format`. Éste es el comportamiento predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|No tiene ningún efecto porque el <xref:System.DateTimeOffset> estructura no incluye un `Kind` propiedad.|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método con especificadores de formato estándar y personalizados, la referencia cultural invariable y varios <xref:System.Globalization.DateTimeStyles> valores para analizar varias cadenas de fecha y hora.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  -or-  The <paramref name="styles" /> parameter includes an unsupported value.  -or-  The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.  -or-  <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  -or-  <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  <paramref name="format" /> is an empty string.  -or-  The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTimeOffset.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTimeOffset" Usage="System.DateTimeOffset.ParseExact (input, formats, formatProvider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formats">An array of format specifiers that define the expected formats of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha que coincide con cualquiera de los modelos asignados a la `formats` parámetro. Si el `input` cadena no coincide con cualquiera de estos patrones con cualquiera de las variaciones definidas por el `styles` parámetro, el método produce una <xref:System.FormatException>. Además de comparar `input` para varios modelos de formato, esta sobrecarga se comporta igual que el <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 El `formats` parámetro es una matriz de cadena cuyos elementos contienen un especificador de formato estándar único o uno o varios especificadores de formato personalizado que definen el modelo posibles de la `input` parámetro. Cuando se llama al método, `input` debe coincidir con uno de estos patrones. Para obtener más información sobre los códigos de formato válidos, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si el elemento coincidente en `formats` incluye la `z`, `zz`, o `zzz` especificadores de formato personalizado para indicar que un desplazamiento debe estar presente en `input`, ese desplazamiento debe incluir un signo negativo o un signo positivo. Si el inicio de sesión no está presente, el método produce una <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Mediante el `formats` parámetro de esta sobrecarga para especificar varios formatos puede ayudar a reducir la frustración que muchos usuarios experimentan cuando introducen fechas y horas. En concreto, la capacidad de definir varios modelos de entrada permite que una aplicación controlar las representaciones de fecha y hora en que pueden incluir o no ceros iniciales en meses, días, horas, minutos y segundos. El ejemplo proporciona una ilustración de esto.  
  
 Si el elemento coincidente en `formats` requiere que `input` contenga una fecha pero no una hora, resultante <xref:System.DateTimeOffset> objeto se le asigna una hora de la medianoche (0: 00:00). Si el elemento coincidente en `formats` requiere que `input` contenga una hora pero no una fecha, resultante <xref:System.DateTimeOffset> objeto se asigna la fecha actual en el sistema local. Si el elemento coincidente en `formats` no requiere que `input` contenga un desplazamiento, el desplazamiento del resultante <xref:System.DateTimeOffset> objeto depende del valor de la `styles` parámetro. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeLocal>, el desplazamiento de la zona horaria local se asigna a la <xref:System.DateTimeOffset> objeto. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, el desplazamiento de hora Universal coordinada (UTC), o + 00:00, se asigna a la <xref:System.DateTimeOffset> objeto. Si no se especifica ninguno de estos valores, se utiliza el desplazamiento de la zona horaria local.  
  
 La fecha en particular y símbolos de tiempo y las cadenas usadas en `input` definido por el `formatProvider` parámetro. Lo mismo puede decirse de formato preciso de `input`, si el elemento correspondiente de `formats` es una cadena de especificador de formato estándar. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural en función del `input` se interpreta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define los símbolos y el formato en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatprovider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro define si se permite el espacio en blanco en la cadena de entrada, indica cómo se analizan las cadenas sin un componente de desplazamiento explícito y admite la conversión de UTC como parte de la operación de análisis. Todos los miembros de la <xref:System.Globalization.DateTimeStyles> enumeración se admiten excepto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. En la tabla siguiente se muestra el efecto de cada miembro admitido.  
  
|Miembro `DateTimeStyles`|Comportamiento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `input` y, si es necesario, lo convierte a UTC. Es equivalente a analizar una cadena y, a continuación, llamar a la <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> método devuelto <xref:System.DateTimeOffset> objeto.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si el elemento coincidente en `formats` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de la zona horaria local. Este es el valor predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si el elemento coincidente en `formats` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espacios en blanco internos no especificados por `format`. Espacio en blanco adicional pueden aparecer entre los componentes de fecha y hora y dentro de los componentes individuales (excepto el desplazamiento) y se omite al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` para incluir espacios iniciales no especificados por `formats`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` para incluir espacios finales no especificados por `formats`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espacios iniciales, finales e internos no especificados por `formats`. Todos los caracteres de espacio en blanco adicionales no especificados en el elemento coincidente en `formats` se omiten al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que ese espacio en blanco adicional no está permitida en `input`. Espacio en blanco deben aparecer exactamente como se especifica en un elemento determinado de `formats` para que se produzca una coincidencia. Éste es el comportamiento predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|No tiene ningún efecto porque el <xref:System.DateTimeOffset> estructura no incluye un `Kind` propiedad.|  
  
   
  
## Examples  
 En el ejemplo siguiente se define varios formatos de entrada para la representación de cadena de una fecha y la hora y el valor de desplazamiento y, a continuación, pasa la cadena especificada por el usuario para el <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.DateTimeOffset.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/cs/ParseExact.cs#3)]
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ParseExact/vb/ParseExact.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  -or-  <paramref name="styles" /> includes an unsupported value.  -or-  The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  -or-  <paramref name="input" /> does not contain a valid string representation of a date and time.  -or-  No element of <paramref name="formats" /> contains a valid format specifier.  -or-  The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTimeOffset.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.TryParseExact" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTimeOffset.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El segundo componente de la <see cref="T:System.DateTimeOffset" /> objeto, expresado como un valor entero entre 0 y 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Second%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 También puede crear una representación de cadena de un <xref:System.DateTimeOffset> segundo componente del objeto mediante una llamada a la <xref:System.DateTimeOffset.ToString%2A> método con la "s" o especificadores de formato personalizado "ss".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el segundo componente de un <xref:System.DateTimeOffset> objeto de tres maneras diferentes:  
  
-   Al recuperar el valor de la <xref:System.DateTimeOffset.Second%2A> propiedad.  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "s".  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> especificador de formato de método con "ss".  
  
 [!code-csharp[System.DateTimeOffset.Properties#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#14)]
 [!code-vb[System.DateTimeOffset.Properties#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified time or duration from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTimeOffset) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTimeOffset -&gt; TimeSpan" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">An object that represents the value to subtract.</param>
        <summary>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>An object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método convierte ambos <xref:System.DateTimeOffset> objetos en hora Universal coordinada (UTC) antes de calcular el intervalo de tiempo que los separa. Esto quita cualquier efecto que pueden tener diferentes desplazamientos a la hora UTC en la comparación.  
  
> [!NOTE]
>  Los lenguajes que admiten operadores personalizados, también puede realizar resta de fecha y hora mediante el operador de resta. Para obtener más información, consulte el <xref:System.DateTimeOffset.op_Subtraction%2A> método.  
  
 Dado que ni el actual <xref:System.DateTimeOffset> objeto ni la `value` parámetro representan la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada cuando resta fechas y horas.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la resta que usa el <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29> método.  
  
 [!code-csharp[System.DateTimeOffset.Methods#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#13)]
 [!code-vb[System.DateTimeOffset.Methods#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>An object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.DateTimeOffset.Subtract%2A> método para restar más de un tipo de intervalo de tiempo (días, horas, minutos, segundos o milisegundos) en una sola operación. Su comportamiento es idéntico a la <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> método, que define el operador de resta. El <xref:System.DateTimeOffset> estructura también admite los métodos de suma especializados (como <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, y <xref:System.DateTimeOffset.AddMinutes%2A>) que le permiten realizar la resta asignando un valor negativo al parámetro del método.  
  
> [!NOTE]
>  Este método devuelve un nuevo <xref:System.DateTimeOffset> objeto. No modifica el valor del objeto actual agregando `timeSpan` a la fecha y hora.  
  
 El <xref:System.DateTimeOffset.Subtract%2A> método no afecta al valor de la <xref:System.DateTimeOffset> del objeto <xref:System.DateTimeOffset.Offset%2A> propiedad. El valor devuelto <xref:System.DateTimeOffset> objeto tiene el mismo desplazamiento que el objeto original.  
  
 Dado que el actual <xref:System.DateTimeOffset> objeto no representa la fecha y hora en una zona horaria concreta, el <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29> método no tiene en cuenta las reglas de ajuste de una zona horaria determinada cuando realiza la resta.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la resta que usa el <xref:System.DateTimeOffset.Subtract%2A> método.  
  
 [!code-csharp[System.DateTimeOffset.Methods#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#14)]
 [!code-vb[System.DateTimeOffset.Methods#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</summary>
        <returns>A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:  <list type="table"><listheader><term> Return Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.  </description></item><item><term> Zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.  </description></item><item><term> Greater than zero  </term><description> The current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.  </description></item></list></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of an object has been completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTimeOffset.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</summary>
        <value>El número de pasos en el <see cref="T:System.DateTimeOffset" /> hora del reloj del objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Ticks%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 El valor de la <xref:System.DateTimeOffset.Ticks%2A> propiedad representa el número de intervalos de 100 nanosegundos transcurridos desde la medianoche de 12:00:00 del 1 de enero de 0001 (el valor de <xref:System.DateTimeOffset.MinValue>). No incluye los pasos que se debe agregar por segundos intercalares. Un nanosegundo es uno millonésimas de segundo; Hay diez millones de pasos en un segundo. El valor de la <xref:System.DateTimeOffset.Ticks%2A> propiedad varía entre `DateTimeOffset.MinValue.Ticks` a `DateTimeOffset.MaxValue.Ticks`.  
  
 Puede asignar el número de pasos a un <xref:System.DateTimeOffset> objeto mediante el uso de la <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> sobrecarga del constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se inicializa un <xref:System.DateTimeOffset> objeto aproximando el número de pasos en la fecha del 1 de julio de 2008 1:23:07. A continuación, muestra la fecha y el número de pasos representados por esa fecha en la consola.  
  
 [!code-csharp[System.DateTimeOffset.Properties#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#15)]
 [!code-vb[System.DateTimeOffset.Properties#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcDateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTimeOffset.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>Intervalo de tiempo de la fecha actual que ha transcurrido desde la medianoche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.TimeOfDay%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 El <xref:System.DateTimeOffset.TimeOfDay%2A> propiedad devuelve el componente de tiempo de un <xref:System.DateTimeOffset> objeto en forma de un <xref:System.TimeSpan> objeto. Es equivalente a la <xref:System.DateTime.TimeOfDay%2A?displayProperty=nameWithType> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.TimeOfDay%2A> propiedad extrae la hora y mostrarlo en la consola.  
  
 [!code-csharp[System.DateTimeOffset.Properties#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#16)]
 [!code-vb[System.DateTimeOffset.Properties#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTimeOffset.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuándo una aplicación crea, tiene acceso o escribe en un archivo.  
  
 El <xref:System.DateTimeOffset.ToFileTime%2A> método convierte actual <xref:System.DateTimeOffset> fecha y hora en hora UTC antes de realizar la conversión del objeto. En otras palabras, una llamada a la <xref:System.DateTimeOffset.ToFileTime%2A> método es equivalente a la llamada al método siguiente:  
  
```csharp
this.ToUtcDateTime().ToFileTime();  
```  
  
```vb  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>
        <altmember cref="M:System.DateTimeOffset.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</summary>
        <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para realizar la conversión a la hora local, el método convierte primero actual <xref:System.DateTimeOffset> fecha y hora en hora Universal coordinada (UTC) restando el desplazamiento desde el momento del objeto. A continuación, convierte la fecha y hora UTC a la hora local agregando el desplazamiento de zona horaria local. Al hacerlo así, tiene en cuenta las reglas de ajuste para la zona horaria local.  
  
 Tanto el valor del elemento actual <xref:System.DateTimeOffset> objeto y el valor de la <xref:System.DateTimeOffset> objeto devuelto por la llamada al método representan el mismo punto en el tiempo. Es decir, si ambos se pasan a la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método, el método devolverá `true`.  
  
 Si la conversión produce una hora que está fuera del intervalo de la <xref:System.DateTimeOffset> tipo, el <xref:System.DateTimeOffset.ToLocalTime%2A> método devuelve un <xref:System.DateTimeOffset> objeto que tiene la fecha y hora establecido en <xref:System.DateTimeOffset.MaxValue> o <xref:System.DateTimeOffset.MinValue> y el desplazamiento establecido como el desplazamiento de zona horaria local.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.ToLocalTime%2A> método para convertir un <xref:System.DateTimeOffset> valor a la hora local en la zona horaria estándar del Pacífico. También muestra la compatibilidad del método para reglas de ajuste de zona horaria local.  
  
 [!code-csharp[System.DateTimeOffset.Methods#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#15)]
 [!code-vb[System.DateTimeOffset.Methods#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOffset (offset As TimeSpan) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToOffset(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.ToOffset : TimeSpan -&gt; DateTimeOffset" Usage="dateTimeOffset.ToOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</summary>
        <returns>An object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their <see cref="M:System.DateTimeOffset.ToUniversalTime" /> methods return identical points in time) but whose <see cref="P:System.DateTimeOffset.Offset" /> property is set to <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.ToOffset%2A> método es una alternativa a llamar a la <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método. Puede ser útil para realizar conversiones simples de una zona horaria a otra cuando se conocen los desplazamientos de las zonas de la hora de la hora Universal coordinada (UTC). Sin embargo, dado que ninguna original <xref:System.DateTimeOffset> objeto ni el nuevo <xref:System.DateTimeOffset> objeto devuelto por la llamada al método están relacionados inequívocamente con una zona horaria determinada, el método no aplica ninguna regla de ajuste de zona horaria en la conversión.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.DateTimeOffset.ToOffset%2A> método para convertir un <xref:System.DateTimeOffset> el objeto a un <xref:System.DateTimeOffset> objeto con un desplazamiento diferente.  
  
 [!code-csharp[System.DateTimeOffset.ToOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/cs/ToOffset.cs#1)]
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToOffset/vb/ToOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  -or-  The resulting <see cref="T:System.DateTimeOffset" /> object has a <see cref="P:System.DateTimeOffset.DateTime" /> value later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than -14 hours.  -or-  <paramref name="offset" /> is greater than 14 hours.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTimeOffset.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
        <returns>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de este método es idéntico de la <xref:System.DateTime.ToString?displayProperty=nameWithType> método, salvo que incluye un espacio seguido por el desplazamiento anexado al final de la cadena. En otras palabras, da formato al resultado usando el patrón de fecha corta, el patrón mucho tiempo y el `zzz` cadena de formato personalizado, con cada elemento separado del elemento anterior por un espacio. Por ejemplo, si <xref:System.DateTime.ToString?displayProperty=nameWithType> devuelve un valor de 1/12/2008 6:15:50 PM, <xref:System.DateTimeOffset.ToString> devuelve un valor de 1/12/2008 6:15:50 PM -08:00 para una hora que es de ocho horas detrás de la hora Universal coordinada (UTC).  
  
 Este método usa la información de formato que deriva de la referencia cultural actual. Para obtener más información, consulta <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Otras sobrecargas de la <xref:System.DateTimeOffset.ToString%2A> método permiten especificar la referencia cultural cuyo formato que se va a usar como definir el modelo de salida de la <xref:System.DateTimeOffset> valor.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra las llamadas a la <xref:System.DateTimeOffset.ToString> método y muestra su salida en un sistema cuya referencia cultural actual es en-us.  
  
 [!code-csharp[System.DateTimeOffset.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#1)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTimeOffset.ToString" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural actual. Si el valor del elemento actual <see cref="T:System.DateTimeOffset" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.HijriCalendar" /> clase cuando la referencia cultural actual es árabe (Siria).  [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/ de csharp de código DateTimeOffset.ToString.argumentoutofrangeexception2.cs#2)] [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/ de vb de código System.DateTimeOffset.ToString.ArgumentOutOfRangeException/VB/DateTimeOffset.ToString.argumentoutofrangeexception2.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de este método es idéntico de la sobrecarga equivalente de la <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> método, salvo que incluye un espacio seguido por el desplazamiento anexado al final de la cadena. En otras palabras, da formato al resultado usando el patrón de fecha corta, el patrón mucho tiempo y el `zzz` cadena de formato personalizado, con cada elemento separado del elemento anterior por un espacio.  
  
 El formato de estos tres elementos se define mediante el `formatProvider` parámetro. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyas convenciones de formato se aplican a la cadena devuelta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato de la cadena devuelta.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatProvider` es `null`, <xref:System.Globalization.DateTimeFormatInfo> se usa el objeto asociado a la referencia cultural actual (vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un <xref:System.DateTimeOffset> objeto mediante <xref:System.Globalization.CultureInfo> objetos que representan la referencia cultural invariable, así como otras cuatro referencias culturales.  
  
 [!code-csharp[System.DateTimeOffset.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#2)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTimeOffset.ToString(System.IFormatProvider)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural representada por la <paramref name="formatProvider" /> parámetro. Su calendario está definido por el <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propiedad. Si el valor del elemento actual <see cref="T:System.DateTimeOffset" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.JapaneseCalendar" /> clase.  [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/ de csharp de código DateTimeOffset.ToString.argumentoutofrangeexception1.cs#1)] [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/ de vb de código System.DateTimeOffset.ToString.ArgumentOutOfRangeException/VB/DateTimeOffset.ToString.argumentoutofrangeexception1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTimeOffset.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `format` parámetro debe contener un carácter especificador de formato único (vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modelo de formato personalizado (vea [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) que define el formato de la cadena devuelta. Si `format` es una cadena nula o vacía (""), el <xref:System.DateTimeOffset> valor se genera utilizando el formato predeterminado.  
  
 La siguiente tabla muestra el funcionamiento exacto de algunos especificadores de formato cuando se usa con <xref:System.DateTimeOffset>, que difiere de su comportamiento cuando se usa con <xref:System.DateTime>.  
  
|Especificador de formato existente|Nuevo comportamiento|  
|-------------------------------|------------------|  
|"K"|Diseñado para envío y recepción una fecha y hora. Con <xref:System.DateTimeOffset>, se asigna a "zzz" (el desplazamiento siempre se muestra con horas y minutos). Tenga en cuenta que "K" es un especificador de formato personalizado; no puede aparecer como el carácter único en `format`.|  
|"U"|No se admite.|  
|"r"|Convierte el <xref:System.DateTimeOffset> objeto a la hora Universal coordinada (UTC) y se genera mediante la cadena de formato personalizado `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Convierte el <xref:System.DateTimeOffset> objeto a la hora UTC y se genera con el formato `yyyy-MM-dd HH:mm:ssZ`.|  
  
 La fecha estándar restante y especificadores de formato de hora que se comportan igual con el <xref:System.DateTimeOffset.ToString%28System.String%29> método como lo hacen con la <xref:System.DateTime.ToString%2A> método.  
  
 Este método usa la información de formato que deriva de la referencia cultural actual. Para obtener más información, consulta <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un <xref:System.DateTimeOffset> objeto en la consola con cada uno de los especificadores de formato de hora y fecha estándar. Se da formato al resultado usando la en-de la referencia cultural.  
  
 [!code-csharp[System.DateTimeOffset.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#3)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTimeOffset.ToString(System.String)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural actual. Si el valor del elemento actual <see cref="T:System.DateTimeOffset" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.HebrewCalendar" /> clase cuando la referencia cultural actual es hebreo (Israel).  [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/ de csharp de código DateTimeOffset.ToString.argumentoutofrangeexception3.cs#3)] [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/ de vb de código System.DateTimeOffset.ToString.ArgumentOutOfRangeException/VB/DateTimeOffset.ToString.argumentoutofrangeexception3.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTimeOffset.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A format string.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `format` parámetro debe contener un carácter especificador de formato único (vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modelo de formato personalizado (vea [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ). Si `format` es una cadena nula o vacía (""), el <xref:System.DateTimeOffset> es objeto de salida con el formato predeterminado.  
  
 La siguiente tabla muestra el funcionamiento exacto de algunos especificadores de formato cuando se usa con <xref:System.DateTimeOffset>, que difiere de su comportamiento cuando se usa con <xref:System.DateTime>.  
  
|Especificador de formato existente|Nuevo comportamiento|  
|-------------------------------|------------------|  
|"K"|Diseñado para envío y recepción una fecha y hora. Con <xref:System.DateTimeOffset>, se asigna a "zzz" (el desplazamiento siempre se muestra con horas y minutos). Tenga en cuenta que "K" es un especificador de formato personalizado; no puede aparecer como el carácter único en `format`.|  
|"U"|No se admite.|  
|"r"|Convierte el <xref:System.DateTimeOffset> objeto a la hora Universal coordinada (UTC) y se genera mediante la cadena de formato personalizado `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Convierte el <xref:System.DateTimeOffset> valor a la hora UTC y se genera con el formato `yyyy-MM-dd HH:mm:ssZ`.|  
  
 La fecha estándar restante y especificadores de formato de hora que se comportan igual con el <xref:System.DateTimeOffset.ToString%28System.String%29> método como lo hacen con la <xref:System.DateTime.ToString%2A> método.  
  
 El patrón que se corresponde con los especificadores de formato estándar, así como los símbolos y nombres de los componentes de fecha y hora, se define por la `formatProvider` parámetro. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo formato se usa en `input`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato usado en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatProvider` es `null`, <xref:System.Globalization.DateTimeFormatInfo> se usa el objeto asociado a la referencia cultural actual (vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29> método para mostrar un <xref:System.DateTimeOffset> objeto utilizando una cadena de formato personalizado para varias referencias culturales diferentes.  
  
 [!code-csharp[System.DateTimeOffset.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/cs/ToString.cs#4)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la <paramref name="formatProvider" /> parámetro. Su calendario está definido por el <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propiedad. Si el valor del elemento actual <see cref="T:System.DateTimeOffset" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.UmAlQuraCalendar" /> clase.  [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tostring.argumentoutofrangeexception/cs/ de csharp de código DateTimeOffset.ToString.argumentoutofrangeexception4.cs#4)] [! [System.DateTimeOffset.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/ de vb de código System.DateTimeOffset.ToString.ArgumentOutOfRangeException/VB/DateTimeOffset.ToString.argumentoutofrangeexception4.vb#4)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTimeOffset" Usage="dateTimeOffset.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</summary>
        <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve un <xref:System.DateTimeOffset> cuyos <xref:System.DateTimeOffset.Offset%2A> propiedad se establece en cero.  
  
 Tanto el valor del elemento actual <xref:System.DateTimeOffset> objeto y el valor de la <xref:System.DateTimeOffset> objeto devuelto por la llamada al método representan el mismo punto en el tiempo. Es decir, si ambos se pasan a la <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método, el método devolverá `true`.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTimeOffset.ToUniversalTime%2A> método para convertir una hora local y otras horas en hora Universal coordinada (UTC).  
  
 [!code-csharp[System.DateTimeOffset.Methods#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/cs/Methods.cs#16)]
 [!code-vb[System.DateTimeOffset.Methods#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Methods/vb/Methods.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToLocalTime" />
        <altmember cref="M:System.DateTimeOffset.ToOffset(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeMilliseconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeMilliseconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeMilliseconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeMilliseconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeMilliseconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeMilliseconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeMilliseconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</summary>
        <returns>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de UNIX representa el número de segundos que han transcurrido desde 1970-01-01T00:00:00Z (1 de enero de 1970, hora UTC de 12:00 A.M.). Segundos intercalares no tiene en cuenta. Este método devuelve el número de milisegundos en la hora de Unix.  
  
 En primer lugar, este método convierte la instancia actual en una hora UTC antes de devolver el número de milisegundos durante su tiempo de Unix. Para los valores de fecha y hora anterior a 1970-01-01T00:00:00Z, este método devuelve un valor negativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeSeconds" />
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="ToUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public long ToUnixTimeSeconds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToUnixTimeSeconds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.ToUnixTimeSeconds" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUnixTimeSeconds () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToUnixTimeSeconds();" />
      <MemberSignature Language="F#" Value="member this.ToUnixTimeSeconds : unit -&gt; int64" Usage="dateTimeOffset.ToUnixTimeSeconds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.</summary>
        <returns>The number of seconds that have elapsed since 1970-01-01T00:00:00Z.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de UNIX representa el número de segundos que han transcurrido desde 1970-01-01T00:00:00Z (1 de enero de 1970, hora UTC de 12:00 A.M.). Segundos intercalares no tiene en cuenta.  
  
 En primer lugar, este método convierte la instancia actual en una hora UTC antes de devolver su hora de Unix. Para los valores de fecha y hora anterior a 1970-01-01T00:00:00Z, este método devuelve un valor negativo.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTimeOffset.ToUnixTimeSeconds%2A> método para devolver la hora de Unix de valores que sean iguales, poco antes y poco después de 1970-01-01T00:00:00Z.  
  
 [!code-csharp[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/cs/tounixtimeseconds1.cs#1)]
 [!code-vb[System.DateTimeOffset.ToUnixTimeSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetimeoffset.tounixtimeseconds/vb/tounixtimeseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)" />
        <altmember cref="M:System.DateTimeOffset.ToUnixTimeMilliseconds" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider formatProvider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional formatProvider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTimeOffset.TryFormat (destination, charsWritten, format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> método es similar a la <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=nameWithType> método, salvo que TI no produce una excepción si se produce un error en la conversión. Analiza una cadena con tres elementos que pueden aparecer en cualquier orden y están delimitados por espacios en blanco. Estos tres elementos se muestran en la tabla siguiente.  
  
|Elemento|Ejemplo|  
|-------------|-------------|  
|\<Fecha >|"2/10/2007"|  
|\<Hora >|"1:02:03 P.M."|  
|\<Desplazamiento >|"-7:30"|  
  
 Aunque cada uno de estos elementos es opcional, \<desplazamiento > no puede aparecer por sí mismo. Debe proporcionarse junto con cualquiera \<fecha > o \<tiempo >. Si \<fecha > falta, su valor predeterminado valor es el día actual. Si \<fecha > está presente, pero su año componente consta de dos dígitos, se convierte en un año de calendario actual de la referencia cultural actual en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Si \<tiempo > falta, su valor predeterminado es de valor 12:00:00 AM. Si \<desplazamiento > falta, su valor predeterminado es de valor el desplazamiento de la zona horaria local. Si \<desplazamiento > está presente, puede representar un desplazamiento positivo o negativo de hora Universal coordinada (UTC). En cualquier caso, \<desplazamiento > debe incluir un símbolo de signo o el método devuelve `false`.  
  
 El `input` cadena se analiza utilizando la información de formato en un <xref:System.Globalization.DateTimeFormatInfo> objeto inicializado para la referencia cultural actual. Para analizar una cadena que contiene un formato designado que no corresponde necesariamente al de la referencia cultural actual, use el <xref:System.DateTimeOffset.TryParseExact%2A> método y proporcione un especificador de formato.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.DateTimeOffset%40%29> método para analizar varias cadenas con diversos formatos de fecha y hora.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (input As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ input, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParse (input, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <c>input</c>.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método es similar a la <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, salvo que TI no produce una excepción si se produce un error en la conversión. El método analiza una cadena con tres elementos que pueden aparecer en cualquier orden y están delimitados por espacios en blanco. Estos tres elementos se muestran en la tabla siguiente.  
  
|Elemento|Ejemplo|  
|-------------|-------------|  
|\<Fecha >|"2/10/2007"|  
|\<Hora >|"1:02:03 P.M."|  
|\<Desplazamiento >|"-7:30"|  
  
 Aunque cada uno de estos elementos es opcional, \<desplazamiento > no puede aparecer por sí mismo. Debe proporcionarse junto con cualquiera \<fecha > o \<tiempo >. Si \<fecha > falta, su valor predeterminado valor es el día actual. Si \<fecha > está presente, pero su año componente consta de dos dígitos, se convierte en un año en el `provider` calendario actual del parámetro en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Si \<tiempo > falta, su valor predeterminado es de valor 12:00:00 AM. Si \<desplazamiento > falta, su valor predeterminado valor es el desplazamiento de la zona horaria local, o <xref:System.TimeSpan.Zero> si la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> o <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> se expresa en `styles`. Si \<desplazamiento > está presente, puede representar un desplazamiento positivo o negativo de hora Universal coordinada (UTC). En cualquier caso, \<desplazamiento > debe incluir un símbolo de signo o el método devuelve `false`.  
  
 El `input` cadena se analiza utilizando la información de formato específica de la referencia cultural en un <xref:System.Globalization.DateTimeFormatInfo> objeto proporcionado por el `formatProvider` parámetro. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo formato se usa en `input`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato que se usa en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Además, cada elemento puede estar delimitado por espacios en blanco iniciales o finales y el \<fecha > y \<tiempo > los componentes pueden incluir espacios en blanco internos (por ejemplo, 6:00:00). Solo el \<desplazamiento > componente no puede incluir espacios en blanco internos.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El signo positivo o negativo usado en \<desplazamiento > debe ser + o -. No está definido por el <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> o <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propiedades de la <xref:System.Globalization.NumberFormatInfo> objeto devuelto por la `formatprovider` del parámetro <xref:System.Globalization.CultureInfo.NumberFormat%2A> propiedad.  
  
 Los siguientes miembros de la <xref:System.Globalization.DateTimeStyles> enumeración son compatibles:  
  
|Miembro DateTimeStyles|Comentarios|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza la cadena representada por `input` y, si es necesario, lo convierte a UTC. Es equivalente a analizar una cadena y, a continuación, llamar al objeto devuelto <xref:System.DateTimeOffset.ToUniversalTime> método.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Aunque sea válido, este valor se omite. Espacio en blanco interno se permite en el \<fecha > y \<tiempo > componentes.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Aunque sea válido, este valor se omite. Espacios en blanco iniciales se permiten delante de cada componente en la cadena analizada.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Aunque sea válido, este valor se omite. Se permiten a los espacios en blanco finales delante de cada componente en la cadena analizada.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Éste es el comportamiento predeterminado. No se puede invalidar proporcionando más restrictiva <xref:System.Globalization.DateTimeStyles> valor de enumeración, como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Indica que, si la `input` parámetro no tiene un \<desplazamiento > elemento, se debe proporcionar el desplazamiento de la zona horaria local. Éste es el comportamiento predeterminado de la <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Indica que, si la `input` parámetro no tiene un \<desplazamiento > elemento, debe proporcionar el desplazamiento de UTC (00:00).|  
|<xref:System.Globalization.DateTimeStyles.None>|Aunque sea válido, este valor se omite y no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Dado que la <xref:System.DateTimeOffset> estructura no incluye un `Kind` este valor de la propiedad no tiene ningún efecto.|  
  
 Solo el <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> valor no es compatible. Un <xref:System.ArgumentException> se produce si este valor se incluye en el `styles` parámetro.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTimeOffset.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método con una variedad de <xref:System.Globalization.DateTimeStyles> valores para analizar algunas cadenas con diversos formatos de fecha y hora.  
  
 [!code-csharp[System.DateTimeOffset.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/cs/TryParse.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParse/vb/TryParse.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  -or-  <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <altmember cref="Overload:System.DateTimeOffset.Parse" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent. The format of the string representation must match a specified format exactly.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="format">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As ReadOnlySpan(Of Char), formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="formatProvider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, format As String, formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, System::String ^ format, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, format, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> parameter is <see langword="null" />, or does not contain a valid string representation of a date and time in the expected format defined by <c>format</c> and <c>provider</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método es similar a la <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, salvo que este método no produce una excepción si se produce un error en la conversión. Analiza la representación de cadena de una fecha y hora en que debe coincidir exactamente con el patrón especificado por el `format` parámetro. Si el `input` cadena no coincide con este modelo, con algunas posibles variaciones en el espacio en blanco definido por el `styles` produce un error de la operación de análisis de parámetro, y el método devuelve `false`.  
  
 El `format` parámetro es una cadena que contiene un especificador de formato estándar único o uno o varios especificadores de formato personalizado que definen el modelo necesario del `input`. Para obtener más información sobre los códigos de formato válidos, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si `format` incluye la `z`, `zz`, o `zzz` especificadores de formato personalizado para indicar que un desplazamiento debe estar presente en `input`, ese desplazamiento debe incluir un signo negativo o un signo positivo. Si el inicio de sesión no existe, se produce un error en la operación de análisis y el método devuelve `false`.  
  
 Si `format` requiere que `input` contenga una fecha pero no una hora, resultante <xref:System.DateTimeOffset> objeto se le asigna una hora de la medianoche (0: 00:00). Si `format` requiere que `input` contenga una hora pero no una fecha, resultante <xref:System.DateTimeOffset> objeto se asigna la fecha actual en el sistema local. Si `format` no requiere que `input` contenga un desplazamiento, el desplazamiento del resultante <xref:System.DateTimeOffset> objeto depende del valor de la `styles` parámetro. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeLocal>, el desplazamiento de la zona horaria local se asigna a la <xref:System.DateTimeOffset> objeto. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, el desplazamiento de hora Universal coordinada (UTC), o + 00:00, se asigna a la <xref:System.DateTimeOffset> objeto. Si no se especifica ninguno de estos valores, se utiliza el desplazamiento de la zona horaria local.  
  
 La fecha en particular y símbolos de tiempo y las cadenas usadas en `input` definido por el `formatProvider` parámetro. Lo mismo puede decirse con el modelo preciso de `input` si `format` es una cadena de especificador de formato estándar. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural en función del `input` se interpreta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define los símbolos y formatos estándar permiten en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatprovider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro define si se permite el espacio en blanco en la cadena de entrada, indica cómo se analizan las cadenas sin un componente de desplazamiento explícito y admite la conversión de UTC como parte de la operación de análisis. Todos los miembros de la <xref:System.Globalization.DateTimeStyles> enumeración se admiten excepto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. En la tabla siguiente se muestra el efecto de cada miembro admitido.  
  
|Miembro `DateTimeStyles`|Comportamiento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `input` y, si es necesario, lo convierte a UTC. Es equivalente a analizar una cadena y, a continuación, llamar a la <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> método devuelto <xref:System.DateTimeOffset> objeto.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si `format` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de la zona horaria local. Éste es el comportamiento predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si `format` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espacios en blanco internos no especificados por format. Espacio en blanco adicional pueden aparecer entre los componentes de fecha y hora y dentro de los componentes individuales, que no sea el desplazamiento y se omite al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` para incluir espacios iniciales no especificados por `format`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` para incluir espacios finales no especificados por `format`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espacios iniciales, finales e internos no especificados por `format`. Todos los caracteres de espacio en blanco adicionales no especificados en `format` se omiten al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que ese espacio en blanco adicional no está permitida en `input`. Espacio en blanco deben aparecer exactamente como se especifica en `format`. Éste es el comportamiento predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|No tiene ningún efecto porque el <xref:System.DateTimeOffset> estructura no incluye un `Kind` propiedad.|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método con especificadores de formato estándar y personalizados, la referencia cultural invariable y varios <xref:System.Globalization.DateTimeStyles> valores para analizar varias cadenas de fecha y hora.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#1)]
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  -or-  <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTimeOffset.TryParseExact" /> devuelve <see langword="false" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTimeOffset.ParseExact" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (input As String, formats As String(), formatProvider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ input, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ formatProvider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTimeOffset.TryParseExact (input, formats, formatProvider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formats">An array that defines the expected formats of <c>input</c>.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about <c>input</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of <c>input</c>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" />, if the conversion failed. The conversion fails if the <c>input</c> does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by <c>format</c>, or if <c>formats</c> is <see langword="null" />. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método analiza la representación de cadena de una fecha que coincide con cualquiera de los modelos asignados a la `formats` matriz. Si el `input` cadena no coincide con cualquiera de estos patrones con cualquiera de las variaciones definidas por el `styles` produce un error de la operación de análisis de parámetro, y el método devuelve `false`. Además de comparar `input` a varias cadenas que contienen especificadores de formato, esta sobrecarga se comporta igual que el <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 El `formats` parámetro es una matriz de cadena cuyos elementos contienen un especificador de formato estándar único o uno o varios especificadores de formato personalizado que definen el posible modelo de `input`. Para obtener más información sobre los códigos de formato válidos, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md). Si el elemento coincidente en `formats` incluye la `z`, `zz`, o `zzz` especificadores de formato personalizado para indicar que un desplazamiento debe estar presente en `input`, ese desplazamiento debe incluir un signo negativo o un signo positivo. Si el inicio de sesión no existe, se produce un error en la operación de análisis y el método devuelve `false`.  
  
> [!IMPORTANT]
>  Mediante el `formats` parámetro de esta sobrecarga para especificar varios formatos puede ayudar a reducir la frustración que muchos usuarios experimentan cuando introducen fechas y horas. En concreto, la capacidad de definir varios modelos de entrada permite que una aplicación controlar las representaciones de fecha y hora en que pueden incluir o no ceros iniciales en meses, días, horas, minutos y segundos. El ejemplo proporciona una ilustración de esto.  
  
 Si el elemento coincidente en `formats` requiere que `input` contenga una fecha pero no una hora, resultante <xref:System.DateTimeOffset> objeto se le asigna una hora de la medianoche (0: 00:00). Si el elemento coincidente en `formats` requiere que input contenga una hora pero no una fecha, resultante <xref:System.DateTimeOffset> objeto se asigna la fecha actual en el sistema local. Si el elemento coincidente en `formats` no requiere que `input` contenga un desplazamiento, el desplazamiento del resultante <xref:System.DateTimeOffset> objeto depende del valor de la `styles` parámetro. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeLocal>, el desplazamiento de la zona horaria local se asigna a la <xref:System.DateTimeOffset> objeto. Si `styles` incluye <xref:System.Globalization.DateTimeStyles.AssumeUniversal>, el desplazamiento de hora Universal coordinada (UTC), o + 00:00, se asigna a la <xref:System.DateTimeOffset> objeto. Si no se especifica ninguno de estos valores, se utiliza el desplazamiento de la zona horaria local.  
  
 La fecha en particular y símbolos de tiempo y las cadenas usadas en `input` definido por el `formatProvider` parámetro. Lo mismo puede decirse con el modelo preciso de `input` si el elemento correspondiente de `formats` es una cadena de especificador de formato estándar. El `formatProvider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural en función del `input` se interpreta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define los símbolos y el formato en `input`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
 Si `formatprovider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro define si se permite el espacio en blanco en la cadena de entrada, indica cómo se analizan las cadenas sin un componente de desplazamiento explícito y admite la conversión de UTC como parte de la operación de análisis. Todos los miembros de la <xref:System.Globalization.DateTimeStyles> enumeración se admiten excepto <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>. En la tabla siguiente se muestra el efecto de cada miembro admitido.  
  
|Miembro `DateTimeStyles`|Comportamiento|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `input` y, si es necesario, lo convierte a UTC. Es equivalente a analizar una cadena y, a continuación, llamar a la <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=nameWithType> método devuelto <xref:System.DateTimeOffset> objeto.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Si el elemento coincidente en `formats` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de la zona horaria local. Este es el valor predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Si el elemento coincidente en `formats` no requiere que `input` contienen un valor de desplazamiento, el valor devuelto <xref:System.DateTimeOffset> objeto recibe el desplazamiento de UTC (+ 00:00).|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Permite `input` para incluir espacios en blanco internos no especificados por los elementos de `formats`. Espacio en blanco adicional pueden aparecer entre los componentes de fecha y hora y dentro de los componentes individuales (menos el desplazamiento) y se omite al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Permite `input` para incluir espacios no especificados por los elementos en iniciales `formats`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Permite `input` para incluir espacios finales no especificados por los elementos de `formats`. Se pasan por alto al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Permite `input` para incluir espacios iniciales, finales e internos no especificados por los elementos de `formats`. Todos los caracteres de espacio en blanco adicionales no especificados en el elemento coincidente en `formats` se omiten al analizar la cadena.|  
|<xref:System.Globalization.DateTimeStyles.None>|Indica que ese espacio en blanco adicional no está permitida en `input`. Espacio en blanco deben aparecer exactamente como se especifica en un elemento determinado en `formats` para que se produzca una coincidencia correcta. Éste es el comportamiento predeterminado.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|No tiene ningún efecto porque el <xref:System.DateTimeOffset> estructura no incluye un `Kind` propiedad.|  
  
   
  
## Examples  
 En el ejemplo siguiente se define varios formatos de entrada para la representación de cadena de una fecha y la hora y el valor de desplazamiento y, a continuación, pasa la cadena especificada por el usuario para el <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29> método.  
  
 [!code-csharp[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/cs/TryParseExact.cs#2)]
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.TryParseExact/vb/TryParseExact.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> is not supported.  -or-  <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTimeOffset.TryParseExact" /> devuelve <see langword="false" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTimeOffset.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTimeOffset" Usage="System.DateTimeOffset.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcDateTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcDateTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcDateTime : DateTime" Usage="System.DateTimeOffset.UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>La fecha de la hora Universal coordinada (UTC) y la hora del elemento actual <see cref="T:System.DateTimeOffset" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.UtcDateTime%2A> propiedad realiza una conversión doble:  
  
-   Convierte la fecha y hora del elemento actual <xref:System.DateTimeOffset> objeto a la hora Universal coordinada (UTC). La conversión se realiza restando el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad desde la fecha y hora del elemento actual <xref:System.DateTimeOffset> objeto.  
  
-   Convierte el <xref:System.DateTimeOffset> valor a un <xref:System.DateTime> valor.  
  
 El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTimeOffset.DateTime%2A> valor se establece en <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Recuperación del valor de la <xref:System.DateTimeOffset.UtcDateTime%2A> propiedad es equivalente a llamar a la actual <xref:System.DateTimeOffset> del objeto `ToUniversalTime.DateTime` propiedad, salvo que la <xref:System.DateTime.Kind%2A> propiedad de este último <xref:System.DateTime> valor es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.DateTimeOffset.UtcDateTime%2A> propiedad para mostrar un <xref:System.DateTimeOffset> valor y su hora UTC correspondiente.  
  
 [!code-csharp[System.DateTimeOffset.Properties#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#17)]
 [!code-vb[System.DateTimeOffset.Properties#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTimeOffset UtcNow { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTimeOffset" Usage="System.DateTimeOffset.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</summary>
        <value>Un objeto cuya fecha y hora es la hora Universal coordinada (UTC) actual y cuyo desplazamiento es <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.UtcNow%2A> propiedad calcula la hora Universal coordinada (UTC) actual en función de la hora del reloj del sistema local y un desplazamiento definido por la zona horaria del sistema local.  
  
 La precisión del componente de milisegundos de la hora UTC actual depende de la resolución del reloj del sistema. En Windows NT 3.5 y versiones posterior y los sistemas operativos Windows Vista, la resolución del reloj es aproximadamente de 10 a 15 milisegundos.  
  
   
  
## Examples  
 En el ejemplo siguiente se ilustra la relación entre la hora Universal coordinada (UTC) y la hora local.  
  
 [!code-csharp[System.DateTimeOffset.Properties#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#18)]
 [!code-vb[System.DateTimeOffset.Properties#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.UtcTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long UtcTicks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcTicks : int64" Usage="System.DateTimeOffset.UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</summary>
        <value>El número de pasos en el <see cref="T:System.DateTimeOffset" /> hora Universal coordinada (UTC del objeto de).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.DateTimeOffset.UtcTicks%2A> propiedad representa el número de intervalos de 100 nanosegundos transcurridos desde la medianoche de 12:00:00 del 1 de enero de 0001 (el valor de <xref:System.DateTimeOffset.MinValue>). No incluye los pasos que se debe agregar por segundos intercalares. Un nanosegundo es uno millonésimas de segundo; Hay diez millones de pasos en un segundo. El valor de la <xref:System.DateTimeOffset.UtcTicks%2A> propiedad varía entre `DateTimeOffset.MinValue.Ticks` a `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTimeOffset.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTimeOffset.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>El componente de año del elemento actual <see cref="T:System.DateTimeOffset" /> objeto, expresado como un valor entero entre 0 y 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTimeOffset.Year%2A> propiedad no se ve afectada por el valor de la <xref:System.DateTimeOffset.Offset%2A> propiedad.  
  
 También puede crear una representación de cadena de un <xref:System.DateTimeOffset> componente correspondiente al año del objeto mediante una llamada a la <xref:System.DateTimeOffset.ToString%2A> método con los especificadores de formato personalizado "y", "yy" o "yyyy".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el componente de año de un <xref:System.DateTimeOffset> valor de cuatro formas distintas:  
  
-   Al recuperar el valor de la <xref:System.DateTimeOffset.Year%2A> propiedad.  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "y".  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "aa".  
  
-   Mediante una llamada a la <xref:System.DateTimeOffset.ToString%28System.String%29> método con el especificador de formato "aaaa".  
  
 [!code-csharp[System.DateTimeOffset.Properties#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/cs/Properties.cs#19)]
 [!code-vb[System.DateTimeOffset.Properties#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTimeOffset.Properties/vb/Properties.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>