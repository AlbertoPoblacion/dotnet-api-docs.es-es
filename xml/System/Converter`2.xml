<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ebc43f69c05a59da70b74f44f3d48d9cc067743" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30726629" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">Tipo de objeto que se va a convertir.</typeparam>
    <typeparam name="TOutput">Tipo al que se va a convertir el objeto de entrada.</typeparam>
    <param name="input">Objeto que se va a convertir.</param>
    <summary>Representa un método que convierte un tipo de objeto a otro tipo.</summary>
    <returns>
      <typeparamref name="TOutput" /> que representa el <typeparamref name="TInput" /> convertido.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este delegado es utilizado por el <xref:System.Array.ConvertAll%2A> método de la <xref:System.Array> clase y la <xref:System.Collections.Generic.List`1.ConvertAll*> método de la <xref:System.Collections.Generic.List%601> clase para convertir cada elemento de la colección de un tipo a otro.  
  
   
  
## Examples  
 Esta sección contiene dos ejemplos de código. El primer ejemplo se muestra la <xref:System.Converter%602> delegado con el <xref:System.Array.ConvertAll%2A> método de la <xref:System.Array> clase y la segunda muestra el delegado con la <xref:System.Collections.Generic.List`1.ConvertAll*> método de la <xref:System.Collections.Generic.List%601> clase genérica.  
  
 Ejemplo 1  
  
 En el ejemplo de código siguiente se define un método denominado `PointFToPoint` que convierte un <xref:System.Drawing.PointF> estructura a un <xref:System.Drawing.Point> estructura. El ejemplo crea una matriz de <xref:System.Drawing.PointF> estructuras, crea un `Converter<PointF, Point>` delegar (`Converter(Of PointF, Point)` en Visual Basic) para representar el `PointFToPoint` método y pasa el delegado a la <xref:System.Array.ConvertAll%2A> método. El <xref:System.Array.ConvertAll%2A> método pasa cada elemento de la lista de entrada a la `PointFToPoint` método y coloca los elementos convertidos en una nueva lista de <xref:System.Drawing.Point> estructuras. Se muestran ambas listas.  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 Ejemplo 2  
  
 En el ejemplo de código siguiente se define un método denominado `PointFToPoint` que convierte un <xref:System.Drawing.PointF> estructura a un <xref:System.Drawing.Point> estructura. El ejemplo crea un <xref:System.Collections.Generic.List%601> de <xref:System.Drawing.PointF> estructuras, crea un `Converter\<PointF, Point>` delegar (`Converter(Of PointF, Point)` en Visual Basic) para representar el `PointFToPoint` método y pasa el delegado a la <xref:System.Collections.Generic.List`1.ConvertAll*> (método). El <xref:System.Collections.Generic.List`1.ConvertAll*> método pasa cada elemento de la lista de entrada a la `PointFToPoint` método y coloca los elementos convertidos en una nueva lista de <xref:System.Drawing.Point> estructuras. Se muestran ambas listas.  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>