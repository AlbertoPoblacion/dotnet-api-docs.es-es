<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="17335cf7a00859f035135c41af24fcd3718d5ca9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434301" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents an instant in time, typically expressed as a date and time of day.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Vínculos rápidos a código de ejemplo

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Este artículo incluye varios ejemplos que utilizan el `DateTime` tipo:

**Ejemplos de inicialización**      
 [Invocar un constructor](#initialization-01)     
 [Invocar el constructor predeterminado implícito](#initialization-02)     
 [Asignación de valor devuelto](#initialization-03)     
 [Analizando una cadena que representa una fecha y hora](#initialization-04)     
 [Sintaxis de Visual Basic para inicializar una fecha y hora](#initialization-05)     

**Formato `DateTime` objetos como cadenas**  
 [Utilice el formato de hora de fecha predeterminado](#formatting-01)     
 [Dar formato a una fecha y hora con una referencia cultural específica](#formatting-02)     
 [Dar formato a una fecha hora utilizando una cadena de formato estándar o personalizado](#formatting-03)     
 [Especifique una cadena de formato y una referencia cultural específica](#formatting-04)     
 [Dar formato a una hora de fecha con el estándar ISO 8601 para servicios web](#formatting-05)     

**Analizar cadenas como `DateTime` objetos**  
 [Use `Parse` o `TryParse` para convertir una cadena en una fecha y hora](#parsing-01)     
 [Use `ParseExact` o `TryParseExact` para convertir una cadena en un formato conocido](#parsing-02)     
 [Convertir la representación de cadena ISO 8601 en una fecha y hora](#parsing-03)     

**`DateTime` Resolución**  
 [Explorar la resolución de los valores de fecha y hora](#resolution-01)     
 [Comparación de igualdad dentro de una tolerancia](#comparison-01)     

**Referencia cultural y calendarios**  
 [Mostrar valores de fecha y hora con calendarios específicos de referencia cultural](#calendars-01)     
 [Analizar cadenas en función de un calendario específico de la referencia cultural](#calendars-02)     
 [Inicializar una fecha y hora de calendario de una referencia cultural concreta](#calendars-03)     
 [Acceso a las propiedades de fecha y hora con el calendario de una referencia cultural concreta](#calendars-04)     
 [Recuperación de la semana del año con calendarios específicos de referencia cultural](#calendars-05)     

**Persistencia**  
 [Conservar valores de fecha y hora como cadenas en la zona horaria local](#persistence-01)     
 [Conservar valores de fecha y hora como cadenas en una referencia cultural invariable formato de hora](#persistence-02)     
 [Conservar valores de fecha y hora como enteros](#persistence-03)     
 [Los valores persistente fecha y hora mediante el `XmlSerializer`](#persistence-04)     
 [Los valores persistente fecha y hora mediante el `BinaryFormatter`](#persistence-05)     
 [Conservar valores de fecha y hora con datos de zona horaria](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Vínculos rápidos a temas de la sección Comentarios.

Esta sección contiene temas para muchos usos comunes de los `DateTime` struct:
  
 [Inicializar un `DateTime` objeto](#initializing-a-datetime-object)   
 [Valores de DateTime y sus representaciones de cadena](#datetime-values-and-their-string-representations)   
 [Valores de fecha y hora de cadenas de análisis](#parsing-datetime-values-from-strings)   
 [Valores de fecha y hora](#datetime-values)   
 [Operaciones de fecha y hora](#datetime-operations)   
 [Resolución de fecha y hora](#datetime-resolution)   
 [Calendarios y los valores de fecha y hora](#datetime-values-and-calendars)   
 [Conservar valores de fecha y hora](#persisting-datetime-values)   
 [Frente a DateTime. Intervalo de tiempo](#datetime-vs-timespan)   
 [Comparación de igualdad dentro de la tolerancia](#comparing-for-equality-within-tolerance) [consideraciones de interoperabilidad COM](#com-interop-considerations)  
   
El <xref:System.DateTime> tipo de valor representa las fechas y horas con valores comprendidos entre 00:00:00 (medianoche), 1 de enero de 0001 D.c. (Era común) y 11:59:59 P.M., 31 de diciembre de 9999 D.C. (E.C.) en el calendario gregoriano.  
  
Valores de hora se miden en unidades de 100 nanosegundos denominadas pasos. Una fecha concreta es el número de pasos transcurridos desde la medianoche de 12:00 del 1 de enero de 0001 D.C. (E.C.) en el <xref:System.Globalization.GregorianCalendar> calendario. El número excluye los pasos que se debe agregar por segundos intercalares. Por ejemplo, un valor en pasos de 31241376000000000L representa la fecha del viernes, 01 de enero de 0100 medianoche (12:00:00). Un <xref:System.DateTime> valor siempre se expresa en el contexto explícito o calendario predeterminado.  
  
> [!NOTE]
>  Si está trabajando con un valor de pasos que desea convertir en algún otro intervalo de tiempo, como minutos o segundos, debe usar el <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, o <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> constante para realizar la conversión. Por ejemplo agregar el número de segundos representado por un número especificado de pasos a la <xref:System.DateTime.Second%2A> componente de un <xref:System.DateTime> valor, puede usar la expresión `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Puede ver el código fuente para todo el conjunto de ejemplos de este artículo en [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) o [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) desde el repositorio de documentos de GitHub.

> [!NOTE]
>  Una alternativa a la <xref:System.DateTime> estructura para trabajar con valores de fecha y hora en particular las zonas horarias es el <xref:System.DateTimeOffset> estructura. El <xref:System.DateTimeOffset> estructura almacena la información de fecha y hora en privado <xref:System.DateTime> campo y el número de minutos que esa fecha y hora es diferente a la hora UTC en privado <xref:System.Int16> campo. Esto hace posible que un <xref:System.DateTimeOffset> valor para que reflejen el tiempo en una zona horaria determinada, mientras que un <xref:System.DateTime> valor puede reflejar inequívocamente solo la hora UTC y la zona horaria local. Para obtener una explicación sobre cuándo utilizar el <xref:System.DateTime> estructura o el <xref:System.DateTimeOffset> estructura al trabajar con valores de fecha y hora, vea [Choosing Between DateTime, DateTimeOffset, TimeSpan y TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Inicializar un objeto de fecha y hora  

Puede asignar un valor inicial a un nuevo `DateTime` valor de muchas maneras diferentes:

- Llamar a un constructor, ninguna de ellas en especificar argumentos para los valores, o utilizar el constructor predeterminado implícito.
- Asignar un `DateTime` para el valor devuelto de una propiedad o método.
- Analizar un `DateTime` valor en su representación de cadena.
- Usar características de lenguaje específicas de Visual Basic para crear instancias de un `DateTime`. 

Los fragmentos de código siguiente muestran ejemplos de cada uno:

#### <a name="invoke-constructors"></a>Invocar constructores

Se llama a cualquiera de las sobrecargas de los <xref:System.DateTime> constructor que especifican elementos del valor de fecha y hora (por ejemplo, el año, mes y día o el número de pasos). El código siguiente crea una fecha concreta utilizando el <xref:System.DateTime> constructor especifica el año, mes, día, hora, minuto y segundo.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Se invoca el `DateTime` constructor predeterminado implícito de la estructura cuando desee que un `DateTime` inicializa en su valor predeterminado. (Para obtener detalles sobre el constructor predeterminado implícito de un tipo de valor, vea [tipos de valor](~/docs/csharp/language-reference/keywords/value-types.md).) Algunos compiladores también admiten la declaración de un <xref:System.DateTime> valor sin asignar explícitamente un valor a él. Creación de un valor sin una inicialización explícita también hace que el valor predeterminado. En el ejemplo siguiente se muestra la <xref:System.DateTime> constructor predeterminado implícito en C# y Visual Basic, así como un <xref:System.DateTime> declaración sin asignación en Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Asignar un valor calculado

Puede asignar el <xref:System.DateTime> un valor de fecha y hora devuelto por una propiedad o método del objeto. En el ejemplo siguiente se asigna la actual fecha y hora, la fecha actual de la hora Universal coordinada (UTC) y hora y la fecha actual a tres nuevas <xref:System.DateTime> variables.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analizando una cadena que representa una fecha y hora

El <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, y <xref:System.DateTime.TryParseExact%2A> todos los métodos convierten una cadena en su equivalente valor fecha y hora. Los ejemplos siguientes usan el <xref:System.DateTime.Parse%2A> y <xref:System.DateTime.ParseExact%2A> métodos para analizar una cadena y conviértala en un <xref:System.DateTime> valor. El segundo formato utiliza un formato compatible con la [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) estándar para una fecha y hora en formato de cadena que representa. Esta representación estándar a menudo se utiliza para transferir información de fecha de los servicios web.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

El <xref:System.DateTime.TryParse%2A> y <xref:System.DateTime.TryParseExact%2A> métodos indican si una cadena es una representación válida de un <xref:System.DateTime> valor y, si es así, realiza la conversión.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sintaxis específica del lenguaje de Visual Basic

La siguiente instrucción de Visual Basic inicializa un nuevo <xref:System.DateTime> valor.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Valores de DateTime y sus representaciones de cadena  

Internamente, todos <xref:System.DateTime> valores se representan como el número de pasos (el número de intervalos de 100 nanosegundos) que han transcurrido desde medianoche de 12:00:00 del 1 de enero de 0001. Los datos reales <xref:System.DateTime> valor es independiente de la manera en que ese valor aparece cuando se muestra. La apariencia de un <xref:System.DateTime> valor es el resultado de una operación de formato que convierte un valor en su representación de cadena.  
  
La apariencia de los valores de fecha y hora depende de la referencia cultural, normas internacionales, requisitos de la aplicación y preferencias personales. El <xref:System.DateTime> estructura proporciona flexibilidad para dar formato a valores de fecha y hora a través de las sobrecargas de <xref:System.DateTime.ToString%2A>. El valor predeterminado <xref:System.DateTime.ToString?displayProperty=nameWithType> método devuelve la representación de cadena de un valor de fecha y hora utilizando la fecha corta y el patrón de hora larga de la referencia cultural actual. En el ejemplo siguiente se utiliza el valor predeterminado <xref:System.DateTime.ToString?displayProperty=nameWithType> método. Muestra la fecha y hora utilizando la fecha corta y el patrón de hora larga para la referencia cultural actual. La referencia cultural en-US es la referencia cultural actual en el equipo en el que se ejecuta el ejemplo.  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Debe dar formato a fechas en una referencia cultural concreta para admitir escenarios de web donde el servidor puede estar en una referencia cultural diferente desde el cliente. Especificar la referencia cultural utilizando el <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para crear la fecha corta y la representación de mucho tiempo en una referencia cultural concreta. En el ejemplo siguiente se usa el <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para mostrar la fecha y la hora utilizando la fecha corta y el patrón de hora larga para la referencia cultural fr-FR.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Otras aplicaciones pueden necesitar representaciones de cadena diferentes de una fecha. El <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método devuelve la representación de cadena definida por un especificador de formato estándar o personalizado usando las convenciones de formato de la referencia cultural actual. En el ejemplo siguiente se usa el <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método para mostrar la fecha completa y el patrón de hora en-us de la referencia cultural, la referencia cultural actual en el equipo en el que se ejecuta el ejemplo.  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Por último, puede especificar la referencia cultural y el formato mediante la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método. En el ejemplo siguiente se usa el <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método para mostrar la fecha completa y el patrón de hora para la referencia cultural fr-FR.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

El <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> sobrecarga también puede usarse con una cadena de formato personalizado para especificar otros formatos. En el ejemplo siguiente se muestra cómo dar formato a una cadena con el [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato estándar que se utiliza a menudo para servicios web. El formato Iso 8601 no tiene una cadena de formato estándar correspondiente.

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Para obtener más información sobre cómo dar formato <xref:System.DateTime> valores, consulte [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Valores de fecha y hora de cadenas de análisis

Estas operaciones convierten la representación de cadena de una fecha y hora para una <xref:System.DateTime> valor. Normalmente, las cadenas de fecha y hora tienen dos usos diferentes en las aplicaciones:  
  
-   Una fecha y hora toma una amplia variedad de formas y refleja las convenciones de la referencia cultural actual o una referencia cultural concreta. Por ejemplo, una aplicación permite a un usuario cuya referencia cultural actual es en-US para introducir un valor de fecha como "15/12/2013" o "15 de diciembre de 2013". Permite que un usuario cuya referencia cultural actual es en-gb a un valor de fecha de entrada como "15/12/2013" o "15 de diciembre de 2013."  
  
-   Una fecha y hora se representa en un formato predefinido. Por ejemplo, una aplicación serializa una fecha como "20130103" independientemente de la referencia cultural en el que se ejecuta la aplicación. Una aplicación puede requerir especificar fechas en formato de fecha corta de la referencia cultural actual.
  
Usa el <xref:System.DateTime.Parse%2A> o <xref:System.DateTime.TryParse%2A> método para convertir una cadena de uno de los formatos de fecha y hora comunes usados por una referencia cultural para un <xref:System.DateTime> valor. En el ejemplo siguiente se muestra cómo se puede utilizar <xref:System.DateTime.TryParse%2A> para convertir las cadenas de fecha en diferentes formatos específicos de la referencia cultural para un <xref:System.DateTime> valor. Cambia la referencia cultural actual a inglés (Reino Unido) y las llamadas del <xref:System.DateTime.GetDateTimeFormats> método para generar una matriz de cadenas de fecha y hora. A continuación, pasa cada elemento de la matriz a la <xref:System.DateTime.TryParse%2A> método. El resultado del ejemplo muestra que el método de análisis fue capaz de convertir correctamente cada una de las cadenas de hora y fecha específica de la referencia cultural.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Usa el <xref:System.DateTime.ParseExact%2A> y <xref:System.DateTime.TryParseExact%2A> métodos para convertir una cadena que debe coincidir con un formato determinado o formatos para un <xref:System.DateTime> valor. Especifique una o varias cadenas de formato de fecha y hora como un parámetro para el método de análisis. En el ejemplo siguiente se usa el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método para convertir las cadenas que deben estar en un formato de "AAAAMMDD" o en un formato "HHmmss" a <xref:System.DateTime> valores.  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Un uso común de <xref:System.DateTime.ParseExact%2A> consiste en convertir una representación de cadena de un servicio web, normalmente en [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato estándar. El código siguiente muestra la cadena de formato correcto para usar:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Si no se puede analizar una cadena, la <xref:System.DateTime.Parse%2A> y <xref:System.DateTime.ParseExact%2A> métodos lanzan una excepción. El <xref:System.DateTime.TryParse%2A> y <xref:System.DateTime.TryParseExact%2A> métodos devuelven un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no. Debe utilizar el <xref:System.DateTime.TryParse%2A> o <xref:System.DateTime.TryParseExact%2A> métodos en escenarios donde el rendimiento es importante. La operación de análisis de cadenas de fecha y hora suele tener una tasa alta de error y control de excepciones es caro. Use estos métodos si las cadenas se envían los usuarios o procedentes de un origen desconocido. 
  
Para obtener más información acerca del análisis de los valores de fecha y hora, vea [analizar cadenas de fecha y hora](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Valores de fecha y hora

Descripciones de los valores de tiempo en el <xref:System.DateTime> tipo se suelen expresar utilizando el estándar de hora Universal coordinada (UTC). Hora Universal coordinada es el nombre reconocido internacionalmente para la hora del meridiano de Greenwich (GMT). Hora Universal coordinada es el tiempo que se mide en cero grados de latitud, el punto de origen de UTC. Horario de verano no es aplicable a la hora UTC.  
  
Es la hora local en relación con una zona horaria determinada. Una zona horaria está asociada con un desplazamiento de zona horaria. Un desplazamiento de zona horaria es el desplazamiento de la zona horaria, medido en horas desde el punto de origen de UTC. Además, la hora local, opcionalmente, se ve afectada por el horario de verano, que agrega o resta un ajuste de intervalo de tiempo. Hora local se calcula agregando el desplazamiento de zona horaria UTC y ajuste al horario de verano si es necesario. El desplazamiento de zona horaria en el punto de origen de UTC es cero.  
  
Hora UTC es adecuada para los cálculos, las comparaciones y almacenar fechas y horas en los archivos. Hora local es apropiada para su presentación en interfaces de usuario de aplicaciones de escritorio. Aplicaciones basadas en la zona horaria (por ejemplo, muchas aplicaciones Web) también necesitan trabajar con un número de otras zonas horarias.  
  
Si el <xref:System.DateTime.Kind%2A> propiedad de un <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, no se especifica si la hora representada es la hora local, hora UTC o una hora de otra zona horaria.  

### <a name="datetime-resolution"></a>Resolución de fecha y hora
  
> [!NOTE]
>  Como alternativa a la realización de fecha y hora aritmético en <xref:System.DateTime> valores para medir el tiempo transcurrido, puede usar el <xref:System.Diagnostics.Stopwatch> clase.  
  
El <xref:System.DateTime.Ticks%2A> propiedad expresa valores de fecha y hora en unidades de una diez millonésima de segundo. El <xref:System.DateTime.Millisecond%2A> propiedad devuelve las milésimas de segundo de un valor de fecha y hora. Con llamadas repetidas a la <xref:System.DateTime.Now%2A?displayProperty=nameWithType> depende de propiedad que se va a medir el tiempo transcurrido en el reloj del sistema. El reloj del sistema en los sistemas Windows 7 y Windows 8 con una resolución de aproximadamente 15 milisegundos. Esta resolución afecta a los intervalos de tiempo de pequeño inferior a 100 milisegundos. 
  
En el ejemplo siguiente se muestra la dependencia de los valores de hora y fecha actual de la resolución del reloj del sistema. En el ejemplo, 20 veces que se repite un bucle exterior y un bucle interno que sirve para retrasar el bucle exterior. Si el valor del contador de bucle externo es 10, una llamada a la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método inserta un retraso de cinco milisegundo. En el ejemplo siguiente se muestra el número de milisegundos devuelto por la `DateTime.Now.Milliseconds` cambios de propiedad solo después de llamar a <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Operaciones de fecha y hora  

Un cálculo utilizando un <xref:System.DateTime> estructura, como <xref:System.DateTime.Add%2A> o <xref:System.DateTime.Subtract%2A>, no modifica el valor de la estructura. En su lugar, devuelve un nuevo cálculo <xref:System.DateTime> estructura cuyo valor es el resultado del cálculo.  
  
Las operaciones de conversión entre zonas horarias (por ejemplo, entre la hora UTC y la hora local, o entre una zona horaria y otra) tienen horario de verano en cuenta, pero las operaciones aritméticas y de comparación no lo hacen.  
  
El <xref:System.DateTime> propia estructura ofrece una compatibilidad limitada para la conversión de una zona horaria a otra. Puede usar el <xref:System.DateTime.ToLocalTime%2A> método para convertir la hora UTC en hora local, o bien puede usar el <xref:System.DateTime.ToUniversalTime%2A> método para convertir de hora local a UTC. Sin embargo, un conjunto completo de métodos de conversión de zona horaria está disponible en la <xref:System.TimeZoneInfo> clase. Convertir la hora en cualquiera de las zonas horarias del mundo en la hora de cualquier otra zona horaria mediante estos métodos.  
  
Cálculos y las comparaciones de <xref:System.DateTime> objetos son significativos solo si los objetos representan horas de la misma zona horaria. Puede usar un <xref:System.TimeZoneInfo> objeto para representar un <xref:System.DateTime> tiempo del valor de la zona, aunque los dos están acoplados. Un <xref:System.DateTime> objeto no tiene una propiedad que devuelve un objeto que representa la zona horaria del ese valor de fecha y hora. El <xref:System.DateTime.Kind%2A> propiedad indica si un `DateTime` representa la hora UTC, hora local, o no está especificado. En una aplicación compatible con la zona horaria, debe basarse en algún mecanismo externo para determinar la zona horaria en la que un <xref:System.DateTime> se creó el objeto. Puede utilizar una estructura que contiene tanto el <xref:System.DateTime> valor y el <xref:System.TimeZoneInfo> objeto que representa la <xref:System.DateTime> zona horaria del valor. Para obtener más información sobre el uso de UTC en los cálculos y las comparaciones con <xref:System.DateTime> valores, consulte [realizar operaciones aritméticas con fechas y horas](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Cada <xref:System.DateTime> miembro utiliza implícitamente el calendario gregoriano para realizar su operación. Las excepciones son métodos que indican implícitamente un calendario. Puede tratarse de constructores que especifican un calendario y métodos con un parámetro derivan de <xref:System.IFormatProvider>, como <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Las operaciones de los miembros de la <xref:System.DateTime> tipo tomar en detalles de cuenta, como los años bisiestos y el número de días del mes.  

## <a name="datetime-values-and-calendars"></a>Calendarios y los valores de fecha y hora  

La biblioteca de clases de .NET Framework incluye una serie de clases de calendario, todos los cuales se derivan los <xref:System.Globalization.Calendar> clase.  Son estos:  
  
-   La clase <xref:System.Globalization.ChineseLunisolarCalendar>.  
-   La clase <xref:System.Globalization.EastAsianLunisolarCalendar>.  
-   La clase <xref:System.Globalization.GregorianCalendar>.  
-   La clase <xref:System.Globalization.HebrewCalendar>.  
-   La clase <xref:System.Globalization.HijriCalendar>.  
-   La clase <xref:System.Globalization.JapaneseCalendar>.  
-   La clase <xref:System.Globalization.JapaneseLunisolarCalendar>.  
-   La clase <xref:System.Globalization.JulianCalendar>.  
-   La clase <xref:System.Globalization.KoreanCalendar>.  
-   La clase <xref:System.Globalization.KoreanLunisolarCalendar>.  
-   La clase <xref:System.Globalization.PersianCalendar>.  
-   La clase <xref:System.Globalization.TaiwanCalendar>.  
-   La clase <xref:System.Globalization.TaiwanLunisolarCalendar>.  
-   La clase <xref:System.Globalization.ThaiBuddhistCalendar>.  
-   La clase <xref:System.Globalization.UmAlQuraCalendar>.  
  
Cada referencia cultural usa un calendario predeterminado definido por su de solo lectura <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> propiedad. Cada referencia cultural puede admitir uno o más calendarios definidos por su de solo lectura <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> propiedad. El calendario utilizado actualmente por un determinado <xref:System.Globalization.CultureInfo> objeto se define por su <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propiedad. Debe ser uno de los calendarios que se encuentra en la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> matriz.  
  
Calendario actual de la referencia cultural se usa en todas las operaciones de formato para esa referencia cultural. Por ejemplo, el calendario predeterminado de la referencia cultural budista tailandés es el calendario Era de budista tailandés, que se representa mediante la <xref:System.Globalization.ThaiBuddhistCalendar> clase.  Cuando un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural budista tailandés se usa en una fecha y la operación de formato de hora, el calendario Era de budista tailandés se utiliza de forma predeterminada. El calendario gregoriano se usa únicamente si la referencia cultural <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> se cambia la propiedad, como se muestra en el ejemplo siguiente:  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Calendario actual de la referencia cultural también se utiliza en todas las operaciones de análisis para esa referencia cultural, como se muestra en el ejemplo siguiente.  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Cree instancias de un <xref:System.DateTime> valor utilizando los elementos de fecha y hora (número de año, mes o día) de un calendario específico mediante una llamada a un [constructor DateTime](xref:System.DateTime.%23ctor%2A) que incluye un `calendar` parámetro y se le pasa un <xref:System.Globalization.CultureInfo.Calendar%2A>objeto que represente ese calendario. El ejemplo siguiente utiliza los elementos de fecha y hora de la <xref:System.Globalization.ThaiBuddhistCalendar> calendario.  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> constructores que no incluyen un `calendar` parámetro, se supone que los elementos de fecha y hora se expresan como unidades en el calendario gregoriano.  
  
Todos los demás <xref:System.DateTime> propiedades y métodos utilizan el calendario gregoriano. Por ejemplo, el <xref:System.DateTime.Year%2A?displayProperty=nameWithType> propiedad devuelve el año en el calendario gregoriano y el <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> método supone que la `year` parámetro es un año en el calendario gregoriano.  Cada <xref:System.DateTime> miembro que usa el calendario gregoriano tiene un miembro correspondiente de la <xref:System.Globalization.CultureInfo.Calendar%2A> clase que utiliza un calendario específico. Por ejemplo, el <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> método devuelve el año en un calendario específico y el <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> método interpreta la `year` parámetro como un número de año en un calendario específico. El ejemplo siguiente utiliza la <xref:System.DateTime> y los miembros correspondientes de la <xref:System.Globalization.ThaiBuddhistCalendar> clase.  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

El <xref:System.DateTime> estructura incluye un <xref:System.DateTime.DayOfWeek%2A> propiedad que devuelve el día de la semana en el calendario gregoriano. No incluye a un miembro que le permite recuperar el número de semana del año. Para recuperar la semana del año, llame el calendario individual <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> método. Esto se muestra en el ejemplo siguiente.  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Para obtener más información sobre las fechas y calendarios, vea [trabajar con calendarios](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Conservar valores de fecha y hora  

Puede conservar <xref:System.DateTime> valores de cuatro maneras:  
  
-   Se [convertirlas en cadenas](#persisting-values-as-strings) y conservar las cadenas.  
-   Se [convertirlos a valores enteros de 64 bits](#persisting-values-as-integers) (el valor de la <xref:System.DateTime.Ticks%2A> propiedad) y conservar los enteros.  
-   Se [serializar los valores de fecha y hora](#serializing-dateTime-values).  
-   Se [serializar los valores de fecha y hora junto con información de zona horaria](#serializing-datetime-and-time-zone-data).  
  
Debe asegurarse de que la rutina que restaura la <xref:System.DateTime> valores no perder datos o se produzca una excepción independientemente de la técnica que elija. <xref:System.DateTime> en caso de valores de ida y vuelta. Es decir, el valor original y el valor restaurado deben ser el mismo. Y si la versión original <xref:System.DateTime> valor representa un instante de tiempo único, debe identificar el mismo momento de tiempo cuando se restaura.  
  
#### <a name="persisting-values-as-strings"></a>Conservar los valores como cadenas  

Para restaurar correctamente <xref:System.DateTime> valores que se almacenan como cadenas, siga estas reglas:  
  
-   Realizar las mismas suposiciones sobre el formato específico de la referencia cultural cuando se restaura la cadena como cuando se conservan. Para asegurarse de que se pueda restaurar una cadena en un sistema cuya referencia cultural actual es diferente de la referencia cultural del sistema se guardó en, llame a la <xref:System.DateTime.ToString%2A> sobrecarga para guardar la cadena usando las convenciones de la referencia cultural invariable. Llame a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> sobrecarga para restaurar la cadena usando las convenciones de la referencia cultural invariable. No utilice nunca el <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> sobrecargas, que utilizan las convenciones de la referencia cultural del subproceso actual.  
  
-   Si la fecha representa un momento único de tiempo, asegúrese de que representa el mismo momento en el tiempo cuando se restauran, incluso en una zona horaria diferente. Convertir el <xref:System.DateTime> valor en hora Universal coordinada (UTC) antes de guardarla. También se puede serializar el valor junto con información de zona horaria. Para obtener más información acerca de este enfoque, consulte [datos de serialización de fecha y hora y zona horaria](#TimeZone).  
  
 El error más común que se realiza cuando se conserve <xref:System.DateTime> valores como cadenas es utilizar las convenciones de formato de la predeterminada o la referencia cultural actual. Se producirán problemas si es diferente al guardar y restaurar las cadenas de la referencia cultural actual. En el ejemplo siguiente se ilustra estos problemas. Guarda cinco fechas usando las convenciones de formato de la referencia cultural actual, que en este caso es inglés (Estados Unidos). Que se restauran las fechas mediante las convenciones de formato de una referencia cultural diferente que en este caso es inglés (Reino Unido). Dado que las convenciones de formato de las dos referencias culturales son diferentes, dos de las fechas no se pueden restaurar y las fechas de tres restantes se interpretan incorrectamente. Además, si los valores originales de fecha y hora representan una únicas momentos en el tiempo, el restaurada veces son incorrectas porque se pierde la información de zona horaria.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Para el envío y recepción <xref:System.DateTime> valores correctamente, siguen estos pasos:  
  
1.  Si los valores representan únicos instantes de tiempo, convertirlos de la hora local a UTC mediante una llamada a la <xref:System.DateTime.ToUniversalTime%2A> método.  
1.  Convertir las fechas en sus representaciones de cadena mediante una llamada a la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> o <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> de sobrecarga. Usar las convenciones de formato de la referencia cultural invariable mediante la especificación de <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como el `provider` argumento. Especificar que el valor debe ida y vuelta mediante la cadena de formato estándar "O" u "R".  
  
Para restaurar el persistente <xref:System.DateTime> valores sin pérdida de datos, siga estos pasos:  
  
1.  Analizar los datos mediante una llamada a la <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> de sobrecarga. Especifique <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como el `provider` argumento y utilice el mismo formato estándar cadena que se usa para la `format` argumento durante la conversión. Incluir el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> valor en el `styles` argumento.  
1.  Si el <xref:System.DateTime> valores representan momentos solo en tiempo, llame a la <xref:System.DateTime.ToLocalTime%2A> método para convertir la fecha analizada respecto a UTC a la hora local.  
  
En el ejemplo siguiente se usa la referencia cultural de todos los idiomas y la cadena de formato estándar "O" para asegurarse de que <xref:System.DateTime> guarda y restaura los valores representan el mismo momento en el tiempo sin tener en cuenta el sistema, la referencia cultural o la zona horaria de los sistemas de origen y de destino.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Conservar los valores como enteros  

Puede conservar una fecha y hora como un <xref:System.Int64> valor que representa un número de pasos. En este caso, no tienes que tener en cuenta la referencia cultural de los sistemas el <xref:System.DateTime> se conserven y se restauren en valores.  
  
Para conservar un <xref:System.DateTime> valor como un entero:  
  
-   Si el <xref:System.DateTime> valores representan únicos momentos en el tiempo, convertirlos a UTC mediante una llamada a la <xref:System.DateTime.ToUniversalTime%2A> método.  
-   Recuperar el número de pasos representados por la <xref:System.DateTime> valor desde su <xref:System.DateTime.Ticks%2A> propiedad.  
  
Para restaurar un <xref:System.DateTime> valor que se ha guardado como un entero:  
  
1.  Crear instancias de un nuevo <xref:System.DateTime> objeto pasando el <xref:System.Int64> valor para el <xref:System.DateTime.%23ctor%28System.Int64%29> constructor.  
1.  Si el <xref:System.DateTime> valor representa un único momento en el tiempo, convertir a la hora UTC a la hora local mediante una llamada a la <xref:System.DateTime.ToLocalTime%2A> método.  
  
En el ejemplo siguiente se conserva una matriz de <xref:System.DateTime> valores enteros en un sistema de la zona horaria del Pacífico de EE. UU. Se restaura en un sistema en la zona UTC. El archivo que contiene los enteros incluye un <xref:System.Int32> valor que indica el número total de <xref:System.Int64> valores que siguen inmediatamente a él.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Serializar los valores de fecha y hora  

Puede conservar <xref:System.DateTime> valores mediante la serialización para una secuencia o archivo y, a continuación, restauración ellos a través de la deserialización. <xref:System.DateTime> se serializan los datos en algún formato de objeto especificado. Se restauran los objetos cuando se deserializan. Un formateador o serializador, como <xref:System.Xml.Serialization.XmlSerializer> o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, controla el proceso de serialización y deserialización. Para obtener más información sobre la serialización y los tipos de serialización compatible con .NET Framework, vea [serialización](~/docs/standard/serialization/index.md).
  
En el ejemplo siguiente se usa el <xref:System.Xml.Serialization.XmlSerializer> clase para serializar y deserializar <xref:System.DateTime> valores. Los valores representan todos los días del año bisiesto al siglo XXI. El resultado representa el resultado si se ejecuta el ejemplo en un sistema cuya referencia cultural actual es inglés (Reino Unido). Ya ha deserializado el <xref:System.DateTime> objeto propiamente dicho, el código no tiene que controlar las diferencias culturales de formatos de fecha y hora.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

El ejemplo anterior no incluye información de tiempo. Si un <xref:System.DateTime> valor representa un momento determinado y se expresa como una hora local, convertir de la hora local a UTC antes de serializar mediante una llamada a la <xref:System.DateTime.ToUniversalTime%2A> método. Una vez deserializarla, convertirlo a la hora UTC a la hora local mediante una llamada a la <xref:System.DateTime.ToLocalTime%2A> método. En el ejemplo siguiente se usa el <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> clase para serializar <xref:System.DateTime> datos en un sistema de la zona horaria del Pacífico Zona horaria estándar del Pacífico y para deserializar en un sistema de la zona horaria del Pacífico Zona estándar central.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Serializa los datos de fecha y hora y zona horaria  

En todos los ejemplos anteriores se supone que <xref:System.DateTime> valores se expresan como horas locales. El código convierte los valores entre la hora UTC y la hora local para que reflejen el mismo momento en el tiempo en los sistemas de origen y de destino. <xref:System.DateTime> valores también pueden reflejar momentos en el tiempo en una zona horaria que no sea local y la hora UTC. Dado que la <xref:System.DateTime> estructura no es compatible con la zona horaria, se debe serializar ambos el <xref:System.DateTime> valor y el <xref:System.TimeZoneInfo> objeto que representa la zona horaria. Crear un tipo cuyos campos incluyen tanto la <xref:System.DateTime> valor y su zona horaria. En el ejemplo siguiente se define un `DateWithTimeZone` estructura.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  El `DateWithTimeZone` se usa en los dos ejemplos siguientes, que serializar y deserializar una matriz de una estructura `DateWithTimeZone` objetos. Puede ver el código fuente para todo el conjunto de ejemplos de este artículo en [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) o [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) desde el repositorio de documentos de GitHub.
  
Mediante el uso de la `DateWithTimeZone` estructura, a continuación, puede conservar fecha y hora junto con información de zona horaria. En el ejemplo siguiente se usa el <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> clase para serializar una matriz de `DateWithTimeZone` objetos.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

El ejemplo siguiente llama a la <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> método para deshacer la serialización.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>Frente a DateTime. TimeSpan  

El <xref:System.DateTime> y <xref:System.TimeSpan> tipos de valor difieren en que un <xref:System.DateTime> representa un instante de tiempo, mientras que un <xref:System.TimeSpan> representa un intervalo de tiempo. Puede restar una instancia de <xref:System.DateTime> de otra para obtener un <xref:System.TimeSpan> objeto que representa el intervalo de tiempo entre ellos. Puede agregar un positivo <xref:System.TimeSpan> al actual <xref:System.DateTime> para obtener un <xref:System.DateTime> valor que representa una fecha futura.  
  
Puede agregar o restar un intervalo de tiempo de un <xref:System.DateTime> objeto. Intervalos de tiempo pueden ser positivo o negativo, y puede expresarse en unidades como pasos, segundos, o como un <xref:System.TimeSpan> objeto.  

### <a name="comparing-for-equality-within-tolerance"></a>Comparación de igualdad dentro de la tolerancia

Comparaciones de igualdad para <xref:System.DateTime> valores son exactos. Esto significa que dos valores se deben expresar como el mismo número de pasos que se consideran iguales. Que precisión suele ser innecesarios o incluso incorrectos para muchas aplicaciones. A menudo, desea probar si <xref:System.DateTime> objetos son **igual a aproximadamente**. 

En el ejemplo siguiente se muestra cómo comparar más o menos equivalente <xref:System.DateTime> . Acepta un pequeño margen de diferencia cuando se declaran como iguales.  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Consideraciones de interoperabilidad COM  

Un <xref:System.DateTime> valor que se transfiere a una aplicación COM, a continuación, se vuelve a transferir a una aplicación administrada, se dice que el envío y recepción. Sin embargo, un <xref:System.DateTime> no valor que especifica solo un tiempo de ida y vuelta como cabría esperar.  
  
Si se redondeo sólo una vez, por ejemplo, 3 P.M., la fecha y hora es el 30 de diciembre de 1899 de la era cristiana a 3:00 P.M., en lugar del 1 de enero de 0001 d. de c. a las 3:00 P.M. .NET Framework y COM suponen una fecha de forma predeterminada cuando se especifica solo una hora. Sin embargo, el sistema COM supone como fecha base del 30 de diciembre de 1899 de la era cristiana, mientras que .NET Framework supone una fecha base 1 de enero, 0001 d. de c.  
  
Cuando se pasa sólo una vez desde .NET Framework a COM, se realiza un procesamiento especial que convierte la hora en el formato utilizado por COM. Cuando se pasa sólo una vez desde COM a .NET Framework, no se realiza ningún procesamiento especial porque podrían dañar legítimas fechas y horas en o antes del 30 de diciembre de 1899. Si una fecha comienza su ida y vuelta desde COM, .NET Framework y COM conservan la fecha.  
  
El comportamiento de .NET Framework y COM significa que si la ida y vuelta de aplicación un <xref:System.DateTime> que sólo especifica una hora, la aplicación debe recordar modificar u omitir los datos erróneos desde la última <xref:System.DateTime> objeto.  
     
 ]]></format>
    </remarks>
    <threadsafe>Todos los miembros de este tipo son seguros para subprocesos. Los miembros que aparecen modificar el estado de instancia realmente devuelven una nueva instancia inicializada con el nuevo valor. Como con cualquier otro tipo, leer y escribir en una variable compartida que contiene una instancia de este tipo deben protegerse mediante un bloqueo para garantizar la seguridad para subprocesos.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra uno de los <xref:System.DateTime> constructores.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>ticks</c> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta `year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor usando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor.  
  
 La hora del día para resultante <xref:System.DateTime> es la medianoche (00: 00:00). La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> constructor para crear instancias de un <xref:System.DateTime> valor. Este ejemplo también muestra que esta sobrecarga crea un <xref:System.DateTime> valor cuyo componente de hora es igual a medianoche (o 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La hora del día para resultante <xref:System.DateTime> es la medianoche (00: 00:00). La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Los valores permitidos para `year`, `month`, y `day` dependen `calendar`. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos los <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como el calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales a sus <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor una <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de valor predeterminado de la referencia cultural actual para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor usando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor.  
  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%2A> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> and <c>second</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor usando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructor.  
  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Los valores permitidos para `year`, `month`, y `day` dependen `calendar`. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos los <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como el calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales a sus <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor una <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de valor predeterminado de la referencia cultural actual para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor usando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor.  
  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor usando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructor.  
  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Los valores permitidos para `year`, `month`, y `day` dependen `calendar`. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos los <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como el calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales a sus <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor una <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de valor predeterminado de la referencia cultural actual para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores permitidos para `year`, `month`, y `day` parámetros dependen del `calendar` parámetro. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 Para las aplicaciones en qué portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante reconocimiento, puede utilizar la correspondiente <xref:System.DateTimeOffset> constructor.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos los <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como el calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales a sus <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor una <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de valor predeterminado de la referencia cultural actual para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">A positive or negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.DateTime.Add%2A> método para agregar más de un tipo de intervalo de tiempo (días, horas, minutos, segundos o milisegundos) en una sola operación. El comportamiento de este método es idéntico del operador de suma. El <xref:System.DateTime> estructura también admite los métodos de suma especializados (como <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, y <xref:System.DateTime.AddMinutes%2A>) para cada intervalo de tiempo.  
  
 El <xref:System.DateTime.Add%2A> método tiene en cuenta los años bisiestos y el número de días del mes al realizar la aritmética de fecha.  
  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación. El <xref:System.DateTime.Kind%2A> propiedad del nuevo <xref:System.DateTime> instancia es el mismo que el de la instancia actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Add%2A> método. Calcula el día de la semana que 36 días (864 horas) en este momento.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional days. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria del `value` constituye la parte fraccionaria de un día. Por ejemplo, 4,5 equivale a 4 días, 12 horas, 0 minutos, 0 segundos, 0 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
 El <xref:System.DateTime.AddDays%2A> método tiene en cuenta los años bisiestos y el número de días del mes al realizar la aritmética de fecha.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddDays%2A> método para determinar el día de la semana 36 días después de la fecha actual.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional hours. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación. El <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto es el mismo que el de `value`.  
  
 La parte fraccionaria del `value` constituye la parte fraccionaria de una hora. Por ejemplo, 4,5 equivale a 4 horas, 30 minutos, 0 segundos, 0 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
 La conversión de intervalos de tiempo de menos de una hora en una fracción puede implicar una pérdida de precisión si el resultado es un decimal de repetición de no terminación. (Por ejemplo, un minuto es el 0,016667 de una hora). Si esto le resulta problemático, puede usar el <xref:System.DateTime.Add%2A> método, que le permite especificar más de un tipo de intervalo de tiempo en una única llamada al método y elimina la necesidad de convertir los intervalos de tiempo en partes fraccionarias de una hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddHours%2A> método para agregar un número de valores enteros y fraccionarios a una fecha y hora. También muestra la pérdida de precisión causado por el método se pasa un valor que incluye un componente de fracción.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional milliseconds. The <c>value</c> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria del `value` constituye la parte fraccionaria de un milisegundo. Por ejemplo, 4,5 equivale a 4 milisegundos y 5000 pasos, donde un milisegundo = 10000 pasos.  
  
 El `value` parámetro se redondea al entero más próximo.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddMilliseconds%2A> método para agregar un milisegundo y 1,5 milisegundos a un <xref:System.DateTime> valor. A continuación, se muestra cada nuevo valor y se muestra la diferencia entre él y el valor original. La diferencia se muestra como un intervalo de tiempo y como un número de pasos. El ejemplo deja claro que un milisegundo equivale a 10.000 pasos. También muestra que los milisegundos fraccionarios se redondean antes de realizar la suma; el <xref:System.DateTime> valor que es el resultado de sumar 1,5 milisegundos a la fecha original es 2 milisegundos mayores que la fecha original.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional minutes. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria del `value` constituye la parte fraccionaria de un minuto. Por ejemplo, 4,5 equivale a 4 minutos, 30 segundos, 0 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddMinutes%2A> método para agregar un número de valores enteros y fraccionarios a una fecha y hora.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of months. The <c>months</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime> objeto. En su lugar, devuelve un nuevo <xref:System.DateTime> objeto cuyo valor es el resultado de esta operación.  
  
 El <xref:System.DateTime.AddMonths%2A> método calcula el mes resultante y, a continuación, ajusta el año, teniendo en cuenta los años bisiestos y el número de días del mes, la parte del día del resultante <xref:System.DateTime> objeto. Si el día resultante no es un día válido del mes resultante, se utiliza el último día válido del mes resultante. Por ejemplo, el 31 de marzo + 1 mes = 30 de abril y el 31 de marzo - 1 mes = 28 de febrero de un año bisiesto y el 29 de febrero de un año bisiesto.  
  
 La parte de hora del día del resultante <xref:System.DateTime> objeto sigue siendo el mismo que esta instancia.  
  
   
  
## Examples  
 En el ejemplo siguiente se agrega entre cero y quince meses hasta el último día de diciembre de 2015. En este caso, el método AddMonths devuelve la fecha del último día de cada mes y controla correctamente los años bisiestos.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.  -or-  <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional seconds. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria del `value` constituye la parte fraccionaria de un segundo. Por ejemplo, 4,5 equivale a 4 segundos, 500 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddSeconds%2A> método para agregar 30 segundos y el número de segundos en un día en un <xref:System.DateTime> valor. A continuación, se muestra cada nuevo valor y se muestra la diferencia entre él y el valor original. La diferencia se muestra como un intervalo de tiempo y como un número de pasos.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A number of 100-nanosecond ticks. The <c>value</c> parameter can be positive or negative.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A number of years. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime> objeto. En su lugar, devuelve un nuevo <xref:System.DateTime> objeto cuyo valor es el resultado de esta operación.  
  
 El <xref:System.DateTime.AddYears%2A> método calcula el año resultante teniendo en cuenta los años bisiestos. La parte de mes y la hora del día del resultante <xref:System.DateTime> objeto sigue siendo el mismo que esta instancia.  
  
 Si la instancia actual representa el día bisiesto de un año bisiesto, el valor devuelto depende de la fecha de destino:  
  
-   Si `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> también es un año bisiesto, valor devuelto representa el día bisiesto de ese año. Por ejemplo, si se agrega cuatro años a 29 de febrero de 2012, la fecha devuelta es 29 de febrero de 2016.  
  
-   Si `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> no es un año bisiesto, valor devuelto representa el día antes del día bisiesto en ese año. Por ejemplo, si se agrega un año a 29 de febrero de 2012, la fecha devuelta es 28 de febrero de 2013.  
  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.DateTime.AddYears%2A> método con un <xref:System.DateTime> valor que representa un día bisiesto. Muestra la fecha para los años anteriores a quince y los años quince que siga el 29 de febrero de 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
        <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Value Type  </term><description> Condition  </description></listheader><item><term> Less than zero  </term><description><paramref name="t1" /> is earlier than <paramref name="t2" />.  </description></item><item><term> Zero  </term><description><paramref name="t1" /> is the same as <paramref name="t2" />.  </description></item><item><term> Greater than zero  </term><description><paramref name="t1" /> is later than <paramref name="t2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar la relación de `t1` a `t2`, el <xref:System.DateTime.Compare%2A> método compara la <xref:System.DateTime.Ticks%2A> propiedad de `t1` y `t2` pero omite su <xref:System.DateTime.Kind%2A> propiedad. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Compare%2A> método.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las dos sobrecargas de la <xref:System.DateTime.CompareTo%2A> método devuelve un número con signo que indica el valor relativo de esta instancia y el `value` argumento, como se muestra en la tabla siguiente.  
  
|Valor|Descripción|  
|-----------|-----------------|  
|Menor que cero|Esta instancia es anterior a `value`.|  
|Cero|Esta instancia es la misma que `value`.|  
|Mayor que cero|Esta instancia es posterior a `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to the current instance.</param>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar la relación de la instancia actual a `value`, <xref:System.DateTime.CompareTo%2A> método compara la <xref:System.DateTime.Ticks%2A> propiedad de la instancia actual y `value` pero omite su <xref:System.DateTime.Kind%2A> propiedad.  Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de sus <xref:System.DateTime.Kind%2A> propiedades.  
  
 Este método implementa el <xref:System.IComparable%601?displayProperty=nameWithType> interfaz y realiza ligeramente mejor que la <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> sobrecarga del método porque no tiene que convertir el `value` parámetro a un objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una instancia de tres <xref:System.DateTime> objetos, uno que representa el actual del día, otro que representa la fecha un año anterior y un tercero que representa la fecha un año en el futuro. A continuación, llama el <xref:System.DateTime.CompareTo%28System.DateTime%29> método y muestra el resultado de la comparación.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A boxed object to compare, or <see langword="null" />.</param>
        <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar la relación de la instancia actual a `value`, <xref:System.DateTime.CompareTo%2A> método compara la <xref:System.DateTime.Ticks%2A> propiedad de la instancia actual y `value` pero omite su <xref:System.DateTime.Kind%2A> propiedad. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de sus <xref:System.DateTime.Kind%2A> propiedades.  
  
 Cualquier instancia de <xref:System.DateTime>, independientemente de su valor, se considera mayor que `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.CompareTo%2A> método.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date component of this instance.</summary>
        <value>Nuevo objeto con la misma fecha que esta instancia y con el valor de hora establecido en la medianoche (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor es el mismo que el de la instancia actual.  
  
 Dado que la <xref:System.DateTime> tipo representa las fechas y horas en un tipo único, es importante evitar interpretar erróneamente una fecha devuelta por la <xref:System.DateTime.Date%2A> propiedad como una fecha y hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Date%2A> propiedad para extraer el componente de fecha de un <xref:System.DateTime> valor con su componente de hora establecido en cero (o 0:00:00 o medianoche). También muestra que, dependiendo de la cadena de formato utilizada para mostrar la <xref:System.DateTime> valor, el componente de hora puede seguir apareciendo en la salida con formato.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by this instance.</summary>
        <value>El componente de día, expresado como un valor entre 1 y 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Day%2A> propiedad siempre devuelve el día del mes en el calendario gregoriano, incluso si la actual <xref:System.DateTime> valor instancia se creó utilizando algún otro calendario o si el calendario predeterminado de la referencia cultural de subproceso actual no es el calendario gregoriano. Para recuperar el día del mes de una fecha determinada utilizando algún otro calendario, llame a dicho calendario <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> método. El ejemplo siguiente utiliza la <xref:System.DateTime.Day%2A> propiedad y el <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar el día del mes de un <xref:System.DateTime> valor cuyas instancias se crean usando el calendario Hijri.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 De forma similar, el siguiente ejemplo utiliza la <xref:System.DateTime.Day%2A> propiedad y el <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar el día del mes cuando la referencia cultural del subproceso actual es ar-SA, que utiliza Hijri como su calendario predeterminado.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Day%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by this instance.</summary>
        <value>Constante enumerada que indica el día de la semana de este valor <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de las constantes de la <xref:System.DayOfWeek> enumeración comprendido entre <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> a <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Si se convierte en un entero, su valor comprendido entre cero (lo que indica <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) a seis (que indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 El <xref:System.DateTime.DayOfWeek%2A> propiedad devuelve una constante enumerada; no refleja las opciones de configuración regional y de idioma del sistema. Para recuperar una cadena que representa un nombre de día de la semana localizado para una fecha determinada, llame a una de las sobrecargas de la <xref:System.DateTime.ToString%2A> método que incluye un `format` parámetro y pasarle ya sea el `ddd` o `dddd` cadenas de formato personalizado. Para obtener más información, consulte [Cómo: extraer el día de la semana de una fecha concreta](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la <xref:System.DateTime.DayOfWeek%2A> propiedad y el <xref:System.DayOfWeek?displayProperty=nameWithType> enumeración.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by this instance.</summary>
        <value>El día del año, expresado como un valor entre 1 y 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.DayOfYear%2A> propiedad toma los años bisiestos en cuenta cuando calcula el día del año. El valor de propiedad siempre refleja el día del año del calendario gregoriano, independientemente del calendario actual del subproceso la referencia cultural actual. Para recuperar el día del año en un calendario diferente, llame a la <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> método de dicho calendario.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el día del año del 31 de diciembre de los años 2020 2010 en el calendario gregoriano. Tenga en cuenta que en el ejemplo se muestra que el 31 de diciembre es el día del año en los años bisiestos 366.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (a number ranging from 1 to 12).</param>
        <summary>Returns the number of days in the specified month and year.</summary>
        <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.  For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.DaysInMonth%2A> método siempre interpreta `month` y `year` como el mes y año del calendario gregoriano de calendario incluso si el calendario gregoriano no es el calendario actual de la referencia cultural actual. Para obtener el número de días en un mes especificado de un calendario determinado, llame a dicho calendario <xref:System.Globalization.Calendar.GetDaysInMonth%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.DateTime.DaysInMonth%2A> método para determinar el número de días en julio de 2001, febrero de 1998 (no-bisiesto) y febrero de 1996 (un año bisiesto).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 En el ejemplo siguiente se muestra el número de días de cada mes del año especificado en una matriz de enteros.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> objects, or a <see cref="T:System.DateTime" /> instance and another object or <see cref="T:System.DateTime" />, have the same value.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="value" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La instancia actual y `value` son iguales si sus <xref:System.DateTime.Ticks%2A> valores de propiedad son iguales. Sus <xref:System.DateTime.Kind%2A> valores de propiedad no se consideran en la prueba de igualdad.  
  
 Este método implementa el <xref:System.IEquatable%601?displayProperty=nameWithType> de interfaz y realiza ligeramente mejor que la <xref:System.DateTime.Equals%2A> método porque el `value` parámetro no tiene que convertirse a un objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La instancia actual y `value` son iguales si sus <xref:System.DateTime.Ticks%2A> valores de propiedad son iguales. Sus <xref:System.DateTime.Kind%2A> valores de propiedad no se consideran en la prueba de igualdad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</summary>
        <returns>
          <see langword="true" /> if the two values are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` y `t2` son iguales si sus <xref:System.DateTime.Ticks%2A> valores de propiedad son iguales. Sus <xref:System.DateTime.Kind%2A> valores de propiedad no se consideran en la prueba de igualdad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Equals%2A> método.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
        <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
        <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.DateTime.ToBinary%2A> método para convertir el valor del elemento actual <xref:System.DateTime> objeto a un valor binario. Posteriormente, usar el valor binario y el <xref:System.DateTime.FromBinary%2A> método para volver a crear la versión original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En algunos casos, el <xref:System.DateTime> valor devuelto por la <xref:System.DateTime.FromBinary%2A> método no es idéntico al original <xref:System.DateTime> valor proporcionado a la <xref:System.DateTime.ToBinary%2A> método. Para obtener más información, vea la sección siguiente, "Ajuste de la hora Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de la hora local  
 Una hora local, que es una hora de Universal coordinada ajustada a la zona horaria local, se representa mediante un <xref:System.DateTime> estructura cuyo <xref:System.DateTime.Kind%2A> propiedad tiene el valor <xref:System.DateTimeKind.Local>. Cuando se restaura una variable local <xref:System.DateTime> valor de la representación binaria que se genera mediante el <xref:System.DateTime.ToBinary%2A> método, el <xref:System.DateTime.FromBinary%2A> método puede ajustar el valor ha vuelto a crear para que no es igual al valor original. Esta desincronización puede aparecer bajo las condiciones siguientes:  
  
-   Si una variable local <xref:System.DateTime> el objeto se serializa en una zona horaria por la <xref:System.DateTime.ToBinary%2A> (método) y, a continuación, se deserializa en una zona horaria diferente por la <xref:System.DateTime.FromBinary%2A> /método siguiente, la hora local representada por el cuadro <xref:System.DateTime> objeto se ajusta automáticamente en la segunda zona horaria.  
  
     Por ejemplo, considere un <xref:System.DateTime> objeto que representa una hora local de 3 P.M. Una aplicación que se está ejecutando la zona horaria del Pacífico Zona horaria del Pacífico usa el <xref:System.DateTime.ToBinary%2A> método para convertir todo esto <xref:System.DateTime> objeto a un valor binario. Otra aplicación que se está ejecutando la zona horaria del Pacífico Zona horaria del este, a continuación, usa el <xref:System.DateTime.FromBinary%2A> método para convertir el valor binario en un nuevo <xref:System.DateTime> objeto. El valor de la nueva <xref:System.DateTime> objeto es 18: 00, que representa el mismo punto en el tiempo que el original 3 P.M. valor, pero se ajusta a la hora local en la zona de hora.  
  
-   Si la representación binaria de una variable local <xref:System.DateTime> valor representa una hora no válida en la zona horaria local del sistema en el que <xref:System.DateTime.FromBinary%2A> es llama, la hora se ajusta para que sea válido.  
  
     Por ejemplo, la transición desde el horario estándar al horario de verano se produce en la zona horaria del Pacífico de Estados Unidos en 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. En el ejemplo siguiente se muestra que cuando una hora que pertenece a este intervalo se convierte en un valor binario por el <xref:System.DateTime.ToBinary%2A> método y, a continuación, se restaura por la <xref:System.DateTime.FromBinary%2A> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y un valor de tiempo pueden estar sujetos a modificación pasándolo al <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> método, como en el ejemplo se ilustra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Consideraciones de versión  
 A partir de .NET Framework versión 2.0, un <xref:System.DateTime> estructura formada por un campo Kind privado, que indica si la hora especificada es hora local, la hora Universal coordinada (UTC) o ninguna de ellas, concatenada a un campo privado Ticks, que contiene el número de pasos de 100 nanosegundos que especifique una fecha y hora. El número de pasos que puede obtenerse con el <xref:System.DateTime.Ticks%2A> campo de propiedad y theKind puede tener acceso mediante el <xref:System.DateTime.Kind%2A> propiedad.  
  
 Antes de .NET Framework 2.0, si serializa un <xref:System.DateTime> objeto manualmente en lugar de utilizar una interfaz de serialización como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, necesarios para serializar solo los datos de pasos de la <xref:System.DateTime>. A partir de .NET Framework 2.0, también se deben serializar los datos del campo Kind.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuándo una aplicación crea, tiene acceso o escribe en un archivo.  
  
 El `fileTime` parámetro especifica una hora de archivo expresada en pasos de 100 nanosegundos.  
  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.FromFileTime%2A> método.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>Por lo general, el <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restauraciones un <see cref="T:System.DateTime" /> valor guardada por el <see cref="M:System.DateTime.ToFileTime" /> método. Sin embargo, los dos valores pueden diferir en las siguientes condiciones: - si la serialización y deserialización de la <see cref="T:System.DateTime" /> producirse en distintas zonas horarias. Por ejemplo, si un <see cref="T:System.DateTime" /> valor con un tiempo de 12:30 P.M. de la zona horaria del Pacífico Zona de hora se serializa y deserializa a continuación, la zona horaria del Pacífico Zona horaria del Pacífico, el valor original de 12:30 p. M. se ajusta a las 9:30 A.M. para reflejar la diferencia entre las dos zonas horarias.  -If el <see cref="T:System.DateTime" /> valor que se serializa representa una hora no válida en la zona horaria local. En este caso, el <see cref="M:System.DateTime.ToFileTime" /> método ajusta el restaurada <see cref="T:System.DateTime" /> valor para que represente una hora válida en la zona horaria local.  Por ejemplo, se produce la transición desde el horario estándar al horario de verano de la zona horaria del Pacífico Zona horaria del Pacífico en 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. En el ejemplo siguiente se muestra que cuando una hora que pertenece a este intervalo se convierte en un valor entero largo por el <see cref="M:System.DateTime.ToFileTime" /> método y, a continuación, se restaura por la <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y un valor de tiempo pueden estar sujetos a modificación pasándolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como en el ejemplo se ilustra.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
        <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuándo una aplicación crea, tiene acceso o escribe en un archivo.  
  
 El `fileTime` parámetro especifica una hora de archivo expresada en pasos de 100 nanosegundos.  
  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">An OLE Automation Date value.</param>
        <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
        <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `d` parámetro es un número de punto flotante de precisión doble que representa una fecha como el número de días antes o después de la fecha base, medianoche, 30 de diciembre de 1899. La parte de entero y de inicio de sesión de `d` codifican la fecha como un desplazamiento de días positivo o negativo desde el 30 de diciembre de 1899 y el valor absoluto de la parte fraccionaria del `d` codifica la hora del día como una fracción de un desplazamiento de días desde la medianoche. `d` debe ser un valor entre 657435.0 negativo a través de 2958465.99999999 positivo.  
  
 Tenga en cuenta que, debido al modo en que las fechas están codificadas, hay dos formas de representar cualquier hora del día del 30 de diciembre de 1899. Por ejemplo, -0,5 y 0,5 significan el mediodía del 30 de diciembre de 1899 porque un desplazamiento de días de más o menos cero días a partir de la fecha base sigue siendo la fecha base, y medio día de desplazamiento desde la medianoche es mediodía.  
  
 Consulte <xref:System.DateTime.ToOADate%2A> para obtener más información sobre la automatización OLE.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  No se debe suponer que varias llamadas a la <xref:System.DateTime.GetDateTimeFormats%2A> sobrecargas devolverá datos idénticos. Dependiendo de la carga específica, pueden cambiar los datos devueltos por este método si los cambios de referencia cultural actual, el usuario invalida la configuración cultural individual o se produce una actualización a los datos de referencia cultural del sistema.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La matriz de cadenas devuelta por la <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método es equivalente a la combinación de las matrices de cadenas devueltas por llamadas independientes a la <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> método con la "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" y cadenas de formato estándar "s". Para obtener más información acerca de los especificadores de formato estándar, consulte [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Se da formato a cada elemento del valor devuelto utilizando la información de la referencia cultural actual. Para obtener más información acerca de la información de formato específica de la referencia cultural para la referencia cultural actual, vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Dado que este método utiliza datos de la cuenta de la referencia cultural, no debe suponer que varias llamadas al método devolverán datos idénticos. Pueden cambiar los datos devueltos por este método si los cambios de referencia cultural actual, el usuario invalida la configuración cultural individual o se produce una actualización a los datos de referencia cultural del sistema.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método. Muestra la representación de cadena de una fecha utilizando todos los posibles estándar formatos de fecha y hora en la referencia cultural actual del equipo, que en este caso es en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 En el ejemplo se muestra el siguiente resultado:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">A standard date and time format string.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `format` parámetro puede ser cualquiera de los especificadores de formato de hora y fecha estándar. Puede tratarse d., D, f, F, g, G, M (o m), O (u o), R (o r), s, t, T, u, U y Y (o y). Para obtener más información, consulte [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Se da formato a cada elemento del valor devuelto utilizando la información de la referencia cultural actual. Para obtener más información acerca de la información de formato específica de la referencia cultural para la referencia cultural actual, vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Dado que este método utiliza datos de la cuenta de la referencia cultural, no debe suponer que varias llamadas al método devolverán datos idénticos. Pueden cambiar los datos devueltos por este método si los cambios de referencia cultural actual, el usuario invalida la configuración cultural individual o se produce una actualización a los datos de referencia cultural del sistema.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> método. Muestra la representación de cadena de una fecha con el especificador de formato de fecha larga ("D") para la referencia cultural actual.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La matriz de cadenas devuelta por la <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método es equivalente a la combinación de las matrices de cadenas devueltas por llamadas independientes a la <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método con la "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" y cadenas de formato estándar "s". Para obtener más información acerca de los especificadores de formato estándar, consulte [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Se da formato a cada elemento del valor devuelto con información específica de la referencia cultural suministrada por `provider`.  
  
> [!IMPORTANT]
>  Dado que este método utiliza datos de la cuenta de la referencia cultural, no debe suponer que varias llamadas al método devolverán datos idénticos a menos que `provider` es un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural invariable. Pueden cambiar los datos devueltos por este método si el usuario invalida la configuración cultural individual de `provider` o si se produce una actualización a los datos de referencia cultural del sistema para `provider`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método. Muestra la representación de cadena de una fecha utilizando todos los posibles estándar formatos de fecha y hora para la referencia cultural fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 En el ejemplo se muestra el siguiente resultado:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El parámetro de formato puede ser cualquiera de los especificadores de formato de hora y fecha estándar. Puede tratarse d., D, f, F, g, G, M (o m), O (u o), R (o r), s, t, T, u, U y Y (o y). Para obtener más información, consulte [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Se da formato a cada elemento del valor devuelto con información específica de la referencia cultural suministrada por `provider`.  
  
> [!IMPORTANT]
>  Dado que este método utiliza datos de la cuenta de la referencia cultural, no debe suponer que varias llamadas al método devolverán datos idénticos a menos que `provider` es un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural invariable. Pueden cambiar los datos devueltos por este método si el usuario invalida la configuración cultural individual de `provider` o si se produce una actualización a los datos de referencia cultural del sistema para `provider`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> método. Muestra las representaciones de cadena de una fecha con el especificador de formato de fecha corta ("d") para la referencia cultural fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
        <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the date represented by this instance.</summary>
        <value>El componente de hora, expresado como un valor entre 0 y 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.DateTime.Hour%2A> propiedad siempre se expresa usando un reloj de 24 horas. Para recuperar una cadena que representa la hora de una fecha y hora, usando un reloj de 12 horas, llame a la <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método con el especificador de formato personalizado "h". Por ejemplo:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Hour%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
        <returns>
          <see langword="true" /> if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; <see langword="false" /> if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina si la actual <xref:System.DateTime> valor está dentro del intervalo de horario de verano de la zona horaria local, que es devuelto por la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad. Puede determinar si una zona horaria admite el horario de verano al recuperar el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> propiedad. Para las zonas horarias que observan el horario de verano, puede determinar cuándo se produce el cambio de horario de verano mediante la recuperación de la <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> matriz devuelta por la zona horaria <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> propiedad.  
  
 Si la actual <xref:System.DateTime> valor representa un ambiguos o una hora no válida en la zona horaria local, el método devuelve `false`.  
  
 En [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, la <xref:System.DateTime.IsDaylightSavingTime%2A> método reconoce sólo la regla de ajuste actual al determinar si la instancia actual es un horario de verano. Como resultado, el método puede no informar con exactitud si la instancia actual es un horario de verano para períodos anteriores a la regla de ajuste actual entrada en vigor.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">A 4-digit year.</param>
        <summary>Returns an indication whether the specified year is a leap year.</summary>
        <returns>
          <see langword="true" /> if <paramref name="year" /> is a leap year; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` se especifica como un número de 10 base de 4 dígitos; Por ejemplo, 1996.  
  
 `year` siempre se interpreta como un año en el calendario gregoriano. Para determinar si un determinado año fue un año bisiesto en algún otro calendario, llame a ese objeto de calendario `IsLeapYear` método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.IsLeapYear%2A> método para determinar qué años entre 1994 y 2014 son bisiestos. Este ejemplo también muestra el resultado cuando la <xref:System.DateTime.AddYears%2A> método se utiliza para agregar un año a un día bisiesto.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
        <value>Uno de los valores de enumeración que indica qué representa la hora actual. De manera predeterminada, es <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer explícitamente el <xref:System.DateTime.Kind%2A> propiedad de un nuevo <xref:System.DateTime> valor a un determinado <xref:System.DateTimeKind> valor mediante una llamada a la <xref:System.DateTime.SpecifyKind%2A> método.  
  
 El <xref:System.DateTime.Kind%2A> propiedad permite un <xref:System.DateTime> valor refleje claramente la hora Universal coordinada (UTC) o la hora local. En cambio, la <xref:System.DateTimeOffset> estructura puede reflejar inequívocamente cualquier hora de cualquier zona horaria como un único punto en el tiempo.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para mostrar cómo la <xref:System.DateTime.Kind%2A> influye en la propiedad del <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante equivale a 23:59:59.9999999 UTC, 31 de diciembre de 9999 en el calendario gregoriano, exactamente un paso de 100 nanosegundos antes de 00:00:00 UTC, 1 de enero de 10000.  
  
 Algunos calendarios, como el <xref:System.Globalization.ThaiBuddhistCalendar>, admiten un intervalo de fechas superior que es anterior a <xref:System.DateTime.MaxValue>. En estos casos, se intenta tener acceso a <xref:System.DateTime.MaxValue> en asignaciones de variables o formato y las operaciones de análisis puede producir un <xref:System.ArgumentOutOfRangeException>. En lugar de recuperar el valor de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, puede recuperar el valor del valor de fecha válido más reciente de la referencia cultural especificada desde la <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTime> objeto pasando su constructor una <xref:System.Int64> valor que representa un número de pasos. Antes de invocar el constructor, el ejemplo se asegura de que este valor es mayor o igual que `DateTime.MinValue.Ticks` y menor o igual que `DateTime.MaxValue.Ticks`. Si no es así, produce un <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the milliseconds component of the date represented by this instance.</summary>
        <value>El componente de milisegundos, expresado como un valor entre 0 y 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede mostrar la representación de cadena de la <xref:System.DateTime.Millisecond%2A> propiedad mediante el especificador de formato "fff". Por ejemplo, el código siguiente muestra una cadena que contiene el número de milisegundos en una fecha y hora en la consola.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 También puede mostrar el componente de milisegundos junto con los demás componentes de un valor de fecha y hora mediante el especificador de formato estándar "o". Por ejemplo:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Sin embargo, el especificador de formato "o" se diseñó inferior para mostrar de ida y vuelta o almacenar una <xref:System.DateTime> valor. También puede mostrar milisegundos junto con otros componentes de fecha y hora utilizando una cadena de formato personalizado, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Millisecond%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the date represented by this instance.</summary>
        <value>El componente de minutos, expresado como un valor entre 0 y 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Minute%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante es equivalente a 00:00:00.0000000 UTC, 1 de enero, 0001 en el calendario gregoriano.  
  
 <xref:System.DateTime.MinValue> define la fecha y hora que se asigna a una variable <xref:System.DateTime> variable. Esto se ilustra en el siguiente ejemplo:  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 El <xref:System.DateTime.MinValue> y <xref:System.DateTime.MaxValue> propiedades se pueden usar para asegurarse de que un valor se encuentra dentro del intervalo admitido antes de pasarlo a un <xref:System.DateTime> constructor. El código en la sección ejemplo muestra este uso.  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTime> objeto pasando su constructor una <xref:System.Int64> valor que representa un número de pasos. Antes de invocar el constructor, el ejemplo se asegura de que este valor es mayor o igual que `DateTime.MinValue.Ticks` y menor o igual que `DateTime.MaxValue.Ticks`. Si no es así, produce un <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by this instance.</summary>
        <value>El componente de mes, expresado como un valor entre 1 y 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Month%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
        <value>Objeto cuyo valor es la fecha y hora local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Now%2A> propiedad devuelve un <xref:System.DateTime> valor que representa la fecha y hora actuales en el equipo local. Tenga en cuenta que hay una diferencia entre un <xref:System.DateTime> valor, que representa el número de pasos transcurridos desde la medianoche del 1 de enero, 0001, y la representación de cadena de la que <xref:System.DateTime> valor, que se expresa el valor de fecha y hora en un formato específicos de referencia cultural específica. Para obtener información sobre el formato de los valores de fecha y hora, vea el <xref:System.DateTime.ToString%2A> método. En el ejemplo siguiente se muestra la cadena de hora y fecha corta en un número de formatos específicos de la referencia cultural.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 La resolución de esta propiedad depende del temporizador del sistema, que depende del sistema operativo subyacente. Suele estar entre 0,5 y 15 milisegundos. Como resultado, las llamadas repetidas a la <xref:System.DateTime.Now%2A> propiedad en un intervalo de tiempo breve, como se muestra en un bucle, puede devolver el mismo valor.  
  
 El <xref:System.DateTime.Now%2A> propiedad se utiliza con frecuencia para medir el rendimiento. Sin embargo, debido a su resolución baja, no es adecuado para su uso como una herramienta de pruebas comparativas. Una alternativa mejor es usar la <xref:System.Diagnostics.Stopwatch> clase.  
  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad devuelve <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  También puede usar el <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> propiedad para recuperar la actual fecha y hora local. Permite una hora local se exprese inequívocamente como un único punto en el tiempo, lo que a su vez hace ese valor de tiempo portable entre equipos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Now%2A> y <xref:System.DateTime.UtcNow%2A> propiedades para recuperar la fecha y hora local actual y la actual universal coordinan (UTC) fecha y hora. A continuación, usa las convenciones de formato de un número de referencias culturales para mostrar las cadenas, junto con los valores de la su <xref:System.DateTime.Kind%2A> propiedades.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to add.</param>
        <param name="t">The time interval to add.</param>
        <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
        <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[El método equivalente para este operador es <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 En el ejemplo siguiente se muestra el operador de suma.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_Equality%2A> operador determina si dos <xref:System.DateTime> valores son iguales al comparar su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 El método equivalente para este operador es <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 En el ejemplo siguiente se muestra el operador de igualdad.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_GreaterThan%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 El método equivalente para este operador es <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_GreaterThanOrEqual%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 El método equivalente para este operador es <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_Inequality%2A> operador determina si dos <xref:System.DateTime> valores no son iguales al comparar su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 El método equivalente para este operador es <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_LessThan%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 El método equivalente para este operador es <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_LessThanOrEqual%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 El método equivalente para este operador es <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified <see cref="T:System.DateTime" /> or<see cref="T:System.TimeSpan" /> from a specified <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The date and time value to subtract from (the minuend).</param>
        <param name="d2">The date and time value to subtract (the subtrahend).</param>
        <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
        <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> método no tiene en cuenta el valor de la <xref:System.DateTime.Kind%2A> propiedad de los dos <xref:System.DateTime> valores al realizar la resta. Antes de restar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. En caso contrario, el resultado incluirá la diferencia entre zonas horarias.  
  
> [!NOTE]
>  El <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método tiene en cuenta la diferencia entre las zonas horarias cuando se realiza la resta.  
  
 El método equivalente para este operador es <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to subtract from.</param>
        <param name="t">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
        <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método resta el valor de tics de `t` el valor de tics de `d`.  
  
 El método equivalente para este operador es <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En esta sección:  
  
 [¿Qué método se debe llamar?](#Tasks)   
 [La cadena para analizar](#StringToParse)   
 [Convenciones culturales y análisis](#Culture)   
 [Elementos de análisis y estilo](#Styles)   
 [El valor devuelto y DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>¿Qué método se debe llamar?  
  
|En|Llamar a|  
|--------|----------|  
|Analizar una cadena de fecha y hora utilizando las convenciones de la referencia cultural actual.|<xref:System.DateTime.Parse%28System.String%29> overload|  
|Analizar una cadena de fecha y hora utilizando las convenciones de una referencia cultural concreta.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> sobrecargar (vea [análisis y las convenciones culturales](#Culture))|  
|Analizar una cadena de fecha y hora con elementos de estilo especiales (por ejemplo, el espacio en blanco o sin espacios en blanco).|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> overload|  
|Analizar una cadena de fecha y hora en que debe estar en un formato determinado.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analizar una cadena de fecha y hora y realizar una conversión a UTC u hora local.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> overload|  
|Analizar una cadena de fecha y hora sin control de excepciones.|Método <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Restaurar (ida y vuelta) un valor de fecha y hora creado por una operación de formato.|Pase la cadena de formato estándar "o" u "r" para el <xref:System.DateTime.ToString%28System.String%29> método y llamar a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> se puede sobrecargar con <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analizar una cadena de fecha y hora en un formato fijo en los límites del equipos (y posiblemente culturales).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> (método)|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>La cadena para analizar  
 El <xref:System.DateTime.Parse%2A> método intenta convertir la representación de cadena de un valor de fecha y hora a su <xref:System.DateTime> equivalente. Intenta analizar la cadena de entrada completamente sin producir una <xref:System.FormatException> excepción.  
  
> [!IMPORTANT]
>  Si se produce un error en la operación de análisis porque el formato de cadena no reconocido, la <xref:System.DateTime.Parse%2A> método produce una <xref:System.FormatException>, mientras que la <xref:System.DateTime.TryParse%2A> método devuelve `false`. Dado que el control de excepciones puede ser costoso, debe usar <xref:System.DateTime.Parse%2A> cuando se espera que la operación de análisis correctamente, ya que el origen de entrada es de confianza. <xref:System.DateTime.TryParse%2A> es preferible si es probable que los errores de análisis, especialmente debido a un origen de entrada no es de confianza, o tener valores predeterminados razonables para sustituir las cadenas que no se analizan correctamente.   

 La cadena para analizarse puede tener cualquiera de las siguientes formas:  
  
-   Una cadena con una componente de fecha y hora.  
  
-   Una cadena con una fecha, pero ningún componente de tiempo. Si falta el componente de hora, el método supone 12:00 de la noche. Si el componente de fecha con un año de dos dígitos, se convierte en un año según el <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> de calendario actual de la referencia cultural actual o calendario actual de la referencia cultural especificada (si se utiliza una sobrecarga con un valor no nulo `provider` argumento).  
  
- Una cadena con un componente de fecha que sólo incluye el mes y el año pero ningún componente de día. El método supone que el primer día del mes.

- Una cadena con un componente de fecha que sólo incluye el mes y el día pero ningún componente de año. El método supone que el año actual.

-   Una cadena con un tiempo pero ningún componente de fecha. El método supone la fecha actual, a menos que llame a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga e incluir <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> en el `styles` argumento, en el que caso, el método supone una fecha del 1 de enero de 0001.  

- Una cadena con un componente de tiempo que incluya únicamente la hora y un designador AM/PM, con ningún componente de fecha. El método supone la fecha actual y una hora con ningún minutos y no segundos. Puede cambiar este comportamiento mediante una llamada a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga e incluir <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> en el `styles` argumento, en el que caso, el método supone una fecha del 1 de enero de 0001.

-   Una cadena que incluye información de zona horaria y se ajusta a ISO 8601. En los ejemplos siguientes, la primera cadena designa la hora Universal coordinada (UTC) y la segunda designa la hora en una zona horaria que es siete horas anteriores a la hora UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Una cadena que incluye el designador GMT y se ajusta al formato de hora de RFC 1123; Por ejemplo:  
  
     "Sat, 01 de noviembre de 2008 19:35:00 GMT"  
  
-   Una cadena que incluye la fecha y hora junto con información de desplazamiento de zona horaria; Por ejemplo:  
  
     "03/01/2009 42:05:00 -5:00"  

En el ejemplo siguiente se analiza las cadenas en cada uno de estos formatos usando las convenciones de formato de la referencia cultural actual, que en este caso es la referencia cultural en-US:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Si la cadena de entrada representa un día bisiesto de un año bisiesto en el calendario usado por el método de análisis (vea [convenciones culturales y análisis](#Culture)), el <xref:System.DateTime.Parse%2A> método analiza la cadena correctamente. Si la cadena de entrada representa un día bisiesto de un año bisiesto, el método produce una <xref:System.FormatException>.  
  
 Dado que el <xref:System.DateTime.Parse%2A> método intenta analizar la representación de cadena de una fecha y hora mediante el uso de las reglas de formato de la actual o una referencia cultural especificada, intenta analizar una cadena entre referencias culturales diferentes puede producir un error. Para analizar una fecha concreta y el formato de hora en distintas configuraciones regionales, use una de las sobrecargas de los <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> método y proporcione un especificador de formato.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Convenciones culturales y análisis  
 Todas las sobrecargas de la <xref:System.DateTime.Parse%2A> método son dependientes de la referencia cultural a menos que la cadena se analizará (lo que se representa mediante `s` en la tabla siguiente) se ajusta al patrón de ISO 8601. La operación de análisis usa la información de formato en un <xref:System.Globalization.DateTimeFormatInfo> objeto que se deriva como sigue:  
  
|Si se llama a|Y `provider` es|Información de formato se deriva de|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|La referencia cultural del subproceso actual (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> propiedad)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|un <xref:System.Globalization.DateTimeFormatInfo> objeto|Especificado <xref:System.Globalization.DateTimeFormatInfo> objeto|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|La referencia cultural del subproceso actual (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> propiedad)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|un <xref:System.Globalization.CultureInfo> objeto|La propiedad <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Personalizado <xref:System.IFormatProvider> implementación|El método <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>|  
  
 Cuando la información de formato se deriva un <xref:System.Globalization.DateTimeFormatInfo> objeto, el <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propiedad define el calendario utilizado en la operación de análisis.  
  
 Si se analiza una cadena de fecha y hora mediante el uso de un <xref:System.Globalization.DateTimeFormatInfo> objeto con configuraciones personalizadas que son diferentes de los de una referencia cultural estándar, utilice la <xref:System.DateTime.ParseExact%2A> en lugar del método la <xref:System.DateTime.Parse%2A> método para mejorar las posibilidades de una conversión correcta. Una cadena de hora y fecha no estándar pueden ser complicada y difícil de analizar. El <xref:System.DateTime.Parse%2A> método intenta analizar una cadena con modelos implícitos de análisis, todos los cuales pueden producir un error. En cambio, la <xref:System.DateTime.ParseExact%2A> método exige que se designen explícitamente uno o varios modelos exactos de análisis que se lleven a cabo correctamente. Para obtener más información, vea la sección "DateTimeFormatInfo y dinámico de datos" en el <xref:System.Globalization.DateTimeFormatInfo> tema.  
  
> [!IMPORTANT]
>  Tenga en cuenta que las convenciones de formato para una determinada referencia cultural son dinámicas y pueden estar sujetos a cambios. Esto significa que las operaciones de análisis que dependen de las convenciones de formato de la referencia cultural de forma predeterminada (actual) o que especifican un <xref:System.IFormatProvider> objeto que representa una referencia cultural que no sea la referencia cultural invariable inesperadamente puede producir un error si se produce alguna de las siguientes acciones:  
>   
> -   Los datos específicos de la referencia cultural ha cambiado entre las versiones principales o secundarias de .NET Framework o como resultado de una actualización a la versión existente de .NET Framework.  
> -   Los datos específicos de la referencia cultural reflejan las preferencias del usuario, que pueden variar de un equipo a otro o de una sesión a otra.  
> -   Los datos específicos de la referencia cultural representan una referencia cultural de reemplazo que invalida la configuración de una referencia cultural estándar o una referencia cultural personalizada.  
>   
>  Para evitar las dificultades para analizar cadenas de fecha y hora que están asociadas a los cambios en los datos de referencia culturales, puede analizar cadenas de fecha y hora mediante el uso de la referencia cultural invariable o puede llamar a la <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> método y especifique el formato exacto de la cadena debe analizarse. Si se serializar y deserializar los datos de fecha y hora, puede usar las convenciones de formato de la referencia cultural invariable, o puede serializar y deserializar la <xref:System.DateTime> valor en un formato binario.  
>   
>  Para obtener más información, consulte la sección "datos de referencia cultural dinámico" en la <xref:System.Globalization.CultureInfo> tema y los "valores de fecha y hora de Persisting" sección el <xref:System.DateTime> tema.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elementos de análisis y estilo  
 Todos los <xref:System.DateTime.Parse%2A> sobrecargas omitir los caracteres de espacio en blanco iniciales, internos o finales en la cadena de entrada (representada mediante `s` en la tabla siguiente). La fecha y hora pueden ir entre corchetes con un par de iniciales y finales de los caracteres de signo de número ("#", u+0023) y pueden terminar con uno o más caracteres NULL (u+0000).  
  
 Además, el <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga tiene un `styles` parámetro que consta de uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración. Este parámetro define cómo `s` deben interpretarse y cómo debe convertir la operación de análisis `s` a una fecha y hora. En la tabla siguiente describe el efecto de cada uno de ellos <xref:System.Globalization.DateTimeStyles> miembro en la operación de análisis.  
  
|Miembro DateTimeStyles|Efecto sobre la conversión|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC, como se indica a continuación:<br /><br /> -If `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal> marca, el método analiza la cadena, llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor Hora UTC y establece la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-If `s` indica que represente la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal> marca, el método analiza la cadena, no se realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Este valor se omite. Espacio en blanco interno siempre está permitido en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Este valor se omite. Espacio en blanco inicial siempre se permite en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Este valor se omite. Los espacios en blanco finales siempre se permiten en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener los, interna, iniciales y finales de espacios en blanco. Éste es el comportamiento predeterminado. No se puede invalidar proporcionando más restrictiva <xref:System.Globalization.DateTimeStyles> valor de enumeración como <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` falta se supone que cualquier información de zona horaria, hora local. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marca está presente, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` falta se supone que cualquier información de zona horaria UTC. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Aunque sea válido, este valor se omite.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión de una cadena de fecha y hora en un <xref:System.DateTime> valor que representa una hora local con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, esta cadena se crea mediante una llamada a la <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> (método) y con el especificador de formato estándar "o", "r" o "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>El valor devuelto y DateTime.Kind

El `DateTime.Parse` sobrecargas devuelven un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind> esta propiedad incluye la información de zona horaria. Puede indicar que la hora es:

- Hora Universal coordinada (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- El tiempo en la zona horaria local (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- El tiempo en una zona horaria desconocida (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 Por lo general, el <xref:System.DateTime.Parse%2A> método devuelve un <xref:System.DateTime> cuyos <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Sin embargo, el <xref:System.DateTime.Parse%2A> método también puede realizar la conversión de zona horaria y establezca el valor de la <xref:System.DateTime.Kind%2A> propiedad diferente, según los valores de la `s` y `styles` parámetros:  
  
|Si|Conversión de zona horaria|Kind (propiedad)|  
|--------|--------------------------|-------------------|  
|`s` contiene información de zona horaria.|La fecha y hora se convierte a la hora en la zona horaria local.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` contiene información de zona horaria, y `styles` incluye la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marca.|La fecha y hora se convierte en la hora Universal coordinada (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` contiene el designador de zona horaria Z o GMT, y `styles` incluye la <xref:System.Globalization.DateTimeStyles.RoundtripKind> marca.|La fecha y hora se interpretan como hora UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 En el ejemplo siguiente se convierte las cadenas de fecha que contienen información de zona horaria a la hora en la zona horaria local:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  También puede conservar el valor de una fecha y del hora <xref:System.DateTime.Kind%2A> propiedad durante la operación de análisis mediante el uso y un formato el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca. En el ejemplo siguiente se muestra cómo el <xref:System.Globalization.DateTimeStyles.RoundtripKind> marca afecta a la operación de análisis en <xref:System.DateTime> valores que se convierten en cadenas mediante el especificador de formato "o", "r" o "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Ver numerosos ejemplos que llaman a la `DateTime.Parse` método se intercalan en la [comentarios](#remarks) sección de este artículo y en la documentación de la persona `DateTime.Parse` sobrecargas.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

También puede descargar un conjunto completo de `DateTime.Parse` ejemplos, que se incluyen en un [proyecto .NET Core 2.0 de C#](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/DateTime.Parse.zip) y un [proyecto .NET Core 2.0 para Visual Basic](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), desde el [dotnet/documentos Repositorio de GitHub](https://github.com/dotnet/docs).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the conventions of the current thread culture.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Si `s` contiene información de zona horaria, este método devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> y convierte la fecha y hora en `s` a la hora local. En caso contrario, no realiza ninguna conversión de zona horaria y devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Esta sobrecarga intenta analizar `s` usando las convenciones de formato de la referencia cultural actual. La referencia cultural actual se indica mediante el <xref:System.Globalization.CultureInfo.CurrentCulture> propiedad. Para analizar una cadena mediante las convenciones de formato de una referencia cultural concreta, llame a la <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> o <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> sobrecargas.

Esta sobrecarga intenta analizar `s` utilizando <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Ejemplo

En el ejemplo siguiente se analiza la representación de cadena de varios valores de fecha y hora por:

- Con el proveedor de formato predeterminado, que proporciona las convenciones de formato de la referencia cultural del subproceso actual del equipo usado para generar el resultado del ejemplo. El resultado de este ejemplo refleja las convenciones de formato de la referencia cultural en-US.

- Con el valor de estilo predeterminado, que es <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Controla el <xref:System.FormatException> convenciones de formato de excepción que se produce cuando el método intenta analizar la representación de cadena de una fecha y hora mediante el uso de alguna otra referencia cultural. También muestra cómo analizar correctamente un valor de fecha y hora que no usa las convenciones de formato de la referencia cultural del subproceso actual.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Si `s` contiene información de zona horaria, este método devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> y convierte la fecha y hora en `s` a la hora local. En caso contrario, no realiza ninguna conversión de zona horaria y devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Esta sobrecarga intenta analizar `s` utilizando el <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Ejemplo

En el ejemplo siguiente se analiza una matriz de cadenas de fecha usando las convenciones de en-US, fr-FR y según la referencia cultural de-DE. Indica que las representaciones de cadena de una sola fecha pueden interpretar de manera diferente entre referencias culturales diferentes.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <c>s</c> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Esta sobrecarga del método convierte la fecha y hora en `s` y establece la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor como sigue:

|Si |Conversión de zona horaria|Kind (propiedad)|   
|-----|-----|-----|  
|`s` no contiene ninguna información de zona horaria.|Ninguno.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` contiene información de zona horaria.|En la hora de la zona horaria local|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` contiene información de zona horaria, y ' estilos incluye el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca.|Hora de universal a coordinada (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` contiene el designador de zona horaria Z o GMT, y `styles` incluye la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Ninguno.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Ejemplo

En el ejemplo siguiente se muestra la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método y muestra el valor de la <xref:System.DateTime.Kind%2A> propiedad del resultante <xref:System.DateTime> valores.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly or an exception is thrown.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha, que debe estar en el formato definido por el `format` parámetro. También requiere que el \<fecha > y \<tiempo > los elementos de la representación de cadena de una fecha y hora aparecen en el orden especificado por `format`y que `s` no tiene ningún espacio en blanco que no sea permitido por `format`. Si `format` define una fecha con ningún elemento de tiempo y el análisis de la operación se realiza correctamente, resultante <xref:System.DateTime> valor tiene una hora de la medianoche (00: 00:00). Si `format` define una hora con ningún elemento de fecha y el análisis de la operación se realiza correctamente, resultante <xref:System.DateTime> valor tiene una fecha de `DateTime.Now.Date`.  
  
 Si `s` no hace referencia a una hora de una zona horaria determinada y la operación de análisis se realiza correctamente, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si `s` representan el tiempo en una zona horaria determinada y `format` permite que la información de zona horaria que esté presente (por ejemplo, si `format` es igual a la "o", "r" o especificadores de formato estándar "u", o si contiene la "z", "zz" o "zzz" especificadores de formato personalizado), el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 El `format` parámetro es una cadena que contiene un especificador de formato estándar único o uno o varios especificadores de formato personalizado que definen el formato requerido de `s`. Para obtener más información sobre los códigos de formato válidos, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) o [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Si `format` es un modelo de formato personalizado que no incluye separadores de fecha u hora (por ejemplo, "yyyyMMddHHmm"), use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato más amplio de cada personalizado. Por ejemplo, si desea especificar las horas en el modelo de formato, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
 La fecha en particular y símbolos de tiempo y cadenas (como nombres de los días de la semana en un idioma determinado) que se usan en `s` definido por el `provider` parámetro, tal y como es el formato exacto de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un personalizado <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ParseExact%2A> método.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTime.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of the enumeration values that provides additional information about <c>s</c>, about style elements that may be present in <c>s</c>, or about the conversion from <c>s</c> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha, que debe estar en un formato definido por el `format` parámetro. También requiere que los elementos de fecha y hora de `s` aparecen en el orden especificado por `format`. Si `s` no coincide con el patrón de la `format` parámetro, con las variaciones definidas por el `style` parámetro, el método produce una <xref:System.FormatException>. En cambio, el <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha en cualquiera de los formatos reconocidos por el proveedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. El <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método también permite que los elementos de fecha y hora en `s` para aparecer en cualquier orden.  
  
 Si el `s` parámetro contiene solo una hora y ninguna fecha, se utiliza la fecha actual, a menos que la `style` parámetro incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca, en cuyo caso la fecha predeterminada (`DateTime.Date.MinValue`) se utiliza. Si el `s` parámetro no contiene solo una fecha y ninguna hora, medianoche (00: 00:00) se utiliza. El `style` parámetro también determina si el `s` parámetro puede contener caracteres de espacio en blanco iniciales, internos o finales.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcas, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca para no convertir la hora Universal coordinada (UTC) a la hora local y para establecer el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `format` parámetro define el modelo necesario de la `s` parámetro. Puede constar de uno o varios especificadores de formato personalizado de la [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, de la [fecha estándar y Cadenas de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un modelo de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato más amplio de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
> [!NOTE]
>  En lugar de requerir que `s` se ajusta a un formato único para la operación de análisis se realice correctamente, puede llamar el <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método y especificar varios formatos permitidos. Esto hace que la operación de análisis más probable que sea correcta.  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos en `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. La tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena, llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que represente la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no se realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica ese espacio en blanco no definido en `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener los, interna, iniciales y finales no definidos en los espacios en blanco `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza utilizando los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` no tiene un componente de fecha, la fecha de devuelto <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si se encuentra en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión en un <xref:System.DateTime> valor de fecha y hora con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este marcador impide principalmente la conversión de horas UTC en horas locales.|  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definido por el `provider` parámetro, tal y como es el formato exacto de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un personalizado <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> método. Tenga en cuenta que la cadena "5/01/2009 8:30 A.M." no se puede analizar correctamente cuando el `styles` parámetro es igual a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> porque no se permiten espacios iniciales por `format`. Además, la cadena "5/01/2009 09:00" no se puede analizar correctamente con un `format` de "MM/dd/yyyyhh:mm" porque la cadena de fecha no preceder el número del mes con un cero a la izquierda, como `format` requiere.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTime.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha que coincide con cualquiera de los modelos asignados a la `formats` parámetro. Si la cadena `s` no coincide con cualquiera de estos patrones con cualquiera de las variaciones definidas por el `styles` parámetro, el método produce una <xref:System.FormatException>. Además de comparar `s` para varios modelos de formato, en lugar de a un patrón de formato único, esta sobrecarga se comporta igual que el <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 El `s` parámetro contiene la fecha y hora para analizar. Si el `s` parámetro contiene solo una hora y ninguna fecha, se utiliza la fecha actual, a menos que la `style` parámetro incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca, en cuyo caso la fecha predeterminada (`DateTime.Date.MinValue`) se utiliza. Si el `s` parámetro no contiene solo una fecha y ninguna hora, medianoche (00: 00:00) se utiliza. El `style` parámetro también determina si el `s` parámetro puede contener inicial, espacio en blanco interno o final distintos de los permitidos por una de las cadenas de formato de caracteres `formats`.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcas, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca no convertir la hora Universal coordinada (UTC) en una hora local y establecer la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `formats` parámetro contiene una matriz de patrones, uno de los cuales `s` debe coincidir exactamente con la operación de análisis es sea correcta. Los patrones en el `formats` parámetro consta de uno o varios especificadores de formato personalizado de la [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, de la [Cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un modelo de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato más amplio de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos en `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. La tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena, llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que represente la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no se realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica ese espacio en blanco no definido en `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener los, interna, iniciales y finales no definidos en los espacios en blanco `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza utilizando los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` no tiene un componente de fecha, la fecha de devuelto <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si se encuentra en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión a una fecha y hora con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este marcador impide principalmente la conversión de horas UTC en horas locales.|  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definido por el `provider` parámetro, tal y como es el formato exacto de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un personalizado <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método para asegurarse de que se puede analizar correctamente una cadena en un número de posibles formatos.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is an empty string.  -or-  an element of <paramref name="formats" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTime.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the seconds component of the date represented by this instance.</summary>
        <value>Componente de segundos, expresado como un valor entre 0 y 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Second%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">A date and time.</param>
        <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
        <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
        <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.DateTime> objeto consta de un campo de tipo que indica si el valor de hora se basa en la hora local, la hora Universal coordinada (UTC) o ninguna de ellas, y un campo Ticks que contiene un valor de tiempo medido en pasos de 100 nanosegundos. El <xref:System.DateTime.SpecifyKind%2A> método crea un nuevo <xref:System.DateTime> objeto utilizando el parámetro `kind` parámetro y el valor de hora original.  
  
> [!IMPORTANT]
>  El valor devuelto <xref:System.DateTime> valor no representan la misma instantánea en el tiempo como el `value` parámetro, y <xref:System.DateTime.SpecifyKind%2A> no es un método de conversión de zona horaria. En su lugar, deja el tiempo especificado por el `value` parámetro sin cambios y establece la <xref:System.DateTime.Kind%2A> propiedad `kind`. Para obtener información acerca de las conversiones de zona horaria, vea [convertir horas entre zonas de hora](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 El <xref:System.DateTime.SpecifyKind%2A> método resulta útil en escenarios de interoperabilidad que recibe un <xref:System.DateTime> objeto con un campo de tipo no especificado, pero se puede determinar si independiente significa que el campo Ticks representa la hora local o UTC.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para mostrar cómo la <xref:System.DateTime.Kind%2A> influye en la propiedad del <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts the specified time or duration from this instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to subtract.</param>
        <summary>Subtracts the specified date and time from this instance.</summary>
        <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Subtract%28System.DateTime%29> método determina la diferencia entre dos fechas. Para restar un intervalo de tiempo de la instancia actual, llame a la <xref:System.DateTime.Subtract%28System.TimeSpan%29> método. Para restar un intervalo de tiempo determinado de la instancia actual, llame al método que agrega ese intervalo de tiempo a la fecha actual y proporcionar un valor negativo como el argumento del método. Por ejemplo, para restar dos meses desde la fecha actual, llame a la <xref:System.DateTime.AddMonths%28System.Int32%29> método con un valor de -2.  
  
 Si la fecha y hora de la instancia actual es anterior a `value`, el método devuelve un <xref:System.TimeSpan> objeto que representa un intervalo de tiempo negativo. Es decir, el valor de todas sus propiedades distinto de cero (como <xref:System.TimeSpan.Days%2A> o <xref:System.TimeSpan.Ticks%2A>) es negativo.  
  
 El <xref:System.DateTime.Subtract%28System.DateTime%29> método no tiene en cuenta el valor de la <xref:System.DateTime.Kind%2A> propiedad de los dos <xref:System.DateTime> valores al realizar la resta. Antes de restar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas de la misma zona horaria. En caso contrario, el resultado incluirá la diferencia entre zonas horarias.  
  
> [!NOTE]
>  El <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> método tiene en cuenta la diferencia entre las zonas horarias cuando se realiza la resta.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Subtracts the specified duration from this instance.</summary>
        <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Subtract%28System.TimeSpan%29> método devuelve la fecha en que una diferencia de intervalo de tiempo especificado de la instancia actual. Para determinar el intervalo de tiempo entre dos fechas, llame a la <xref:System.DateTime.Subtract%28System.DateTime%29> método. Para restar un intervalo de tiempo determinado de la instancia actual, llame al método que agrega ese intervalo de tiempo a la fecha actual y proporcionar un valor negativo como el argumento del método. Por ejemplo, para restar dos meses desde la fecha actual, llame a la <xref:System.DateTime.AddMonths%28System.Int32%29> método con un valor de -2.  
  
 Este método no cambia el valor de esta <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 Normalmente, el <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método resta un <xref:System.TimeSpan> objeto que representa un intervalo de tiempo positivo y devuelve un <xref:System.DateTime> valor que es anterior a la fecha y hora de la instancia actual. Sin embargo, si la <xref:System.TimeSpan> objeto representa un intervalo de tiempo negativo, el <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método devuelve un <xref:System.DateTime> valor posterior a la fecha y hora de la instancia actual.  
  
 El <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método le permite restar un intervalo de tiempo formada por más de una unidad de tiempo como (un número determinado de horas) y un número determinado de minutos. Para restar una sola unidad de tiempo (como años, meses o días) de la <xref:System.DateTime> instancia, puede pasar un valor numérico negativo como un parámetro a cualquiera de los métodos siguientes:  
  
-   <xref:System.DateTime.AddYears%2A>, que se resta un número específico de años a partir de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddMonths%2A>, para restar un número concreto de meses a partir de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddDays%2A>, para restar un número concreto de días a partir de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddHours%2A>, para restar un número concreto de horas de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddMinutes%2A>, para restar un número concreto de minutos de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddSeconds%2A>, para restar un número concreto de segundos de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, para restar un número concreto de milisegundos de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddTicks%2A>, para restar un número concreto de pasos de la instancia de fecha y hora actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
        <returns>The current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">The desired type.</param>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
        <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método rellena los `info` parámetro con el <xref:System.DateTime.Ticks%2A> y <xref:System.DateTime.Kind%2A> valores de propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
        <value>Número de pasos que representan la fecha y hora de esta instancia. El valor se encuentra comprendido entre <see langword="DateTime.MinValue.Ticks" /> y <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un TIC único representa cien nanosegundos o una diez millonésima de segundo. Hay 10.000 pasos en un milisegundo o tics de 10 millones en un segundo.  
  
 El valor de esta propiedad representa el número de intervalos de 100 nanosegundos transcurridos desde 12:00:00 de la medianoche del 1 de enero de 0001 (0: 00:00 UTC del 1 de enero de 0001, en el calendario gregoriano), que representa <xref:System.DateTime.MinValue?displayProperty=nameWithType>. No incluye el número de pasos que se atribuye al leap segundos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Ticks%2A> propiedad para mostrar el número de pasos transcurridos desde el principio del siglo XXI y crear instancias de un <xref:System.TimeSpan> objeto. La <xref:System.TimeSpan> objeto, a continuación, se usa para mostrar el tiempo transcurrido con otros intervalos de tiempo.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for this instance.</summary>
        <value>Intervalo de tiempo que representa la fracción de día que ha transcurrido desde medianoche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la <xref:System.DateTime.Date%2A> propiedad. que devuelve un <xref:System.DateTime> valor que representa una fecha sin su componente de hora, el <xref:System.DateTime.TimeOfDay%2A> propiedad devuelve un <xref:System.TimeSpan> valor que representa un <xref:System.DateTime> componente de hora del valor.  
  
 Si desea mostrar la hora del día o recuperar la representación de cadena de la hora del día de un <xref:System.DateTime> valor, puede llamar en su lugar una sobrecarga de la <xref:System.DateTime.ToString%2A> método que tiene un `format` parámetro o utilice el [formatos compuestos ](~/docs/standard/base-types/composite-formatting.md) característica con la "t" o la cadena de formato estándar "T".  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el valor de la <xref:System.DateTime.TimeOfDay%2A> propiedad para una matriz de <xref:System.DateTime> valores. También se compara el valor devuelto con la cadena devuelta por la cadena de formato estándar "t" en una operación de formato compuesta.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
        <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.DateTime.ToBinary%2A> método para convertir el valor del elemento actual <xref:System.DateTime> objeto a un valor binario. Posteriormente, usar el valor binario y el <xref:System.DateTime.FromBinary%2A> método para volver a crear la versión original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En algunos casos, el <xref:System.DateTime> valor devuelto por la <xref:System.DateTime.FromBinary%2A> método no es idéntico al original <xref:System.DateTime> valor proporcionado a la <xref:System.DateTime.ToBinary%2A> método. Para obtener más información, vea la sección siguiente, "Ajuste de la hora Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de la hora local  
 Una hora local, que es una hora de Universal coordinada ajustada a la zona horaria local, se representa mediante un <xref:System.DateTime> estructura cuyo <xref:System.DateTime.Kind%2A> propiedad tiene el valor <xref:System.DateTimeKind.Local>. Cuando se restaura una variable local <xref:System.DateTime> valor de la representación binaria que se genera mediante el <xref:System.DateTime.ToBinary%2A> método, el <xref:System.DateTime.FromBinary%2A> método puede ajustar el valor ha vuelto a crear para que no es igual al valor original. Esta desincronización puede aparecer bajo las condiciones siguientes:  
  
-   Si una variable local <xref:System.DateTime> el objeto se serializa en una zona horaria por la <xref:System.DateTime.ToBinary%2A> (método) y, a continuación, se deserializa en una zona horaria diferente por la <xref:System.DateTime.FromBinary%2A> /método siguiente, la hora local representada por el cuadro <xref:System.DateTime> objeto se ajusta automáticamente en la segunda zona horaria.  
  
     Por ejemplo, considere un <xref:System.DateTime> objeto que representa una hora local de 3 P.M. Una aplicación que se está ejecutando la zona horaria del Pacífico Zona horaria del Pacífico usa el <xref:System.DateTime.ToBinary%2A> método para convertir todo esto <xref:System.DateTime> objeto a un valor binario. Otra aplicación que se está ejecutando la zona horaria del Pacífico Zona horaria del este usa el <xref:System.DateTime.FromBinary%2A> método para convertir el valor binario en un nuevo <xref:System.DateTime> objeto. El valor de la nueva <xref:System.DateTime> objeto es 18: 00, que representa el mismo punto en el tiempo que el original 3 P.M. valor, pero se ajusta a la hora local en la zona de hora.  
  
-   Si la representación binaria de una variable local <xref:System.DateTime> valor representa una hora no válida en la zona horaria local del sistema en el que <xref:System.DateTime.FromBinary%2A> es llama, la hora se ajusta para que sea válido.  
  
     Por ejemplo, se produce la transición desde el horario estándar al horario de verano de la zona horaria del Pacífico Zona horaria del Pacífico en 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. En el ejemplo siguiente se muestra que cuando una hora que pertenece a este intervalo se convierte en un valor binario por el <xref:System.DateTime.ToBinary%2A> método y, a continuación, se restaura por la <xref:System.DateTime.FromBinary%2A> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y un valor de tiempo pueden estar sujetos a modificación pasándolo al <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> método, como en el ejemplo se ilustra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Consideraciones de versión  
 A partir de .NET Framework versión 2.0, un <xref:System.DateTime> estructura consta de un campo Kind privado, que indica si el valor de tiempo especificado se basa en la hora local, la hora Universal coordinada (UTC) o ninguna de ellas y un campo privado Ticks, que contiene el número de pasos de 100 nanosegundos que especifique una fecha y hora. El campo Ticks puede tener acceso mediante el <xref:System.DateTime.Ticks%2A> propiedad y el campo de tipo pueden obtenerse con el <xref:System.DateTime.Kind%2A> propiedad.  
  
 Antes de .NET Framework 2.0, si serializa un <xref:System.DateTime> objeto manualmente en lugar de utilizar una interfaz de serialización como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, sólo era necesario serializar los datos del campo Ticks en el <xref:System.DateTime> estructura. A partir de la versión 2.0, también se deben serializar los datos del campo Kind.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current date.</summary>
        <value>Objeto que se ha establecido en la fecha del día, con el componente de hora establecido en 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad devuelve <xref:System.DateTimeKind.Local>.  
  
 Dado que devuelve la fecha actual sin la hora actual, la <xref:System.DateTime.Today%2A> propiedad es adecuada para su uso en aplicaciones que solo funcionan con fechas. Para obtener más información, consulte [Choosing Between DateTime, DateTimeOffset, TimeSpan y TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). En cambio, el <xref:System.DateTime.TimeOfDay%2A> propiedad devuelve la hora actual sin la fecha actual y el <xref:System.DateTime.Now%2A> propiedad devuelve la fecha actual y la hora actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Date%2A> propiedad que se va a recuperar la fecha actual. También muestra cómo un <xref:System.DateTime> valor puede tener el formato con algunas de las fechas estándar y cadenas de formato de hora. Tenga en cuenta que el resultado generado por la tercera llamada a la <xref:System.DateTime.ToString%28System.String%29> método usa el especificador de formato g para incluir el componente de hora, que es cero.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuándo una aplicación crea, tiene acceso o escribe en un archivo.  
  
 El <xref:System.DateTime.ToFileTime%2A> método usa el <xref:System.DateTime.Kind%2A> propiedad para determinar si la actual <xref:System.DateTime> objeto es una hora local, una hora UTC o una hora que se trata como una hora local de tipo no especificado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToFileTime%2A> método.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>Por lo general, el <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restauraciones un <see cref="T:System.DateTime" /> valor guardada por el <see cref="M:System.DateTime.ToFileTime" /> método. Sin embargo, los dos valores pueden diferir en las siguientes condiciones: - si la serialización y deserialización de la <see cref="T:System.DateTime" /> producirse en distintas zonas horarias. Por ejemplo, si un <see cref="T:System.DateTime" /> valor con un tiempo de 12:30 P.M. de la zona horaria del Pacífico Zona de hora se serializa y deserializa a continuación, la zona horaria del Pacífico Zona horaria del Pacífico, el valor original de 12:30 p. M. se ajusta a las 9:30 A.M. para reflejar la diferencia entre las dos zonas horarias.  -If el <see cref="T:System.DateTime" /> valor que se serializa representa una hora no válida en la zona horaria local. En este caso, el <see cref="M:System.DateTime.ToFileTime" /> método ajusta el restaurada <see cref="T:System.DateTime" /> valor para que represente una hora válida en la zona horaria local.  Por ejemplo, se produce la transición desde el horario estándar al horario de verano de la zona horaria del Pacífico Zona horaria del Pacífico en 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. En el ejemplo siguiente se muestra que cuando una hora que pertenece a este intervalo se convierte en un valor entero largo por el <see cref="M:System.DateTime.ToFileTime" /> método y, a continuación, se restaura por la <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y un valor de tiempo pueden estar sujetos a modificación pasándolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como en el ejemplo se ilustra.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la medianoche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuándo una aplicación crea, tiene acceso o escribe en un archivo.  
  
 El <xref:System.DateTime.ToFileTimeUtc%2A> método usa la <xref:System.DateTime.Kind%2A> propiedad para determinar si la actual <xref:System.DateTime> objeto es una hora local, una hora UTC o una hora que se trata como una hora UTC de tipo no especificado. Si es una hora local, convierte la hora a la hora UTC antes de realizar la conversión a una hora de archivo de Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToFileTimeUtc" /> a veces se utiliza el método para convertir una hora local a UTC y posteriormente para restaurar mediante una llamada a la <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método seguido por el <see cref="M:System.DateTime.ToLocalTime" /> método. Sin embargo, si el tiempo original representa una hora no válida en la zona horaria local, los dos valores de hora local no será iguales. Para obtener más información, consulte el <see cref="M:System.DateTime.ToLocalTime" /> método.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La hora local es igual a la hora de la hora Universal coordinada (UTC) más el desplazamiento de UTC. Para obtener más información sobre el desplazamiento de UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversión también tiene en cuenta la regla de horario de verano que se aplica a la hora representada por el actual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, la <xref:System.DateTime.ToLocalTime%2A> método reconoce sólo la regla de ajuste actual al convertir a la hora UTC a la hora local. Como resultado, las conversiones para períodos anteriores a la regla de ajuste actual entrada en vigor pueden no reflejar exactamente la diferencia entre la hora UTC y la hora local.  
  
 A partir de .NET Framework versión 2.0, el valor devuelto por la <xref:System.DateTime.ToLocalTime%2A> método viene determinado por la <xref:System.DateTime.Kind%2A> propiedad del elemento actual <xref:System.DateTime> objeto. En la tabla siguiente se describe los posibles resultados.  
  
|Kind|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Esta instancia de <xref:System.DateTime> se convierte a la hora local.|  
|<xref:System.DateTimeKind.Local>|Se realiza ninguna conversión.|  
|<xref:System.DateTimeKind.Unspecified>|Esta instancia de <xref:System.DateTime> se supone que es una hora UTC, y la conversión se realiza como si <xref:System.DateTime.Kind%2A> estaban <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  El <xref:System.DateTime.ToLocalTime%2A> método convierte un <xref:System.DateTime> valor a la hora UTC a la hora local. Para convertir la hora de cualquier zona horaria designada en la hora local, utilice el <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> método.  
  
 El valor devuelto por la conversión es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad siempre devuelve <xref:System.DateTimeKind.Local>. Por lo tanto, se devuelve un resultado válido aunque <xref:System.DateTime.ToLocalTime%2A> se aplique varias veces al mismo <xref:System.DateTime>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToLocalTime%2A> método. Tenga en cuenta que el resultado exacto depende de la referencia cultural actual y la zona horaria local del sistema en el que se ejecuta.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para mostrar cómo la <xref:System.DateTime.Kind%2A> influye en la propiedad del <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Puede usar el <see cref="M:System.DateTime.ToLocalTime" /> método para restaurar un valor de tiempo que se convirtió a UTC por y fecha local el <see cref="M:System.DateTime.ToUniversalTime" /> o <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método. Sin embargo, si el tiempo original representa una hora no válida en la zona horaria local, no coincidirán el valor restaurado. Cuando el <see cref="M:System.DateTime.ToLocalTime" /> método convierte una hora a la hora UTC en la zona horaria local, también ajusta la hora para que sea válida en la zona horaria local.  Por ejemplo, se produce la transición desde el horario estándar al horario de verano de la zona horaria del Pacífico Zona horaria del Pacífico en 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. En el ejemplo siguiente se muestra que cuando una hora que pertenece a este intervalo se convierte a UTC mediante la <see cref="M:System.DateTime.ToUniversalTime" /> método y, a continuación, se restaura por la <see cref="M:System.DateTime.ToLocalTime" /> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y un valor de tiempo pueden estar sujetos a modificación pasándolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como en el ejemplo se ilustra.  [! code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
        <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto se ha formateado con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto cuando se especifica "D" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToLongDateString%2A> método tiene en cuenta la referencia cultural. Refleja el patrón definido por la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, para la referencia cultural en-US, el patrón de fecha larga estándar es "dddd, MMMMdd, aaaa"; para la referencia cultural de-DE, es "dddd, d. MMMMaaaa"; para la referencia cultural ja-JP, es "aaaa '?' M'? ' d. '?'". También se puede personalizar la cadena de formato concreta en un equipo determinado para que difiera de la cadena de formato de fecha larga estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad. Para obtener más información acerca de los caracteres de formato, los patrones de formato y la salida que se producen, consulte el [Formatting Types](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea la <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToLongDateString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
        <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto se ha formateado con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto cuando se especifica "T" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToLongTimeString%2A> método tiene en cuenta la referencia cultural. Refleja el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propiedad de la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, para la referencia cultural en-US, el patrón de hora larga estándar es ": mm: ss"; para la referencia cultural de-DE, es "Hh"; para la referencia cultural ja-JP, es "Ss". También se puede personalizar la cadena de formato concreta en un equipo determinado para que difiera de la cadena de formato de hora larga estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad. Para obtener más información acerca de los caracteres de formato, los patrones de formato y la salida que se producen, consulte el [Formatting Types](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea la <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToLongTimeString%2A> método.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
        <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fecha de automatización OLE se implementa como un número de punto flotante cuya parte es el número de días antes o después de la medianoche del 30 de diciembre de 1899 y cuyo componente de fracción representa el tiempo en ese día dividido por 24. Por ejemplo, medianoche, 31 de diciembre de 1899 se representa como 1,0; 6 A.M., 1 de enero de 1900 se representa mediante 2.25; medianoche, 29 de diciembre de 1899 se representa como -1,0; y 6 A.M., 29 de diciembre de 1899 se representa como -1,25.  
  
 La fecha de automatización OLE base es la medianoche del 30 de diciembre de 1899. La fecha de automatización OLE mínima es la medianoche del 1 de enero de 0100. La fecha máxima de automatización OLE es igual a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, el último momento del 31 de diciembre 9999.  
  
 El <xref:System.DateTime.ToOADate%2A> método produce una <xref:System.OverflowException> si la instancia actual representa una fecha que es posterior a <xref:System.DateTime.MinValue> y anteriores a la medianoche 1de, 0100. Sin embargo, si el valor de la instancia actual es <xref:System.DateTime.MinValue>, el método devuelve 0.  
  
 Para obtener más información sobre la automatización OLE, vea el [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
        <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto se ha formateado con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto cuando se especifica "d" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToShortDateString%2A> método tiene en cuenta la referencia cultural. Refleja el patrón definido por la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, para la referencia cultural en-US, el patrón de fecha corta estándar es "M/d/aaaa"; para la referencia cultural de-DE, es "dd. MM.yyyy"; para la referencia cultural ja-JP, es "aaaa/M/d". También se puede personalizar la cadena de formato concreta en un equipo determinado para que difiera de la cadena de formato de fecha corta estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propiedad. Para obtener más información acerca de los caracteres de formato, los patrones de formato y la salida que se producen, consulte el [Formatting Types](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea la <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToShortDateString%2A> método. También muestra que el resultado de llamar al método el <xref:System.DateTime.ToShortDateString%2A> método es idéntico a llamar a la <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método con "d" como el parámetro de formato.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
        <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto se ha formateado con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto cuando se especifica "t" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToShortTimeString%2A> método tiene en cuenta la referencia cultural. Refleja el patrón definido por la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, para la referencia cultural en-US, el patrón de hora corta estándar es "h: mm tt"; para la referencia cultural de-DE, es "Hh: mm"; para la referencia cultural ja-JP, es "H: mm". También se puede personalizar la cadena de formato concreta en un equipo determinado para que difiera de la cadena de formato de hora corta estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad. Para obtener más información acerca de los caracteres de formato, los patrones de formato y la salida que se producen, consulte el [Formatting Types](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea la <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToShortTimeString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the formatting conventions of the current culture.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto se da formato con la fecha general y el especificador de formato de hora ("G"). Para dar formato con un especificador de formato de hora y fecha específica, llame a la <xref:System.DateTime.ToString%28System.String%29> método. Para dar formato mediante la fecha general y el especificador de formato de hora ("G") para una referencia cultural concreta, llame a la <xref:System.DateTime.ToString%28System.IFormatProvider%29> método. Para dar formato con una fecha determinada y el especificador de formato de hora y las convenciones de una referencia cultural concreta, llame a la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> método.  
  
 Este método usa la información de formato que deriva de la referencia cultural actual. En concreto, combina las cadenas de formato personalizado devueltas por la <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> y <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propiedades de la <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la `Thread.CurrentThread.CurrentCulture.DateTimeFormat` propiedad. Para obtener más información, consulta <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Otras sobrecargas de la <xref:System.DateTime.ToString%2A> método permiten especificar la referencia cultural cuyo formato que se va a usar como definir el modelo de salida de la <xref:System.DateTime> valor.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo la representación de cadena de un <xref:System.DateTime> valor devuelto por la <xref:System.DateTime.ToString> método depende de la referencia cultural del subproceso actual. Cambia la referencia cultural del subproceso actual de en-US a fr-FR y ja-JP. y en cada caso llama el <xref:System.DateTime.ToString> método para devolver la representación de cadena de un valor de fecha y hora utilizando esa referencia cultural.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural actual. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.HijriCalendar" /> clase cuando la referencia cultural actual es árabe (Siria).  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs# (2)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ de vb de código DateTime.ToString.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto se da formato con la fecha general y el especificador de formato de hora ("G"), que da formato a un resultado mediante el patrón de fecha corta y la hora larga.  
  
 El formato de fecha corta y patrón de hora larga se define mediante el `provider` parámetro. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyas convenciones de formato se pueden reflejarse en la cadena devuelta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato de la cadena devuelta.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un objeto personalizado que implementa el <xref:System.IFormatProvider> interfaz. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.DateTimeFormatInfo> se usa el objeto asociado a la referencia cultural actual. Para obtener más información, consulta <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la representación de cadena de una fecha y hora utilizando <xref:System.Globalization.CultureInfo> objetos que representan cinco referencias culturales diferentes.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural representada por la <paramref name="provider" /> parámetro. Su calendario está definido por el <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propiedad. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.JapaneseCalendar" /> clase.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs# (1)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ de vb de código DateTime.ToString.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ToString%28System.String%29> método devuelve la representación de cadena de un valor de fecha y hora en un formato específico que usa las convenciones de formato de la referencia cultural actual; para obtener más información, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 El `format` parámetro debe contener un carácter especificador de formato único (vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modelo de formato personalizado (vea [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) que define el formato de la cadena devuelta. Si `format` es `null` o una cadena vacía, el especificador de formato general "G", se utiliza.  
  
 Algunos usos de este método son:  
  
-   Obtener una cadena que muestra la fecha y hora en formato de hora y fecha corta de la referencia cultural actual. Para ello, use el especificador de formato "G".  
  
-   Obtener una cadena que contiene solo el mes y año. Para ello, utilice la cadena de formato "MM/aaaa". La cadena de formato utiliza el separador de fecha de la referencia cultural actual.  
  
-   Obtener una cadena que contiene la fecha y hora en un formato concreto. Por ejemplo, el "MM/dd/yyyyHH:mm" cadena de formato muestra la cadena de fecha y hora en un formato fijo como "19 2013 / / 03 / / 18:06". Usa la cadena de formato "/" como separador de fecha fija, independientemente de la configuración específica de la referencia cultural.  
  
-   Al obtener una fecha en un formato comprimido podría usarse para serializar una cadena de fecha. Por ejemplo, la cadena de formato "AAAAMMDD" muestra un año de cuatro dígitos seguido por un mes de dos dígitos y un día de dos dígitos con ningún separador de fecha.  
  
 En el ejemplo siguiente se usa estas tres cadenas de formato para mostrar un valor de fecha y hora utilizando las convenciones de las referencias culturales en-US y fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza cada una de las cadenas de formato de hora y fecha estándar y una selección de cadenas de formato de hora y fecha personalizado para mostrar la representación de cadena de un <xref:System.DateTime> valor. La referencia cultural actual del subproceso para el ejemplo es en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString(System.String)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural actual. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.HebrewCalendar" /> clase cuando la referencia cultural actual es hebreo (Israel).  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs# (3)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ de vb de código DateTime.ToString.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `format` parámetro puede contener un carácter especificador de formato único (vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modelo de formato personalizado (vea [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Si `format` es `null` o una cadena vacía (""), se utiliza el especificador de formato estándar "G".  
  
 El `provider` parámetro define el patrón que corresponde a los especificadores de formato estándar, así como los símbolos y nombres de los componentes de fecha y hora. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyas convenciones de formato se pueden reflejarse en la cadena devuelta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato de la cadena devuelta.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un objeto personalizado que implementa el <xref:System.IFormatProvider> interfaz. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.DateTimeFormatInfo> asociado con el actual se usa la referencia cultural. Para obtener más información, consulta <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa cada una de las cadenas de formato de hora de fecha estándar para mostrar la representación de cadena de una fecha y hora para cuatro referencias culturales diferentes.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 En el ejemplo siguiente se muestra distintas maneras de dar formato a un <xref:System.DateTime> valor con el nombre invariable <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la <paramref name="provider" /> parámetro. Su calendario está definido por el <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propiedad. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.UmAlQuraCalendar" /> clase.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs# (4)] [! [System.DateTime.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ de vb de código DateTime.ToString.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La hora Universal coordinada (UTC) es igual a la hora local menos el desplazamiento de UTC. Para obtener más información sobre el desplazamiento de UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversión también tiene en cuenta la regla de horario de verano que se aplica a la hora representada por el actual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, la <xref:System.DateTime.ToUniversalTime%2A> método reconoce sólo la regla de ajuste actual al convertir de hora local a UTC. Como resultado, las conversiones para períodos anteriores a la regla de ajuste actual entrada en vigor pueden no reflejar exactamente la diferencia entre la hora local y la hora UTC.  
  
 A partir de .NET Framework versión 2.0, el valor devuelto por la <xref:System.DateTime.ToUniversalTime%2A> método viene determinado por la <xref:System.DateTime.Kind%2A> propiedad del elemento actual <xref:System.DateTime> objeto. En la tabla siguiente se describe los posibles resultados.  
  
|Kind|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Se realiza ninguna conversión.|  
|<xref:System.DateTimeKind.Local>|Actual <xref:System.DateTime> objeto se convierte a UTC.|  
|<xref:System.DateTimeKind.Unspecified>|Actual <xref:System.DateTime> objeto se supone que es una hora local y la conversión se realiza como si <xref:System.DateTime.Kind%2A> estaban <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  El <xref:System.DateTime.ToUniversalTime%2A> método convierte un <xref:System.DateTime> valor de la hora local a UTC. Para convertir la hora en una zona horaria no local a UTC, use la <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método. Para convertir una hora cuyo desplazamiento de UTC se conoce, utilice la <xref:System.DateTimeOffset.ToUniversalTime%2A> método.  
  
 Si el valor de instancia de fecha y hora es una hora ambigua, este método supone que es una hora estándar. (Una hora ambigua es aquella que se puede asignar a una hora estándar o a un horario de verano en la zona horaria local) Si el valor de instancia de fecha y hora es una hora no válida, este método simplemente resta la hora local a la hora UTC de la zona horaria local de desplazamiento para devolver la hora UTC. (Una hora no válida es aquella que no existe debido a la aplicación de reglas de ajuste del horario de verano).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToUniversalTime%2A> método.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para mostrar cómo la <xref:System.DateTime.Kind%2A> influye en la propiedad del <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToUniversalTime" /> método a veces se utiliza para convertir una hora local a UTC. El <see cref="M:System.DateTime.ToLocalTime" /> , a continuación, se llama el método para restaurar la hora local original. Sin embargo, si el tiempo original representa una hora no válida en la zona horaria local, los dos valores de hora local no será iguales. Para obtener información adicional y un ejemplo, vea el <see cref="M:System.DateTime.ToLocalTime" /> método.  En [! Sistemas de include[winxp](~/includes/winxp-MD.MD)], la <see cref="M:System.DateTime.ToUniversalTime" /> método reconoce sólo la regla de ajuste actual para la zona horaria local, que se aplica a todas las fechas, incluidas las fechas de nivel inferior (es decir, las fechas anteriores a la fecha de inicio la regla de ajuste actual). Aplicaciones que se ejecutan [! INCLUDE[winxp](~/includes/winxp-MD.MD)] que requieren históricamente precisa fecha local y cálculos de tiempo deben solucionar este comportamiento mediante la <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> método para recuperar un <see cref="T:System.TimeZoneInfo" /> objeto que se corresponde con la zona horaria local y llamar a su <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> método.  En el ejemplo siguiente se muestra la diferencia entre el <see cref="M:System.DateTime.ToUniversalTime" /> y <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> métodos en un [! Sistema include[winxp](~/includes/winxp-MD.MD)] la zona horaria del Pacífico de EE. UU. El primer dos llamadas al método aplican la regla de ajuste de zona horaria actual (que entró en vigor en 2007) a una fecha en el año 2006. La regla de ajuste actual proporciona la transición al horario de verano en el segundo domingo de marzo; la regla anterior, que estaba en efecto proporcionado para la transición al horario de verano para que tenga lugar el primer domingo de abril de 2006. La tercera llamada de método con precisión realiza esta fecha histórico y conversión de tiempo.  [! code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método es similar a la <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> método, salvo que la <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> método no produce una excepción si se produce un error en la conversión.  
  
 La cadena `s` se analiza utilizando la información de formato actual <xref:System.Globalization.DateTimeFormatInfo> objeto, que es proporcionado implícitamente por la referencia cultural del subproceso actual.  
  
 Este método intenta omitir los datos no reconocidos, si es posible y rellena la falta de mes, día y la información del año con la fecha actual. Si `s` contiene solo una fecha y ninguna hora, este método supone que la hora es 12:00 de la noche. Si `s` incluye un componente de fecha con un año de dos dígitos, se convierte en un año de calendario actual de la referencia cultural actual en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Cualquier iniciales, centrales o caracteres de espacio en blanco en final `s` se omite. La fecha y hora pueden ir entre corchetes con un par de iniciales y finales de los caracteres de signo de número ('#', u+0023) y pueden terminar con uno o más caracteres NULL (u+0000).  
  
 Dado que el <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método intenta analizar la representación de cadena de una fecha y hora utilizando las reglas de formato de la referencia cultural actual, intenta analizar una cadena determinada entre referencias culturales diferentes puede producir errores o se devuelven resultados diferentes. Si una fecha concreta y el formato de hora se analizará en distintas configuraciones regionales, use la <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método o una de las sobrecargas de los <xref:System.DateTime.TryParseExact%2A> método y proporcione un especificador de formato.  
  
 Si `s` es la representación de cadena de un día bisiesto de un año bisiesto en el calendario actual, el método analiza `s` correctamente. Si `s` es la representación de cadena de un día bisiesto de un año bisiesto en el calendario actual de la referencia cultural actual, se produce un error en la operación de análisis y el método devuelve `false`.  
  
 Si `s` no contiene ninguna información de zona horaria, `result` contiene un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> cuando el método devuelve. Si la cadena se analizará contiene información de zona horaria, `result` contiene un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> cuando el método devuelve.  
  
   
  
## Examples  
 En el ejemplo siguiente se pasa un número de cadenas de fecha y hora a la <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>El formato se ve influenciado por las propiedades del elemento actual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que se derivan de forma predeterminada el ** elemento de configuración Regional y de idioma opciones ** en el Panel de Control. El <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente puede errores y devolverán <see langword="False" /> si actual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> y <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propiedades se establecen en el mismo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analiza una cadena que puede contener información de fecha, hora y zona horaria. Es similar a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, salvo que la <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método no produce una excepción si se produce un error en la conversión.  
  
 Este método intenta omitir los datos no reconocidos y análisis `s` completamente. Si `s` contiene una hora pero ninguna fecha, el método por el valor predeterminado sustituye la fecha actual o, si `styles` incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> marca, sustituye `DateTime.Date.MinValue`. Si `s` contiene una fecha pero ninguna hora, se utiliza la medianoche como hora predeterminada de 12:00. Si está presente la fecha pero consta de su componente de año de dos dígitos, se convierte en un año en el `provider` calendario actual del parámetro en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Cualquier iniciales, centrales o finales caracteres de espacio en blanco en `s` se omiten. La fecha y hora pueden ir entre corchetes con un par de iniciales y finales de los caracteres de signo de número ('#', u+0023) y pueden terminar con uno o más caracteres NULL (u+0000).  
  
 Los formatos válidos específicos de fecha y elementos de tiempo, así como los nombres y símbolos utilizados en las fechas y horas, se definen mediante el `provider` parámetro, que puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo formato se usa en la `s` parámetro. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato usado en `s`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato usado en `s`.  
  
-   Implementación de <xref:System.IFormatProvider> personalizada. Su <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método devuelve un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato usado en `s`.  
  
 Si `provider` es `null`, se usa la referencia cultural actual.  
  
 Si `s` es la representación de cadena de un día bisiesto de un año bisiesto en el calendario actual, el método analiza `s` correctamente. Si `s` es la representación de cadena de un día bisiesto de un año bisiesto en el calendario actual de `provider`, se produce un error en la operación de análisis y el método devuelve `false`.  
  
 El `styles` parámetro define la interpretación exacta de la cadena analizada y cómo debe controlar la operación de análisis. Puede ser uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración, tal como se describe en la tabla siguiente.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena, llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que represente la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no se realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Aunque sea válido, este valor se omite. Espacio en blanco interno se permite en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Aunque sea válido, este valor se omite. Espacio en blanco inicial está permitido en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Aunque sea válido, este valor se omite. Los espacios en blanco finales se permiten en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener los, interna, iniciales y finales de espacios en blanco. Éste es el comportamiento predeterminado. No se puede invalidar proporcionando más restrictiva <xref:System.Globalization.DateTimeStyles> valor de enumeración como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Aunque sea válido, este valor se omite.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión de una cadena de fecha y hora en un <xref:System.DateTime> valor con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, esta cadena se crea mediante una llamada a la <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método utilizando los especificadores de formato estándar "o", "r" o "u".|  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> a menos que un `styles` marca indica lo contrario. Si `s` incluye la zona horaria o información de desplazamiento de zona horaria, el <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método realiza cualquier conversión horaria necesaria y devuelve uno de los siguientes:  
  
-   A <xref:System.DateTime> valor cuya fecha y hora refleja la hora local y cuya <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   O bien, si `styles` incluye la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marca un <xref:System.DateTime> valor cuya fecha y hora refleja la hora UTC y cuya <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Este comportamiento puede invalidarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca.  
  
## <a name="parsing-custom-cultures"></a>Analizar las referencias culturales personalizadas  
 Para analizar una cadena de fecha y hora generada para una referencia cultural personalizada, utilice la <xref:System.DateTime.TryParseExact%2A> en lugar del método la <xref:System.DateTime.TryParse%2A> método para mejorar la probabilidad de que la operación de análisis se realizará correctamente. Una cadena de fecha y hora de la referencia cultural personalizada puede ser complicada y difícil de analizar. El <xref:System.DateTime.TryParse%2A> método intenta analizar una cadena con modelos implícitos de análisis, todos los cuales pueden producir un error. En cambio, la <xref:System.DateTime.TryParseExact%2A> método exige que se designen explícitamente uno o varios modelos exactos de análisis que se lleven a cabo correctamente.  
  
 Para obtener más información acerca de las referencias culturales personalizadas, consulte el <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
        <block subset="none" type="usage">
          <para>El formato se ve influenciado por las propiedades del elemento actual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que le ha suministrado el <paramref name="provider" /> parámetro. El <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente puede errores y devolverán <see langword="False" /> si actual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> y <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propiedades se establecen en el mismo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">The required format of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <c>s</c>.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <c>s</c> or <c>format</c> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <c>format</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha, que debe estar en el formato definido por el `format` parámetro. Es similar a la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, salvo que la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método no produce una excepción si se produce un error en la conversión.  
  
 El `s` parámetro contiene la fecha y hora para analizar y debe estar en un formato definido por el `format` parámetro. Si están presentes en los elementos de fecha, hora y zona horaria `s`, también deben aparecer en el orden especificado por `format`. Si `format` define una fecha con ningún elemento de tiempo y el análisis de la operación se realiza correctamente, resultante <xref:System.DateTime> valor tiene una hora de la medianoche (00: 00:00). Si `format` define una hora con ningún elemento de fecha y el análisis de la operación se realiza correctamente, resultante <xref:System.DateTime> valor predeterminada tiene una fecha de `DateTime.Now.Date`, o tiene una fecha de `DateTime.MinValue.Date` si `styles` incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca. El `style` parámetro determina si el `s` parámetro puede contener caracteres de espacio en blanco iniciales, internos o finales.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcas, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si s contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca no convertir la hora Universal coordinada (UTC) en una hora local y establecer la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `format` parámetro contiene un patrón que se corresponde con el formato esperado de la `s` parámetro. El patrón en el `format` parámetro consta de uno o varios especificadores de formato personalizado de la [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, de la [Cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un modelo de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato más amplio de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
> [!NOTE]
>  En lugar de requerir que `s` se ajusta a un formato único para la operación de análisis se realice correctamente, puede llamar el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método y especificar varios formatos permitidos. Esto hace que la operación de análisis más probable que sea correcta.  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definido por el `provider` parámetro, tal y como es el formato exacto de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un personalizado <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos en `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. La tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena, llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que represente la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no se realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica ese espacio en blanco no definido en `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener los, interna, iniciales y finales no definidos en los espacios en blanco `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza utilizando los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` no tiene un componente de fecha, la fecha de devuelto <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si se encuentra en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión en un <xref:System.DateTime> valor con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este marcador impide principalmente la conversión de horas UTC en horas locales.|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método. Tenga en cuenta que la cadena "5/01/2009 8:30 A.M." no se puede analizar correctamente cuando el `styles` parámetro es igual a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> porque no se permiten espacios iniciales por `format`. Además, la cadena "5/01/2009 09:00" no se puede analizar correctamente con un `format` de "MM/dd/yyyyhh:mm" porque la cadena de fecha no preceder el número del mes con un cero a la izquierda, como `format` requiere.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTime.TryParseExact" /> método <see langword="false" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <c>s</c> or <c>formats</c> is <see langword="null" />, <c>s</c> or an element of <c>formats</c> is an empty string, or the format of <c>s</c> is not exactly as specified by at least one of the format patterns in <c>formats</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha que coincide con cualquiera de los modelos asignados a la `formats` parámetro. Es como la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, excepto el <xref:System.DateTime.TryParseExact%2A> método no produce una excepción si se produce un error en la conversión.  
  
 El `s` parámetro contiene la fecha y hora para analizar. Si el `s` parámetro contiene solo una hora y ninguna fecha, se utiliza la fecha actual, a menos que la `style` parámetro incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca, en cuyo caso la fecha predeterminada (`DateTime.Date.MinValue`) se utiliza. Si el `s` parámetro no contiene solo una fecha y ninguna hora, medianoche (00: 00:00) se utiliza. El `style` parámetro también determina si el `s` parámetro puede contener inicial, espacio en blanco interno o final distintos de los permitidos por una de las cadenas de formato de caracteres `formats`.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcas, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si s contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede cambiarse mediante el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca no convertir la hora Universal coordinada (UTC) en una hora local y establecer la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `formats` parámetro contiene una matriz de patrones, uno de los cuales `s` debe coincidir exactamente con la operación de análisis es sea correcta. Los patrones en el `formats` parámetro constan de uno o varios especificadores de formato personalizado de la [cadenas de formato de hora y fecha personalizado](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, de la [Cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un modelo de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato más amplio de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definido por el `provider` parámetro, tal y como es el formato exacto de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   A <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un personalizado <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos en `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. La tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena, llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que represente la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no se realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica ese espacio en blanco no definido en `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica ese espacio en blanco no definido en `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener los, interna, iniciales y finales no definidos en los espacios en blanco `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza utilizando los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` no tiene un componente de fecha, la fecha de devuelto <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si se encuentra en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad de devuelto <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión en un <xref:System.DateTime> valor con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este marcador impide principalmente la conversión de horas UTC en horas locales.|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método para asegurarse de que se puede analizar correctamente una cadena en un número de posibles formatos.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>En el [! INCLUDE[net_v40_short](~/includes/NET-V40-short-MD.MD)], la <see cref="Overload:System.DateTime.TryParseExact" /> método <see langword="false" /> si la cadena se analizará contiene un componente de hora y un designador AM/PM que no están en el acuerdo. En el [! INCLUDE[net_v35_short](~/includes/NET-v35-short-MD.MD)] y se pasa por alto las versiones anteriores, el designador AM/PM.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
        <value>Objeto cuyo valor es la fecha y hora UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La resolución de esta propiedad depende del temporizador del sistema, que depende del sistema operativo subyacente. Suele estar entre 0,5 y 15 milisegundos.

 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad devuelve <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Una alternativa al uso de <xref:System.DateTime.UtcNow%2A> es <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Mientras la primera indica que un valor de fecha y hora es la hora Universal coordinada (UTC) asignando <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> a su <xref:System.DateTime.Kind%2A> propiedad, la segunda asigna la fecha y desplazamiento de hora de la hora UTC del valor de tiempo (igual que <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para mostrar cómo la <xref:System.DateTime.Kind%2A> influye en la propiedad del <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by this instance.</summary>
        <value>Año, entre 1 y 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Year%2A> propiedad devuelve el año de la instancia actual en el calendario gregoriano. No se devuelve el año con el calendario predeterminado de la referencia cultural actual. Para recuperar el año utilizando un calendario determinado, puede llamar a dicho calendario `GetYear` método, tal como se muestra en el código siguiente.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Year%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>