<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9cfd68cfc7218424943cd09a56762a27dd37a08" />
    <Meta Name="ms.sourcegitcommit" Value="52c75384fb87f0f2184fc71b683468bee216f31f" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/11/2018" />
    <Meta Name="ms.locfileid" Value="44389727" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un instante de tiempo, normalmente expresado en forma de fecha y hora del día.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Vínculos rápidos a código de ejemplo

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

En este artículo incluye varios ejemplos que utilizan el `DateTime` tipo:

**Ejemplos de inicialización**      
 [Invoque un constructor](#initialization-01)     
 [Invocar el constructor predeterminado implícito](#initialization-02)     
 [Asignación de valor devuelto](#initialization-03)     
 [Analizar una cadena que representa una fecha y hora](#initialization-04)     
 [Sintaxis de Visual Basic para inicializar una fecha y hora](#initialization-05)     

**Formato `DateTime` objetos como cadenas**  
 [Utilice el formato de hora de fecha predeterminado](#formatting-01)     
 [Dar formato a una fecha y hora mediante una referencia cultural específica](#formatting-02)     
 [Dar formato a una fecha y hora mediante una cadena de formato estándar o personalizado](#formatting-03)     
 [Especifique una cadena de formato y una referencia cultural específica](#formatting-04)     
 [Dar formato a una fecha y hora con el estándar ISO 8601 para los servicios web](#formatting-05)     

**Analizar cadenas como `DateTime` objetos**  
 [Use `Parse` o `TryParse` para convertir una cadena en una fecha y hora](#parsing-01)     
 [Use `ParseExact` o `TryParseExact` para convertir una cadena en un formato conocido](#parsing-02)     
 [Convertir la representación de cadena ISO 8601 en una fecha y hora](#parsing-03)     

**`DateTime` Resolución**  
 [Explore la resolución de los valores de fecha y hora](#resolution-01)     
 [Comparación de igualdad dentro de una tolerancia](#comparison-01)     

**Referencia cultural y calendarios**  
 [Mostrar valores de fecha y hora con calendarios de referencia cultural específica](#calendars-01)     
 [Analizar cadenas según un calendario específico de la referencia cultural](#calendars-02)     
 [Inicializar una fecha y hora de calendario de la referencia cultural específica](#calendars-03)     
 [Acceso a las propiedades de fecha y hora con el calendario de la referencia cultural específica](#calendars-04)     
 [Recuperación de la semana del año con calendarios de referencia cultural específica](#calendars-05)     

**Persistencia**  
 [Conservar los valores de fecha y hora como cadenas en la zona horaria local](#persistence-01)     
 [Conservar los valores de fecha y hora como cadenas en un formato invariable de referencia cultural y la hora](#persistence-02)     
 [Conservar los valores de fecha y hora como enteros](#persistence-03)     
 [Persistencia de fecha y hora en los valores mediante el `XmlSerializer`](#persistence-04)     
 [Persistencia de fecha y hora en los valores mediante el `BinaryFormatter`](#persistence-05)     
 [Conservar los valores de fecha y hora con los datos de zona horaria](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Vínculos rápidos a los temas de la sección Comentarios.

Esta sección contiene temas para muchos usos comunes de la `DateTime` struct:
  
 [Inicializar un `DateTime` objeto](#initializing-a-datetime-object)   
 [Los valores DateTime y sus representaciones de cadena](#datetime-values-and-their-string-representations)   
 [Análisis de los valores de fecha y hora de cadenas](#parsing-datetime-values-from-strings)   
 [Valores de fecha y hora](#datetime-values)   
 [Operaciones de fecha y hora](#datetime-operations)   
 [Resolución de fecha y hora](#datetime-resolution)   
 [Calendarios y los valores de fecha y hora](#datetime-values-and-calendars)   
 [Conservar los valores de fecha y hora](#persisting-datetime-values)   
 [Frente a DateTime. intervalo de tiempo](#datetime-vs-timespan)   
 [Comparación de igualdad dentro de la tolerancia](#comparing-for-equality-within-tolerance) [consideraciones de interoperabilidad COM](#com-interop-considerations)  
   
El <xref:System.DateTime> tipo de valor representa las fechas y horas con valores están comprendidos entre 00:00:00 (medianoche), 1 de enero de 0001 Anno Domini (Era común) a través de 11:59:59 P.M. del 31 de diciembre de 9999 D.C. (E.C.) en el calendario gregoriano.  
  
Los valores de tiempo se miden en unidades de 100 nanosegundos, denominadas pasos. Una fecha en particular es el número de tics desde 12:00 de la medianoche del 1 de enero de 0001 D.C. (E.C.) en el <xref:System.Globalization.GregorianCalendar> calendario. El número excluye los pasos que se agregarían los segundos intercalares. Por ejemplo, un valor en pasos de 31241376000000000L representa la fecha del viernes, 01 de enero de 0100 medianoche 12:00:00. Un <xref:System.DateTime> valor siempre se expresa en el contexto explícito o el calendario predeterminado.  
  
> [!NOTE]
>  Si está trabajando con un valor de pasos que va a convertir a cualquier otro intervalo de tiempo, por ejemplo, minutos o segundos, debe usar el <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, o <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> constante para realizar la conversión. Por ejemplo agregar el número de segundos representado por un número especificado de pasos para la <xref:System.DateTime.Second%2A> componente de un <xref:System.DateTime> valor, puede usar la expresión `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

Puede ver el código fuente para todo el conjunto de ejemplos de este artículo en [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) o [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) desde el repositorio docs de GitHub.

> [!NOTE]
>  Una alternativa a la <xref:System.DateTime> estructura para trabajar con valores de fecha y hora en zonas horarias en particular es el <xref:System.DateTimeOffset> estructura. El <xref:System.DateTimeOffset> estructura almacena información de fecha y hora en una privada <xref:System.DateTime> campo y el número de minutos que esa fecha y hora es diferente a la hora UTC en una privada <xref:System.Int16> campo. Esto hace posible para un <xref:System.DateTimeOffset> valor para reflejar la hora en una zona horaria determinada, mientras que un <xref:System.DateTime> valor puede reflejar inequívocamente solo la hora UTC y la zona horaria local. Para obtener información sobre cuándo usar la <xref:System.DateTime> estructura o el <xref:System.DateTimeOffset> estructura al trabajar con valores de fecha y hora, vea [Choosing Between DateTime, DateTimeOffset, TimeSpan y TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Inicialización de un objeto de fecha y hora  

Puede asignar un valor inicial a un nuevo `DateTime` valor de muchas maneras diferentes:

- Llamar a un constructor, donde especifica argumentos para los valores, uno o usar el constructor predeterminado implícito.
- Asignar un `DateTime` al valor devuelto de una propiedad o método.
- Analizar un `DateTime` valor de su representación de cadena.
- Con características de lenguaje específico de Visual Basic para crear instancias de un `DateTime`. 

Los fragmentos de código siguiente muestran ejemplos de cada uno:

#### <a name="invoke-constructors"></a>Invocar constructores

Llamar a cualquiera de las sobrecargas de los <xref:System.DateTime> constructor que especifique los elementos del valor de fecha y hora (por ejemplo, el año, mes y día o el número de pasos). El código siguiente crea una fecha específica con el <xref:System.DateTime> constructor especifica el año, mes, día, hora, minuto y segundo.  

<a name="initialization-01"></a>  
[!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Se invoca el `DateTime` constructor predeterminado implícito de la estructura cuando desee un `DateTime` inicializado en su valor predeterminado. (Para obtener más información en el constructor predeterminado implícito de un tipo de valor, vea [tipos de valor](~/docs/csharp/language-reference/keywords/value-types.md).) Algunos compiladores también admiten la declaración de un <xref:System.DateTime> valor sin asignarle un valor explícitamente. Creación de un valor sin una inicialización explícita también hace que el valor predeterminado. El ejemplo siguiente ilustra la <xref:System.DateTime> constructor predeterminado implícito en C# y Visual Basic, así como un <xref:System.DateTime> declaración sin asignación en Visual Basic.  

<a name="initialization-02"></a>  
[!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Asignar un valor calculado

Puede asignar el <xref:System.DateTime> un valor de fecha y hora devuelto por una propiedad o método de objeto. El ejemplo siguiente asigna la actual fecha y hora, la fecha actual de la hora Universal coordinada (UTC) y hora y la fecha actual a tres nuevas <xref:System.DateTime> variables.  

<a name="initialization-03"></a>  
[!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analizar una cadena que representa una fecha y hora

El <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, y <xref:System.DateTime.TryParseExact%2A> todos métodos convierten una cadena en su equivalente valor fecha y hora. Los ejemplos siguientes usan la <xref:System.DateTime.Parse%2A> y <xref:System.DateTime.ParseExact%2A> métodos para analizar una cadena y convertirlo en un <xref:System.DateTime> valor. El segundo formato usa un formato compatible con la [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) estándar para una fecha y hora en formato de cadena que representa. Esta representación estándar a menudo se utiliza para transferir información de fecha en los servicios web.

<a name="initialization-04"></a>  
[!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

El <xref:System.DateTime.TryParse%2A> y <xref:System.DateTime.TryParseExact%2A> métodos indican si una cadena es una representación válida de un <xref:System.DateTime> de valor y, si es así, realiza la conversión.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sintaxis específica del lenguaje Visual Basic

Inicializa una nueva instrucción de Visual Basic siguiente <xref:System.DateTime> valor.  

<a name="initialization-05"></a>  
[!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>Los valores DateTime y sus representaciones de cadena  

Internamente, todos <xref:System.DateTime> los valores se representan como el número de pasos (el número de intervalos de 100 nanosegundos) que han transcurrido desde 12:00:00 de la medianoche del 1 de enero de 0001. Real <xref:System.DateTime> valor es independiente de la manera en que ese valor aparece cuando se muestra. La apariencia de un <xref:System.DateTime> valor es el resultado de una operación de formato que convierte un valor en su representación de cadena.  
  
La apariencia de los valores de fecha y hora depende de la referencia cultural, los estándares internacionales, requisitos de la aplicación y preferencias personales. El <xref:System.DateTime> estructura proporciona flexibilidad para dar formato a valores de fecha y hora a través de las sobrecargas de <xref:System.DateTime.ToString%2A>. El valor predeterminado <xref:System.DateTime.ToString?displayProperty=nameWithType> método devuelve la representación de cadena de un valor de fecha y hora con fecha corta y el patrón de hora larga de la referencia cultural actual. En el ejemplo siguiente se usa el valor predeterminado <xref:System.DateTime.ToString?displayProperty=nameWithType> método. Muestra la fecha y hora utilizando la fecha corta y el patrón de hora larga para la referencia cultural actual. La referencia cultural en-US es la referencia cultural actual en el equipo donde se ejecutó en el ejemplo.  
  
<a name="formatting-01"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Es posible que deba dar formato a fechas en una referencia cultural concreta para admitir escenarios web donde el servidor puede ser una referencia cultural diferente desde el cliente. Especificar la referencia cultural utilizando el <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para crear la fecha corta y la representación de mucho tiempo en una referencia cultural concreta. En el ejemplo siguiente se usa el <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> método para mostrar la fecha y hora utilizando la fecha corta y el patrón de hora larga para la referencia cultural fr-FR.  
  
<a name="formatting-02"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Otras aplicaciones pueden necesitar representaciones de cadena diferentes de una fecha. El <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método devuelve la representación de cadena definida por un especificador de formato estándar o personalizado mediante las convenciones de formato de la referencia cultural actual. En el ejemplo siguiente se usa el <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método para mostrar la fecha completa y el patrón de hora para en-US de la referencia cultural, la referencia cultural actual en el equipo donde se ejecutó en el ejemplo.  
  
<a name="formatting-03"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Por último, puede especificar la referencia cultural y el formato utilizando el <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método. En el ejemplo siguiente se usa el <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método para mostrar la fecha completa y el patrón de hora para la referencia cultural fr-FR.  

<a name="formatting-04"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

El <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> sobrecarga también puede usarse con una cadena de formato personalizado para especificar otros formatos. El ejemplo siguiente muestra cómo dar formato a una cadena con el [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato estándar que suelen utilizado para servicios web. El formato Iso 8601 no tiene una cadena de formato estándar correspondiente.

<a name="formatting05"></a>  
[!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Para obtener más información sobre el formato <xref:System.DateTime> valores, vea [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Análisis de los valores de fecha y hora de cadenas

Estas operaciones convierten la representación de cadena de una fecha y hora en un <xref:System.DateTime> valor. Normalmente, las cadenas de fecha y hora tienen dos usos diferentes en las aplicaciones:  
  
-   Una fecha y hora toma una variedad de formas y refleja las convenciones de la referencia cultural actual o una referencia cultural concreta. Por ejemplo, una aplicación permite que un usuario cuya referencia cultural actual es en-US, escriba un valor de fecha como "12/15/2013" o "15 de diciembre de 2013". Permite que un usuario cuya referencia cultural actual es en-gb, escriba un valor de fecha como "15/12/2013" o "15 de diciembre de 2013."  
  
-   Una fecha y hora se representa en un formato predefinido. Por ejemplo, una aplicación serializa una fecha como "20130103" independientemente de la referencia cultural en el que se ejecuta la aplicación. Una aplicación puede requerir fechas especificarse en formato de fecha corta de la referencia cultural actual.
  
Usa el <xref:System.DateTime.Parse%2A> o <xref:System.DateTime.TryParse%2A> método para convertir una cadena de uno de los formatos de fecha y hora comunes usados por una referencia cultural para un <xref:System.DateTime> valor. El ejemplo siguiente muestra cómo puede usar <xref:System.DateTime.TryParse%2A> para convertir las cadenas de fecha en formatos específicos de referencias culturales diferentes para un <xref:System.DateTime> valor. Cambia la referencia cultural actual a inglés (Gran Bretaña) y llama a la <xref:System.DateTime.GetDateTimeFormats> método para generar una matriz de cadenas de fecha y hora. A continuación, pasa cada elemento de la matriz a la <xref:System.DateTime.TryParse%2A> método. El resultado del ejemplo se muestra que el método de análisis fue capaz de convertir correctamente cada una de las cadenas de hora y fecha específica de la referencia cultural.  
  
<a name="parsing-01"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Usa el <xref:System.DateTime.ParseExact%2A> y <xref:System.DateTime.TryParseExact%2A> métodos para convertir una cadena que debe coincidir con un formato determinado o formatos a un <xref:System.DateTime> valor. Especifique una o varias cadenas de formato de fecha y hora como un parámetro para el método de análisis. En el ejemplo siguiente se usa el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método para convertir las cadenas que deben estar en un formato "AAAAMMDD" o en un formato "HHmmss" a <xref:System.DateTime> valores.  
  
<a name="parsing-02"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Un uso común de <xref:System.DateTime.ParseExact%2A> es convertir una representación de cadena de un servicio web, normalmente en [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato estándar. El código siguiente muestra la cadena de formato correcto para usar:

<a name="parsing-03"></a>  
[!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Si no se puede analizar una cadena, el <xref:System.DateTime.Parse%2A> y <xref:System.DateTime.ParseExact%2A> métodos inician una excepción. El <xref:System.DateTime.TryParse%2A> y <xref:System.DateTime.TryParseExact%2A> métodos devuelven un <xref:System.Boolean> valor que indica si la conversión se realizó correctamente o no. Debe usar el <xref:System.DateTime.TryParse%2A> o <xref:System.DateTime.TryParseExact%2A> métodos en escenarios donde el rendimiento es importante. La operación de análisis de cadenas de fecha y hora suele tener una alta frecuencia de errores y control de excepciones es costoso. Use estos métodos si las cadenas están escritas por usuarios o procedentes de un origen desconocido. 
  
Para obtener más información sobre el análisis de los valores de fecha y hora, vea [analizar cadenas de fecha y hora](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Valores de fecha y hora

Descripciones de los valores de hora en la <xref:System.DateTime> tipo a menudo se expresan mediante el estándar de hora Universal coordinada (UTC). Hora Universal coordinada es el nombre reconocido internacionalmente para la hora del meridiano de Greenwich (GMT). Hora Universal coordinada es el tiempo que se mide en la longitud de cero grados, el punto de origen de hora UTC. No es aplicable a la hora UTC del horario de verano.  
  
Hora local es relativa a una zona horaria determinada. Una zona horaria se asocia con un desplazamiento de zona horaria. Un desplazamiento de zona horaria es el desplazamiento de la zona horaria que se mide en horas desde el punto de origen de hora UTC. Además, la hora local, opcionalmente, se ve afectada por el horario de verano, que agrega o resta un ajuste de intervalo de tiempo. Hora local se calcula agregando el desplazamiento de zona horaria a UTC y ajuste al horario de verano si es necesario. El desplazamiento de zona horaria en el punto de origen de hora UTC es cero.  
  
Hora UTC es adecuada para los cálculos, comparaciones y almacenar fechas y horas en los archivos. Hora local es apropiada para su presentación en interfaces de usuario de aplicaciones de escritorio. Las aplicaciones basadas en la zona horaria (por ejemplo, muchas aplicaciones Web) también se necesitan trabajar con un número de otras zonas horarias.  
  
Si el <xref:System.DateTime.Kind%2A> propiedad de un <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, no se especifica si la hora representada es la hora local, hora UTC o una hora de otra zona horaria.  

### <a name="datetime-resolution"></a>Resolución de fecha y hora
  
> [!NOTE]
>  Como alternativa a la realización de fecha y hora aritméticas en <xref:System.DateTime> valores para medir el tiempo transcurrido, puede usar el <xref:System.Diagnostics.Stopwatch> clase.  
  
El <xref:System.DateTime.Ticks%2A> propiedad expresa los valores de fecha y hora en unidades de una diez millonésima de segundo. El <xref:System.DateTime.Millisecond%2A> propiedad devuelve las milésimas de segundo de un valor de fecha y hora. Uso de las llamadas repetidas a la <xref:System.DateTime.Now%2A?displayProperty=nameWithType> depende de propiedad que se va a medir el tiempo transcurrido en el reloj del sistema. El reloj del sistema en los sistemas Windows 7 y Windows 8 tiene una resolución de aproximadamente 15 milisegundos. Esta resolución afecta a los intervalos de tiempo pequeño inferior a 100 milisegundos. 
  
El ejemplo siguiente muestra la dependencia de la fecha actual y los valores de hora de la resolución del reloj del sistema. En el ejemplo, 20 veces que se repite un bucle exterior y un bucle interno sirve para retrasar el bucle exterior. Si el valor del contador de bucle externo es 10, una llamada a la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método introduce un retraso de cinco milisegundos. El ejemplo siguiente muestra el número de milisegundos devueltos por la `DateTime.Now.Milliseconds` solo después de llamar a los cambios de propiedad <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a>  
[!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Operaciones de fecha y hora  

Cálculos que usen un <xref:System.DateTime> estructura, tales como <xref:System.DateTime.Add%2A> o <xref:System.DateTime.Subtract%2A>, no modifica el valor de la estructura. En su lugar, devuelve un nuevo cálculo <xref:System.DateTime> estructura cuyo valor es el resultado del cálculo.  
  
Las operaciones de conversión entre zonas horarias (por ejemplo, entre la hora UTC y la hora local, o entre una zona horaria y otra) tienen el horario de verano en cuenta, pero no lo hacen las operaciones aritméticas y de comparación.  
  
El <xref:System.DateTime> propia estructura ofrece compatibilidad limitada para la conversión de una zona horaria a otra. Puede usar el <xref:System.DateTime.ToLocalTime%2A> método para convertir la hora UTC hora local, o bien puede usar el <xref:System.DateTime.ToUniversalTime%2A> método para convertir de hora local a UTC. Sin embargo, un conjunto completo de métodos de conversión de zona horaria está disponible en el <xref:System.TimeZoneInfo> clase. Convertir la hora en cualquiera de las zonas horarias del mundo a la hora de cualquier otra zona horaria mediante estos métodos.  
  
Los cálculos y las comparaciones de <xref:System.DateTime> objetos son significativos solo si los objetos representan horas en la misma zona horaria. Puede usar un <xref:System.TimeZoneInfo> objetos para representar un <xref:System.DateTime> hora del valor de zona, aunque los dos están acoplados débilmente. Un <xref:System.DateTime> objeto no tiene una propiedad que devuelve un objeto que representa la zona de horaria de ese valor de fecha y hora. El <xref:System.DateTime.Kind%2A> propiedad indica si un `DateTime` representa la hora UTC, hora local, o se ha especificado. En una aplicación compatible con la zona horaria, debe confiar en algún mecanismo externo para determinar la zona horaria en la que un <xref:System.DateTime> se creó el objeto. Podría usar una estructura que contiene tanto el <xref:System.DateTime> valor y el <xref:System.TimeZoneInfo> objeto que representa el <xref:System.DateTime> zona horaria del valor. Para obtener más información sobre el uso de hora UTC en los cálculos y las comparaciones con <xref:System.DateTime> valores, vea [efectuar operaciones aritméticas con fechas y horas](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Cada <xref:System.DateTime> miembro utiliza implícitamente el calendario gregoriano para realizar su operación. Las excepciones son métodos que especifican implícitamente un calendario. Estos incluyen los constructores que especifican un calendario y derivan de métodos con un parámetro <xref:System.IFormatProvider>, tales como <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Las operaciones de los miembros de la <xref:System.DateTime> tener tipo en los detalles de la cuenta, como los años bisiestos y el número de días al mes.  

## <a name="datetime-values-and-calendars"></a>Calendarios y los valores de fecha y hora  

La biblioteca de clases de .NET Framework incluye una serie de clases de calendario, todos los cuales se derivan los <xref:System.Globalization.Calendar> clase.  Son estos:  
  
-   La clase <xref:System.Globalization.ChineseLunisolarCalendar>.  
-   La clase <xref:System.Globalization.EastAsianLunisolarCalendar>.  
-   La clase <xref:System.Globalization.GregorianCalendar>.  
-   La clase <xref:System.Globalization.HebrewCalendar>.  
-   La clase <xref:System.Globalization.HijriCalendar>.  
-   La clase <xref:System.Globalization.JapaneseCalendar>.  
-   La clase <xref:System.Globalization.JapaneseLunisolarCalendar>.  
-   La clase <xref:System.Globalization.JulianCalendar>.  
-   La clase <xref:System.Globalization.KoreanCalendar>.  
-   La clase <xref:System.Globalization.KoreanLunisolarCalendar>.  
-   La clase <xref:System.Globalization.PersianCalendar>.  
-   La clase <xref:System.Globalization.TaiwanCalendar>.  
-   La clase <xref:System.Globalization.TaiwanLunisolarCalendar>.  
-   La clase <xref:System.Globalization.ThaiBuddhistCalendar>.  
-   La clase <xref:System.Globalization.UmAlQuraCalendar>.  
  
Cada referencia cultural usa un calendario predeterminado definido por su de solo lectura <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> propiedad. Cada referencia cultural puede admitir uno o varios calendarios definidos por su de solo lectura <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> propiedad. El calendario utilizado actualmente por un determinado <xref:System.Globalization.CultureInfo> objeto se define por su <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propiedad. Debe ser uno de los calendarios que se encuentra en la <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> matriz.  
  
Calendario actual de la referencia cultural se usa en todas las operaciones de formato para esa referencia cultural. Por ejemplo, el calendario predeterminado de la referencia cultural budista tailandés es el calendario Era de budista tailandés, que está representado por la <xref:System.Globalization.ThaiBuddhistCalendar> clase.  Cuando un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural budista tailandés se usa en una operación de formato de hora y fecha, el calendario de la Era de budista tailandés se utiliza de forma predeterminada. El calendario gregoriano que se usa únicamente si la referencia cultural <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> se cambia la propiedad, como se muestra en el ejemplo siguiente:  

<a name="calendars-01"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Calendario actual de la referencia cultural también se usa en todas las operaciones de análisis para esa referencia cultural, como se muestra en el ejemplo siguiente.  
  
<a name="calendars-02"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Crea instancias de un <xref:System.DateTime> valor mediante los elementos de fecha y hora (número del año, mes y día) de un calendario específico mediante una llamada a un [del constructor DateTime](xref:System.DateTime.%23ctor%2A) que incluye un `calendar` parámetro y pasándole un <xref:System.Globalization.CultureInfo.Calendar%2A>objeto que represente ese calendario. El ejemplo siguiente utiliza los elementos de fecha y hora desde el <xref:System.Globalization.ThaiBuddhistCalendar> calendario.  
  
<a name="calendars-03"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> los constructores que no incluyen un `calendar` parámetro, se supone que los elementos de fecha y hora se expresan como unidades en el calendario gregoriano.  
  
Todos los demás <xref:System.DateTime> propiedades y métodos usan el calendario gregoriano. Por ejemplo, el <xref:System.DateTime.Year%2A?displayProperty=nameWithType> propiedad devuelve el año del calendario gregoriano y el <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> método supone que el `year` parámetro es un año del calendario gregoriano.  Cada <xref:System.DateTime> miembro que usa el calendario gregoriano tiene un miembro correspondiente de la <xref:System.Globalization.CultureInfo.Calendar%2A> clase que usa un calendario específico. Por ejemplo, el <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> método devuelve el año en un calendario específico y el <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> método interpreta el `year` parámetro como un número de año de un calendario específico. En el ejemplo siguiente se usa tanto el <xref:System.DateTime> y los miembros correspondientes de la <xref:System.Globalization.ThaiBuddhistCalendar> clase.  
  
<a name="calendars-04"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

El <xref:System.DateTime> estructura incluye un <xref:System.DateTime.DayOfWeek%2A> propiedad que devuelve el día de la semana en el calendario gregoriano. No se incluye a un miembro que le permite recuperar el número de semana del año. Para recuperar la semana del año, llame el calendario individual <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> método. Esto se muestra en el ejemplo siguiente.  
  
<a name="calendars-05"></a>  
[!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Para obtener más información sobre las fechas y calendarios, vea [trabajar con calendarios](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Conservar los valores de fecha y hora  

Puede conservar <xref:System.DateTime> valores de cuatro maneras:  
  
-   Le [convertirlas en cadenas](#persisting-values-as-strings) y conservar las cadenas.  
-   Le [convertirlas en valores enteros de 64 bits](#persisting-values-as-integers) (el valor de la <xref:System.DateTime.Ticks%2A> propiedad) y conservar los enteros.  
-   Le [serializar los valores de fecha y hora](#serializing-dateTime-values).  
-   Le [serializar los valores de fecha y hora junto con información de zona horaria](#serializing-datetime-and-time-zone-data).  
  
Debe asegurarse de que la rutina que restaura el <xref:System.DateTime> valores no perder datos o producir una excepción independientemente de la técnica que elija. <xref:System.DateTime> en caso de los valores de ida y vuelta. Es decir, el valor original y el valor restaurado deben ser el mismo. Y si la versión original <xref:System.DateTime> valor representa un instante de tiempo único, debe identificar el momento de tiempo cuando se restaura.  
  
#### <a name="persisting-values-as-strings"></a>Conservar los valores como cadenas  

Para restaurar correctamente <xref:System.DateTime> valores que se guardan como cadenas, siga estas reglas:  
  
-   Realizar las mismas suposiciones acerca del formato de referencia cultural específica cuando se restaura la cadena como cuando se conservan. Para asegurarse de que se puede restaurar una cadena en un sistema cuya referencia cultural actual es diferente de la referencia cultural del sistema se guardó en, llame a la <xref:System.DateTime.ToString%2A> sobrecarga para guardar la cadena mediante las convenciones de la referencia cultural invariable. Llame a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> sobrecarga para restaurar la cadena mediante las convenciones de la referencia cultural invariable. No use nunca el <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> sobrecargas, que utilizan las convenciones de la referencia cultural del subproceso actual.  
  
-   Si la fecha representa un único momento de tiempo, asegúrese de que representa el mismo momento en el tiempo cuando se restaura, incluso en una zona horaria diferente. Convertir el <xref:System.DateTime> valor en hora Universal coordinada (UTC) antes de guardarlo. También se puede serializar el valor junto con información de zona horaria. Para obtener más información acerca de este enfoque, consulte [datos de serialización de fecha y hora y zona horaria](#TimeZone).  
  
 El error más común que se realizan cuando se conserve <xref:System.DateTime> valores como cadenas es depender de las convenciones de formato de la predeterminada o la referencia cultural actual. Producir problemas si es diferente al guardar y restaurar las cadenas de la referencia cultural actual. El ejemplo siguiente ilustra estos problemas. Guarda las cinco fechas mediante las convenciones de formato de la referencia cultural actual, que en este caso es inglés (Estados Unidos). Restaura las fechas mediante las convenciones de formato de una referencia cultural diferente, que en este caso es inglés (Gran Bretaña). Dado que las convenciones de formato de las dos referencias culturales son diferentes, dos de las fechas no se puede restaurar y las fechas de tres restantes se interpretan incorrectamente. Además, si los valores de fecha y hora originales representan momentos solo en el tiempo, restaurada veces son incorrectas porque se pierde la información de zona horaria.  
  
<a name="persistence-01"></a>  
[!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

En la ida y vuelta <xref:System.DateTime> valores correctamente, siguen estos pasos:  
  
1.  Si los valores representan solo instantes de tiempo, convertirlos de la hora local a UTC mediante una llamada a la <xref:System.DateTime.ToUniversalTime%2A> método.  
1.  Convertir las fechas en sus representaciones de cadena mediante una llamada a la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> o <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> sobrecargar. Usar las convenciones de formato de la referencia cultural invariable especificando <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como el `provider` argumento. Especificar que el valor debe ida y vuelta mediante el uso de la cadena de formato estándar "O" u "R".  
  
Para restaurar el persistente <xref:System.DateTime> valores sin pérdida de datos, siga estos pasos:  
  
1.  Analizar los datos mediante una llamada a la <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> sobrecargar. Especificar <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> como el `provider` argumento y use el mismo formato estándar de cadena se usa para el `format` argumento durante la conversión. Incluir el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> valor en el `styles` argumento.  
1.  Si el <xref:System.DateTime> valores representan momentos solo en el tiempo, llamada la <xref:System.DateTime.ToLocalTime%2A> método para convertir la fecha analizada respecto a UTC a la hora local.  
  
El ejemplo siguiente usa la referencia cultural y la cadena de formato estándar "O" para asegurarse de que <xref:System.DateTime> guardar y restaurar los valores representan el mismo momento en el tiempo, independientemente del sistema, la cultura o la zona horaria de los sistemas de origen y de destino.  
  
<a name="persistence-02"></a>  
[!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Conservar los valores como enteros  

Puede conservar una fecha y hora como un <xref:System.Int64> valor que representa un número de pasos. En este caso, no tiene que tener en cuenta la referencia cultural de los sistemas el <xref:System.DateTime> se conserva y se restauran en los valores.  
  
Para conservar un <xref:System.DateTime> valor como un entero:  
  
-   Si el <xref:System.DateTime> valores representan momentos solo en el tiempo, convertir a UTC mediante una llamada a la <xref:System.DateTime.ToUniversalTime%2A> método.  
-   Recuperar el número de pasos representados por la <xref:System.DateTime> valor desde su <xref:System.DateTime.Ticks%2A> propiedad.  
  
Para restaurar un <xref:System.DateTime> valor que se ha guardado como un entero:  
  
1.  Crear una nueva instancia <xref:System.DateTime> pasando el <xref:System.Int64> valor para el <xref:System.DateTime.%23ctor%28System.Int64%29> constructor.  
1.  Si el <xref:System.DateTime> valor representa un único momento en el tiempo, se convierte a la hora UTC a la hora local mediante una llamada a la <xref:System.DateTime.ToLocalTime%2A> método.  
  
El ejemplo siguiente conserva una matriz de <xref:System.DateTime> valores enteros en un sistema en los Estados Unidos. de EE. UU. Se restaura en un sistema en la zona UTC. El archivo que contiene los números enteros incluye un <xref:System.Int32> valor que indica el número total de <xref:System.Int64> valores que siguen inmediatamente a él.  
  
<a name="persistence-03"></a>  
[!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>Serializar los valores de fecha y hora  

Puede conservar <xref:System.DateTime> valores mediante la serialización para una secuencia o archivo y, a continuación, restaurar ellos a través de la deserialización. <xref:System.DateTime> se serializan los datos en algún formato de objeto especificado. Los objetos se restauran cuando se deserializan. Un formateador o serializador, tales como <xref:System.Xml.Serialization.XmlSerializer> o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, controla el proceso de serialización y deserialización. Para obtener más información sobre la serialización y los tipos de serialización compatibles con .NET Framework, vea [serialización](~/docs/standard/serialization/index.md).
  
En el ejemplo siguiente se usa el <xref:System.Xml.Serialization.XmlSerializer> clase para serializar y deserializar <xref:System.DateTime> valores. Los valores representan todos los días del año bisiesto en el siglo XXI. El resultado representa el resultado si se ejecuta el ejemplo en un sistema cuya referencia cultural actual es inglés (Gran Bretaña). Ya ha deserializado el <xref:System.DateTime> no tiene el propio objeto, el código controlar las diferencias culturales de formatos de fecha y hora.  
  
<a name="persistence-04"></a>  
[!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

El ejemplo anterior no incluye información de hora. Si un <xref:System.DateTime> valor representa un momento dado y se expresa como una hora local, se convierte de hora local a UTC antes de serializarlo mediante una llamada a la <xref:System.DateTime.ToUniversalTime%2A> método. Una vez deserializarlo, convertirlo a la hora UTC a la hora local mediante una llamada a la <xref:System.DateTime.ToLocalTime%2A> método. En el ejemplo siguiente se usa el <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> clase para serializar <xref:System.DateTime> datos en un sistema en los Estados Unidos. Zona horaria estándar del Pacífico y deserializarlo en un sistema en los Estados Unidos. Zona estándar central.  
  
<a name="persistence-05"></a>  
[!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>Serialización de datos de fecha y hora y zona horaria  

Todos los ejemplos anteriores supone que <xref:System.DateTime> valores se expresan como horas locales. El código convierte los valores comprendidos entre la hora UTC y la hora local para que reflejen el mismo momento en el tiempo en los sistemas de origen y de destino. <xref:System.DateTime> valores también pueden reflejar momentos en el tiempo en una zona horaria que no sea local y UTC. Dado que el <xref:System.DateTime> estructura no es compatible con la zona horaria, se debe serializar ambos el <xref:System.DateTime> valor y el <xref:System.TimeZoneInfo> objeto que representa su zona horaria. Crear un tipo cuyos campos incluyen tanto la <xref:System.DateTime> valor y su zona horaria. En el ejemplo siguiente se define un `DateWithTimeZone` estructura.  
  
<a name="persistence-06"></a>  
[!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  El `DateWithTimeZone` estructura se usa en los dos ejemplos siguientes, que serializar y deserializar una matriz de `DateWithTimeZone` objetos. Puede ver el código fuente para todo el conjunto de ejemplos de este artículo en [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) o [C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) desde el repositorio docs de GitHub.
  
Mediante el uso de la `DateWithTimeZone` estructura, a continuación, puede conservar fecha y hora junto con información de zona horaria. En el ejemplo siguiente se usa el <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> clase para serializar una matriz de `DateWithTimeZone` objetos.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

El ejemplo siguiente, a continuación, llama el <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> método a deserializarlo.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>Frente a DateTime. TimeSpan  

El <xref:System.DateTime> y <xref:System.TimeSpan> difieren de los tipos de valor en el que un <xref:System.DateTime> representa un instante de tiempo, mientras que un <xref:System.TimeSpan> representa un intervalo de tiempo. También puede restar una instancia de <xref:System.DateTime> de otra para obtener un <xref:System.TimeSpan> objeto que representa el intervalo de tiempo entre ellos. O bien, podría agregar un positivo <xref:System.TimeSpan> actual <xref:System.DateTime> para obtener un <xref:System.DateTime> valor que representa una fecha futura.  
  
Puede agregar o restar un intervalo de tiempo de un <xref:System.DateTime> objeto. Intervalos de tiempo pueden ser positivo o negativo, y puede expresarse en unidades como tics, segundos, o como un <xref:System.TimeSpan> objeto.  

### <a name="comparing-for-equality-within-tolerance"></a>Comparación de igualdad dentro de la tolerancia

Comparaciones de igualdad para <xref:System.DateTime> valores son exactos. Esto significa que dos valores se deben expresar como el mismo número de pasos que se consideran iguales. Que la precisión a menudo es innecesarios o incluso incorrecto para muchas aplicaciones. A menudo, desea probar si <xref:System.DateTime> son objetos **aproximadamente igual**. 

En el ejemplo siguiente se muestra cómo comparar más o menos equivalente <xref:System.DateTime> . Acepta un pequeño margen de diferencia cuando se declaran como iguales.  
  
<a name="comparison-02"></a>  
[!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Consideraciones de interoperabilidad COM  

Un <xref:System.DateTime> valor que se transfiere a una aplicación COM y, después, se transfiere a una aplicación administrada, se dice que la ida y vuelta. Sin embargo, un <xref:System.DateTime> valor que especifica solo una hora no ida y vuelta como cabría esperar.  
  
Si ida sólo un tiempo, como 3 P.M., la fecha final y la hora es el 30 de diciembre de 1899 de la era cristiana a las 3:00 P.M., en lugar del 1 de enero de 0001 d. de c. a las 3:00 P.M. .NET Framework y COM suponen una fecha predeterminada cuando se especifica solo una hora. Sin embargo, el sistema COM supone una fecha base del 30 de diciembre de 1899 de la era cristiana, mientras que .NET Framework supone una fecha base 1 de enero, 0001 d. de c.  
  
Cuando sólo una vez se pasa desde .NET Framework a COM, se realiza un procesamiento especial convierte la hora en el formato utilizado por COM. Cuando sólo una vez se pasa desde COM a .NET Framework, no se realiza ningún procesamiento especial, ya que podría dañar legítimas fechas y horas en o antes del 30 de diciembre de 1899. Si una fecha inicia su de ida y vuelta desde COM, .NET Framework y COM conservan la fecha.  
  
El comportamiento de .NET Framework y COM significa que si la ida y vuelta de aplicación una <xref:System.DateTime> que solo especifica una hora, la aplicación debe recordar modificar u omitir los datos erróneos desde el último <xref:System.DateTime> objeto.  
     
 ]]></format>
    </remarks>
    <threadsafe>Todos los miembros de este tipo son seguros para subprocesos. Los miembros que aparecen modificar el estado de instancia devuelven realmente una nueva instancia inicializada con el nuevo valor. Como con cualquier otro tipo, leer y escribir en una variable compartida que contiene una instancia de este tipo deben protegerse mediante un bloqueo para garantizar la seguridad para subprocesos.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">Elegir entre DateTime, DateTimeOffset, TimeSpan y TimeZoneInfo</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">Trabajar con calendarios</related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Ejemplo: Utilidad de formato de .NET Framework 4</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Fecha y hora expresadas como el número de intervalos de 100 nanosegundos transcurridos desde el 1 de enero, 0001 a las 00:00:00.000, en el calendario gregoriano.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en un número de pasos especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 El ejemplo siguiente muestra uno de los <xref:System.DateTime> constructores.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">Fecha y hora expresadas como el número de intervalos de 100 nanosegundos transcurridos desde el 1 de enero, 0001 a las 00:00:00.000, en el calendario gregoriano.</param>
        <param name="kind">Uno de los valores de enumeración que indica si <c>ticks</c> especifica una hora local, una hora universal coordinada (UTC) o ninguna de ellas.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el número de pasos y hora universal coordinada (UTC) u hora local especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> no es uno de los valores de <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al 9999).</param>
        <param name="month">Mes (del 1 al 12).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes y día especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta `year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor utilizando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor.  
  
 La hora del día para resultante <xref:System.DateTime> es la medianoche (00: 00:00). La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> constructor para crear instancias de un <xref:System.DateTime> valor. Este ejemplo también muestra que esta sobrecarga se crea un <xref:System.DateTime> valor cuyo componente de hora es igual a medianoche (o 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> es menor que 1 o mayor que 9999.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que 12.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al número de años de <c>calendar</c>).</param>
        <param name="month">Mes (del 1 al número de meses de <c>calendar</c>).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="calendar">Calendario que se usa para interpretar <c>year</c>, <c>month</c> y <c>day</c>.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes y día especificados para el calendario determinado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La hora del día para resultante <xref:System.DateTime> es la medianoche (00: 00:00). La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Los valores permitidos para `year`, `month`, y `day` dependen `calendar`. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales para su <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de la referencia cultural actual de forma predeterminada para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> no está en el intervalo que admite <paramref name="calendar" />.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que el número de meses en <paramref name="calendar" />.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al 9999).</param>
        <param name="month">Mes (del 1 al 12).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="hour">Horas (de 0 a 23).</param>
        <param name="minute">Minutos (de 0 a 59).</param>
        <param name="second">Segundos (de 0 a 59).</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto y segundo especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor utilizando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor.  
  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%2A> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> es menor que 1 o mayor que 9999.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que 12.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.  
  
O bien 
 <paramref name="hour" /> es menor que 0 o mayor que 23.  
  
O bien 
 <paramref name="minute" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="second" /> es menor que 0 o mayor que 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al 9999).</param>
        <param name="month">Mes (del 1 al 12).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="hour">Horas (de 0 a 23).</param>
        <param name="minute">Minutos (de 0 a 59).</param>
        <param name="second">Segundos (de 0 a 59).</param>
        <param name="kind">Uno de los valores de enumeración que indica si <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> y <c>second</c> especifican una hora local, una hora universal coordinada (UTC) o ninguna de ellas.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo y hora universal coordinada (UTC) u hora local especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor utilizando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructor.  
  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> es menor que 1 o mayor que 9999.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que 12.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.  
  
O bien 
 <paramref name="hour" /> es menor que 0 o mayor que 23.  
  
O bien 
 <paramref name="minute" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="second" /> es menor que 0 o mayor que 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> no es uno de los valores de <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al número de años de <c>calendar</c>).</param>
        <param name="month">Mes (del 1 al número de meses de <c>calendar</c>).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="hour">Horas (de 0 a 23).</param>
        <param name="minute">Minutos (de 0 a 59).</param>
        <param name="second">Segundos (de 0 a 59).</param>
        <param name="calendar">Calendario que se usa para interpretar <c>year</c>, <c>month</c> y <c>day</c>.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto y segundo especificados para el calendario indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Los valores permitidos para `year`, `month`, y `day` dependen `calendar`. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales para su <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de la referencia cultural actual de forma predeterminada para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> no está en el intervalo que admite <paramref name="calendar" />.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que el número de meses en <paramref name="calendar" />.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.  
  
O bien 
 <paramref name="hour" /> es menor que 0 o mayor que 23 
O bien 
 <paramref name="minute" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="second" /> es menor que 0 o mayor que 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al 9999).</param>
        <param name="month">Mes (del 1 al 12).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="hour">Horas (de 0 a 23).</param>
        <param name="minute">Minutos (de 0 a 59).</param>
        <param name="second">Segundos (de 0 a 59).</param>
        <param name="millisecond">Milisegundos (de 0 a 999).</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo y milisegundo especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor utilizando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor.  
  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> es menor que 1 o mayor que 9999.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que 12.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.  
  
O bien 
 <paramref name="hour" /> es menor que 0 o mayor que 23.  
  
O bien 
 <paramref name="minute" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="second" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="millisecond" /> es menor que 0 o mayor que 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al 9999).</param>
        <param name="month">Mes (del 1 al 12).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="hour">Horas (de 0 a 23).</param>
        <param name="minute">Minutos (de 0 a 59).</param>
        <param name="second">Segundos (de 0 a 59).</param>
        <param name="millisecond">Milisegundos (de 0 a 999).</param>
        <param name="kind">Uno de los valores de enumeración que indica si <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> y <c>millisecond</c> especifican una hora local, una hora universal coordinada (UTC) o ninguna de ellas.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo, milisegundo y hora universal coordinada (UTC) u hora local especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor interpreta`year`, `month`, y `day` como un año, mes y día en el calendario gregoriano. Para crear instancias de un <xref:System.DateTime> valor utilizando el año, mes y día en otro calendario, llamada la <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructor.  
  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> constructor para crear instancias de un <xref:System.DateTime> valor.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> es menor que 1 o mayor que 9999.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que 12.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.  
  
O bien 
 <paramref name="hour" /> es menor que 0 o mayor que 23.  
  
O bien 
 <paramref name="minute" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="second" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="millisecond" /> es menor que 0 o mayor que 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> no es uno de los valores de <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al número de años de <c>calendar</c>).</param>
        <param name="month">Mes (del 1 al número de meses de <c>calendar</c>).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="hour">Horas (de 0 a 23).</param>
        <param name="minute">Minutos (de 0 a 59).</param>
        <param name="second">Segundos (de 0 a 59).</param>
        <param name="millisecond">Milisegundos (de 0 a 999).</param>
        <param name="calendar">Calendario que se usa para interpretar <c>year</c>, <c>month</c> y <c>day</c>.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo y milisegundo especificados para el calendario indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.DateTime.Kind%2A> se inicializa en <xref:System.DateTimeKind.Unspecified>.  
  
 Los valores permitidos para `year`, `month`, y `day` dependen `calendar`. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales para su <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de la referencia cultural actual de forma predeterminada para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> no está en el intervalo que admite <paramref name="calendar" />.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que el número de meses en <paramref name="calendar" />.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.  
  
O bien 
 <paramref name="hour" /> es menor que 0 o mayor que 23.  
  
O bien 
 <paramref name="minute" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="second" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="millisecond" /> es menor que 0 o mayor que 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Año (del 1 al número de años de <c>calendar</c>).</param>
        <param name="month">Mes (del 1 al número de meses de <c>calendar</c>).</param>
        <param name="day">Día (del 1 al número de días de <c>month</c>).</param>
        <param name="hour">Horas (de 0 a 23).</param>
        <param name="minute">Minutos (de 0 a 59).</param>
        <param name="second">Segundos (de 0 a 59).</param>
        <param name="millisecond">Milisegundos (de 0 a 999).</param>
        <param name="calendar">Calendario que se usa para interpretar <c>year</c>, <c>month</c> y <c>day</c>.</param>
        <param name="kind">Uno de los valores de enumeración que indica si <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c> y <c>millisecond</c> especifican una hora local, una hora universal coordinada (UTC) o ninguna de ellas.</param>
        <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.DateTime" /> en el año, mes, día, hora, minuto, segundo, milisegundo, y hora universal coordinada (UTC) u hora local especificados para el calendario indicado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores permitidos para `year`, `month`, y `day` parámetros dependen del `calendar` parámetro. Se produce una excepción si la fecha y hora especificadas no pueden expresarse mediante `calendar`.  
  
 Para las aplicaciones en la portabilidad de datos de fecha y hora o un grado limitado de zona horaria es importante conocimiento, puede usar el correspondiente <xref:System.DateTimeOffset> constructor.  
  
 El <xref:System.Globalization> espacio de nombres proporciona varios calendarios, incluidos <xref:System.Globalization.GregorianCalendar> y <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> constructor dos veces para crear una instancia de dos <xref:System.DateTime> valores. Crea una instancia de la primera llamada un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.PersianCalendar> objeto. Dado que el calendario persa no se pueden designar como calendario predeterminado para una referencia cultural, mostrar una fecha en el calendario persa requiere llamadas individuales para su <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, y <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> métodos. Crea una instancia de la segunda llamada al constructor un <xref:System.DateTime> valor mediante el uso de un <xref:System.Globalization.HijriCalendar> objeto. En el ejemplo se cambia la referencia cultural actual a árabe (Siria) y cambia el calendario predeterminado de la referencia cultural actual para el calendario Hijri. Dado que Hijri es el calendario predeterminado de la referencia cultural actual, el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método lo usa para dar formato a la fecha. Cuando se restaura la referencia cultural actual anterior (que es el inglés (Estados Unidos) en este caso), el <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método usa el calendario gregoriano de la referencia cultural actual de forma predeterminada para dar formato a la fecha.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> no está en el intervalo que admite <paramref name="calendar" />.  
  
O bien 
 <paramref name="month" /> es menor que 1 o mayor que el número de meses en <paramref name="calendar" />.  
  
O bien 
 <paramref name="day" /> es menor que 1 o mayor que el número de días en <paramref name="month" />.  
  
O bien 
 <paramref name="hour" /> es menor que 0 o mayor que 23.  
  
O bien 
 <paramref name="minute" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="second" /> es menor que 0 o mayor que 59.  
  
O bien 
 <paramref name="millisecond" /> es menor que 0 o mayor que 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> no es uno de los valores de <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Intervalo de tiempo positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el valor del objeto <see cref="T:System.TimeSpan" /> especificado al valor de esta instancia.</summary>
        <returns>Objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el intervalo de hora representado por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.DateTime.Add%2A> método para agregar más de un tipo de intervalo de tiempo (días, horas, minutos, segundos o milisegundos) en una sola operación. Comportamiento de este método es idéntico del operador de suma. El <xref:System.DateTime> estructura también admite los métodos de suma especializados (como <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, y <xref:System.DateTime.AddMinutes%2A>) para cada intervalo de tiempo.  
  
 El <xref:System.DateTime.Add%2A> método tiene en cuenta los años bisiestos y el número de días del mes al realizar la aritmética de fecha.  
  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación. El <xref:System.DateTime.Kind%2A> propiedad del nuevo <xref:System.DateTime> instancia es el mismo que el de la instancia actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Add%2A> método. Calcula el día de la semana que 36 días (864 horas) en este momento.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Número de días enteros y fraccionarios. El parámetro <c>value</c> puede ser positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de días al valor de esta instancia.</summary>
        <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de días representados por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria de `value` es la parte fraccionaria de un día. Por ejemplo, 4,5 equivale a 4 días, 12 horas, 0 minutos, 0 segundos, 0 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
 El <xref:System.DateTime.AddDays%2A> método tiene en cuenta los años bisiestos y el número de días del mes al realizar la aritmética de fecha.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddDays%2A> método para determinar el día de la semana 36 días después de la fecha actual.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Número de horas enteras y fraccionarias. El parámetro <c>value</c> puede ser positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de horas al valor de esta instancia.</summary>
        <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de horas representados por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación. El <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto es el mismo que el de `value`.  
  
 La parte fraccionaria de `value` es la parte fraccionaria de una hora. Por ejemplo, 4,5 equivale a 4 horas, 30 minutos, 0 segundos, 0 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
 Convertir los intervalos de tiempo de menos de una hora en una fracción puede implicar una pérdida de precisión si el resultado es un decimal de repetición de no terminación. (Por ejemplo, un minuto es el 0,016667 de una hora). Si esto es problemático, puede usar el <xref:System.DateTime.Add%2A> método, que le permite especificar más de un tipo de intervalo de tiempo en una única llamada al método y elimina la necesidad de convertir los intervalos de tiempo en partes fraccionarias de una hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddHours%2A> para agregar un número de valores enteros y fraccionarios a una fecha y hora. También ilustra la pérdida de precisión originado por pasar al método un valor que incluye un componente de fracción.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Número de milisegundos enteros y fraccionarios. El parámetro <c>value</c> puede ser positivo o negativo. Observe que este valor se redondea al entero más próximo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de milisegundos al valor de esta instancia.</summary>
        <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de milisegundos representados por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria de `value` es la parte fraccionaria de un milisegundo. Por ejemplo, 4,5 equivale a 4 milisegundos y 5000 tics, donde un milisegundo = 10000 pasos.  
  
 El `value` parámetro se redondea al entero más próximo.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddMilliseconds%2A> método para agregar un milisegundo y 1,5 milisegundos para un <xref:System.DateTime> valor. A continuación, se muestra cada nuevo valor y se muestra la diferencia entre este y el valor original. La diferencia se muestra como un intervalo de tiempo y como un número de pasos. El ejemplo deja claro que un milisegundo es igual a 10 000 tics. También muestra que se redondean fracciones de milisegundos antes de realizar la adición; el <xref:System.DateTime> valor que es el resultado de sumar 1,5 milisegundos a la fecha original es mayores que la fecha original de 2 milisegundos.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Número de minutos enteros y fraccionarios. El parámetro <c>value</c> puede ser positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de minutos al valor de esta instancia.</summary>
        <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de minutos representados por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria de `value` es la parte fraccionaria de un minuto. Por ejemplo, 4,5 equivale a 4 minutos, 30 segundos, 0 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddMinutes%2A> para agregar un número de valores enteros y fraccionarios a una fecha y hora.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Número de meses. El parámetro <c>months</c> puede ser positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de meses al valor de esta instancia.</summary>
        <returns>Objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el tiempo representado por <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime> objeto. En su lugar, devuelve un nuevo <xref:System.DateTime> objeto cuyo valor es el resultado de esta operación.  
  
 El <xref:System.DateTime.AddMonths%2A> método calcula el mes resultante y año, teniendo en cuenta los años bisiestos y el número de días del mes, a continuación, ajusta la parte del día del resultante <xref:System.DateTime> objeto. Si el día resultante no es un día válido del mes resultante, se utiliza el último día válido del mes resultante. Por ejemplo, el 31 de marzo + 1 mes = 30 de abril y el 31 de marzo - 1 mes = 28 de febrero de un año bisiesto y 29 de febrero para un año bisiesto.  
  
 La parte de hora del día de resultante <xref:System.DateTime> objeto sigue siendo el mismo que esta instancia.  
  
   
  
## Examples  
 El ejemplo siguiente se agrega entre cero y quince meses hasta el último día de diciembre de 2015. En este caso, el método AddMonths devuelve la fecha del último día de cada mes y controla correctamente los años bisiestos.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.  
  
O bien 
 <paramref name="months" /> es menor que -120.000 o mayor que 120.000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Número de segundos enteros y fraccionarios. El parámetro <c>value</c> puede ser positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de segundos al valor de esta instancia.</summary>
        <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de segundos representados por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 La parte fraccionaria de `value` es la parte fraccionaria de segundo. Por ejemplo, 4,5 equivale a 4 segundos, 500 milisegundos y 0 pasos.  
  
 El `value` parámetro se redondea al milisegundo más cercano.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.AddSeconds%2A> método para agregar 30 segundos y el número de segundos en un día para un <xref:System.DateTime> valor. A continuación, se muestra cada nuevo valor y se muestra la diferencia entre este y el valor original. La diferencia se muestra como un intervalo de tiempo y como un número de pasos.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Número de pasos de 100 nanosegundos. El parámetro <c>value</c> puede ser positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de pasos al valor de esta instancia.</summary>
        <returns>Objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y la hora representada por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Número de años. El parámetro <c>value</c> puede ser positivo o negativo.</param>
        <summary>Devuelve un nuevo objeto <see cref="T:System.DateTime" /> que suma el número especificado de años al valor de esta instancia.</summary>
        <returns>Un objeto cuyo valor es la suma de la fecha y hora representadas por esta instancia y el número de años representados por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no cambia el valor de esta <xref:System.DateTime> objeto. En su lugar, devuelve un nuevo <xref:System.DateTime> objeto cuyo valor es el resultado de esta operación.  
  
 El <xref:System.DateTime.AddYears%2A> método calcula el año resultante teniendo en cuenta los años bisiestos. La parte de mes y la hora del día de resultante <xref:System.DateTime> objeto sigue siendo el mismo que esta instancia.  
  
 Si la instancia actual representa el día bisiesto de un año bisiesto, el valor devuelto depende de la fecha objetivo:  
  
-   Si `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> también es un año bisiesto, el valor devuelto representa el día en ese año bisiesto. Por ejemplo, si se agrega desde hace cuatro años a 29 de febrero de 2012, la fecha devuelta es 29 de febrero de 2016.  
  
-   Si `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> no es un año bisiesto, el valor devuelto representa el día antes del día bisiesto en ese año. Por ejemplo, si se agrega un año a 29 de febrero de 2012, la fecha devuelta es el 28 de febrero de 2013.  
  
 El ejemplo siguiente se muestra cómo utilizar el <xref:System.DateTime.AddYears%2A> método con un <xref:System.DateTime> valor que representa un día bisiesto. Muestra la fecha de los quince años anteriores a y los quince años que siguen el 29 de febrero de 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> o el <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primer objeto que se va a comparar.</param>
        <param name="t2">Segundo objeto que se va a comparar.</param>
        <summary>Compara dos instancias de <see cref="T:System.DateTime" /> y devuelve un entero que indica si la primera instancia es anterior, igual o posterior a la segunda instancia.</summary>
        <returns>Número con signo que indica los valores relativos de <paramref name="t1" /> y <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Tipo de valor </term><description> Condición </description></listheader><item><term> Menor que cero </term><description><paramref name="t1" /> es anterior a <paramref name="t2" />.  </description></item><item><term> Cero </term><description><paramref name="t1" /> es igual que <paramref name="t2" />.  </description></item><item><term> Mayor que cero </term><description><paramref name="t1" /> es posterior a <paramref name="t2" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar la relación de `t1` a `t2`, el <xref:System.DateTime.Compare%2A> método compara la <xref:System.DateTime.Ticks%2A> propiedad de `t1` y `t2` pero omite su <xref:System.DateTime.Kind%2A> propiedad. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Compare%2A> método.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compara el valor de esta instancia con un valor de <see cref="T:System.DateTime" /> especificado e indica si esta instancia es anterior, igual o posterior al valor de <see cref="T:System.DateTime" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las dos sobrecargas de los <xref:System.DateTime.CompareTo%2A> método devuelva un número con signo que indica el valor relativo de esta instancia y el `value` argumento, tal como se muestra en la tabla siguiente.  
  
|Valor|Descripción|  
|-----------|-----------------|  
|Menor que cero|Esta instancia es anterior a `value`.|  
|Cero|Esta instancia es la misma que `value`.|  
|Mayor que cero|Esta instancia es posterior a `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Objeto que se va a comparar con la actual instancia.</param>
        <summary>Compara el valor de esta instancia con un valor de <see cref="T:System.DateTime" /> especificado y devuelve un entero que indica si esta instancia es anterior, igual o posterior al valor de <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>Número con signo que indica los valores relativos de esta instancia y del parámetro <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valor </term><description> Descripción </description></listheader><item><term> Menor que cero </term><description> Esta instancia es anterior a <paramref name="value" />.  </description></item><item><term> Cero </term><description> Esta instancia es la misma que <paramref name="value" />.  </description></item><item><term> Mayor que cero </term><description> Esta instancia es posterior a <paramref name="value" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar la relación de la instancia actual a `value`, el <xref:System.DateTime.CompareTo%2A> método compara la <xref:System.DateTime.Ticks%2A> propiedad de la instancia actual y `value` pero omite su <xref:System.DateTime.Kind%2A> propiedad.  Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de sus <xref:System.DateTime.Kind%2A> propiedades.  
  
 Este método implementa el <xref:System.IComparable%601?displayProperty=nameWithType> interfaz y realiza un poco mejor que el <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> sobrecarga del método porque no tiene que convertir el `value` parámetro a un objeto.  
  
   
  
## Examples  
 El ejemplo siguiente crea tres <xref:System.DateTime> objetos, uno que representa la actual fecha, otro que representa la fecha un año anterior y un tercero que representa la fecha un año en el futuro. A continuación, llama el <xref:System.DateTime.CompareTo%28System.DateTime%29> método y muestra el resultado de la comparación.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto al que se ha aplicado la conversión boxing y que se va a comparar o <see langword="null" />.</param>
        <summary>Compara el valor de esta instancia con un objeto especificado que contiene un valor de <see cref="T:System.DateTime" /> especificado y devuelve un entero que indica si esta instancia es anterior, igual o posterior al valor de <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>Número con signo que indica los valores relativos de esta instancia y <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valor </term><description> Descripción </description></listheader><item><term> Menor que cero </term><description> Esta instancia es anterior a <paramref name="value" />.  </description></item><item><term> Cero </term><description> Esta instancia es la misma que <paramref name="value" />.  </description></item><item><term> Mayor que cero </term><description> Esta instancia es posterior a <paramref name="value" />, o <paramref name="value" /> es <see langword="null" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar la relación de la instancia actual a `value`, el <xref:System.DateTime.CompareTo%2A> método compara la <xref:System.DateTime.Ticks%2A> propiedad de la instancia actual y `value` pero omite su <xref:System.DateTime.Kind%2A> propiedad. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de sus <xref:System.DateTime.Kind%2A> propiedades.  
  
 Cualquier instancia de <xref:System.DateTime>, independientemente de su valor, se considera mayor `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.CompareTo%2A> método.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> no es un <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el componente correspondiente a la fecha de esta instancia.</summary>
        <value>Nuevo objeto con la misma fecha que esta instancia y con el valor de hora establecido en la medianoche (00:00:00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor es el mismo que el de la instancia actual.  
  
 Dado que el <xref:System.DateTime> tipo representa tanto las fechas y horas en un solo tipo, es importante evitar interpretar erróneamente una fecha devuelta por la <xref:System.DateTime.Date%2A> propiedad como una fecha y hora.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Date%2A> propiedad para extraer el componente de fecha un <xref:System.DateTime> valor con el componente de hora se establece en cero (o 0:00:00 o medianoche). También explica que, dependiendo de la cadena de formato utilizada para mostrar el <xref:System.DateTime> valor, el componente de hora puede seguir apareciendo en la salida con formato.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el día del mes representado por esta instancia.</summary>
        <value>El componente de día, expresado como un valor entre 1 y 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Day%2A> propiedad siempre devuelve el día del mes en el calendario gregoriano, aunque actual <xref:System.DateTime> valor instancia se creó utilizando algún otro calendario o si el calendario predeterminado de la referencia cultural de subproceso actual no es el calendario gregoriano. Para recuperar el día del mes de una fecha determinada utilizando algún otro calendario, llame a dicho calendario <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> método. En el ejemplo siguiente se usa tanto el <xref:System.DateTime.Day%2A> propiedad y el <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar el día del mes para un <xref:System.DateTime> valor cuyas instancias se crean utilizando el calendario Hijri.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 De forma similar, en el ejemplo siguiente se usa tanto el <xref:System.DateTime.Day%2A> propiedad y el <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> método para recuperar el día del mes en que la referencia cultural del subproceso actual se ar-SA, que utiliza Hijri como calendario predeterminado.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Day%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el día de la semana representado por esta instancia.</summary>
        <value>Constante enumerada que indica el día de la semana de este valor <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de las constantes de la <xref:System.DayOfWeek> enumeración comprendido entre <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> a <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Si se convierte en un entero, su valor comprendido entre cero (lo que indica <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) a seis (lo que indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 El <xref:System.DateTime.DayOfWeek%2A> propiedad devuelve una constante enumerada; no refleja la configuración regional y de idioma de un sistema. Para recuperar una cadena que representa un nombre de la semana localizado para una fecha determinada, llame a una de las sobrecargas de los <xref:System.DateTime.ToString%2A> método que incluye un `format` parámetro y pasarlo bien el `ddd` o `dddd` cadenas de formato personalizado. Para obtener más información, consulte [Cómo: extraer el día de la semana de una fecha concreta](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.DayOfWeek%2A> propiedad y el <xref:System.DayOfWeek?displayProperty=nameWithType> enumeración.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el día del año representado por esta instancia.</summary>
        <value>El día del año, expresado como un valor entre 1 y 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.DayOfYear%2A> propiedad toma los años bisiestos en cuenta cuando calcula el día del año. El valor de propiedad siempre refleja el día del año del calendario gregoriano, independientemente del calendario actual del subproceso la referencia cultural actual. Para recuperar el día del año en un calendario diferente, llame el <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> método de dicho calendario.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el día del año del 31 de diciembre para los años 2020 de 2010 en el calendario gregoriano. Tenga en cuenta que en el ejemplo se muestra que el 31 de diciembre es el día 366 del año en los años bisiestos.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Año.</param>
        <param name="month">Mes (número del 1 al 12).</param>
        <summary>Devuelve el número de días del mes y año especificados.</summary>
        <returns>Número de días de <paramref name="month" /> para el <paramref name="year" /> especificado.  
  
Por ejemplo, si <paramref name="month" /> es igual a 2 para febrero, el valor devuelto será 28 o 29, en función de que <paramref name="year" /> sea un año bisiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.DaysInMonth%2A> método siempre interpreta `month` y `year` como incluso si el calendario gregoriano no es calendario actual de la referencia cultural actual del calendario del mes y año del calendario gregoriano. Para obtener el número de días del mes de un calendario determinado, llame a dicho calendario <xref:System.Globalization.Calendar.GetDaysInMonth%2A> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.DateTime.DaysInMonth%2A> método para determinar el número de días en julio de 2001, febrero de 1998 (un no año bisiesto) y (un año bisiesto) de febrero de 1996.  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 El ejemplo siguiente muestra el número de días de cada mes de un año especificado en una matriz de enteros.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> es menor que 1 o mayor que 12.  
  
O bien 
 <paramref name="year" /> es menor que 1 o mayor que 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un valor que indica si dos objetos <see cref="T:System.DateTime" /> o una instancia de <see cref="T:System.DateTime" /> y otro objeto o <see cref="T:System.DateTime" /> tienen el mismo valor.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Objeto que se va a comparar con esta instancia.</param>
        <summary>Devuelve un valor que indica si el valor de esta instancia equivale al valor de la instancia de <see cref="T:System.DateTime" /> especificada.</summary>
        <returns>
          <see langword="true" /> si el parámetro <paramref name="value" /> es igual al valor de esta instancia; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La instancia actual y `value` son iguales si sus <xref:System.DateTime.Ticks%2A> los valores de propiedad son iguales. Sus <xref:System.DateTime.Kind%2A> no se consideran valores de propiedad de la prueba de igualdad.  
  
 Este método implementa el <xref:System.IEquatable%601?displayProperty=nameWithType> interfaz y realiza un poco mejor que el <xref:System.DateTime.Equals%2A> método porque el `value` parámetro no tiene que convertirse a un objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto que se va a comparar con esta instancia.</param>
        <summary>Devuelve un valor que indica si esta instancia equivale a un objeto especificado.</summary>
        <returns>Es <see langword="true" /> si <paramref name="value" /> es una instancia de <see cref="T:System.DateTime" /> y es igual al valor de esta instancia; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La instancia actual y `value` son iguales si sus <xref:System.DateTime.Ticks%2A> los valores de propiedad son iguales. Sus <xref:System.DateTime.Kind%2A> no se consideran valores de propiedad de la prueba de igualdad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Equals%2A> método.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primer objeto que se va a comparar.</param>
        <param name="t2">Segundo objeto que se va a comparar.</param>
        <summary>Devuelve un valor que indica si dos instancias de <see cref="T:System.DateTime" /> tienen el mismo valor de fecha y hora.</summary>
        <returns>Es <see langword="true" /> si los dos valores son iguales; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` y `t2` son iguales si sus <xref:System.DateTime.Ticks%2A> los valores de propiedad son iguales. Sus <xref:System.DateTime.Kind%2A> no se consideran valores de propiedad de la prueba de igualdad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Equals%2A> método.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">Entero con signo de 64 bits que codifica la propiedad <see cref="P:System.DateTime.Kind" /> en un campo de 2 bits y la propiedad <see cref="P:System.DateTime.Ticks" /> en un campo de 62 bits.</param>
        <summary>Deserializa un valor binario de 64 bits y vuelve a crear un objeto <see cref="T:System.DateTime" /> serializado original.</summary>
        <returns>Objeto que es equivalente al objeto <see cref="T:System.DateTime" /> que se serializó con el método <see cref="M:System.DateTime.ToBinary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.DateTime.ToBinary%2A> método para convertir el valor del elemento actual <xref:System.DateTime> objeto a un valor binario. Posteriormente, usar el valor binario y el <xref:System.DateTime.FromBinary%2A> método para volver a crear el original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En algunos casos, el <xref:System.DateTime> valor devuelto por la <xref:System.DateTime.FromBinary%2A> método no es idéntico al original <xref:System.DateTime> valor proporcionado a la <xref:System.DateTime.ToBinary%2A> método. Para obtener más información, consulte la sección siguiente, "Ajuste de la hora Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de la hora local  
 Una hora local, que es una hora Universal ajustada a la zona horaria local, se representa mediante un <xref:System.DateTime> estructura cuyo <xref:System.DateTime.Kind%2A> propiedad tiene el valor <xref:System.DateTimeKind.Local>. Al restaurar un local <xref:System.DateTime> valor de la representación binaria producidos por la <xref:System.DateTime.ToBinary%2A> método, el <xref:System.DateTime.FromBinary%2A> método puede ajustar el valor ha vuelto a crear para que no sea igual al valor original. Esta desincronización puede aparecer bajo las condiciones siguientes:  
  
-   Si una variable local <xref:System.DateTime> el objeto se serializa en una zona horaria por la <xref:System.DateTime.ToBinary%2A> método y, a continuación, se deserializa en una zona horaria diferente mediante la <xref:System.DateTime.FromBinary%2A> método, la hora local representado por resultante <xref:System.DateTime> automáticamente se ajusta el objeto en la segunda zona horaria.  
  
     Por ejemplo, considere un <xref:System.DateTime> objeto que representa una hora local de 3 P.M. Una aplicación que se está ejecutando en los Estados Unidos. Usa la zona horaria del Pacífico el <xref:System.DateTime.ToBinary%2A> método para convertir todo esto <xref:System.DateTime> objeto a un valor binario. Otra aplicación que se está ejecutando en los Estados Unidos. Zona horaria del este, a continuación, usa el <xref:System.DateTime.FromBinary%2A> método para convertir el valor binario en un nuevo <xref:System.DateTime> objeto. El valor de la nueva <xref:System.DateTime> objeto es 6 p. M., que representa el mismo momento en el tiempo que el original 3 P.M. valor, pero se ajusta a la hora local en la zona horaria del este.  
  
-   Si la representación binaria de una variable local <xref:System.DateTime> valor representa una hora no válida en la zona horaria local del sistema en el que <xref:System.DateTime.FromBinary%2A> es llama, la hora se ajusta para que sea válido.  
  
     Por ejemplo, la transición desde el horario estándar al horario de verano se produce en la zona horaria del Pacífico de Estados Unidos en 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. El ejemplo siguiente se muestra que cuando una hora que se encuentra dentro de este intervalo se convierte en un valor binario mediante el <xref:System.DateTime.ToBinary%2A> método y, a continuación, se restaura por la <xref:System.DateTime.FromBinary%2A> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y el valor de tiempo pueden estar sujeto a modificación pasándolo a la <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> método, como en el ejemplo se muestra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Consideraciones sobre la versión  
 A partir de .NET Framework versión 2.0, un <xref:System.DateTime> estructura consta de un campo de tipo privado, que indica si la hora especificada es la hora local, hora Universal coordinada (UTC) o ninguna de ellas, concatenada a un campo privado de tics, lo que contiene el número de pasos de 100 nanosegundos que especifique una fecha y hora. El número de pasos que puede obtenerse con el <xref:System.DateTime.Ticks%2A> campo de propiedad y theKind puede obtenerse con el <xref:System.DateTime.Kind%2A> propiedad.  
  
 Antes de .NET Framework 2.0, si serializa un <xref:System.DateTime> objeto manualmente en lugar de usar una interfaz de serialización como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, necesarios para serializar solo los datos de ciclos en el <xref:System.DateTime>. A partir de .NET Framework 2.0, también se deben serializar los datos de tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Hora de un archivo de Windows, expresada en pasos.</param>
        <summary>Convierte la hora de archivo de Windows especificada en una hora local equivalente.</summary>
        <returns>Objeto que representa la hora local equivalente a la fecha y hora representadas por el parámetro <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la noche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuando se crea, tiene acceso a una aplicación o escribe en un archivo.  
  
 El `fileTime` parámetro especifica una hora de archivo expresada en pasos de 100 nanosegundos.  
  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.FromFileTime%2A> método.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> es menor que 0 o representa una hora mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>Normalmente, el <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restaura un <see cref="T:System.DateTime" /> valor guardada por el <see cref="M:System.DateTime.ToFileTime" /> método. Sin embargo, los dos valores pueden diferir en las siguientes condiciones: 
-If la serialización y deserialización de la <see cref="T:System.DateTime" /> producirse en distintas zonas horarias. Por ejemplo, si un <see cref="T:System.DateTime" /> valor con un tiempo de 12:30 P.M. en los Estados Unidos. Zona de hora se serializa y deserializa a continuación, en los Estados Unidos. Zona horaria del Pacífico, el valor original de 12:30 P.M. se ajusta a las 9:30 a. M. para reflejar la diferencia entre las dos zonas horarias.  
  
-If el <see cref="T:System.DateTime" /> valor que se serializa representa una hora no válida en la zona horaria local. En este caso, el <see cref="M:System.DateTime.ToFileTime" /> método ajusta el restaurada <see cref="T:System.DateTime" /> valor para que represente una hora válida en la zona horaria local.  
  
Por ejemplo, se produce la transición desde el horario estándar al horario de verano en Estados Unidos Zona horaria del Pacífico de 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. El ejemplo siguiente se muestra que cuando una hora que se encuentra dentro de este intervalo se convierte en un valor entero largo por el <see cref="M:System.DateTime.ToFileTime" /> método y, a continuación, se restaura por la <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y el valor de tiempo pueden estar sujeto a modificación pasándolo a la <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como en el ejemplo se muestra.  
  
[! código csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! código vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Hora de un archivo de Windows, expresada en pasos.</param>
        <summary>Convierte la hora de archivo de Windows especificada en una hora UTC equivalente.</summary>
        <returns>Objeto que representa la hora UTC equivalente a la fecha y hora representadas por el parámetro <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la noche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuando se crea, tiene acceso a una aplicación o escribe en un archivo.  
  
 El `fileTime` parámetro especifica una hora de archivo expresada en pasos de 100 nanosegundos.  
  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> es menor que 0 o representa una hora mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Valor de fecha de automatización OLE.</param>
        <summary>Devuelve un <see cref="T:System.DateTime" /> que equivale a la fecha de automatización OLE especificada.</summary>
        <returns>Objeto que representa la misma fecha y hora que el parámetro <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `d` parámetro es un número de punto flotante de precisión doble que representa una fecha como el número de días antes o después de la fecha base, medianoche, 30 de diciembre de 1899. La parte integral y de inicio de sesión de `d` codifican la fecha como un desplazamiento positivo o negativo día 30 de diciembre de 1899 y el valor absoluto de la parte fraccionaria de `d` codifica la hora del día como una fracción de un desplazamiento de días desde la medianoche. `d` debe ser un valor entre 657435.0 negativo a través de 2958465.99999999 positivo.  
  
 Tenga en cuenta que, debido al modo en que se codifican las fechas, hay dos maneras de representar cualquier hora del día del 30 de diciembre de 1899. Por ejemplo, -0,5 y 0,5 significan mediodía del 30 de diciembre de 1899 porque un desplazamiento de días de más o menos cero días a partir de la fecha base sigue siendo la fecha base y el mediodía medio día de desplazamiento desde la medianoche.  
  
 Consulte <xref:System.DateTime.ToOADate%2A> para obtener más información sobre la automatización OLE.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La fecha no es un valor válido de fecha de automatización OLE.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por los especificadores de formato de fecha y hora estándar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  No debe suponer que varias llamadas a la <xref:System.DateTime.GetDateTimeFormats%2A> sobrecargas devolverá datos idénticos. Dependiendo de la sobrecarga específica, pueden cambiar los datos devueltos por este método si los cambios de referencia cultural actual, el usuario invalide la configuración cultural individual o se produce una actualización a los datos de referencia cultural del sistema.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por los especificadores de formato de fecha y hora estándar.</summary>
        <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato de uno de los especificadores de formato de fecha y hora estándar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La matriz de cadena devuelta por la <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método es equivalente a la combinación de las matrices de cadenas devueltas por llamadas independientes para el <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> método con la "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" y cadenas de formato estándar "s". Para obtener más información sobre los especificadores de formato estándar, consulte [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Se da formato a cada elemento del valor devuelto con la información de la referencia cultural actual. Para obtener más información acerca de la información de formato específica de la referencia cultural para la referencia cultural actual, vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Dado que este método utiliza los datos de la referencia cultural, no debe suponer que varias llamadas al método devolverá datos idénticos. Pueden cambiar los datos devueltos por este método si los cambios de referencia cultural actual, el usuario invalide la configuración cultural individual o se produce una actualización a los datos de referencia cultural del sistema.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> método. Muestra la representación de cadena de una fecha con todos los posibles estándar formatos de fecha y hora en referencia cultural del equipo, que en este caso es en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 En el ejemplo se muestra el siguiente resultado:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Cadena con formato de fecha y hora estándar.</param>
        <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por el especificador de formato de fecha y hora estándar indicado.</summary>
        <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato del especificador de formato de fecha y hora estándar <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `format` parámetro puede ser cualquiera de los especificadores de formato de tiempo y fecha estándar. Estos incluyen d., D, f, F, g, G, M (o m), O (u o), R o r, s, t, T, u, U y Y (o y). Para obtener más información, consulte [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Se da formato a cada elemento del valor devuelto con la información de la referencia cultural actual. Para obtener más información acerca de la información de formato específica de la referencia cultural para la referencia cultural actual, vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Dado que este método utiliza los datos de la referencia cultural, no debe suponer que varias llamadas al método devolverá datos idénticos. Pueden cambiar los datos devueltos por este método si los cambios de referencia cultural actual, el usuario invalide la configuración cultural individual o se produce una actualización a los datos de referencia cultural del sistema.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> método. Muestra la representación de cadena de una fecha con el especificador de formato de fecha larga ("D") en la referencia cultural actual.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> no es un carácter de especificador de formato de fecha y hora estándar válido.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que aporta información de formato específica de la referencia cultural acerca de esta instancia.</param>
        <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por los especificadores de formato de fecha y hora estándar y la información de formato específica de la referencia cultural especificada.</summary>
        <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato de uno de los especificadores de formato de fecha y hora estándar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La matriz de cadena devuelta por la <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método es equivalente a la combinación de las matrices de cadenas devueltas por llamadas independientes para el <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método con la "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" y cadenas de formato estándar "s". Para obtener más información sobre los especificadores de formato estándar, consulte [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento del valor devuelto se ha formateado con información específica de la referencia cultural suministrada por `provider`.  
  
> [!IMPORTANT]
>  Dado que este método utiliza los datos de la referencia cultural, no debe suponer que varias llamadas al método devolverá datos idénticos, a menos que `provider` es un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural invariable. Pueden cambiar los datos devueltos por este método si el usuario reemplaza la configuración cultural individual de `provider` o si se produce una actualización a los datos de referencia cultural del sistema para `provider`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> método. Muestra la representación de cadena de una fecha con todos los posibles estándar formatos de fecha y hora en la referencia cultural fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 En el ejemplo se muestra el siguiente resultado:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Cadena con formato de fecha y hora.</param>
        <param name="provider">Objeto que aporta información de formato específica de la referencia cultural acerca de esta instancia.</param>
        <summary>Convierte el valor de esta instancia en todas las representaciones de cadena admitidas por el especificador de formato de fecha y hora estándar y la información de formato específica de la referencia cultural especificados.</summary>
        <returns>Matriz de cadenas donde cada elemento es la representación del valor de esta instancia con el formato de uno de los especificadores de formato de fecha y hora estándar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El parámetro de formato puede ser cualquiera de los especificadores de formato de tiempo y fecha estándar. Estos incluyen d., D, f, F, g, G, M (o m), O (u o), R o r, s, t, T, u, U y Y (o y). Para obtener más información, consulte [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Cada elemento del valor devuelto se ha formateado con información específica de la referencia cultural suministrada por `provider`.  
  
> [!IMPORTANT]
>  Dado que este método utiliza los datos de la referencia cultural, no debe suponer que varias llamadas al método devolverá datos idénticos, a menos que `provider` es un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural invariable. Pueden cambiar los datos devueltos por este método si el usuario reemplaza la configuración cultural individual de `provider` o si se produce una actualización a los datos de referencia cultural del sistema para `provider`.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> método. Se muestran las representaciones de cadena de una fecha con el especificador de formato de fecha corta ("d") en la referencia cultural fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> no es un carácter de especificador de formato de fecha y hora estándar válido.</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el código hash de esta instancia.</summary>
        <returns>Código hash de un entero de 32 bits con signo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el <see cref="T:System.TypeCode" /> para el tipo de valor <see cref="T:System.DateTime" />.</summary>
        <returns>Constante enumerada, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el componente correspondiente a la hora de la fecha representada por esta instancia.</summary>
        <value>El componente de hora, expresado como un valor entre 0 y 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.DateTime.Hour%2A> propiedad siempre se expresa mediante un reloj de 24 horas. Para recuperar una cadena que representa la hora de una fecha y hora con un reloj de 12 horas, llame el <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método con el especificador de formato personalizado "h". Por ejemplo:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Hour%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica si esta instancia de <see cref="T:System.DateTime" /> está dentro del intervalo del horario de verano de la zona horaria actual.</summary>
        <returns>
          <see langword="true" /> si el valor de la propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Local" /> o <see cref="F:System.DateTimeKind.Unspecified" />y el valor de esta instancia de <see cref="T:System.DateTime" /> está dentro del intervalo del horario de verano de la zona horaria actual; <see langword="false" /> si <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina si el actual <xref:System.DateTime> valor cae dentro del intervalo del horario de verano de la zona horaria local, que es devuelto por la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad. Puede determinar si una zona horaria admite el horario de verano, recupere el valor de su <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> propiedad. Para las zonas horarias que observan el horario de verano, puede determinar cuándo se produce la transición al horario de verano mediante la recuperación de la <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> matriz devuelta por la zona horaria <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> propiedad.  
  
 Si el actual <xref:System.DateTime> valor representa un ambiguo o una hora no válida en la zona horaria local, el método devuelve `false`.  
  
 En [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, la <xref:System.DateTime.IsDaylightSavingTime%2A> método reconoce solo la regla de ajuste actual al determinar si la instancia actual es un horario de verano. Como resultado, el método puede no informar con exactitud si la instancia actual es un horario de verano para períodos antes de la regla de ajuste actual entró en efecto.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Año de 4 dígitos.</param>
        <summary>Devuelve una indicación en la que se precisa si el año especificado es bisiesto.</summary>
        <returns>
          <see langword="true" /> si <paramref name="year" /> es un año bisiesto; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` se especifica como un número 10 de 4 dígitos base; Por ejemplo, 1996.  
  
 `year` siempre se interpreta como un año del calendario gregoriano. Para determinar si un determinado año fue un año bisiesto en algún otro calendario, llame a ese objeto de calendario `IsLeapYear` método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.IsLeapYear%2A> método para determinar qué entre 1994 y 2014 son años bisiestos. Este ejemplo también muestra el resultado cuando la <xref:System.DateTime.AddYears%2A> método se utiliza para agregar un año a un día bisiesto.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> es menor que 1 o mayor que 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la hora representada por esta instancia está basada en la hora local, en la hora universal coordinada (UTC), o en ninguna de ellas.</summary>
        <value>Uno de los valores de enumeración que indica qué representa la hora actual. El valor predeterminado es <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede establecer explícitamente el <xref:System.DateTime.Kind%2A> propiedad de un nuevo <xref:System.DateTime> valor a un determinado <xref:System.DateTimeKind> valor mediante una llamada a la <xref:System.DateTime.SpecifyKind%2A> método.  
  
 El <xref:System.DateTime.Kind%2A> propiedad permite un <xref:System.DateTime> valor refleje claramente la hora Universal coordinada (UTC) o la hora local. En cambio, el <xref:System.DateTimeOffset> estructura puede reflejar inequívocamente cualquier hora de cualquier zona horaria como un único punto en el tiempo.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para demostrar cómo el <xref:System.DateTime.Kind%2A> influye en la propiedad la <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa el mayor valor posible de <see cref="T:System.DateTime" />. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante equivale a 23:59:59.9999999 UTC, el 31 de diciembre, 9999 en el calendario gregoriano, que es exactamente un paso de 100 nanosegundos antes de 00:00:00 UTC, el 1 de enero, 10000.  
  
 Algunos calendarios, como el <xref:System.Globalization.ThaiBuddhistCalendar>, admite un intervalo de fechas superior que es anterior a <xref:System.DateTime.MaxValue>. En estos casos, al intentar tener acceso a <xref:System.DateTime.MaxValue> en asignaciones de variables o formato y las operaciones de análisis puede producir un <xref:System.ArgumentOutOfRangeException>. En lugar de recuperar el valor de <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, puede recuperar el valor del valor de fecha válido más reciente de la referencia cultural especificada desde el <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTime> pasando su constructor una <xref:System.Int64> valor que representa un número de pasos. Antes de invocar el constructor, el ejemplo se asegura de que este valor es mayor o igual a `DateTime.MinValue.Ticks` y menor o igual que `DateTime.MaxValue.Ticks`. Si no, se produce un <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el componente correspondiente a los milisegundos de la fecha representada por esta instancia.</summary>
        <value>El componente de milisegundos, expresado como un valor entre 0 y 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede mostrar la representación de cadena de la <xref:System.DateTime.Millisecond%2A> propiedad mediante el especificador de formato "fff". Por ejemplo, el código siguiente muestra una cadena que contiene el número de milisegundos en una fecha y hora en la consola.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 También puede mostrar el componente de milisegundos junto con los demás componentes de un valor de fecha y hora mediante el uso del especificador de formato estándar "o". Por ejemplo:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Sin embargo, el especificador de formato "o" se diseñó menos para mostrar de ida y vuelta o almacenar una <xref:System.DateTime> valor. También puede mostrar los milisegundos junto con otros componentes de fecha y hora mediante el uso de una cadena de formato personalizado, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Millisecond%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el componente correspondiente a los minutos de la fecha representada por esta instancia.</summary>
        <value>El componente de minutos, expresado como un valor entre 0 y 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Minute%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa el menor valor posible de <see cref="T:System.DateTime" />. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante es equivalente a 00:00:00.0000000 UTC, el 1 de enero, 0001 en el calendario gregoriano.  
  
 <xref:System.DateTime.MinValue> define la fecha y hora en que se asigna a una sin inicializar <xref:System.DateTime> variable. Esto se ilustra en el siguiente ejemplo:  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 El <xref:System.DateTime.MinValue> y <xref:System.DateTime.MaxValue> propiedades pueden usarse para asegurarse de que un valor se encuentra dentro del intervalo admitido antes de pasarlo a un <xref:System.DateTime> constructor. El código en la sección ejemplo muestra este uso.  
  
   
  
## Examples  
 El ejemplo siguiente crea un <xref:System.DateTime> pasando su constructor una <xref:System.Int64> valor que representa un número de pasos. Antes de invocar el constructor, el ejemplo se asegura de que este valor es mayor o igual a `DateTime.MinValue.Ticks` y menor o igual que `DateTime.MaxValue.Ticks`. Si no, se produce un <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el componente correspondiente al mes de la fecha representada por esta instancia.</summary>
        <value>El componente de mes, expresado como un valor entre 1 y 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Month%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.DateTime" /> que se establece en la fecha y hora actual de este equipo, expresada como hora local.</summary>
        <value>Objeto cuyo valor es la fecha y hora local.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Now%2A> propiedad devuelve un <xref:System.DateTime> valor que representa la fecha y hora actuales en el equipo local. Tenga en cuenta que hay una diferencia entre un <xref:System.DateTime> valor, que representa el número de pasos que han transcurrido desde la medianoche del 1 de enero, 0001, y la representación de cadena de la que <xref:System.DateTime> valor, que expresa el valor de fecha y hora en un formato cultural específico. Para obtener información sobre el formato de los valores de fecha y hora, vea el <xref:System.DateTime.ToString%2A> método. El ejemplo siguiente muestra la fecha corta y la cadena de hora en un número de formatos específicos de la referencia cultural.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 La resolución de esta propiedad depende del temporizador del sistema, que depende del sistema operativo subyacente. Suele estar comprendida entre 0,5 y 15 milisegundos. Como resultado, las llamadas repetidas a la <xref:System.DateTime.Now%2A> propiedad en un intervalo de hora corta, como se muestra en un bucle, puede devolver el mismo valor.  
  
 El <xref:System.DateTime.Now%2A> propiedad se suele utilizar para medir el rendimiento. Sin embargo, debido a su resolución baja, no es adecuado para su uso como una herramienta de pruebas comparativas. Una alternativa mejor es usar el <xref:System.Diagnostics.Stopwatch> clase.  
  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad devuelve <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  También puede usar el <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> propiedad para recuperar la fecha local actual y la hora. Permite a una hora local se exprese inequívocamente como un único punto en el tiempo, lo que a su vez hace que ese valor de tiempo portátil en varios equipos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Now%2A> y <xref:System.DateTime.UtcNow%2A> propiedades para recuperar la fecha y hora local actual y la actual universal coordinación de fecha y hora (UTC). A continuación, usa las convenciones de formato de un número de referencias culturales para mostrar las cadenas, junto con los valores de las sus <xref:System.DateTime.Kind%2A> propiedades.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Valor de fecha y hora que se va a agregar.</param>
        <param name="t">Intervalo de tiempo que se va a agregar.</param>
        <summary>Agrega un intervalo de tiempo especificado a una fecha y hora especificadas, generando una fecha y hora nuevas.</summary>
        <returns>Objeto que es la suma de los valores de <paramref name="d" /> y <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Es el método equivalente para este operador <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 El ejemplo siguiente muestra el operador de suma.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Primer objeto que se va a comparar.</param>
        <param name="d2">Segundo objeto que se va a comparar.</param>
        <summary>Determina si dos instancias especificadas de <see cref="T:System.DateTime" /> son iguales.</summary>
        <returns>
          <see langword="true" /> si <paramref name="d1" /> y <paramref name="d2" /> representan la misma fecha y hora; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_Equality%2A> operador determina si dos <xref:System.DateTime> valores son iguales al comparar su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 El ejemplo siguiente muestra el operador de igualdad.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primer objeto que se va a comparar.</param>
        <param name="t2">Segundo objeto que se va a comparar.</param>
        <summary>Determina si un <see cref="T:System.DateTime" /> especificado es posterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> es posterior a <paramref name="t2" />; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_GreaterThan%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primer objeto que se va a comparar.</param>
        <param name="t2">Segundo objeto que se va a comparar.</param>
        <summary>Determina si un <see cref="T:System.DateTime" /> especificado representa una fecha y hora que es el igual o posterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> es igual o posterior a <paramref name="t2" />; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_GreaterThanOrEqual%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Primer objeto que se va a comparar.</param>
        <param name="d2">Segundo objeto que se va a comparar.</param>
        <summary>Determina si dos instancias especificadas de <see cref="T:System.DateTime" /> no son iguales.</summary>
        <returns>
          <see langword="true" /> si <paramref name="d1" /> y <paramref name="d2" /> no representan la misma fecha y hora; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_Inequality%2A> operador determina si dos <xref:System.DateTime> valores no son iguales al comparar su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primer objeto que se va a comparar.</param>
        <param name="t2">Segundo objeto que se va a comparar.</param>
        <summary>Determina si un <see cref="T:System.DateTime" /> especificado es anterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> es anterior a <paramref name="t2" />; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_LessThan%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primer objeto que se va a comparar.</param>
        <param name="t2">Segundo objeto que se va a comparar.</param>
        <summary>Determina si un <see cref="T:System.DateTime" /> especificado representa una fecha y hora que es el igual o anterior a otro <see cref="T:System.DateTime" /> especificado.</summary>
        <returns>
          <see langword="true" /> si <paramref name="t1" /> es igual o anterior a <paramref name="t2" />; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_LessThanOrEqual%2A> operador determina la relación entre dos <xref:System.DateTime> valores comparando su número de pasos. Antes de comparar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. Puede hacerlo comparando los valores de su propiedad <xref:System.DateTime.Kind%2A>.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Resta un <see cref="T:System.DateTime" /> o <see cref="T:System.TimeSpan" /> especificado de un <see cref="T:System.DateTime" /> especificado.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Valor de fecha y hora del que restar (minuendo).</param>
        <param name="d2">Valor de fecha y hora que se resta (sustraendo).</param>
        <summary>Resta una fecha y hora especificadas de otra fecha y hora especificadas y devuelve un intervalo de tiempo.</summary>
        <returns>Intervalo de horas entre <paramref name="d1" /> y <paramref name="d2" />; es decir, <paramref name="d1" /> menos <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> método no tiene en cuenta el valor de la <xref:System.DateTime.Kind%2A> propiedad de los dos <xref:System.DateTime> valores al realizar la resta. Antes de restar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. En caso contrario, el resultado incluirá la diferencia entre zonas horarias.  
  
> [!NOTE]
>  El <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> método tiene en cuenta la diferencia entre las zonas horarias al realizar la resta.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Valor de fecha y hora del que se va a restar.</param>
        <param name="t">Intervalo de hora que se van a restar.</param>
        <summary>Resta un intervalo de tiempo especificado de un valor de fecha y hora especificado y devuelve un nuevo valor de fecha y hora.</summary>
        <returns>Objeto cuyo valor es el valor de <paramref name="d" /> menos el valor de <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método resta el valor de pasos de `t` el valor en pasos de `d`.  
  
 Es el método equivalente para este operador <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El <see cref="T:System.DateTime" /> resultante es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte la representación de cadena de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En esta sección:  
  
 [¿Qué método se debe llamar?](#Tasks)   
 [La cadena para analizar](#StringToParse)   
 [Convenciones culturales y análisis](#Culture)   
 [Elementos de estilo y análisis](#Styles)   
 [El valor devuelto y DateTime.Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>¿Qué método se debe llamar?  
  
|En|Call|  
|--------|----------|  
|Analizar una cadena de fecha y hora mediante las convenciones de la referencia cultural actual.|<xref:System.DateTime.Parse%28System.String%29> overload|  
|Analizar una cadena de fecha y hora mediante las convenciones de una referencia cultural concreta.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> sobrecargar (vea [análisis y las convenciones culturales](#Culture))|  
|Analizar una cadena de fecha y hora con elementos de estilo especial (como espacios en blanco o sin espacios en blanco).|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> overload|  
|Analizar una cadena de fecha y hora en que debe estar en un formato determinado.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analizar una cadena de fecha y hora y realizar una conversión a UTC u hora local.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> overload|  
|Analizar una cadena de fecha y hora sin control de excepciones.|Método <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Restaurar (ida y vuelta) un valor de fecha y hora creado por una operación de formato.|Pase la cadena de formato estándar "o" u "r" para el <xref:System.DateTime.ToString%28System.String%29> método y llamar a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecargar con <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analizar una cadena de fecha y hora en un formato fijo a través de límites de máquina (y posiblemente culturales).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> (método)|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>La cadena para analizar  
 El <xref:System.DateTime.Parse%2A> método intenta convertir la representación de cadena de un valor de fecha y hora en su <xref:System.DateTime> equivalente. Se intenta analizar la cadena de entrada completamente sin producir una <xref:System.FormatException> excepción.  
  
> [!IMPORTANT]
>  Si se produce un error en la operación de análisis porque el formato de cadena no reconocido, la <xref:System.DateTime.Parse%2A> método produce una <xref:System.FormatException>, mientras que el <xref:System.DateTime.TryParse%2A> devuelve del método `false`. Como control de excepciones puede ser costoso, debe usar <xref:System.DateTime.Parse%2A> cuando se espera que la operación de análisis se realizó correctamente porque el origen de entrada es de confianza. <xref:System.DateTime.TryParse%2A> es preferible cuando están probable que análisis de errores, especialmente porque un origen de entrada no es de confianza, o tener valores predeterminados razonables para sustituir las cadenas que no se analizan correctamente.   

 La cadena a analizarse puede tener cualquiera de las siguientes formas:  
  
-   Una cadena con una componente de fecha y hora.  
  
-   Una cadena con una fecha, pero ningún componente de tiempo. Si el componente de hora no está presente, el método supone 12:00 de la noche. Si el componente de fecha tiene un año de dos dígitos, se convierte en un año según el <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> de calendario actual de la referencia cultural actual o el calendario actual de la referencia cultural especificada (si usa una sobrecarga con un valor no null `provider` argumento).  
  
- Una cadena con un componente de fecha que incluye sólo el mes y año, pero ningún componente de día. El método supone que el primer día del mes.

- Una cadena con un componente de fecha que incluye sólo el mes y día, pero no hay ningún componente de año. El método supone que el año actual.

-   Una cadena con un tiempo, pero ningún componente de fecha. El método supone que la fecha actual, a menos que llame a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga e incluyen <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> en el `styles` argumento, en el que caso, el método supone una fecha del 1 de enero de 0001.  

- Una cadena con un componente de tiempo que incluye solo la hora y un designador AM/PM, con ningún componente de fecha. El método supone que la fecha actual y una hora con ningún minutos y sin segundos. Puede cambiar este comportamiento mediante una llamada a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga e incluyen <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> en el `styles` argumento, en el que caso, el método supone una fecha del 1 de enero de 0001.

-   Una cadena que incluye información de zona horaria y se ajusta a ISO 8601. En los ejemplos siguientes, la primera cadena designa la hora Universal coordinada (UTC) y la segunda designa la hora en una zona horaria que es siete horas anterior a la hora UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Una cadena que incluye el designador GMT y se ajusta al formato de hora RFC 1123; Por ejemplo:  
  
     "Sat, 01 de noviembre de 2008 19:35:00 hora peninsular española"  
  
-   Una cadena que incluye la fecha y hora junto con información de desplazamiento de zona horaria; Por ejemplo:  
  
     "03/01/2009 42:05:00 -5:00"  

El ejemplo siguiente analiza las cadenas en cada uno de estos formatos mediante el uso de las convenciones de formato de la referencia cultural actual, que en este caso es la referencia cultural en-US:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Si la cadena de entrada representa un día bisiesto de un año bisiesto en el calendario usado por el método de análisis (consulte [convenciones culturales y análisis](#Culture)), el <xref:System.DateTime.Parse%2A> método analiza la cadena correctamente. Si la cadena de entrada representa un día bisiesto de un año bisiesto, el método produce una <xref:System.FormatException>.  
  
 Dado que el <xref:System.DateTime.Parse%2A> método intenta analizar la representación de cadena de una fecha y hora mediante el uso de las reglas de formato de la actual o una referencia cultural especificada, al intentar analizar una cadena entre referencias culturales diferentes puede producir un error. Para analizar una fecha concreta y el formato de hora entre distintas configuraciones regionales, use una de las sobrecargas de los <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> método y proporcione un especificador de formato.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Convenciones culturales y análisis  
 Todas las sobrecargas de la <xref:System.DateTime.Parse%2A> método afectan a la referencia cultural a menos que la cadena que se puede analizar (representada mediante `s` en la tabla siguiente) se ajusta al patrón de ISO 8601. La operación de análisis usa la información de formato en un <xref:System.Globalization.DateTimeFormatInfo> objeto derivado como sigue:  
  
|Si se llama a|Y `provider` es|Se deriva de la información de formato|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|La referencia cultural del subproceso actual (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> propiedad)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Un <xref:System.Globalization.DateTimeFormatInfo> objeto|Especificado <xref:System.Globalization.DateTimeFormatInfo> objeto|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|La referencia cultural del subproceso actual (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> propiedad)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Un <xref:System.Globalization.CultureInfo> objeto|La propiedad <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Custom <xref:System.IFormatProvider> implementación|El método <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>|  
  
 Cuando la información de formato se deriva un <xref:System.Globalization.DateTimeFormatInfo> objeto, el <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> propiedad define el calendario usado en la operación de análisis.  
  
 Si se analiza una cadena de fecha y hora mediante el uso de un <xref:System.Globalization.DateTimeFormatInfo> objeto con configuraciones personalizadas que son diferentes de las de una referencia cultural estándar, use el <xref:System.DateTime.ParseExact%2A> método en lugar de la <xref:System.DateTime.Parse%2A> método para mejorar las posibilidades de una conversión correcta. Una cadena de hora y fecha no estándar pueden ser complicada y difícil de analizar. El <xref:System.DateTime.Parse%2A> método intenta analizar una cadena con varios modelos de análisis implícito, que podría producir un error. En cambio, el <xref:System.DateTime.ParseExact%2A> método requiere que se designe explícitamente uno o varios modelos de análisis exacto que es probables que se realice correctamente. Para obtener más información, vea la sección "DateTimeFormatInfo y dinámico de datos" en el <xref:System.Globalization.DateTimeFormatInfo> tema.  
  
> [!IMPORTANT]
>  Tenga en cuenta que las convenciones de formato para una determinada referencia cultural son dinámicas y pueden estar sujetos a cambio. Esto significa que las operaciones de análisis que dependen de las convenciones de formato de la referencia cultural de forma predeterminada (actual) o que especifican un <xref:System.IFormatProvider> objeto que representa una referencia cultural que no sea la referencia cultural invariable inesperadamente puede producir un error si se produce alguna de las siguientes acciones:  
>   
> -   Los datos específicos de la referencia cultural ha cambiado entre versiones principales o secundarias de .NET Framework o como resultado de una actualización de la versión existente de .NET Framework.  
> -   Los datos específicos de la referencia cultural reflejan las preferencias del usuario, que pueden variar de un equipo a otro o sesiones.  
> -   Los datos específicos de la referencia cultural representan una referencia cultural de reemplazo que invalida la configuración de una referencia cultural estándar o una referencia cultural personalizada.  
>   
>  Para evitar las dificultades para analizar cadenas de fecha y hora que están asociadas con los cambios en los datos de referencia culturales, puede analizar cadenas de fecha y hora mediante el uso de la referencia cultural invariable, o bien puede llamar el <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> método y especificar el formato exacto de la cadena que se puede analizar. Si está serializando y deserializar los datos de fecha y hora, puede usar las convenciones de formato de la referencia cultural invariable, o puede serializar y deserializar la <xref:System.DateTime> valor en un formato binario.  
>   
>  Para obtener más información, consulte la sección "datos de referencia cultural dinámica" en el <xref:System.Globalization.CultureInfo> tema y los "valores de fecha y hora de persistencia" sección en el <xref:System.DateTime> tema.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elementos de estilo y análisis  
 Todos los <xref:System.DateTime.Parse%2A> sobrecargas omitir los caracteres de espacio en blanco iniciales, internas o finales en la cadena de entrada (representada mediante `s` en la tabla siguiente). La fecha y hora pueden ir entre corchetes con un par de caracteres de signo de número ("#", u+0023) iniciales y finales y pueden terminar con uno o más caracteres NULL (u+0000).  
  
 Además, el <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> sobrecarga tiene un `styles` parámetro que consta de uno o varios miembros de la <xref:System.Globalization.DateTimeStyles> enumeración. Este parámetro define cómo `s` deben interpretarse y cómo se debe convertir la operación de análisis `s` a una fecha y hora. En la tabla siguiente se describe el efecto de cada <xref:System.Globalization.DateTimeStyles> miembro en la operación de análisis.  
  
|Miembro DateTimeStyles|Efecto sobre la conversión|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC, como sigue:<br /><br /> -If `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal> marca, el método analiza la cadena de llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor UTC y establece la <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-If `s` indica que representa la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal> marca, el método analiza la cadena, no realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Este valor se omite. Espacio en blanco interno siempre se permite en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Este valor se omite. Espacio en blanco inicial siempre se permite en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Este valor se omite. Espacio en blanco final siempre se permite en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener, internos y los espacios en blanco finales. Éste es el comportamiento predeterminado. Se puede reemplazar proporcionando más restrictivo <xref:System.Globalization.DateTimeStyles> valor de enumeración como <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` falta, se supone que cualquier información de zona horaria, hora local. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marcador está presente, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` falta, se supone que cualquier información de zona horaria UTC. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Aunque sea válido, este valor se omite.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión de una cadena de fecha y hora en un <xref:System.DateTime> valor que representa una hora local con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, se crea este tipo de cadena mediante una llamada a la <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método y con el especificador de formato estándar "o", "r" o "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>El valor devuelto y DateTime.Kind

El `DateTime.Parse` sobrecargas devuelven un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind> propiedad incluye la información de zona horaria. Puede indicar que la hora es:

- Hora Universal coordinada (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- El tiempo en la zona horaria local (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- El tiempo en una zona horaria desconocida (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 Por lo general, el <xref:System.DateTime.Parse%2A> método devuelve un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Sin embargo, el <xref:System.DateTime.Parse%2A> método también puede realizar la conversión de zona horaria y establezca el valor de la <xref:System.DateTime.Kind%2A> propiedad diferente, según los valores de la `s` y `styles` parámetros:  
  
|Si|Conversión de zona horaria|Kind (propiedad)|  
|--------|--------------------------|-------------------|  
|`s` contiene información de zona horaria.|La fecha y hora se convierte a la hora en la zona horaria local.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` contiene información de zona horaria y `styles` incluye la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marca.|La fecha y hora se convierte en hora Universal coordinada (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` contiene el designador de zona horaria Z o GMT, y `styles` incluye la <xref:System.Globalization.DateTimeStyles.RoundtripKind> marca.|La fecha y hora se interpretan como hora UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 El ejemplo siguiente convierte las cadenas de fecha que contienen información de zona horaria a la hora en la zona horaria local:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  También puede conservar el valor de una fecha y del hora <xref:System.DateTime.Kind%2A> propiedad durante la operación de análisis mediante el uso y un formato el <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca. El ejemplo siguiente se muestra cómo el <xref:System.Globalization.DateTimeStyles.RoundtripKind> marca afecta a la operación de análisis en <xref:System.DateTime> valores que se convierten en cadenas mediante el especificador de formato "o", "r" o "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Ver numerosos ejemplos que llaman a la `DateTime.Parse` método se intercalan en la [comentarios](#remarks) sección de este artículo y en la documentación de la persona `DateTime.Parse` sobrecargas.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

También puede descargar un conjunto completo de `DateTime.Parse` ejemplos, que se incluyen en un [proyecto .NET Core 2.0 para C#](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) y un [proyecto .NET Core 2.0 para Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), desde el [dotnet / repositorio de GitHub de ejemplos](https://github.com/dotnet/samples).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir. Vea [The string to parse](#StringToParse) (La cadena que se debe analizar) para obtener más información.</param>
        <summary>Convierte la representación de cadena para una fecha y hora en su <see cref="T:System.DateTime" /> equivalente, usando las convenciones de la referencia cultural de subproceso especificada.</summary>
        <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Si `s` contiene información de zona horaria, este método devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> y convierte la fecha y hora en `s` a la hora local. En caso contrario, realiza ninguna conversión de zona horaria y se devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Esta sobrecarga intenta analizar `s` utilizando las convenciones de formato de la referencia cultural actual. La referencia cultural actual se indica mediante el <xref:System.Globalization.CultureInfo.CurrentCulture> propiedad. Para analizar una cadena mediante las convenciones de formato de una referencia cultural concreta, llame a la <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> o <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> sobrecargas.

Esta sobrecarga intenta analizar `s` utilizando <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Ejemplo

El ejemplo siguiente analiza la representación de cadena de varios valores de fecha y hora por:

- Con el proveedor de formato predeterminado, que proporciona las convenciones de formato de la referencia cultural del subproceso actual del equipo usado para generar la salida de ejemplo. El resultado de este ejemplo refleja las convenciones de formato de la referencia cultural en-US.

- Con el valor de estilo predeterminado, que es <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Controla el <xref:System.FormatException> las convenciones de formato de excepción que se produce cuando el método intenta analizar la representación de cadena de una fecha y hora mediante el uso de alguna otra referencia cultural. También muestra cómo analizar correctamente un valor de fecha y hora que no usa las convenciones de formato de la referencia cultural del subproceso actual.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> no contiene una representación de cadena válida de una fecha y hora.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir. Vea [The string to parse](#StringToParse) (La cadena que se debe analizar) para obtener más información.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.  Vea [Parsing and cultural conventions](#Culture) (Convenciones culturales y análisis).</param>
        <summary>Convierte la representación de cadena para una fecha y hora en su <see cref="T:System.DateTime" /> equivalente, usando la información de formato específica de la referencia cultural especificada.</summary>
        <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal como especifica <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Si `s` contiene información de zona horaria, este método devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> y convierte la fecha y hora en `s` a la hora local. En caso contrario, realiza ninguna conversión de zona horaria y se devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Esta sobrecarga intenta analizar `s` utilizando el <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> estilo.

## <a name="example"></a>Ejemplo

El ejemplo siguiente analiza una matriz de cadenas de fecha mediante las convenciones de en-US, fr-FR y referencias culturales de-DE. Muestra que las representaciones de cadena de una sola fecha pueden interpretarse de manera distinta en diferentes referencias culturales.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> no contiene una representación de cadena válida de una fecha y hora.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir. Vea [The string to parse](#StringToParse) (La cadena que se debe analizar) para obtener más información.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.  Vea [Parsing and cultural conventions](#Culture) (Convenciones culturales y análisis).</param>
        <param name="styles">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <c>s</c> para que la operación de análisis se realice correctamente y que define cómo interpretar la fecha analizada respecto a la zona horaria actual o la fecha actual. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Convierte la representación de cadena de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la información de formato específica de la referencia cultural y un estilo de formato especificados.</summary>
        <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal como especifican <paramref name="provider" /> y <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Esta sobrecarga del método convierte la fecha y hora en `s` y establece el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor como sigue:

|Si |Conversión de zona horaria|Kind (propiedad)|   
|-----|-----|-----|  
|`s` no contiene ninguna información de zona horaria.|Ninguno.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` contiene información de zona horaria.|En la hora de la zona horaria local|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` contiene información de zona horaria, y "estilos incluye el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca.|Hora de universal a coordinada (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` contiene el designador de zona horaria Z o GMT, y `styles` incluye la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Ninguno.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Ejemplo

En el ejemplo siguiente se muestra el <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método y muestra el valor de la <xref:System.DateTime.Kind%2A> propiedad del resultante <xref:System.DateTime> valores.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> no contiene una representación de cadena válida de una fecha y hora.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contiene una combinación no válida de valores de <see cref="T:System.Globalization.DateTimeStyles" />. Por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">Cómo: Aplicar acciones de ida y vuelta a valores de fecha y hora</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente. El formato de la representación de cadena debe coincidir exactamente con el formato especificado; de lo contrario, se produce una excepción.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir.</param>
        <param name="format">Especificador de formato que define el formato requerido de <c>s</c>. Para obtener más información, vea la sección Comentarios.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.</param>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la información de formato específica de la referencia cultural y el formato que se hayan especificado. El formato de la representación de cadena debe coincidir exactamente con el formato especificado.</summary>
        <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha, que debe estar en el formato definido por el `format` parámetro. También requiere que el \<fecha > y \<tiempo > elementos de la representación de cadena de una fecha y hora aparecen en el orden especificado por `format`y que `s` no tener ningún espacio en blanco que no sean permitido por `format`. Si `format` define una fecha con ningún elemento de hora y el análisis de operación se realiza correctamente, el resultado <xref:System.DateTime> valor tiene una hora de medianoche (00: 00:00). Si `format` define una hora con ningún elemento de fecha y el análisis de operación se realiza correctamente, el resultado <xref:System.DateTime> valor tiene una fecha de `DateTime.Now.Date`.  
  
 Si `s` no representa una hora en una zona horaria determinada y la operación de análisis se realiza correctamente, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si `s` representan la hora en una zona horaria determinada y `format` permite que la información de zona horaria esté presente (por ejemplo, si `format` es igual a "o", "r" los especificadores de formato estándar "u", o si contiene la "z", "zz" o "zzz" especificadores de formato personalizado), el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 El `format` parámetro es una cadena que contiene un especificador de formato estándar único o uno o varios especificadores de formato personalizado que definen el formato requerido de `s`. Para obtener más información sobre los códigos de formato válidos, vea [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) o [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Si `format` es un patrón de formato personalizado que no se incluyen los separadores de fecha u hora (por ejemplo, "yyyyMMddHHmm"), use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato largo de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón de formato, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
 La fecha en particular y símbolos de tiempo y cadenas (como nombres de los días de la semana en un idioma determinado) que se usan en `s` definidos por el `provider` parámetro, como el formato preciso de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Personalizada <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ParseExact%2A> método.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> o <paramref name="format" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> o <paramref name="format" /> es una cadena vacía.  
  
O bien 
 <paramref name="s" /> no contiene una fecha y hora que se correspondan con el modelo especificado en <paramref name="format" />.  
  
O bien 
El componente de hora y el designador AM/PM en <paramref name="s" /> no coinciden.</exception>
        <block subset="none" type="usage">
          <para>En el [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el <see cref="Overload:System.DateTime.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena que se puede analizar contiene un componente de hora y un designador AM/PM que no están en el contrato. En el [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] y versiones anteriores, el designador AM/PM se omite.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir.</param>
        <param name="format">Especificador de formato que define el formato requerido de <c>s</c>. Para obtener más información, vea la sección Comentarios.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.</param>
        <param name="style">Combinación bit a bit de los valores de enumeración que proporciona información adicional sobre <c>s</c>, sobre los elementos de estilo que pueden estar presentes en <c>s</c> o sobre la conversión de <c>s</c> en un valor de <see cref="T:System.DateTime" />. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando el formato, la información de formato específica de la referencia cultural y el estilo especificados. El formato de la representación de cadena debe coincidir exactamente con el formato especificado; de lo contrario, se produce una excepción.</summary>
        <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal y como especifican <paramref name="format" />, <paramref name="provider" /> y <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha, que debe estar en un formato definido por el `format` parámetro. También requiere que los elementos de fecha y hora en `s` aparecen en el orden especificado por `format`. Si `s` no coincide con el patrón de la `format` parámetro, con las variaciones definido por el `style` parámetro, el método produce una <xref:System.FormatException>. En cambio, el <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha en cualquiera de los formatos reconocidos por el proveedor de formato <xref:System.Globalization.DateTimeFormatInfo> objeto. El <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método también permite que los elementos de fecha y hora en `s` a aparecer en cualquier orden.  
  
 Si el `s` parámetro contiene solo una hora y ninguna fecha, se utiliza la fecha actual, a menos que el `style` parámetro incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca, en cuyo caso la fecha predeterminada (`DateTime.Date.MinValue`) se utiliza. Si el `s` parámetro no contiene solo una fecha y ninguna hora, la medianoche (00: 00:00) se utiliza. El `style` parámetro también determina si el `s` parámetro puede contener caracteres de espacio en blanco iniciales, interna o finales.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcadores, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca para no convertir la hora Universal coordinada (UTC) a la hora local y para establecer el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `format` parámetro define el patrón requerido de la `s` parámetro. Puede constar de uno o varios especificadores de formato personalizado desde la [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, desde el [fecha estándar y Cadenas de formato de hora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un patrón de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato largo de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
> [!NOTE]
>  En lugar de requerir que `s` tiene un formato único para la operación de análisis se realice correctamente, puede llamar a la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método y especificar varios formatos permitidos. Esto hace que la operación de análisis más probable que se realice correctamente.  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos por `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. En la tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena de llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que representa la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que espacio en blanco no definido por `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener, internos y finales de los espacios en blanco no definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcador está presente, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza con los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` carece de un componente de fecha, la fecha devuelto del <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si está presente en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión a un <xref:System.DateTime> valor de fecha y hora con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Principalmente, este marcador impide la conversión de horas UTC en horas locales.|  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definidos por el `provider` parámetro, como el formato preciso de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Personalizada <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> método. Tenga en cuenta que la cadena "5/01/2009 8:30 AM" no se puede analizar correctamente cuando el `styles` parámetro es igual a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> porque no se permiten espacios iniciales por `format`. Además, la cadena "5/01/2009 09:00" no se puede analizar correctamente con un `format` de "MM/dd/yyyyhh:mm" porque la cadena de fecha no precede el número del mes con un cero inicial, como `format` requiere.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> o <paramref name="format" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> o <paramref name="format" /> es una cadena vacía.  
  
O bien 
 <paramref name="s" /> no contiene una fecha y hora que se correspondan con el modelo especificado en <paramref name="format" />.  
  
O bien 
El componente de hora y el designador AM/PM en <paramref name="s" /> no coinciden.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contiene una combinación no válida de valores de <see cref="T:System.Globalization.DateTimeStyles" />. Por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>En el [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el <see cref="Overload:System.DateTime.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena que se puede analizar contiene un componente de hora y un designador AM/PM que no están en el contrato. En el [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] y versiones anteriores, el designador AM/PM se omite.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir.</param>
        <param name="formats">Matriz de formatos permitidos de <c>s</c>. Para obtener más información, vea la sección Comentarios.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.</param>
        <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <c>s</c>. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la matriz de formatos, la información de formato específica de la referencia cultural y el estilo especificados. El formato de la representación de cadena debe coincidir exactamente con, al menos, uno de los formatos especificados; de lo contrario se produce una excepción.</summary>
        <returns>Objeto equivalente a la fecha y hora contenidas en <paramref name="s" />, tal y como especifican <paramref name="formats" />, <paramref name="provider" /> y <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha que coincide con cualquiera de los patrones que se asigna a la `formats` parámetro. Si la cadena `s` no coincide con cualquiera de estos patrones con cualquiera de las variaciones definidas por el `styles` parámetro, el método produce una <xref:System.FormatException>. Además de comparar `s` para varios modelos de formato, en lugar de a un patrón de formato único, esta sobrecarga se comporta igual que el <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método.  
  
 El `s` parámetro contiene la fecha y hora para analizar. Si el `s` parámetro contiene solo una hora y ninguna fecha, se utiliza la fecha actual, a menos que el `style` parámetro incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca, en cuyo caso la fecha predeterminada (`DateTime.Date.MinValue`) se utiliza. Si el `s` parámetro no contiene solo una fecha y ninguna hora, la medianoche (00: 00:00) se utiliza. El `style` parámetro también determina si el `s` parámetro puede contener líderes, espacio en blanco interno o final distintos de los permitidos por una de las cadenas de formato de caracteres `formats`.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcadores, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca no convertir la hora Universal coordinada (UTC) en una hora local y establecer el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `formats` parámetro contiene una matriz de patrones, uno de los cuales `s` debe coincidir exactamente con es la operación de análisis se realice correctamente. Los patrones en el `formats` parámetro consta de uno o varios especificadores de formato personalizado desde la [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, desde el [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un patrón de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato largo de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos por `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. En la tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena de llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que representa la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que espacio en blanco no definido por `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener, internos y finales de los espacios en blanco no definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcador está presente, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza con los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` carece de un componente de fecha, la fecha devuelto del <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si está presente en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión a una fecha y hora con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Principalmente, este marcador impide la conversión de horas UTC en horas locales.|  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definidos por el `provider` parámetro, como el formato preciso de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Personalizada <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método para asegurarse de que se puede analizar correctamente una cadena en un número de formatos posibles.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="s" /> o <paramref name="formats" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> es una cadena vacía.  
  
O bien 
Un elemento de <paramref name="formats" /> es una cadena vacía.  
  
O bien 
 <paramref name="s" /> no contiene una fecha y hora que se correspondan con cualquier elemento de <paramref name="formats" />.  
  
O bien 
El componente de hora y el designador AM/PM en <paramref name="s" /> no coinciden.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contiene una combinación no válida de valores de <see cref="T:System.Globalization.DateTimeStyles" />. Por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>En el [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el <see cref="Overload:System.DateTime.ParseExact" /> método produce una <see cref="T:System.FormatException" /> si la cadena que se puede analizar contiene un componente de hora y un designador AM/PM que no están en el contrato. En el [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] y versiones anteriores, el designador AM/PM se omite.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el componente correspondiente a los segundos de la fecha representada por esta instancia.</summary>
        <value>Componente de segundos, expresado como un valor entre 0 y 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Second%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">Fecha y hora.</param>
        <param name="kind">Uno de los valores de enumeración que indica si el nuevo objeto representa la hora local, la hora UTC o ninguna de ellas.</param>
        <summary>Crea un nuevo objeto <see cref="T:System.DateTime" /> que tiene el mismo número de pasos que el objeto <see cref="T:System.DateTime" /> especificado, pero en hora local, en hora universal coordinada (UTC) o en ninguna de ellas, según indique el valor de <see cref="T:System.DateTimeKind" /> especificado.</summary>
        <returns>Nuevo objeto que tiene el mismo número de pasos que el objeto representado por el parámetro <paramref name="value" /> y el valor <see cref="T:System.DateTimeKind" /> especificado por el parámetro <paramref name="kind" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.DateTime> objeto consta de un campo de tipo que indica si el valor de hora se basa en la hora local, hora Universal coordinada (UTC) o ninguna de ellas, y un campo de tics que contiene un valor de tiempo se mide en pasos de 100 nanosegundos. El <xref:System.DateTime.SpecifyKind%2A> crea un nuevo método <xref:System.DateTime> usando la interfaz de objeto `kind` parámetro y el valor de hora original.  
  
> [!IMPORTANT]
>  El valor devuelto <xref:System.DateTime> valor no representa el mismo instante en el tiempo que el `value` parámetro, y <xref:System.DateTime.SpecifyKind%2A> no es un método de conversión de zona horaria. En su lugar, deja el tiempo especificado por el `value` parámetro sin cambios y establece el <xref:System.DateTime.Kind%2A> propiedad `kind`. Para obtener información sobre las conversiones de zona horaria, vea [convertir horas entre zonas de hora](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 El <xref:System.DateTime.SpecifyKind%2A> método es útil en escenarios de interoperabilidad que recibe un <xref:System.DateTime> objeto con un campo de tipo no especificado, pero se puede determinar si independientes significa que el campo Ticks representa la hora local o UTC.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para demostrar cómo el <xref:System.DateTime.Kind%2A> influye en la propiedad la <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">Interoperabilidad COM en aplicaciones .NET Framework (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Resta la hora o duración especificada de esta instancia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Valor de fecha y hora que se va a restar.</param>
        <summary>Resta la fecha y hora especificadas de esta instancia.</summary>
        <returns>Intervalo que es igual a la fecha y hora representadas por esta instancia menos la fecha y hora representadas por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Subtract%28System.DateTime%29> método determina la diferencia entre dos fechas. Para restar un intervalo de tiempo de la instancia actual, llame a la <xref:System.DateTime.Subtract%28System.TimeSpan%29> método. Para restar un intervalo de tiempo determinado de la instancia actual, llame al método que agrega ese intervalo de tiempo hasta la fecha actual y proporcione un valor negativo como el argumento del método. Por ejemplo, para restar dos meses desde la fecha actual, llame a la <xref:System.DateTime.AddMonths%28System.Int32%29> método con un valor de -2.  
  
 Si la fecha y hora de la instancia actual es anterior a `value`, el método devuelve un <xref:System.TimeSpan> objeto que representa un intervalo de tiempo negativo. Es decir, el valor de todas sus propiedades distinto de cero (como <xref:System.TimeSpan.Days%2A> o <xref:System.TimeSpan.Ticks%2A>) es negativo.  
  
 El <xref:System.DateTime.Subtract%28System.DateTime%29> método no tiene en cuenta el valor de la <xref:System.DateTime.Kind%2A> propiedad de los dos <xref:System.DateTime> valores al realizar la resta. Antes de restar <xref:System.DateTime> objetos, asegúrese de que los objetos representan horas en la misma zona horaria. En caso contrario, el resultado incluirá la diferencia entre zonas horarias.  
  
> [!NOTE]
>  El <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> método tiene en cuenta la diferencia entre las zonas horarias al realizar la resta.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El resultado es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Intervalo de hora que se van a restar.</param>
        <summary>Resta la duración especificada de esta instancia.</summary>
        <returns>Objeto que es igual a la fecha y hora representadas por esta instancia menos el intervalo de hora representados por <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Subtract%28System.TimeSpan%29> método devuelve la fecha en que una diferencia de intervalo de tiempo especificado de la instancia actual. Para determinar el intervalo de tiempo entre dos fechas, llame a la <xref:System.DateTime.Subtract%28System.DateTime%29> método. Para restar un intervalo de tiempo determinado de la instancia actual, llame al método que agrega ese intervalo de tiempo hasta la fecha actual y proporcione un valor negativo como el argumento del método. Por ejemplo, para restar dos meses desde la fecha actual, llame a la <xref:System.DateTime.AddMonths%28System.Int32%29> método con un valor de -2.  
  
 Este método no cambia el valor de este <xref:System.DateTime>. En su lugar, devuelve un nuevo <xref:System.DateTime> cuyo valor es el resultado de esta operación.  
  
 Normalmente, el <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método resta un <xref:System.TimeSpan> objeto que representa un intervalo de tiempo positivo y devuelve un <xref:System.DateTime> valor anterior a la fecha y hora de la instancia actual. Sin embargo, si la <xref:System.TimeSpan> objeto representa un intervalo de tiempo negativo, el <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método devuelve un <xref:System.DateTime> valor posterior a la fecha y hora de la instancia actual.  
  
 El <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> método permite que se va a restar un intervalo de tiempo que consta de más de una unidad de tiempo como (un número determinado de horas) y un número determinado de minutos. Se va a restar de una sola unidad de tiempo (por ejemplo, días, meses o años) desde el <xref:System.DateTime> instancia, puede pasar un valor numérico negativo como un parámetro a cualquiera de los métodos siguientes:  
  
-   <xref:System.DateTime.AddYears%2A>, que se resta un número específico de años a partir de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddMonths%2A>, que se resta un número específico de meses a partir de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddDays%2A>, que se resta un número específico de días a partir de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddHours%2A>, para restar un número específico de horas de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddMinutes%2A>, que se resta un número específico de minutos de la instancia de fecha y hora actual.  
  
-   <xref:System.DateTime.AddSeconds%2A>, para restar un número de segundos de la instancia actual de la fecha y hora específico.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, para restar un número de milisegundos de la instancia actual de la fecha y hora específico.  
  
-   <xref:System.DateTime.AddTicks%2A>, para restar un número concreto de pasos de la instancia de fecha y hora actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Subtract%2A> método y el operador de resta.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El resultado es menor que <see cref="F:System.DateTime.MinValue" /> o mayor que <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">Efectuar operaciones aritméticas con fechas y horas</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>Devuelve el objeto <see cref="T:System.DateTime" /> actual.</summary>
        <returns>Objeto actual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">El tipo deseado.</param>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>Convierte el objeto <see cref="T:System.DateTime" /> actual en un objeto de un tipo especificado.</summary>
        <returns>Objeto del tipo especificado por el parámetro <paramref name="type" />, con un valor equivalente al objeto <see cref="T:System.DateTime" /> actual.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Esta conversión no se admite para el tipo <see cref="T:System.DateTime" />.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que implementa la interfaz <see cref="T:System.IFormatProvider" />. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>No se admite esta conversión. Cualquier intento de usar este método produce una excepción <see cref="T:System.InvalidCastException" />.</summary>
        <returns>El valor devuelto para este miembro no se usa.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">En todos los casos.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objeto que se va a rellenar con datos.</param>
        <param name="context">Destino de esta serialización. (Este parámetro no se usa; especifique <see langword="null" />).</param>
        <summary>Rellena un objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar el objeto <see cref="T:System.DateTime" /> actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método rellena el `info` parámetro con el <xref:System.DateTime.Ticks%2A> y <xref:System.DateTime.Kind%2A> los valores de propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requiere plena confianza para el llamador inmediato. Este miembro no se puede usar código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de pasos que representan la fecha y hora de esta instancia.</summary>
        <value>Número de pasos que representan la fecha y hora de esta instancia. El valor se encuentra comprendido entre <see langword="DateTime.MinValue.Ticks" /> y <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un único paso representa 100 nanosegundos o una diez millonésima de segundo. Hay 10.000 pasos en un milisegundo, o 10 millones de ciclos en un segundo.  
  
 El valor de esta propiedad representa el número de intervalos de 100 nanosegundos que han transcurrido desde 12:00:00 de la medianoche del 1 de enero de 0001 (0: 00:00 UTC el 1 de enero, 0001, en el calendario gregoriano), que representa <xref:System.DateTime.MinValue?displayProperty=nameWithType>. No incluye el número de pasos que se atribuye a leap segundos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Ticks%2A> propiedad para mostrar el número de pasos que han transcurrido desde el principio del siglo XXI y crear instancias de un <xref:System.TimeSpan> objeto. La <xref:System.TimeSpan> objeto, a continuación, se usa para mostrar el tiempo transcurrido con otros intervalos de tiempo.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la hora del día para esta instancia.</summary>
        <value>Intervalo de tiempo que representa la fracción de día que ha transcurrido desde medianoche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la <xref:System.DateTime.Date%2A> propiedad. que devuelve un <xref:System.DateTime> valor que representa una fecha sin su componente de hora, el <xref:System.DateTime.TimeOfDay%2A> propiedad devuelve un <xref:System.TimeSpan> valor que representa un <xref:System.DateTime> componente de hora del valor.  
  
 Si desea mostrar la hora del día o recuperar la representación de cadena de la hora del día de un <xref:System.DateTime> valor, puede llamar en su lugar una sobrecarga de la <xref:System.DateTime.ToString%2A> método que tiene un `format` parámetro o utilice el [formatos compuestos ](~/docs/standard/base-types/composite-formatting.md) característica con la "t" o una cadena de formato estándar "T".  
  
   
  
## Examples  
 El ejemplo siguiente muestra el valor de la <xref:System.DateTime.TimeOfDay%2A> propiedad para una matriz de <xref:System.DateTime> valores. También se contrasta el valor devuelto por la cadena devuelta por la cadena de formato estándar "t" en una operación de formato compuesta.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializa el objeto <see cref="T:System.DateTime" /> actual a un valor binario de 64 bits que se puede usar después para volver a crear el objeto <see cref="T:System.DateTime" />.</summary>
        <returns>Entero con signo de 64 bits que codifica las propiedades <see cref="P:System.DateTime.Kind" /> y <see cref="P:System.DateTime.Ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.DateTime.ToBinary%2A> método para convertir el valor del elemento actual <xref:System.DateTime> objeto a un valor binario. Posteriormente, usar el valor binario y el <xref:System.DateTime.FromBinary%2A> método para volver a crear el original <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En algunos casos, el <xref:System.DateTime> valor devuelto por la <xref:System.DateTime.FromBinary%2A> método no es idéntico al original <xref:System.DateTime> valor proporcionado a la <xref:System.DateTime.ToBinary%2A> método. Para obtener más información, consulte la sección siguiente, "Ajuste de la hora Local".  
  
## <a name="local-time-adjustment"></a>Ajuste de la hora local  
 Una hora local, que es una hora Universal ajustada a la zona horaria local, se representa mediante un <xref:System.DateTime> estructura cuyo <xref:System.DateTime.Kind%2A> propiedad tiene el valor <xref:System.DateTimeKind.Local>. Al restaurar un local <xref:System.DateTime> valor de la representación binaria producidos por la <xref:System.DateTime.ToBinary%2A> método, el <xref:System.DateTime.FromBinary%2A> método puede ajustar el valor ha vuelto a crear para que no sea igual al valor original. Esta desincronización puede aparecer bajo las condiciones siguientes:  
  
-   Si una variable local <xref:System.DateTime> el objeto se serializa en una zona horaria por la <xref:System.DateTime.ToBinary%2A> método y, a continuación, se deserializa en una zona horaria diferente mediante la <xref:System.DateTime.FromBinary%2A> método, la hora local representado por resultante <xref:System.DateTime> automáticamente se ajusta el objeto en la segunda zona horaria.  
  
     Por ejemplo, considere un <xref:System.DateTime> objeto que representa una hora local de 3 P.M. Una aplicación que se está ejecutando en los Estados Unidos. Usa la zona horaria del Pacífico el <xref:System.DateTime.ToBinary%2A> método para convertir todo esto <xref:System.DateTime> objeto a un valor binario. Otra aplicación que se está ejecutando en los Estados Unidos. Zona horaria del este usa el <xref:System.DateTime.FromBinary%2A> método para convertir el valor binario en un nuevo <xref:System.DateTime> objeto. El valor de la nueva <xref:System.DateTime> objeto es 6 p. M., que representa el mismo momento en el tiempo que el original 3 P.M. valor, pero se ajusta a la hora local en la zona horaria del este.  
  
-   Si la representación binaria de una variable local <xref:System.DateTime> valor representa una hora no válida en la zona horaria local del sistema en el que <xref:System.DateTime.FromBinary%2A> es llama, la hora se ajusta para que sea válido.  
  
     Por ejemplo, se produce la transición desde el horario estándar al horario de verano en Estados Unidos Zona horaria del Pacífico de 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. El ejemplo siguiente se muestra que cuando una hora que se encuentra dentro de este intervalo se convierte en un valor binario mediante el <xref:System.DateTime.ToBinary%2A> método y, a continuación, se restaura por la <xref:System.DateTime.FromBinary%2A> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y el valor de tiempo pueden estar sujeto a modificación pasándolo a la <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> método, como en el ejemplo se muestra.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Consideraciones sobre la versión  
 A partir de .NET Framework versión 2.0, un <xref:System.DateTime> estructura consta de un campo de tipo privado, que indica si el valor de tiempo especificado se basa en la hora local, hora Universal coordinada (UTC) o ninguna de ellas y un campo privado de tics, lo que contiene el número de pasos de 100 nanosegundos que especifique una fecha y hora. El campo Ticks puede obtenerse con el <xref:System.DateTime.Ticks%2A> propiedad y el campo de tipo se pueden acceder con la <xref:System.DateTime.Kind%2A> propiedad.  
  
 Antes de .NET Framework 2.0, si serializa un <xref:System.DateTime> objeto manualmente en lugar de usar una interfaz de serialización como <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, solo necesario para serializar los datos de ciclos en el <xref:System.DateTime> estructura. A partir de la versión 2.0, también se deben serializar los datos de tipo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la fecha actual.</summary>
        <value>Objeto que se ha establecido en la fecha del día, con el componente de hora establecido en 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad devuelve <xref:System.DateTimeKind.Local>.  
  
 Dado que devuelve la fecha actual sin la hora actual, el <xref:System.DateTime.Today%2A> propiedad es adecuada para su uso en aplicaciones que solo funcionan con fechas. Para obtener más información, consulte [Choosing Between DateTime, DateTimeOffset, TimeSpan y TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). En cambio, el <xref:System.DateTime.TimeOfDay%2A> propiedad devuelve la hora actual sin la fecha actual y el <xref:System.DateTime.Now%2A> propiedad devuelve la fecha actual y la hora actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.Date%2A> propiedad para recuperar la fecha actual. También muestra cómo un <xref:System.DateTime> valor se puede formatear usando algunas de las fechas estándar y cadenas de formato de hora. Tenga en cuenta que la salida generada por la tercera llamada a la <xref:System.DateTime.ToString%28System.String%29> método usa el especificador de formato g para incluir el componente de tiempo, que es cero.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en una hora de archivo de Windows.</summary>
        <returns>El valor del objeto <see cref="T:System.DateTime" /> actual expresado como una hora de archivo de Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la noche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuando se crea, tiene acceso a una aplicación o escribe en un archivo.  
  
 El <xref:System.DateTime.ToFileTime%2A> método usa la <xref:System.DateTime.Kind%2A> propiedad para determinar si actual <xref:System.DateTime> objeto es una hora local, una hora UTC o una hora que se trata como hora local de tipo no especificado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToFileTime%2A> método.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La hora del archivo resultante representaría una fecha y hora antes de la medianoche del 1 de enero de 1601 e. c. UTC.</exception>
        <block subset="none" type="usage">
          <para>Normalmente, el <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método restaura un <see cref="T:System.DateTime" /> valor guardada por el <see cref="M:System.DateTime.ToFileTime" /> método. Sin embargo, los dos valores pueden diferir en las siguientes condiciones: 
-If la serialización y deserialización de la <see cref="T:System.DateTime" /> producirse en distintas zonas horarias. Por ejemplo, si un <see cref="T:System.DateTime" /> valor con un tiempo de 12:30 P.M. en los Estados Unidos. Zona de hora se serializa y deserializa a continuación, en los Estados Unidos. Zona horaria del Pacífico, el valor original de 12:30 P.M. se ajusta a las 9:30 a. M. para reflejar la diferencia entre las dos zonas horarias.  
  
-If el <see cref="T:System.DateTime" /> valor que se serializa representa una hora no válida en la zona horaria local. En este caso, el <see cref="M:System.DateTime.ToFileTime" /> método ajusta el restaurada <see cref="T:System.DateTime" /> valor para que represente una hora válida en la zona horaria local.  
  
Por ejemplo, se produce la transición desde el horario estándar al horario de verano en Estados Unidos Zona horaria del Pacífico de 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. El ejemplo siguiente se muestra que cuando una hora que se encuentra dentro de este intervalo se convierte en un valor entero largo por el <see cref="M:System.DateTime.ToFileTime" /> método y, a continuación, se restaura por la <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y el valor de tiempo pueden estar sujeto a modificación pasándolo a la <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como en el ejemplo se muestra.  
  
[! código csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! código vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en una hora de archivo de Windows.</summary>
        <returns>El valor del objeto <see cref="T:System.DateTime" /> actual expresado como una hora de archivo de Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Hora de un archivo de Windows es un valor de 64 bits que representa el número de intervalos de 100 nanosegundos que han transcurrido desde las 12:00 de la noche del 1 de enero de 1601 D.C. (E.C.) Hora de Universal coordinada (UTC). Windows usa una hora de archivo para registrar cuando se crea, tiene acceso a una aplicación o escribe en un archivo.  
  
 El <xref:System.DateTime.ToFileTimeUtc%2A> método usa la <xref:System.DateTime.Kind%2A> propiedad para determinar si actual <xref:System.DateTime> objeto es una hora local, una hora UTC o una hora que se trata como una hora UTC de tipo no especificado. Si es una hora local, convierte la hora a la hora UTC antes de realizar la conversión a la hora de un archivo de Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La hora del archivo resultante representaría una fecha y hora antes de la medianoche del 1 de enero de 1601 e. c. UTC.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToFileTimeUtc" /> a veces se utiliza el método para convertir una hora local a UTC y posteriormente restaurarlo mediante una llamada a la <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método seguido por el <see cref="M:System.DateTime.ToLocalTime" /> método. Sin embargo, si la hora original representa una hora no válida en la zona horaria local, los dos valores de hora local no será iguales. Para obtener más información, consulte el <see cref="M:System.DateTime.ToLocalTime" /> método.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual a la hora local.</summary>
        <returns>Objeto cuya propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Local" />, y cuyo valor es la hora local equivalente al valor del objeto <see cref="T:System.DateTime" /> actual, o <see cref="F:System.DateTime.MaxValue" /> si el valor convertido es demasiado grande para representarlo mediante un objeto <see cref="T:System.DateTime" />, o <see cref="F:System.DateTime.MinValue" /> si el valor convertido es demasiado pequeño para representarlo mediante un objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La hora local es igual a la hora de la hora Universal coordinada (UTC) más el desplazamiento de UTC. Para obtener más información sobre la diferencia horaria con UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversión también tiene en cuenta la regla de horario de verano que se aplica a la hora representada por el actual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, la <xref:System.DateTime.ToLocalTime%2A> método reconoce solo la regla de ajuste actual al convertir la hora UTC a la hora local. Como resultado, puede que las conversiones para períodos antes de la regla de ajuste actual entró en efecto no reflejan con precisión la diferencia entre la hora UTC y la hora local.  
  
 A partir de .NET Framework versión 2.0, el valor devuelto por la <xref:System.DateTime.ToLocalTime%2A> método viene determinada por la <xref:System.DateTime.Kind%2A> propiedad del elemento actual <xref:System.DateTime> objeto. En la tabla siguiente se describe los posibles resultados.  
  
|Kind|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Esta instancia de <xref:System.DateTime> se convierte en hora local.|  
|<xref:System.DateTimeKind.Local>|Se realiza ninguna conversión.|  
|<xref:System.DateTimeKind.Unspecified>|Esta instancia de <xref:System.DateTime> se supone que es una hora UTC, y la conversión se realiza como si <xref:System.DateTime.Kind%2A> eran <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  El <xref:System.DateTime.ToLocalTime%2A> método convierte un <xref:System.DateTime> valor a la hora UTC a la hora local. Para convertir la hora de cualquier zona horaria designada a la hora local, use el <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> método.  
  
 El valor devuelto por la conversión es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad siempre devuelve <xref:System.DateTimeKind.Local>. Por lo tanto, se devuelve un resultado válido aunque <xref:System.DateTime.ToLocalTime%2A> se aplica repetidamente a la misma <xref:System.DateTime>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToLocalTime%2A> método. Tenga en cuenta que el resultado exacto depende de la referencia cultural actual y la zona horaria local del sistema en el que se ejecuta.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para demostrar cómo el <xref:System.DateTime.Kind%2A> influye en la propiedad la <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Puede usar el <see cref="M:System.DateTime.ToLocalTime" /> método para restaurar una fecha local y el valor de tiempo que se convirtió a UTC mediante el <see cref="M:System.DateTime.ToUniversalTime" /> o <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> método. Sin embargo, si la hora original representa una hora no válida en la zona horaria local, no coincidirá el valor restaurado. Cuando el <see cref="M:System.DateTime.ToLocalTime" /> método convierte una hora a la hora UTC a la zona horaria local, también ajusta la hora para que sea válida en la zona horaria local.  
  
Por ejemplo, se produce la transición desde el horario estándar al horario de verano en Estados Unidos Zona horaria del Pacífico de 14 de marzo de 2010, a las 2:00 A.M., cuando la hora se adelanta una hora, a las 3:00 A.M. Este intervalo de hora es una hora no válida, es decir, un intervalo de tiempo que no existe en esta zona horaria. El ejemplo siguiente se muestra que cuando una hora que se encuentra dentro de este intervalo se convierte a UTC mediante el <see cref="M:System.DateTime.ToUniversalTime" /> método y, a continuación, se restaura por la <see cref="M:System.DateTime.ToLocalTime" /> método, el valor original se ajusta para ser una hora válida. Puede determinar si una fecha determinada y el valor de tiempo pueden estar sujeto a modificación pasándolo a la <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> método, como en el ejemplo se muestra.  
  
[! código csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! código vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena de fecha larga equivalente.</summary>
        <returns>Una cadena que contiene la representación de cadena de fecha larga del objeto <see cref="T:System.DateTime" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto tiene el formato con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto mediante la especificación de la "D" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToLongDateString%2A> método es la referencia cultural. Refleja el patrón definido por la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, la referencia cultural en-US, el patrón de fecha larga estándar es "dddd, MMMMdd, yyyy"; la referencia cultural de-DE, es "dddd, d. MMMMaaaa"; la referencia cultural ja-JP, es "yyyy'? ' M'? ' d. '?'". También se puede personalizar la cadena de formato específico en un equipo determinado para que difiera de la cadena de formato de fecha larga estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad. Para obtener más información acerca de los caracteres de formato, modelos de formato y la salida que generan, vea el [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea el <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToLongDateString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Aplicar formato a tipos en .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena de hora larga equivalente.</summary>
        <returns>Una cadena que contiene la representación de cadena de hora larga del objeto <see cref="T:System.DateTime" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto tiene el formato con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto mediante la especificación de la "T" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToLongTimeString%2A> método es la referencia cultural. Refleja el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propiedad de la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, la referencia cultural en-US, el patrón de hora larga estándar es "ss tt"; la referencia cultural de-DE, es "Hh"; la referencia cultural ja-JP, es "Ss". También se puede personalizar la cadena de formato específico en un equipo determinado para que difiera de la cadena de formato de hora larga estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad. Para obtener más información acerca de los caracteres de formato, modelos de formato y la salida que generan, vea el [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea el <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToLongTimeString%2A> método.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Aplicar formato a tipos en .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor de esta instancia en la fecha de Automation OLE equivalente.</summary>
        <returns>Número de punto flotante de precisión doble que contiene la fecha de Automation OLE equivalente al valor de esta instancia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fecha de automatización OLE se implementa como un número de punto flotante cuyo componente entero es el número de días antes o después de medianoche, 30 de diciembre de 1899 y cuyo componente de fracción representa el tiempo en ese día dividido entre 24. Por ejemplo, medianoche, 31 de diciembre de 1899 se representa como 1,0; 6 a. M., 1 de enero de 1900 se representa como 2,25; medianoche, 29 de diciembre de 1899 se representa mediante -1,0; y 6 a. M., 29 de diciembre de 1899 se representa como -1,25.  
  
 La fecha de automatización OLE base es la medianoche del 30 de diciembre de 1899. La fecha de automatización OLE mínima es la medianoche del 1 de enero de 0100. La fecha de automatización OLE máximo es el mismo que <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, último instante del 31 de diciembre 9999.  
  
 El <xref:System.DateTime.ToOADate%2A> método produce una <xref:System.OverflowException> si la instancia actual representa una fecha posterior a <xref:System.DateTime.MinValue> y anteriores a la medianoche del 1de, 0100. Sin embargo, si el valor de la instancia actual es <xref:System.DateTime.MinValue>, el método devuelve 0.  
  
 Para obtener más información sobre la automatización OLE, vea el [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">El valor de esta instancia no puede representarse como una fecha de Automation OLE.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena de fecha corta equivalente.</summary>
        <returns>Una cadena que contiene la representación de cadena de fecha corta del objeto <see cref="T:System.DateTime" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto tiene el formato con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto mediante la especificación de la "d" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToShortDateString%2A> método es la referencia cultural. Refleja el patrón definido por la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, la referencia cultural en-US, el patrón de fecha corta estándar es "M/d/yyyy"; la referencia cultural de-DE, es "dd. MM.yyyy"; la referencia cultural ja-JP, es "aaaa/M/d". También se puede personalizar la cadena de formato específico en un equipo determinado para que difiera de la cadena de formato de fecha corta estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> propiedad. Para obtener más información acerca de los caracteres de formato, modelos de formato y la salida que generan, vea el [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea el <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToShortDateString%2A> método. También muestra que el resultado de llamar a la <xref:System.DateTime.ToShortDateString%2A> es idéntico a llamar al método el <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método con "d" como el parámetro de formato.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Aplicar formato a tipos en .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena de hora corta equivalente.</summary>
        <returns>Una cadena que contiene la representación de cadena de hora corta del objeto <see cref="T:System.DateTime" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto tiene el formato con el patrón definido por el <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> propiedad asociada con la referencia cultural del subproceso actual. El valor devuelto es idéntico al valor devuelto mediante la especificación de la "t" [cadena de formato de fecha y hora estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con el <xref:System.DateTime.ToString%28System.String%29> método.  
  
> [!IMPORTANT]
>  La cadena devuelta por la <xref:System.DateTime.ToShortTimeString%2A> método es la referencia cultural. Refleja el patrón definido por la referencia cultural actual <xref:System.Globalization.DateTimeFormatInfo> objeto. Por ejemplo, la referencia cultural en-US, el patrón de hora corta estándar es "h: mm tt"; la referencia cultural de-DE, es "Hh: mm"; la referencia cultural ja-JP, es "H: mm". También se puede personalizar la cadena de formato específico en un equipo determinado para que difiera de la cadena de formato de hora corta estándar.  
  
 Para obtener más información acerca de la referencia cultural del subproceso actual, vea el <xref:System.Threading.Thread.CurrentCulture%2A> propiedad. Para obtener más información acerca de los caracteres de formato, modelos de formato y la salida que generan, vea el [aplicar formato a tipos](~/docs/standard/base-types/formatting-types.md) tema. Para obtener más información acerca de cómo cambiar el modelo de formato asociado a un carácter de formato, vea el <xref:System.Globalization.DateTimeFormatInfo> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToShortTimeString%2A> método.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Aplicar formato a tipos en .NET</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena equivalente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena equivalente mediante las convenciones de formato de la referencia cultural actual.</summary>
        <returns>La representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto tiene el formato con la fecha general y el especificador de formato de hora ("G"). Para dar formato mediante un especificador de formato de hora y fecha específica, llame a la <xref:System.DateTime.ToString%28System.String%29> método. Para dar formato mediante la fecha general y el especificador de formato de hora ("G") para una referencia cultural concreta, llame a la <xref:System.DateTime.ToString%28System.IFormatProvider%29> método. Para dar formato con una fecha concreta y el especificador de formato de hora y las convenciones de una referencia cultural concreta, llame a la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> método.  
  
 Este método usa la información de formato que deriva de la referencia cultural actual. En concreto, combina las cadenas de formato personalizado devueltas por la <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> y <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> propiedades de la <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la `Thread.CurrentThread.CurrentCulture.DateTimeFormat` propiedad. Para obtener más información, vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Otras sobrecargas de los <xref:System.DateTime.ToString%2A> método permiten especificar la referencia cultural cuyo formato para usar y para definir el modelo de salida de la <xref:System.DateTime> valor.  
  
   
  
## Examples  
 El ejemplo siguiente se muestra cómo la representación de cadena de un <xref:System.DateTime> valor devuelto por la <xref:System.DateTime.ToString> método depende de la referencia cultural del subproceso actual. Cambia la referencia cultural del subproceso actual de en-US, fr-FR, como ja-JP. y en cada caso de las llamadas del <xref:System.DateTime.ToString> método para devolver la representación de cadena de un valor de fecha y hora utilizando esa referencia cultural.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La fecha y hora se encuentra fuera del intervalo de fechas admitido por el calendario usado por la cultura actual.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural actual. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.HijriCalendar" /> clase cuando la referencia cultural actual es árabe (Siria).  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena equivalente usando la información de formato específica de la referencia cultural especificada.</summary>
        <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual especificado por el parámetro <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor del elemento actual <xref:System.DateTime> objeto tiene el formato con la fecha general y el especificador de formato de hora ("G"), lo que da formato de salida con el patrón de fecha corta y el patrón de mucho tiempo.  
  
 El formato de fecha corta y patrón de hora larga se define mediante el `provider` parámetro. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyas convenciones de formato se pueden reflejarse en la cadena devuelta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato de la cadena devuelta.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un objeto personalizado que implementa el <xref:System.IFormatProvider> interfaz. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.DateTimeFormatInfo> se usa el objeto asociado con la referencia cultural actual. Para obtener más información, vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la representación de cadena de una fecha y hora utilizando <xref:System.Globalization.CultureInfo> objetos que representan los cinco diferentes referencias culturales.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural representada por el <paramref name="provider" /> parámetro. Su calendario está definido por el <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propiedad. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.JapaneseCalendar" /> clase.  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Cadena con formato de fecha y hora estándar o personalizado.</param>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en su representación de cadena equivalente mediante el formato especificado y las convenciones de formato de la referencia cultural actual.</summary>
        <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual especificado por el parámetro <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.ToString%28System.String%29> método devuelve la representación de cadena de un valor de fecha y hora en un formato específico que usa las convenciones de formato de la referencia cultural actual; para obtener más información, consulte <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 El `format` parámetro debe contener un carácter especificador de formato único (vea [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un patrón de formato personalizado (vea [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) que define el formato de la cadena devuelta. Si `format` es `null` o una cadena vacía, el especificador de formato general, 'G', se utiliza.  
  
 Algunos usos de este método incluyen:  
  
-   Obtención de una cadena que muestra la fecha y hora en formato de hora y fecha corta de la referencia cultural actual. Para ello, use el especificador de formato "G".  
  
-   Obtención de una cadena que contiene solo el mes y año. Para ello, use la cadena de formato "MM/aaaa". La cadena de formato utiliza el separador de fecha de la referencia cultural actual.  
  
-   Obtención de una cadena que contiene la fecha y hora en un formato específico. Por ejemplo, el "MM/dd/yyyyHH:mm" cadena de formato muestra la cadena de fecha y hora en un formato fijo, como "19 2013 / / 03 / / 18:06". Usa la cadena de formato "/" como separador de fecha fija, independientemente de la configuración específica de la referencia cultural.  
  
-   Obtención de una fecha en un formato comprimido podría usarse para serializar una cadena de fecha. Por ejemplo, la cadena de formato "AAAAMMDD" muestra un año de cuatro dígitos seguido por un mes de dos dígitos y un día de dos dígitos con ningún separador de fecha.  
  
 En el ejemplo siguiente usa estos tres cadenas de formato para mostrar un valor de fecha y hora mediante las convenciones de las referencias culturales en-US y fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 El ejemplo siguiente usa cada una de las cadenas de formato de hora y la fecha estándar y una selección de las cadenas de formato de hora y fecha personalizada para mostrar la representación de cadena de un <xref:System.DateTime> valor. La referencia cultural actual del subproceso para el ejemplo es en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La longitud de <paramref name="format" /> es 1, y no es uno de los caracteres especificadores de formato definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
O bien 
 <paramref name="format" /> no contiene un modelo de formato personalizado válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La fecha y hora se encuentra fuera del intervalo de fechas admitido por el calendario usado por la cultura actual.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString(System.String)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por la referencia cultural actual. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.HebrewCalendar" /> clase cuando la referencia cultural actual es hebreo (Israel).  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Aplicar formato a tipos en .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Cadena con formato de fecha y hora estándar o personalizado.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</summary>
        <returns>Representación de cadena del valor del objeto <see cref="T:System.DateTime" /> actual, tal como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `format` parámetro puede contener un carácter especificador de formato único (vea [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un patrón de formato personalizado (vea [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Si `format` es `null` o una cadena vacía (""), el especificador de formato estándar "G", se utiliza.  
  
 El `provider` parámetro define el modelo que corresponde a los especificadores de formato estándar, así como los símbolos y nombres de los componentes de fecha y hora. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyas convenciones de formato se pueden reflejarse en la cadena devuelta. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato de la cadena devuelta.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Un objeto personalizado que implementa el <xref:System.IFormatProvider> interfaz. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.DateTimeFormatInfo> asociado con la actual referencia cultural se usa. Para obtener más información, vea <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 En el siguiente ejemplo se usa cada una de las cadenas de formato de hora estándar de fecha para mostrar la representación de cadena de una fecha y hora para cuatro referencias culturales diferentes.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 El ejemplo siguiente muestra distintas maneras de dar formato a un <xref:System.DateTime> valor con el nombre invariable <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La longitud de <paramref name="format" /> es 1, y no es uno de los caracteres especificadores de formato definidos para <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
O bien 
 <paramref name="format" /> no contiene un modelo de formato personalizado válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La fecha y la hora están fuera del intervalo de fechas compatible con el calendario utilizado por <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> método devuelve la representación de cadena de fecha y hora en el calendario usado por el <paramref name="provider" /> parámetro. Su calendario está definido por el <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> propiedad. Si el valor del elemento actual <see cref="T:System.DateTime" /> instancia es anterior a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o posterior a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, el método produce una <see cref="T:System.ArgumentOutOfRangeException" />. Esto se muestra en el ejemplo siguiente. Intenta dar formato a una fecha que está fuera del intervalo de la <see cref="T:System.Globalization.UmAlQuraCalendar" /> clase.  
  
[! código csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)] [! código vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Aplicar formato a tipos en .NET</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Ejemplo: Utilidad de formato de .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convierte el valor del objeto <see cref="T:System.DateTime" /> actual a la hora universal coordinada (UTC).</summary>
        <returns>Objeto cuya propiedad <see cref="P:System.DateTime.Kind" /> es <see cref="F:System.DateTimeKind.Utc" />, y cuyo valor es la hora UTC equivalente al valor del objeto <see cref="T:System.DateTime" /> actual, o <see cref="F:System.DateTime.MaxValue" /> si el valor convertido es demasiado grande para representarlo mediante un objeto <see cref="T:System.DateTime" />, o <see cref="F:System.DateTime.MinValue" /> si el valor convertido es demasiado pequeño para representarlo mediante un objeto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La hora Universal coordinada (UTC) es igual a la hora local menos el desplazamiento de UTC. Para obtener más información sobre la diferencia horaria con UTC, consulte <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversión también tiene en cuenta la regla de horario de verano que se aplica a la hora representada por el actual <xref:System.DateTime> objeto.  
  
> [!IMPORTANT]
>  En [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, la <xref:System.DateTime.ToUniversalTime%2A> método reconoce solo la regla de ajuste actual al convertir de hora local a UTC. Como resultado, puede que las conversiones para períodos antes de la regla de ajuste actual entró en efecto no reflejan con precisión la diferencia entre la hora local y UTC.  
  
 A partir de .NET Framework versión 2.0, el valor devuelto por la <xref:System.DateTime.ToUniversalTime%2A> método viene determinada por la <xref:System.DateTime.Kind%2A> propiedad del elemento actual <xref:System.DateTime> objeto. En la tabla siguiente se describe los posibles resultados.  
  
|Kind|Resultados|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Se realiza ninguna conversión.|  
|<xref:System.DateTimeKind.Local>|Actual <xref:System.DateTime> objeto se convierte en UTC.|  
|<xref:System.DateTimeKind.Unspecified>|Actual <xref:System.DateTime> objeto se supone que es una hora local y la conversión se realiza como si <xref:System.DateTime.Kind%2A> eran <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  El <xref:System.DateTime.ToUniversalTime%2A> método convierte un <xref:System.DateTime> valor de hora local a UTC. Para convertir la hora en una zona horaria no local a UTC, use el <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> método. Para convertir una hora cuya diferencia horaria respecto a UTC es conocido, utilice el <xref:System.DateTimeOffset.ToUniversalTime%2A> método.  
  
 Si el valor de instancia de fecha y hora es una hora ambigua, este método supone que es una hora estándar. (Una hora ambigua es uno que se pueden asignar a una hora estándar o a un horario de verano en la zona horaria local) Si el valor de instancia de fecha y hora es una hora no válida, este método resta la hora local a la hora UTC de la zona horaria local para devolver la hora UTC de desplazamiento. (Una hora no válida es aquella que no existe debido a la aplicación de reglas de ajuste al horario de verano).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.ToUniversalTime%2A> método.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para demostrar cómo el <xref:System.DateTime.Kind%2A> influye en la propiedad la <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>El <see cref="M:System.DateTime.ToUniversalTime" /> a veces se utiliza el método para convertir una hora local a UTC. El <see cref="M:System.DateTime.ToLocalTime" /> , a continuación, se llama el método para restaurar la hora local original. Sin embargo, si la hora original representa una hora no válida en la zona horaria local, los dos valores de hora local no será iguales. Para obtener más información y un ejemplo, vea el <see cref="M:System.DateTime.ToLocalTime" /> método.  
  
En [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemas, la <see cref="M:System.DateTime.ToUniversalTime" /> método reconoce solo la regla de ajuste actual para la zona horaria local, que se aplica a todas las fechas, incluidas las fechas de nivel inferior (es decir, las fechas anteriores a la fecha de inicio de ajuste de la actual regla). Aplicaciones que se ejecutan [!INCLUDE[winxp](~/includes/winxp-md.md)] que requieren históricamente precisa fecha local y los cálculos de tiempo deben evitar este comportamiento mediante el uso de la <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> método para recuperar un <see cref="T:System.TimeZoneInfo" /> object que corresponde a la zona horaria local y una llamada a su <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> método.  
  
El ejemplo siguiente muestra la diferencia entre el <see cref="M:System.DateTime.ToUniversalTime" /> y <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> métodos en un [!INCLUDE[winxp](~/includes/winxp-md.md)] sistema en los Estados Unidos. de EE. UU. Los primeros dos llamadas al método aplican la regla de ajuste de zona horaria actual (que entraron en vigor en 2007) en una fecha en el año 2006. Proporciona la regla de ajuste actual para la transición al horario de verano en el segundo domingo de marzo; la regla anterior que estaba en efecto proporcionado para la transición al horario de verano para que se produzca el primer domingo de abril de 2006. La tercera llamada de método con precisión realiza esta fecha histórica y conversión de tiempo.  
  
[! código csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! código vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente y devuelve un valor que indica si la conversión se realizó correctamente.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir.</param>
        <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <c>s</c> si la conversión se ha realizado correctamente, o <see cref="F:System.DateTime.MinValue" /> si se ha producido un error en la conversión. Se produce un error en la conversión si el parámetro <c>s</c> es <see langword="null" />, es una cadena vacía ("") o no contiene una representación de cadena válida de una fecha y hora. Este parámetro se pasa sin inicializar.</param>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente y devuelve un valor que indica si la conversión se realizó correctamente.</summary>
        <returns>
          <see langword="true" /> si el parámetro <paramref name="s" /> se convierte correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método es similar a la <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> método, salvo que el <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> método no produce una excepción si se produce un error en la conversión.  
  
 La cadena `s` se analiza utilizando la información de formato actual <xref:System.Globalization.DateTimeFormatInfo> objeto, proporcionado implícitamente por la referencia cultural del subproceso actual.  
  
 Este método intenta omitir los datos no reconocidos, si es posible y rellena la falta de mes, día y año información con la fecha actual. Si `s` contiene solo una fecha y ninguna hora, este método supone que la hora es 12:00 de la noche. Si `s` incluye un componente de fecha con un año de dos dígitos, se convierte en un año del calendario actual de la referencia cultural actual según el valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Cualquier iniciales, centrales o caracteres de espacio en blanco en final `s` se omite. La fecha y hora pueden ir entre corchetes con un par de caracteres de signo de número ('#', u+0023) iniciales y finales y pueden terminar con uno o más caracteres NULL (u+0000).  
  
 Dado que el <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método intenta analizar la representación de cadena de una fecha y tiempo mediante las reglas de formato de la referencia cultural actual, al intentar analizar una cadena determinada entre referencias culturales diferentes puede producir un error o devolver resultados diferentes. Si una fecha concreta y el formato de hora se analizarán en configuraciones regionales diferentes, use el <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método o una de las sobrecargas de los <xref:System.DateTime.TryParseExact%2A> método y proporcione un especificador de formato.  
  
 Si `s` es la representación de cadena de un día bisiesto de un año bisiesto en el calendario actual, la analiza método `s` correctamente. Si `s` es la representación de cadena de un día bisiesto de un año bisiesto de calendario actual de la referencia cultural actual, se produce un error en la operación de análisis y el método devuelve `false`.  
  
 Si `s` no contiene ninguna información de zona horaria, `result` contiene un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> cuando el método devuelve. Si la cadena que se puede analizar contiene información de zona horaria, `result` contiene un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> cuando el método devuelve.  
  
   
  
## Examples  
 En el ejemplo siguiente se pasa un número de cadenas de fecha y hora a la <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Formato se ve influenciado por las propiedades del elemento actual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que se derivan de forma predeterminada el **regional e idioma** elemento en el Panel de Control. El <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente puede producir un error y devolverá <see langword="False" /> si actual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> y <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propiedades se establecen en el mismo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
        <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d">Ejemplo: Utilidad de formato de .NET Framework 4</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.</param>
        <param name="styles">Combinación bit a bit de valores de enumeración que define cómo se va a interpretar la fecha analizada respecto a la zona horaria actual o la fecha actual. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <c>s</c> si la conversión se ha realizado correctamente, o <see cref="F:System.DateTime.MinValue" /> si se ha producido un error en la conversión. Se produce un error en la conversión si el parámetro <c>s</c> es <see langword="null" />, es una cadena vacía ("") o no contiene una representación de cadena válida de una fecha y hora. Este parámetro se pasa sin inicializar.</param>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en su equivalente <see cref="T:System.DateTime" /> usando la información de formato de la referencia cultural y el estilo de formato especificados, y devuelve un valor que indica si la conversión tuvo éxito.</summary>
        <returns>
          <see langword="true" /> si el parámetro <paramref name="s" /> se convierte correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analiza una cadena que puede contener información de fecha, hora y zona horaria. Es similar a la <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, salvo que el <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> método no produce una excepción si se produce un error en la conversión.  
  
 Este método intenta omitir los datos no reconocidos y análisis `s` completamente. Si `s` contiene una hora pero no hay ninguna fecha, el método por sustitutos de forma predeterminada la fecha actual o, si `styles` incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> marca, sustituye `DateTime.Date.MinValue`. Si `s` contiene una fecha pero no la hora, 12:00, se utiliza la medianoche como hora predeterminada. Si está presente la fecha pero consta de su componente de año de dos dígitos, se convierte en un año de la `provider` calendario actual del parámetro en función del valor de la <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> propiedad. Cualquier, interior, caracteres iniciales o finales espacio en blanco en `s` se omiten. La fecha y hora pueden ir entre corchetes con un par de caracteres de signo de número ('#', u+0023) iniciales y finales y pueden terminar con uno o más caracteres NULL (u+0000).  
  
 Los formatos válidos específicos de fecha y elementos de tiempo, así como los nombres y los símbolos utilizados en las fechas y horas, se definen mediante la `provider` parámetro, que puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo formato se usa en el `s` parámetro. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> propiedad define el formato usado en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato usado en `s`.  
  
-   Implementación de <xref:System.IFormatProvider> personalizada. Su <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método devuelve un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato usado en `s`.  
  
 Si `provider` es `null`, se usa la referencia cultural actual.  
  
 Si `s` es la representación de cadena de un día bisiesto de un año bisiesto en el calendario actual, la analiza método `s` correctamente. Si `s` es la representación de cadena de un día bisiesto de un año bisiesto en el calendario actual de `provider`, se produce un error en la operación de análisis y el método devuelve `false`.  
  
 El `styles` parámetro define la interpretación exacta de la cadena analizada y cómo debe controlar la operación de análisis. Puede ser uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración, tal como se describe en la tabla siguiente.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena de llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que representa la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Aunque sea válido, este valor se omite. Espacio en blanco interno se permite en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Aunque sea válido, este valor se omite. Se permite el espacio en blanco inicial en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Aunque sea válido, este valor se omite. Los espacios en blanco finales se permiten en los elementos de fecha y hora de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener, internos y los espacios en blanco finales. Éste es el comportamiento predeterminado. Se puede reemplazar proporcionando más restrictivo <xref:System.Globalization.DateTimeStyles> valor de enumeración como <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcador está presente, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Aunque sea válido, este valor se omite.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión de una cadena de fecha y hora en un <xref:System.DateTime> valor con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Normalmente, se crea este tipo de cadena mediante una llamada a la <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> método mediante especificadores de formato estándar "o", "r" o "u".|  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> a menos que un `styles` marca indica lo contrario. Si `s` incluye la zona horaria o información de desplazamiento de zona horaria, el <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método realiza cualquier conversión de hora es necesario y devuelve uno de los siguientes:  
  
-   Un <xref:System.DateTime> valor cuya fecha y hora refleja la hora local y cuya propiedad <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   O bien, si `styles` incluye la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> marca, un <xref:System.DateTime> valor cuya fecha y hora refleja la hora UTC y cuya propiedad <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Este comportamiento puede invalidarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca.  
  
## <a name="parsing-custom-cultures"></a>Análisis de las referencias culturales personalizadas  
 Para analizar una cadena de fecha y hora generada para una referencia cultural personalizada, utilice el <xref:System.DateTime.TryParseExact%2A> método en lugar de la <xref:System.DateTime.TryParse%2A> método para mejorar la probabilidad de que la operación de análisis se realice correctamente. Una cadena de fecha y hora de la referencia cultural personalizada puede ser complicada y difícil de analizar. El <xref:System.DateTime.TryParse%2A> método intenta analizar una cadena con varios modelos de análisis implícito, que podría producir un error. En cambio, el <xref:System.DateTime.TryParseExact%2A> método requiere que se designe explícitamente uno o varios modelos de análisis exacto que es probables que se realice correctamente.  
  
 Para obtener más información acerca de las referencias culturales personalizadas, consulte el <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> clase.  
  
   
  
## Examples  
 El ejemplo siguiente ilustra la <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> no es un valor <see cref="T:System.Globalization.DateTimeStyles" /> válido.  
  
O bien 
 <paramref name="styles" /> contiene una combinación no válida de valores de <see cref="T:System.Globalization.DateTimeStyles" /> (por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> es una referencia cultural neutra y no se puede utilizar en una operación de análisis.</exception>
        <block subset="none" type="usage">
          <para>Formato se ve influenciado por las propiedades del elemento actual <see cref="T:System.Globalization.DateTimeFormatInfo" /> objeto, que suministra el <paramref name="provider" /> parámetro. El <see cref="Overload:System.DateTime.TryParse" /> método inesperadamente puede producir un error y devolverá <see langword="False" /> si actual <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> y <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> propiedades se establecen en el mismo valor.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente. El formato de la representación de cadena debe coincidir exactamente con un formato ya especificado. El método devuelve un valor que indica si la conversión se realizó correctamente.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir.</param>
        <param name="format">Formato requerido de <c>s</c>.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.</param>
        <param name="style">Combinación bit a bit de uno o varios valores de enumeración que indica el formato permitido de <c>s</c>.</param>
        <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <c>s</c> si la conversión se ha realizado correctamente, o <see cref="F:System.DateTime.MinValue" /> si se ha producido un error en la conversión. Se produce un error en la conversión si el parámetro <c>s</c> o <c>format</c> es <see langword="null" />, es una cadena vacía o no contiene una fecha y una hora que correspondan al modelo especificado en <c>format</c>. Este parámetro se pasa sin inicializar.</param>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando el formato, la información de formato específica de la referencia cultural y el estilo especificados. El formato de la representación de cadena debe coincidir exactamente con el formato especificado. El método devuelve un valor que indica si la conversión se realizó correctamente.</summary>
        <returns>
          <see langword="true" /> si <paramref name="s" /> se convirtió correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha, que debe estar en el formato definido por el `format` parámetro. Es similar a la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, salvo que el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método no produce una excepción si se produce un error en la conversión.  
  
 El `s` parámetro contiene la fecha y hora para analizar y debe estar en un formato definido por el `format` parámetro. Si están presentes en los elementos de fecha, hora y zona horaria `s`, también deben aparecer en el orden especificado por `format`. Si `format` define una fecha con ningún elemento de hora y el análisis de operación se realiza correctamente, el resultado <xref:System.DateTime> valor tiene una hora de medianoche (00: 00:00). Si `format` define una hora con ningún elemento de fecha y el análisis de operación se realiza correctamente, el resultado <xref:System.DateTime> valor predeterminada tiene una fecha de `DateTime.Now.Date`, o tiene una fecha de `DateTime.MinValue.Date` si `styles` incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca. El `style` parámetro determina si el `s` parámetro puede contener caracteres de espacio en blanco iniciales, interna o finales.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcadores, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si s contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca no convertir la hora Universal coordinada (UTC) en una hora local y establecer el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `format` parámetro contiene un patrón que se corresponde con el formato esperado de la `s` parámetro. El patrón en el `format` parámetro consta de uno o varios especificadores de formato personalizado desde la [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, desde el [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un patrón de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato largo de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
> [!NOTE]
>  En lugar de requerir que `s` tiene un formato único para la operación de análisis se realice correctamente, puede llamar a la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método y especificar varios formatos permitidos. Esto hace que la operación de análisis más probable que se realice correctamente.  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definidos por el `provider` parámetro, como el formato preciso de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Personalizada <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos por `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. En la tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena de llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que representa la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que espacio en blanco no definido por `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener, internos y finales de los espacios en blanco no definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcador está presente, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza con los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` carece de un componente de fecha, la fecha devuelto del <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si está presente en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión a un <xref:System.DateTime> valor con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Principalmente, este marcador impide la conversión de horas UTC en horas locales.|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método. Tenga en cuenta que la cadena "5/01/2009 8:30 AM" no se puede analizar correctamente cuando el `styles` parámetro es igual a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> porque no se permiten espacios iniciales por `format`. Además, la cadena "5/01/2009 09:00" no se puede analizar correctamente con un `format` de "MM/dd/yyyyhh:mm" porque la cadena de fecha no precede el número del mes con un cero inicial, como `format` requiere.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> no es un valor <see cref="T:System.Globalization.DateTimeStyles" /> válido.  
  
O bien 
 <paramref name="styles" /> contiene una combinación no válida de valores de <see cref="T:System.Globalization.DateTimeStyles" /> (por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>En el [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> devuelve del método <see langword="false" /> si la cadena que se puede analizar contiene un componente de hora y un designador AM/PM que no están en el contrato. En el [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] y versiones anteriores, el designador AM/PM se omite.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Cadena que contiene una fecha y hora que se van a convertir.</param>
        <param name="formats">Matriz de formatos permitidos de <c>s</c>.</param>
        <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural sobre <c>s</c>.</param>
        <param name="style">Combinación bit a bit de valores de enumeración que indica el formato permitido de <c>s</c>. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">El resultado que devuelve este método contiene el valor <see cref="T:System.DateTime" /> equivalente a la fecha y hora incluidas en <c>s</c> si la conversión se ha realizado correctamente, o <see cref="F:System.DateTime.MinValue" /> si se ha producido un error en la conversión. Se produce un error en la conversión si <c>s</c> o <c>formats</c> es <see langword="null" />, si <c>s</c> o un elemento de <c>formats</c> es una cadena vacía, o si el formato de <c>s</c> no coincide exactamente con al menos uno de los modelos de formato de <c>formats</c>. Este parámetro se pasa sin inicializar.</param>
        <summary>Convierte la representación de cadena especificada de una fecha y hora en el objeto <see cref="T:System.DateTime" /> equivalente, usando la matriz de formatos, la información de formato específica de la referencia cultural y el estilo especificados. El formato de la representación de cadena debe coincidir exactamente con al menos uno de los formatos especificados. El método devuelve un valor que indica si la conversión se realizó correctamente.</summary>
        <returns>
          <see langword="true" /> si el parámetro <paramref name="s" /> se convierte correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método analiza la representación de cadena de una fecha que coincide con cualquiera de los patrones que se asigna a la `formats` parámetro. Es como la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> método, excepto el <xref:System.DateTime.TryParseExact%2A> método no produce una excepción si se produce un error en la conversión.  
  
 El `s` parámetro contiene la fecha y hora para analizar. Si el `s` parámetro contiene solo una hora y ninguna fecha, se utiliza la fecha actual, a menos que el `style` parámetro incluye la <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> marca, en cuyo caso la fecha predeterminada (`DateTime.Date.MinValue`) se utiliza. Si el `s` parámetro no contiene solo una fecha y ninguna hora, la medianoche (00: 00:00) se utiliza. El `style` parámetro también determina si el `s` parámetro puede contener líderes, espacio en blanco interno o final distintos de los permitidos por una de las cadenas de formato de caracteres `formats`.  
  
 Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto es <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o mediante el <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> y <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcadores, que devuelve un <xref:System.DateTime> cuyo valor <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si s contiene información de zona horaria, la hora se convierte a la hora local, si es necesario y el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Este comportamiento puede modificarse mediante el uso de la <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> marca no convertir la hora Universal coordinada (UTC) en una hora local y establecer el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 El `formats` parámetro contiene una matriz de patrones, uno de los cuales `s` debe coincidir exactamente con es la operación de análisis se realice correctamente. Los patrones en el `formats` parámetro constan de uno o varios especificadores de formato personalizado desde la [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabla o un especificador de formato estándar único que identifica un modelo predefinido, desde el [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabla.  
  
 Si no usa los separadores de fecha u hora en un patrón de formato personalizado, use la referencia cultural invariable para el `provider` especificador de formato de parámetro y el formato largo de cada personalizado. Por ejemplo, si desea especificar las horas en el patrón, especifique el formato largo, "HH", en lugar del formato corto, "H".  
  
 La fecha en particular y símbolos de tiempo y cadenas (por ejemplo, los nombres de los días de la semana en un idioma determinado) que se usan en `s` definidos por el `provider` parámetro, como el formato preciso de `s` si `format` es un formato estándar cadena de especificador. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural usada para interpretar `s`. El <xref:System.Globalization.DateTimeFormatInfo> objeto devuelto por su <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> propiedad define los símbolos y el formato en `s`.  
  
-   Un <xref:System.Globalization.DateTimeFormatInfo> objeto que define el formato de datos de fecha y hora.  
  
-   Personalizada <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.CultureInfo> objeto o la <xref:System.Globalization.DateTimeFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.CultureInfo> se usa el objeto que corresponde a la referencia cultural actual.  
  
 El `styles` parámetro incluye uno o más miembros de la <xref:System.Globalization.DateTimeStyles> enumeración que determina cuándo y dónde los espacios en blanco no definidos por `format` pueden aparecer en `s` y que controlan el comportamiento exacto de la operación de análisis. En la tabla siguiente se describe cómo cada miembro de la <xref:System.Globalization.DateTimeStyles> enumeración afecta a la operación de la <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> método.  
  
|Miembro DateTimeStyles|Descripción|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analiza `s` y, si es necesario, lo convierte a UTC. Si `s` incluye un ajuste de zona horaria, o si `s` no contiene ninguna información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> marca, el método analiza la cadena de llamadas <xref:System.DateTime.ToUniversalTime%2A> para convertir el valor devuelto <xref:System.DateTime> valor a la hora UTC y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Si `s` indica que representa la hora UTC, o si `s` no contiene información de zona horaria, pero `styles` incluye la <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> marca, el método analiza la cadena, no realiza ninguna conversión de zona horaria en el valor devuelto <xref:System.DateTime> valor y establece el <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. En todos los demás casos, la marca no tiene ningún efecto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Especifica que espacio en blanco no definido por `format` pueden aparecer entre cualquier fecha individual o un elemento de tiempo.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al principio de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Especifica que espacio en blanco no definido por `format` puede aparecer al final de `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Especifica que `s` puede contener, internos y finales de los espacios en blanco no definidos por `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Especifica que si `s` carece de información de zona horaria, se supone que representa una hora local. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marcador está presente, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> valor se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Especifica que si `s` carece de información de zona horaria, se supone que para representar la hora UTC. A menos que el <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> marca está presente, el método convierte el valor devuelto <xref:System.DateTime> valor a la hora UTC en hora local y establece su <xref:System.DateTime.Kind%2A> propiedad <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Si `s` contiene hora sin información de fecha, la fecha del valor devuelto se establece en `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|El `s` parámetro se analiza con los valores predeterminados. Ningún espacio en blanco que no sea que estén presentes en `format` está permitido. Si `s` carece de un componente de fecha, la fecha devuelto del <xref:System.DateTime> valor se establece en 1/1/0001. Si `s` no contiene ninguna información de zona horaria, el <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Si está presente en la información de zona horaria `s`, la hora se convierte a la hora local y la <xref:System.DateTime.Kind%2A> propiedad devuelto del <xref:System.DateTime> objeto se establece en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Para las cadenas que contienen información de zona horaria, intenta evitar la conversión a un <xref:System.DateTime> valor con su <xref:System.DateTime.Kind%2A> propiedad establecida en <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Principalmente, este marcador impide la conversión de horas UTC en horas locales.|  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> método para asegurarse de que se puede analizar correctamente una cadena en un número de formatos posibles.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> no es un valor <see cref="T:System.Globalization.DateTimeStyles" /> válido.  
  
O bien 
 <paramref name="styles" /> contiene una combinación no válida de valores de <see cref="T:System.Globalization.DateTimeStyles" /> (por ejemplo, <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> y <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>En el [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> devuelve del método <see langword="false" /> si la cadena que se puede analizar contiene un componente de hora y un designador AM/PM que no están en el contrato. En el [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] y versiones anteriores, el designador AM/PM se omite.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">Analizar cadenas de fecha y hora en .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">Cadenas con formato de fecha y hora estándar</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">Cadenas con formato de fecha y hora personalizado</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.DateTime" /> que se establece en la fecha y hora actual del equipo, expresada como hora universal coordinada (UTC).</summary>
        <value>Objeto cuyo valor es la fecha y hora UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La resolución de esta propiedad depende del temporizador del sistema, que depende del sistema operativo subyacente. Suele estar comprendida entre 0,5 y 15 milisegundos.

 A partir de la versión 2.0 de .NET Framework, el valor devuelto es un <xref:System.DateTime> cuyo <xref:System.DateTime.Kind%2A> propiedad devuelve <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Una alternativa al uso <xref:System.DateTime.UtcNow%2A> es <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Mientras que el primero indica que un valor de fecha y hora es la hora Universal coordinada (UTC) mediante la asignación <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> a su <xref:System.DateTime.Kind%2A> propiedad, la segunda asigna la fecha y la diferencia horaria de la hora UTC del valor de tiempo (igual que <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.DateTime.SpecifyKind%2A> método para demostrar cómo el <xref:System.DateTime.Kind%2A> influye en la propiedad la <xref:System.DateTime.ToLocalTime%2A> y <xref:System.DateTime.ToUniversalTime%2A> métodos de conversión.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el componente correspondiente al año de la fecha representada por esta instancia.</summary>
        <value>Año, entre 1 y 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DateTime.Year%2A> propiedad devuelve el año de la instancia actual en el calendario gregoriano. No se devuelve el año utilizando el calendario predeterminado de la referencia cultural actual. Para recuperar el año utilizando un calendario determinado, puede llamar a dicho calendario `GetYear` método, como se muestra en el código siguiente.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.DateTime.Year%2A> propiedad.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>