<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c71b1ce8bef586f2453604f33dc3ca2e6f5af9bc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728044" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Tipo de objetos que se van a comparar.</typeparam>
    <summary>Define un método generalizado que implementa un tipo o una clase de valor con el fin de crear un método específico del tipo para determinar la igualdad de las instancias.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta interfaz se implementa mediante tipos cuyos valores se pueden igualar (por ejemplo, el numéricas y cadena de clases). Un tipo de valor o una clase implementa la <xref:System.IEquatable%601.Equals%2A> método para crear un método específico del tipo adecuado para determinar la igualdad de las instancias.  
  
> [!NOTE]
>  El <xref:System.IComparable%601> interfaz define el <xref:System.IComparable%601.CompareTo%2A> método, que determina el criterio de ordenación de las instancias del tipo de implementación. El <xref:System.IEquatable%601> interfaz define el <xref:System.IEquatable%601.Equals%2A> método, que determina la igualdad de las instancias del tipo de implementación.  
  
 El <xref:System.IEquatable%601> interfaz se utiliza como objetos de colección genéricos <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, y <xref:System.Collections.Generic.LinkedList%601> al probar la igualdad en métodos como `Contains`, `IndexOf`, `LastIndexOf`, y `Remove`. Se debe implementar para cualquier objeto que se puede almacenar en una colección genérica.  
  
   
  
## Examples  
 Vea el ejemplo de la <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Reemplace el parámetro de tipo de la <see cref="T:System.IEquatable`1" /> interfaz con el tipo que implementa esta interfaz.  Si implementa <see cref="T:System.IEquatable`1" />, también debe invalidar las implementaciones de la clase base de <see cref="M:System.Object.Equals(System.Object)" /> y <see cref="M:System.Object.GetHashCode" /> para que su comportamiento es coherente con el de la <see cref="M:System.IEquatable`1.Equals(`0)" /> método. Si invalida <see cref="M:System.Object.Equals(System.Object)" />, también se denomina su implementación invalidada en las llamadas a estático <see langword="Equals(System.Object, System.Object)" /> método en su clase. Además, debería sobrecargar el <see langword="op_Equality" /> y <see langword="op_Inequality" /> operadores. Esto garantiza que todas las pruebas de igualdad devuelven resultados coherentes.  <block subset="none" type="note"><para> Para obtener información sobre cómo reemplazar <see cref="M:System.Object.Equals(System.Object)" />, consulte el <see cref="M:System.Object.Equals(System.Object)" /> artículo.  </para></block>  Para un tipo de valor, siempre debe implementar <see cref="T:System.IEquatable`1" /> e invalidar <see cref="M:System.Object.Equals(System.Object)" /> para mejorar el rendimiento. <see cref="M:System.Object.Equals(System.Object)" /> cuadros de tipos de valor y se basa en la reflexión para comparar dos valores son iguales. Tanto la implementación de <see cref="M:System.IEquatable`1.Equals(`0)" /> y el reemplazo de <see cref="M:System.Object.Equals(System.Object)" /> debe devolver los resultados sean coherentes.  Si implementa <see cref="T:System.IEquatable`1" />, también debe implementar <see cref="T:System.IComparable`1" /> si instancias del tipo se pueden ordenar u ordenadas. Si el tipo implementa <see cref="T:System.IComparable`1" />, casi siempre también implemente <see cref="T:System.IEquatable`1" />.</para>
      <para>Tenga en cuenta que hay algunos diseños que un tipo es compatible con una relación de orden, pero igualdad puede ser distinta de una relación de ordenación. Considere la posibilidad de una clase "Person" donde ordenar alfabéticamente. Ordenación el mismo dos personas con el mismo nombre, pero no son la misma persona.</para>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Objeto que se va a comparar con este objeto.</param>
        <summary>Indica si el objeto actual es igual que otro objeto del mismo tipo.</summary>
        <returns>
          <see langword="true" /> si el objeto actual es igual al parámetro <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación de la <xref:System.IEquatable%601.Equals%2A> método está pensado para realizar una prueba de igualdad con otro objeto del tipo `T`, el mismo tipo que el objeto actual. El <xref:System.IEquatable%601.Equals(%600)> se llama al método en las siguientes circunstancias:  
  
-   Cuando el `Equals` se llama al método y el `other` argumento es un objeto fuertemente tipado de tipo `T`. (Si `other` no es de tipo `T`, la base de <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> se llama al método. De los dos métodos, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> ofrece ligeramente mayor rendimiento.)  
  
-   Cuando se llama a los métodos de búsqueda de un número de objetos de colección genérica. Algunos de estos tipos y sus métodos incluyen lo siguiente:  
  
    -   Algunas de las sobrecargas genéricas de los <xref:System.Array.BinarySearch%2A> método.  
  
    -   Los métodos de búsqueda de la <xref:System.Collections.Generic.List%601> clase, incluidas <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, y <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.  
  
    -   Los métodos de búsqueda de la <xref:System.Collections.Generic.Dictionary%602> clase, incluidas <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> y <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   Los métodos de búsqueda de la clase genérica <xref:System.Collections.Generic.LinkedList%601> clase, incluidas <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> y <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 En otras palabras, para controlar la posibilidad de que los objetos de una clase se almacenarán en una matriz o un objeto de colección genérica, es una buena idea implementar <xref:System.IEquatable%601> para que el objeto se puede identificar y manipular con facilidad.  
  
 Al implementar el <xref:System.IEquatable%601.Equals%2A> método, definir la igualdad de forma adecuada para el tipo especificado por el argumento de tipo genérico. Por ejemplo, si el argumento de tipo es <xref:System.Int32>, definir la igualdad de forma apropiada para la comparación de dos enteros de 32 bits con signo.  
  
   
  
## Examples  
 El ejemplo siguiente muestra la implementación parcial de un `Person` clase que implementa <xref:System.IEquatable%601> y tiene dos propiedades, `LastName` y `SSN`. El <xref:System.IEquatable%601.Equals%2A> devuelve del método `True` si el `SSN` propiedad de dos `Person` objetos es idéntico; en caso contrario, devuelve `False`.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` a continuación, se pueden almacenar objetos en un <xref:System.Collections.Generic.List%601> object y pueden identificarse mediante el `Contains` método, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si implementa <see cref="M:System.IEquatable`1.Equals(`0)" />, también debe invalidar las implementaciones de la clase base de <see cref="M:System.Object.Equals(System.Object)" /> y <see cref="M:System.Object.GetHashCode" /> para que su comportamiento es coherente con el de la <see cref="M:System.IEquatable`1.Equals(`0)" /> método. Si invalida <see cref="M:System.Object.Equals(System.Object)" />, también se denomina su implementación invalidada en las llamadas a estático <see langword="Equals(System.Object, System.Object)" /> método en su clase. Además, debería sobrecargar el <see langword="op_Equality" /> y <see langword="op_Inequality" /> operadores. Esto garantiza que todas las pruebas de igualdad devuelven resultados coherentes, que se muestra en el ejemplo.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>