<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37231be40b4f33690f93e784db62f3e6103caa70" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36428451" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona un enumerador para los elementos de <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) del lenguaje C# y el [For Each... Siguiente](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) construcción en Visual Basic oculta la complejidad de los enumeradores. En lugar de manipular directamente el enumerador mediante `foreach` o `For Each...Next` se recomienda. 

Inicialmente, el enumerador se coloca antes del primer elemento en el <xref:System.Span%601>. En esta posición, el valor de propiedad <xref:System.Span%601.Enumerator.Current> está sin definir. Debe llamar a <xref:System.Span%601.Enumerator.MoveNext%2A> para adelantar el enumerador hasta el primer elemento de la <xref:System.Span%601> antes de leer el valor de <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> Devuelve el mismo valor hasta que <xref:System.Span%601.Enumerator.MoveNext%2A> se llama. <xref:System.Span%601.Enumerator.MoveNext%2A> establece <xref:System.Span%601.Enumerator.Current> al elemento siguiente en el <xref:System.Span%601>.

Si <xref:System.Span%601.Enumerator.MoveNext%2A> pasa el final de la <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> devuelve `false`. Mientras el enumerador permanezca en este estado, las llamadas subsiguientes a <xref:System.Span%601.Enumerator.MoveNext%2A> también devolver `false` y <xref:System.Span%601.Enumerator.Current> no está definido. No se puede establecer <xref:System.Span%601.Enumerator.Current> al primer elemento en el <xref:System.Span%601> nuevo; debe crear una nueva instancia del enumerador en su lugar. 

El enumerador no tiene acceso exclusivo a la <xref:System.Span%601>. Además, también puede modificar los datos subyacentes en el que se basa el intervalo. Por lo tanto, la enumeración a través de un intervalo no es intrínsecamente un procedimiento seguro para subprocesos. Para garantizar la seguridad de subprocesos durante la enumeración, debe implementar su propia sincronización. Por ejemplo, el siguiente código tiene una condición de carrera. No garantiza que se enumerará el intervalo antes de la `ClearContents` el método se ejecuta. Como resultado, se borra la matriz subyacente durante la enumeración del intervalo:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Si sincroniza el acceso a la matriz antes de enumerar el intervalo, como la versión revisada de la `EnumerateSpan` método se realiza en el ejemplo siguiente, la `ClearContents` método no modifica los subyacente span datos durante la enumeración. Tenga en cuenta que en el ejemplo se bloquea la matriz subyacente en el que se basa el intervalo.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

A diferencia de algunas otras estructuras de enumerador en. NET, el <xref:System.Span%601.Enumerator>:

- No implementa la <xref:System.Collections.IEnumerator> o <xref:System.Collections.Generic.IEnumerator%601> interfaz. Esto es porque <xref:System.Span%601.Enumerator> es un [un struct ref](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- No incluye un `Reset` método, que puede establecer el enumerador en su posición inicial antes del primer elemento en el intervalo. (El <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> método debe implementarse como parte de la interfaz, pero la mayoría de los implementadores producen una excepción o no proporcionan ninguna implementación.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia al elemento en la posición actual del enumerador.</summary>
        <value>Elemento de <see cref="T:System.Span`1" /> en la posición actual del enumerador.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` no está definida en cualquiera de las condiciones siguientes: 

- Inmediatamente después de crea el enumerador, el enumerador se coloca antes del primer elemento en el intervalo. <xref:System.Span%601.Enumerator.MoveNext%2A> se debe llamar para adelantar el enumerador hasta el primer elemento del intervalo antes de leer el valor de `Current`.

- La última llamada a <xref:System.Span%601.Enumerator.MoveNext%2A> devuelve `false`, lo que indica el final del intervalo. 

`Current` Devuelve el mismo valor hasta que <xref:System.Span%601.Enumerator.MoveNext%2A> se llama. <xref:System.Span%601.Enumerator.MoveNext%2A> establece `Current` al elemento siguiente en el intervalo. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Desplaza el enumerador al siguiente elemento de <see cref="System.Span`1" />.</summary>
        <returns>"true" si el enumerador se ha desplazado correctamente al elemento siguiente; "false" si se ha pasado el final del intervalo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Después de crea un enumerador, que se coloca antes del primer elemento en el intervalo y la primera llamada a `MoveNext` desplaza el enumerador al primer elemento en el intervalo. 

Si `MoveNext` pasa el final del intervalo, `MoveNext` devuelve `false`. Mientras el enumerador permanezca en este estado, las llamadas subsiguientes a `MoveNext` también devolver `false`.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>