<Type Name="FormatException" FullName="System.FormatException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0564cf5aa029ae4b753cc3f0d41a0d008454102b" />
    <Meta Name="ms.sourcegitcommit" Value="840fd2a3bbdce4224fcbae5a3cea9a7a89e685f5" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/24/2018" />
    <Meta Name="ms.locfileid" Value="49961635" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormatException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FormatException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.FormatException" />
  <TypeSignature Language="VB.NET" Value="Public Class FormatException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormatException : SystemException" />
  <TypeSignature Language="F#" Value="type FormatException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Excepción que se produce cuando el formato de un argumento no es válido o cuando una <see href="https://docs.microsoft.com/dotnet/standard/base-types/composite-formatting">cadena de formato compuesto</see> no tiene el formato correcto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.FormatException> se puede producir la excepción para uno de los siguientes motivos:  
  
-   En una llamada a un método que convierte una cadena en algún otro tipo de datos, la cadena no se ajusta al patrón requerido. Esto suele ocurrir cuando se llama a algunos métodos de la <xref:System.Convert> clase y el `Parse` y `ParseExact` métodos de algunos tipos.  
  
     En la mayoría de los casos, especialmente si la cadena que se está convirtiendo es de entrada por un usuario o leer desde un archivo, debe usar un `try/catch` bloquear y controlar el <xref:System.FormatException> excepción si la conversión se realiza correctamente. También puede reemplazar la llamada al método de conversión con una llamada a un `TryParse` o `TryParseExact` método, si existe alguno. Sin embargo, un <xref:System.FormatException> excepción que se produce cuando se intenta analizar una cadena predefinida o codificado de forma rígida indica un error de programa. En este caso, se debe corregir el error en lugar de controlar la excepción.  
  
     La conversión de una cadena en los siguientes tipos en el <xref:System> espacio de nombres puede producir un <xref:System.FormatException> excepción:  
  
    -   <xref:System.Boolean>. El <xref:System.Boolean.Parse%28System.String%29?displayProperty=nameWithType> y <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> métodos requieren la cadena que se pueden convertir para ser "True", "true", "False" o "false". Cualquier otro valor produce un <xref:System.FormatException> excepción.  
  
    -   <xref:System.DateTime> y <xref:System.DateTimeOffset>. Todos los datos de fecha y hora se interpreta basándose en las convenciones de formato de una determinada referencia cultural: ya sea la actual referencia cultural del subproceso (o, en algunos casos, la referencia cultural actual dominio de aplicación), la referencia cultural invariable, o una referencia cultural especificada. Cuando se llama a la <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> y <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> métodos, también deben cumplir los datos de fecha y hora *exactamente* a un patrón especificado por uno o varios [cadenas de formato estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) o [personalizado las cadenas de formato](~/docs/standard/base-types/custom-date-and-time-format-strings.md) que se proporcionan como argumentos en la llamada al método. Si no cumple con un patrón esperado de referencia cultural específica, un <xref:System.FormatException> es una excepción. Esto significa que los datos de fecha y hora guardados en un formato específico de la referencia cultural en un sistema no pueden analizar correctamente en otro sistema.  
  
         Para obtener más información acerca de cómo analizar fechas y horas, vea [analizar cadenas de fecha y hora](~/docs/standard/base-types/parsing-datetime.md) y la documentación para el método que produjo la excepción.  
  
    -   **GUID.** Representación de cadena del GUID debe consistir en 32 dígitos hexadecimales (0-F) y debe estar en uno de la salida de cinco formatos mediante la <xref:System.Guid.ToString%2A?displayProperty=nameWithType> método. Para obtener más información, vea el método <xref:System.Guid.Parse%2A?displayProperty=nameWithType>.  
  
    -   **Tipos numéricos, incluidos todos los enteros de enteros sin signo y tipos de punto flotante.** La cadena que se va a analizar debe constar de los dígitos latinos 0-9. También se pueden permitir un signo positivo o negativo, separador de decimales, separadores de grupos y símbolo de moneda. Intenta analizar una cadena que contiene cualquier otro carácter siempre produce una <xref:System.FormatException> excepción.  
  
         Todas las cadenas numéricas se interpretan según las convenciones de formato de una determinada referencia cultural: ya sea la actual referencia cultural del subproceso (o, en algunos casos, la referencia cultural actual dominio de aplicación), la referencia cultural invariable, o una referencia cultural especificada. Como resultado, una cadena numérica que se analiza mediante las convenciones de una referencia cultural puede producir un error cuando se usa las convenciones de otro.  
  
         Para obtener más información acerca de cómo analizar cadenas numéricas, vea [analizar cadenas numéricas](~/docs/standard/base-types/parsing-numeric.md) y la documentación para el método específico que produjo la excepción.  
  
    -   **Intervalos de tiempo.** Debe ser la cadena que se analicen en formato cultural fijo o en un formato de la referencia cultural definida por la referencia cultural del subproceso actual (o, en algunos casos, la referencia cultural actual dominio de aplicación), la referencia cultural invariable, o una referencia cultural especificada. Si la cadena no está en un formato adecuado, o si, en el mínimo, los días, horas, y los componentes de minutos del intervalo de tiempo no están presentes, el método de análisis produce un <xref:System.FormatException> excepción. Para obtener más información, consulte la documentación para el <xref:System.TimeSpan> al analizar el método que produjo la excepción.  
  
-   Un tipo implementa la <xref:System.IFormattable> interfaz, que es compatible con las cadenas de formato que definen cómo se convierte un objeto en su representación de cadena y se utiliza una cadena de formato no válido. Esto es muy habitual en una operación de formato. En el ejemplo siguiente, se utiliza la cadena de formato estándar "Q" en una cadena de formato compuesto para dar formato a un número. Sin embargo, no es válido "Q" [cadena de formato estándar](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
     [!code-csharp[System.FormatException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable1.cs#7)]
     [!code-vb[System.FormatException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable1.vb#7)]  
  
     Esta excepción se origina un error de codificación. Para corregir el error, quite la cadena de formato o sustituir uno válido. El ejemplo siguiente corrige el error si se reemplaza la cadena de formato no válido con la cadena de formato "C" (divisa).  
  
     [!code-csharp[System.FormatException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable2.cs#8)]
     [!code-vb[System.FormatException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable2.vb#8)]  
  
     Un <xref:System.FormatException> también se puede producir la excepción mediante el análisis de los métodos, como <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> y <xref:System.Guid.ParseExact%2A?displayProperty=nameWithType>, que requieren la cadena que se puede analizar para que se ajuste exactamente con el modelo especificado por una cadena de formato. En el ejemplo siguiente, se espera que la representación de cadena de un GUID se ajustan al modelo especificado por la cadena de formato estándar "G". Sin embargo, el <xref:System.Guid> implementación de la estructura de <xref:System.IFormattable> no es compatible con la cadena de formato "G".  
  
     [!code-csharp[System.FormatException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable3.cs#9)]
     [!code-vb[System.FormatException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable3.vb#9)]  
  
     Esta excepción también se produce desde un error de codificación. Para corregirlo, llamar a un método de análisis que no requiere un formato preciso, tales como <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> o <xref:System.Guid.Parse%2A?displayProperty=nameWithType>, o sustituir una cadena de formato válido. En el ejemplo siguiente se corrige el error mediante una llamada a la <xref:System.Guid.Parse%2A?displayProperty=nameWithType> método.  
  
     [!code-csharp[System.FormatException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable4.cs#10)]
     [!code-vb[System.FormatException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable4.vb#10)]  
  
-   Uno o varios de los índices de los elementos de formato en un [cadena de formato compuesto](~/docs/standard/base-types/composite-formatting.md) es mayor que los índices de los elementos de la matriz de objetos de lista o un parámetro. En el ejemplo siguiente, el índice más grande de un elemento de formato de la cadena de formato es 3. Dado que los índices de elementos en la lista de objetos son de base cero, esta cadena de formato requeriría la lista de objetos para tener cuatro elementos. En su lugar, tiene solo tres `dat`, `temp`, y `scale`, por lo que el código produce un <xref:System.FormatException> excepción en tiempo de ejecución:.  
  
     [!code-csharp[System.FormatException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example1.cs#1)]
     [!code-vb[System.FormatException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example1.vb#1)]  
  
     En este caso, el <xref:System.FormatException> excepción es el resultado de error de desarrollador. Se debe corregir en lugar de controlar en un `try/catch` bloque porque nos aseguramos de que cada elemento de la lista de objetos se corresponde con el índice de un elemento de formato. Para corregir este ejemplo, cambie el índice del segundo elemento de formato para hacer referencia a la `dat` variable y disminuir el índice de cada elemento de formato posteriores por uno.  
  
     [!code-csharp[System.FormatException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example2.cs#2)]
     [!code-vb[System.FormatException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example2.vb#2)]  
  
-   La cadena de formato compuesto no tiene el formato correcto. Cuando esto sucede, el <xref:System.FormatException> excepción siempre es el resultado de error de desarrollador. Se debe corregir en lugar de controlar en un `try/catch` bloque.  
  
     Intentando incluye llaves literales en una cadena, como el siguiente ejemplo does, se producirá la excepción.  
  
     [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
     [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
     Es la técnica recomendada para incluir las llaves literales en una cadena de formato compuesto incluirlos en la lista de objetos y usar elementos de formato para insertarlos en la cadena de resultado. Por ejemplo, puede modificar la cadena de formato compuesto anterior como se muestra aquí.  
  
     [!code-csharp[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
     [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
     La excepción también se produce si la cadena de formato contiene un error de escritura. La llamada siguiente a la <xref:System.String.Format%2A?displayProperty=nameWithType> método omite una llave de cierre y pares de una llave de apertura con un corchete de cierre.  
  
     [!code-csharp[System.FormatException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#3)]
     [!code-vb[System.FormatException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#3)]  
  
     Para corregir el error, asegúrese de que se corresponden todos abriendo y las llaves de cierre.  
  
     [!code-csharp[System.FormatException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#4)]
     [!code-vb[System.FormatException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#4)]  
  
-   Se ha proporcionado la lista de objetos en un método como una matriz de parámetro fuertemente tipado de formato compuesto y <xref:System.FormatException> excepción indica que el índice de uno o más elementos de formato supera el número de argumentos en la lista de objetos. Esto ocurre porque existe ninguna conversión explícita entre los tipos de matriz, por lo tanto, que el compilador trata la matriz como un único argumento en lugar de una matriz de parámetros. Por ejemplo, la llamada siguiente a la <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método produce una <xref:System.FormatException> excepción, aunque el índice más alto de los elementos de formato es 3 y la matriz de parámetros de tipo <xref:System.Int32> contiene cuatro elementos.  
  
     [!code-csharp[System.FormatException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa1.cs#5)]
     [!code-vb[System.FormatException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa1.vb#5)]  
  
     En lugar de controlar esta excepción, debe eliminar su causa. Dado que Visual Basic ni C# puede convertir una matriz de enteros en una matriz de objetos, tendrá que realizar la conversión antes de llamar al método de formato compuesto. El ejemplo siguiente proporciona una implementación.  
  
     [!code-csharp[System.FormatException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa2.cs#6)]
     [!code-vb[System.FormatException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa2.vb#6)]  
  
 <xref:System.FormatException> utiliza HRESULT COR_E_FORMAT, que tiene el valor 0 x 80131537.  
  
 El <xref:System.FormatException> clase se deriva de <xref:System.Exception> y no se agrega ningún miembro único. Para obtener una lista de valores de propiedad iniciales de una instancia de <xref:System.FormatException>, consulte el <xref:System.FormatException.%23ctor%2A> constructores.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Controlar y generar excepciones</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Exception.Message%2A> propiedad de la nueva instancia en un mensaje proporcionado por el sistema que describe el error, como "Formato no válido". Este mensaje tiene en cuenta la referencia cultural del sistema actual.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.FormatException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia nula (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|La cadena del mensaje de error localizado.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new FormatException : string -&gt; FormatException" Usage="new System.FormatException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que describe el error.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" /> con el mensaje de error especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Exception.Message%2A?displayProperty=nameWithType> propiedad de la nueva excepción utilizando el `message` parámetro. Se pretende que el contenido de `message` sea inteligible. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.FormatException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia nula (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FormatException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new FormatException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; FormatException" Usage="new System.FormatException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Objeto que contiene los datos del objeto serializados.</param>
        <param name="context">Información contextual acerca del origen o del destino.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" /> con datos serializados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la deserialización se llama a este constructor para reconstituir el objeto de excepción transmitido en una secuencia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new FormatException : string * Exception -&gt; FormatException" Usage="new System.FormatException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
        <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <c>innerException</c> no es una referencia nula (<see langword="Nothing" /> en Visual Basic), la excepción actual se inicia en un bloque <see langword="catch" /> que controla la excepción interna.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.FormatException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una excepción que se produce como consecuencia directa de una excepción anterior debe incluir una referencia a esta última en la propiedad <xref:System.Exception.InnerException%2A>. La propiedad <xref:System.Exception.InnerException%2A> devuelve el mismo valor pasado al constructor, o una referencia nula (`Nothing` en Visual Basic) si la propiedad <xref:System.Exception.InnerException%2A> no proporciona el valor de la excepción interna al constructor.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.FormatException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia a la excepción interna.|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Controlar y generar excepciones</related>
      </Docs>
    </Member>
  </Members>
</Type>