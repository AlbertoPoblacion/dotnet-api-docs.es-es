<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d682ea6cc15e08be504abd15046053e596c9a02" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39827855" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1848b-101">Representa el estado de una operación asincrónica.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1848b-101">Represents the status of an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1848b-102">El <xref:System.IAsyncResult> interfaz se implementa mediante las clases que contienen métodos que pueden funcionar de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="1848b-102">The <xref:System.IAsyncResult> interface is implemented by classes containing methods that can operate asynchronously.</span></span> <span data-ttu-id="1848b-103">Es el tipo de valor devuelto de los métodos que inician una operación asincrónica, como <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, y se pasa a los métodos que concluyen una operación asincrónica, como <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1848b-103">It is the return type of methods that initiate an asynchronous operation, such as <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, and it is passed to methods that conclude an asynchronous operation, such as <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="1848b-104"><xref:System.IAsyncResult> los objetos también se pasan a los métodos invocados por <xref:System.AsyncCallback> delega cuando finaliza una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="1848b-104"><xref:System.IAsyncResult> objects are also passed to methods invoked by <xref:System.AsyncCallback> delegates when an asynchronous operation completes.</span></span>  
  
 <span data-ttu-id="1848b-105">Un objeto que admite el <xref:System.IAsyncResult> interfaz almacena información de estado para una operación asincrónica y proporciona un objeto de sincronización para permitir que los subprocesos se señaliza cuando finaliza la operación.</span><span class="sxs-lookup"><span data-stu-id="1848b-105">An object that supports the <xref:System.IAsyncResult> interface stores state information for an asynchronous operation and provides a synchronization object to allow threads to be signaled when the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1848b-106">El <xref:System.Runtime.Remoting.Messaging.AsyncResult> clase es la implementación de <xref:System.IAsyncResult> devuelta por la `BeginInvoke` método cuando se usa un delegado para llamar a un método de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="1848b-106">The <xref:System.Runtime.Remoting.Messaging.AsyncResult> class is the implementation of <xref:System.IAsyncResult> that is returned by the `BeginInvoke` method when you use a delegate to call a method asynchronously.</span></span>  
  
 <span data-ttu-id="1848b-107">Para obtener una descripción detallada de cómo el <xref:System.IAsyncResult> interfaz se utiliza, vea el [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) tema.</span><span class="sxs-lookup"><span data-stu-id="1848b-107">For a detailed description of how the <xref:System.IAsyncResult> interface is used, see the [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1848b-108">En el ejemplo siguiente se muestra cómo usar el <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> propiedad va a obtener un <xref:System.Threading.WaitHandle>y cómo esperar una llamada asincrónica en un delegado.</span><span class="sxs-lookup"><span data-stu-id="1848b-108">The following example demonstrates how to use the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="1848b-109"><xref:System.Threading.WaitHandle> se señaliza cuando finaliza la llamada asincrónica y puede esperar a que termine llamando al método <xref:System.Threading.WaitHandle.WaitOne%2A> .</span><span class="sxs-lookup"><span data-stu-id="1848b-109">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="1848b-110">El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.</span><span class="sxs-lookup"><span data-stu-id="1848b-110">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="1848b-111">Para obtener más información y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="1848b-111">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1848b-112">Obtiene un objeto definido por el usuario que califica o contiene información sobre una operación asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-112">Gets a user-defined object that qualifies or contains information about an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1848b-113">Objeto definido por el usuario que califica o contiene información sobre una operación asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-113">A user-defined object that qualifies or contains information about an asynchronous operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1848b-114">Esta propiedad devuelve el objeto que es el último parámetro del método que inicia una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="1848b-114">This property returns the object that is the last parameter of the method that initiates an asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1848b-115">En el ejemplo de código siguiente se muestra cómo el <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> propiedad se utiliza para pasar información a un método de devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="1848b-115">The following code example demonstrates how the <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> property is used to pass information to a callback method.</span></span> <span data-ttu-id="1848b-116">El último parámetro de la `BeginInvoke` llamada al método es una cadena de formato, el método de devolución de llamada que se utiliza para dar formato a un mensaje de salida.</span><span class="sxs-lookup"><span data-stu-id="1848b-116">The last parameter of the `BeginInvoke` method call is a format string, which the callback method uses to format an output message.</span></span>  
  
 <span data-ttu-id="1848b-117">El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.</span><span class="sxs-lookup"><span data-stu-id="1848b-117">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="1848b-118">Para obtener más información acerca de cómo funciona este ejemplo de devolución de llamada y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="1848b-118">For more information about how this callback example works, and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1848b-119">
            <para>Implementar esta propiedad para permitir que el llamador de una operación asincrónica obtener un objeto definido por la aplicación especificado al principio de la operación.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-119">
              <para>Implement this property to allow the caller of an asynchronous operation to obtain an application-defined object specified at the start of the operation.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="usage">
          <span data-ttu-id="1848b-120">
            <para>Este objeto puede utilizarse para pasar información de estado de la operación asincrónica para una <see cref="T:System.AsyncCallback" /> que proporcione.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-120">
              <para>This object can be used to pass state information for the asynchronous operation to an <see cref="T:System.AsyncCallback" /> that you provide.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1848b-121">Obtiene <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-121">Gets a <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1848b-122">
            <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-122">A <see cref="T:System.Threading.WaitHandle" /> that is used to wait for an asynchronous operation to complete.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1848b-123">Permite que el valor devuelto al cliente a esperar para que una operación asincrónica para completarse en lugar de sondear <xref:System.IAsyncResult.IsCompleted%2A> hasta que finaliza la operación.</span><span class="sxs-lookup"><span data-stu-id="1848b-123">The return value allows the client to wait for an asynchronous operation to complete instead of polling <xref:System.IAsyncResult.IsCompleted%2A> until the operation concludes.</span></span> <span data-ttu-id="1848b-124">El valor devuelto puede utilizarse para realizar un <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, o <xref:System.Threading.WaitHandle.WaitAll%2A> operación.</span><span class="sxs-lookup"><span data-stu-id="1848b-124">The return value can be used to perform a <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A> operation.</span></span>  
  
 <span data-ttu-id="1848b-125">Common language runtime proporciona un número de objetos que puede esperar, como <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, y <xref:System.Threading.Mutex>, todos ellos reflejan las primitivas de sincronización de Win32.</span><span class="sxs-lookup"><span data-stu-id="1848b-125">The common language runtime supplies a number of waitable objects, such as <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, and <xref:System.Threading.Mutex>, all of which mirror Win32 synchronization primitives.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1848b-126">En el ejemplo siguiente se muestra cómo usar el <xref:System.IAsyncResult.AsyncWaitHandle%2A> propiedad va a obtener un <xref:System.Threading.WaitHandle>y cómo esperar una llamada asincrónica en un delegado.</span><span class="sxs-lookup"><span data-stu-id="1848b-126">The following example demonstrates how to use the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property to get a <xref:System.Threading.WaitHandle>, and how to wait for an asynchronous call on a delegate.</span></span> <span data-ttu-id="1848b-127"><xref:System.Threading.WaitHandle> se señaliza cuando finaliza la llamada asincrónica y puede esperar a que termine llamando al método <xref:System.Threading.WaitHandle.WaitOne%2A> .</span><span class="sxs-lookup"><span data-stu-id="1848b-127">The <xref:System.Threading.WaitHandle> is signaled when the asynchronous call completes, and you can wait for it by calling the <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span>  
  
 <span data-ttu-id="1848b-128">El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.</span><span class="sxs-lookup"><span data-stu-id="1848b-128">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="1848b-129">Para obtener más información y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="1848b-129">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1848b-130">
            <para>El objeto que implementa <see cref="T:System.IAsyncResult" /> no es necesario crear la <see cref="T:System.Threading.WaitHandle" /> hasta que el <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> propiedad es de lectura. Es la elección de la <see cref="T:System.IAsyncResult" /> implementador. Sin embargo, si el implementador crea <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, es responsabilidad del implementador para señalar el <see cref="T:System.Threading.WaitHandle" /> que finalizará la espera en el momento adecuado. Por ejemplo, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> finaliza la espera en nombre del llamador cuando se devuelve un método invocado de forma asincrónica. Una vez creada, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> debe mantenerse activo hasta que el usuario llama al método que finaliza la operación asincrónica. En ese tiempo, el objeto subyacente <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> se pueden descartar.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-130">
              <para>The object that implements <see cref="T:System.IAsyncResult" /> does not need to create the <see cref="T:System.Threading.WaitHandle" /> until the <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> property is read. It is the choice of the <see cref="T:System.IAsyncResult" /> implementer. However, if the implementer creates <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, it is the responsibility of the implementer to signal the <see cref="T:System.Threading.WaitHandle" /> that will terminate the wait at the appropriate time. For example, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> terminates the wait on behalf of the caller when an asynchronously invoked method returns. Once created, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> should be kept alive until the user calls the method that concludes the asynchronous operation. At that time the object behind <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> can be discarded.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="usage">
          <span data-ttu-id="1848b-131">
            <para>Los clientes que esperan para que la operación se complete (en lugar de sondeo) utilizan esta propiedad para obtener un objeto de sincronización para esperar.  <block subset="none" type="note"><para> Cuando se usa el <see langword="BeginInvoke" /> método de un delegado para llamar a un método de forma asincrónica y obtener un identificador de espera de resultante <see cref="T:System.IAsyncResult" />, se recomienda que cierre el identificador de espera tan pronto como haya terminado de usarlo, mediante una llamada a la <see cref="M:System.Threading.WaitHandle.Close" /> método. Si simplemente libera todas las referencias al identificador de espera, se liberan los recursos del sistema cuando la colección de elementos no utilizados reclame el identificador de espera, pero la colección de elementos no utilizados funciona más eficazmente cuando los objetos descartables se cierran o eliminan de forma explícita. Para obtener más información, consulte el <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> propiedad.  </para></block></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-131">
              <para>Clients that wait for the operation to complete (as opposed to polling) use this property to obtain a synchronization object to wait on.  <block subset="none" type="note"><para> When you use the <see langword="BeginInvoke" /> method of a delegate to call a method asynchronously and obtain a wait handle from the resulting <see cref="T:System.IAsyncResult" />, we recommend that you close the wait handle as soon as you are finished using it, by calling the <see cref="M:System.Threading.WaitHandle.Close" /> method. If you simply release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle, but garbage collection works more efficiently when disposable objects are explicitly closed or disposed. For more information, see the <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> property.  </para></block></para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1848b-132">Obtiene un valor que indica si se completó la operación asincrónica de forma sincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-132">Gets a value that indicates whether the asynchronous operation completed synchronously.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1848b-133">
            <see langword="true" /> si la operación asincrónica se completó de forma sincrónica; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-133">
              <see langword="true" /> if the asynchronous operation completed synchronously; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1848b-134">Si se detecta la finalización de la llamada sincrónica en el <xref:System.AsyncCallback> delegado, es probable que el subproceso que inició la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="1848b-134">If the synchronous completion of the call is detected in the <xref:System.AsyncCallback> delegate, it is probable that the thread that initiated the asynchronous operation is the current thread.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1848b-135">
            <para>La mayoría de los implementadores de la <see cref="T:System.IAsyncResult" /> interfaz no usará esta propiedad y debe devolver <see langword="false" />. A partir del [!INCLUDE[net_v45](~/includes/net-v45-md.md)], una tarea que se crea con el <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> método no se completará si esta propiedad no está implementada correctamente. Consulte [compatibilidad de aplicaciones en 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-135">
              <para>Most implementers of the <see cref="T:System.IAsyncResult" /> interface will not use this property and should return <see langword="false" />. Beginning with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], a task that is created with the <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> method will not complete if this property is not implemented correctly. See [Application Compatibility in 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para>
            </span>
          </span>
        </block>
        <block subset="none" type="usage">
          <span data-ttu-id="1848b-136">
            <para>Utilice esta propiedad para determinar si la operación asincrónica se completó sincrónicamente. Por ejemplo, esta propiedad puede devolver <see langword="true" /> para una operación de E/S asincrónica si la solicitud de E/S era pequeña.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-136">
              <para>Use this property to determine if the asynchronous operation completed synchronously. For example, this property can return <see langword="true" /> for an asynchronous I/O operation if the I/O request was small.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1848b-137">Obtiene un valor que indica si se completó la operación asincrónica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-137">Gets a value that indicates whether the asynchronous operation has completed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1848b-138">
            <see langword="true" /> si la operación se ha completado; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-138">
              <see langword="true" /> if the operation is complete; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1848b-139">Cuando esta propiedad es `true`, puede asumir es seguro descartar los recursos asignados para su uso por la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="1848b-139">When this property is `true`, you can assume it is safe to discard any resources you allocate for use by the asynchronous operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1848b-140">El ejemplo siguiente muestra cómo usar el <xref:System.IAsyncResult.IsCompleted%2A> propiedad de la <xref:System.IAsyncResult> para detectar cuándo se completa una llamada asincrónica.</span><span class="sxs-lookup"><span data-stu-id="1848b-140">The following example shows how to use the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> to discover when an asynchronous call completes.</span></span> <span data-ttu-id="1848b-141">En este caso, se realiza la llamada asincrónica mediante el `BeginInvoke` método de un delegado.</span><span class="sxs-lookup"><span data-stu-id="1848b-141">In this case, the asynchronous call is made by using the `BeginInvoke` method of a delegate.</span></span> <span data-ttu-id="1848b-142">Puede usar el <xref:System.IAsyncResult.IsCompleted%2A> propiedad sondear para finalización al realizar la llamada asincrónica desde un subproceso que la interfaz de usuario de servicios.</span><span class="sxs-lookup"><span data-stu-id="1848b-142">You might use the <xref:System.IAsyncResult.IsCompleted%2A> property to poll for completion when making the asynchronous call from a thread that services the user interface.</span></span> <span data-ttu-id="1848b-143">Sondear la finalización de una llamada asincrónica permite al subproceso de llamada seguirse ejecutando mientras la llamada asincrónica se ejecuta en un subproceso <xref:System.Threading.ThreadPool> .</span><span class="sxs-lookup"><span data-stu-id="1848b-143">Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <xref:System.Threading.ThreadPool> thread.</span></span>  
  
 <span data-ttu-id="1848b-144">El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.</span><span class="sxs-lookup"><span data-stu-id="1848b-144">The example consists of two classes: the class that contains the method that is called asynchronously, and the class that contains the `Main` method that makes the call.</span></span>  
  
 <span data-ttu-id="1848b-145">Para obtener más información y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="1848b-145">For more information and more examples of calling methods asynchronously by using delegates, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="1848b-146">
            <para>Los implementadores normalmente devolverá el valor de un campo privado o interno de la prueba como el valor de esta propiedad.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-146">
              <para>Implementers will typically return the value of a private field or internal test as the value of this property.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="usage">
          <span data-ttu-id="1848b-147">
            <para>Los clientes que sondean el estado de la operación (en lugar de esperar en un objeto de sincronización) utilizan esta propiedad para determinar el estado de la operación.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="1848b-147">
              <para>Clients that poll for operation status (as opposed to waiting on a synchronization object) use this property to determine the status of the operation.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>