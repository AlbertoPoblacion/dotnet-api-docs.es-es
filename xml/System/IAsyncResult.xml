<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af8939f7e8a088eef165eb31b54cab1092f9abee" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52733218" /></Metadata><TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa el estado de una operación asincrónica.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IAsyncResult> interfaz se implementa mediante las clases que contienen métodos que pueden funcionar de forma asincrónica. Es el tipo de valor devuelto de los métodos que inician una operación asincrónica, como <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, y se pasa a los métodos que concluyen una operación asincrónica, como <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> los objetos también se pasan a los métodos invocados por <xref:System.AsyncCallback> delega cuando finaliza una operación asincrónica.  
  
 Un objeto que admite el <xref:System.IAsyncResult> interfaz almacena información de estado para una operación asincrónica y proporciona un objeto de sincronización para permitir que los subprocesos se señaliza cuando finaliza la operación.  
  
> [!NOTE]
>  El <xref:System.Runtime.Remoting.Messaging.AsyncResult> clase es la implementación de <xref:System.IAsyncResult> devuelta por la `BeginInvoke` método cuando se usa un delegado para llamar a un método de forma asincrónica.  
  
 Para obtener una descripción detallada de cómo el <xref:System.IAsyncResult> interfaz se utiliza, vea el [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) tema.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> propiedad va a obtener un <xref:System.Threading.WaitHandle>y cómo esperar una llamada asincrónica en un delegado. <xref:System.Threading.WaitHandle> se señaliza cuando finaliza la llamada asincrónica y puede esperar a que termine llamando al método <xref:System.Threading.WaitHandle.WaitOne%2A>.  
  
 El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.  
  
 Para obtener más información y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto definido por el usuario que califica o contiene información sobre una operación asincrónica.</summary>
        <value>Objeto definido por el usuario que califica o contiene información sobre una operación asincrónica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve el objeto que es el último parámetro del método que inicia una operación asincrónica.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo el <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> propiedad se utiliza para pasar información a un método de devolución de llamada. El último parámetro de la `BeginInvoke` llamada al método es una cadena de formato, el método de devolución de llamada que se utiliza para dar formato a un mensaje de salida.  
  
 El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.  
  
 Para obtener más información acerca de cómo funciona este ejemplo de devolución de llamada y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Implementar esta propiedad para permitir que el llamador de una operación asincrónica obtener un objeto definido por la aplicación especificado al principio de la operación.</para></block>
        <block subset="none" type="usage"><para>Este objeto puede utilizarse para pasar información de estado de la operación asincrónica para una <see cref="T:System.AsyncCallback" /> que proporcione.</para></block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</summary>
        <value><see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Permite que el valor devuelto al cliente a esperar para que una operación asincrónica para completarse en lugar de sondear <xref:System.IAsyncResult.IsCompleted%2A> hasta que finaliza la operación. El valor devuelto puede utilizarse para realizar un <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, o <xref:System.Threading.WaitHandle.WaitAll%2A> operación.  
  
 Common language runtime proporciona un número de objetos que puede esperar, como <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, y <xref:System.Threading.Mutex>, todos ellos reflejan las primitivas de sincronización de Win32.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el <xref:System.IAsyncResult.AsyncWaitHandle%2A> propiedad va a obtener un <xref:System.Threading.WaitHandle>y cómo esperar una llamada asincrónica en un delegado. <xref:System.Threading.WaitHandle> se señaliza cuando finaliza la llamada asincrónica y puede esperar a que termine llamando al método <xref:System.Threading.WaitHandle.WaitOne%2A>.  
  
 El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.  
  
 Para obtener más información y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>El objeto que implementa <see cref="T:System.IAsyncResult" /> no es necesario crear la <see cref="T:System.Threading.WaitHandle" /> hasta que el <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> propiedad es de lectura. Es la elección de la <see cref="T:System.IAsyncResult" /> implementador. Sin embargo, si el implementador crea <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, es responsabilidad del implementador para señalar el <see cref="T:System.Threading.WaitHandle" /> que finalizará la espera en el momento adecuado. Por ejemplo, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> finaliza la espera en nombre del llamador cuando se devuelve un método invocado de forma asincrónica. Una vez creada, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> debe mantenerse activo hasta que el usuario llama al método que finaliza la operación asincrónica. En ese tiempo, el objeto subyacente <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> se pueden descartar.</para></block>
        <block subset="none" type="usage"><para>Los clientes que esperan para que la operación se complete (en lugar de sondeo) utilizan esta propiedad para obtener un objeto de sincronización para esperar.  
  
 <block subset="none" type="note"><para>  
 Cuando se usa el <see langword="BeginInvoke" /> método de un delegado para llamar a un método de forma asincrónica y obtener un identificador de espera de resultante <see cref="T:System.IAsyncResult" />, se recomienda que cierre el identificador de espera tan pronto como haya terminado de usarlo, mediante una llamada a la <see cref="M:System.Threading.WaitHandle.Close" /> método. Si simplemente libera todas las referencias al identificador de espera, se liberan los recursos del sistema cuando la colección de elementos no utilizados reclame el identificador de espera, pero la colección de elementos no utilizados funciona más eficazmente cuando los objetos descartables se cierran o eliminan de forma explícita. Para obtener más información, vea la propiedad <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />.  
  
</para></block></para></block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se completó la operación asincrónica de forma sincrónica.</summary>
        <value><see langword="true" /> si la operación asincrónica se completó de forma sincrónica; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se detecta la finalización de la llamada sincrónica en el <xref:System.AsyncCallback> delegado, es probable que el subproceso que inició la operación asincrónica.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>La mayoría de los implementadores de la <see cref="T:System.IAsyncResult" /> interfaz no usará esta propiedad y debe devolver <see langword="false" />. A partir del [!INCLUDE[net_v45](~/includes/net-v45-md.md)], una tarea que se crea con el <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> método no se completará si esta propiedad no está implementada correctamente. Consulte [compatibilidad de aplicaciones en 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para></block>
        <block subset="none" type="usage"><para>Utilice esta propiedad para determinar si la operación asincrónica se completó sincrónicamente. Por ejemplo, esta propiedad puede devolver <see langword="true" /> para una operación de E/S asincrónica si la solicitud de E/S era pequeña.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se completó la operación asincrónica.</summary>
        <value><see langword="true" /> si la operación ha finalizado; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando esta propiedad es `true`, puede asumir es seguro descartar los recursos asignados para su uso por la operación asincrónica.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar el <xref:System.IAsyncResult.IsCompleted%2A> propiedad de la <xref:System.IAsyncResult> para detectar cuándo se completa una llamada asincrónica. En este caso, se realiza la llamada asincrónica mediante el `BeginInvoke` método de un delegado. Puede usar el <xref:System.IAsyncResult.IsCompleted%2A> propiedad sondear para finalización al realizar la llamada asincrónica desde un subproceso que la interfaz de usuario de servicios. Sondear la finalización de una llamada asincrónica permite al subproceso de llamada seguirse ejecutando mientras la llamada asincrónica se ejecuta en un subproceso <xref:System.Threading.ThreadPool>.  
  
 El ejemplo consta de dos clases: la clase que contiene el método que se llama de forma asincrónica y la clase que contiene el `Main` método que realiza la llamada.  
  
 Para obtener más información y más ejemplos de llamar a métodos de forma asincrónica mediante delegados, vea [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los implementadores normalmente devolverá el valor de un campo privado o interno de la prueba como el valor de esta propiedad.</para></block>
        <block subset="none" type="usage"><para>Los clientes que sondean el estado de la operación (en lugar de esperar en un objeto de sincronización) utilizan esta propiedad para determinar el estado de la operación.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>