<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`6.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51086b6148570cf7862fdada5a080c05c90a2ac0e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1086b6148570cf7862fdada5a080c05c90a2ac0e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's first component.</source>
          <target state="translated">Tipo del primer componente de la tupla.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's second component.</source>
          <target state="translated">Tipo del segundo componente de la tupla.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's third component.</source>
          <target state="translated">Tipo del tercer componente de la tupla.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">Tipo del cuarto componente de la tupla.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">Tipo del quinto componente de la tupla.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">Tipo del sexto componente de la tupla.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Tuple`6">
          <source>Represents a 6-tuple, or sextuple.</source>
          <target state="translated">Representa una tupla de 6 o séxtuplo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Una tupla es una estructura de datos que tiene un número específico y la secuencia de valores.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> class represents a 6-tuple, or sextuple, which is a tuple that has six components.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> clase representa una tupla de 6 o séxtupla, que es una tupla que tiene seis componentes.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> or the static  <ph id="ph3">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Puede crear instancias de un <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto mediante una llamada a la <ph id="ph2">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> o el método estático <ph id="ph3">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>You can retrieve the value of the tuple's components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> instance properties.</source>
          <target state="translated">Puede recuperar el valor de los componentes de la tupla mediante el uso de solo lectura <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, y <ph id="ph6">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> propiedades de la instancia.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">Tuplas se utilizan normalmente en cuatro formas distintas:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To represent a single set of data.</source>
          <target state="translated">Para representar un único conjunto de datos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">Por ejemplo, una tupla puede representar un registro de base de datos y sus componentes pueden representar campos individuales del registro.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">Para proporcionar un acceso sencillo a y la manipulación de un conjunto de datos.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object that contains population data for New York City for each census from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto que contiene datos de la población de la ciudad de Nueva York correspondientes a cada censo de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>The sextuple is passed to the <ph id="ph1">`ComputePopulationChange`</ph> method, which calculates the annual rate of change between censuses, as well as the annual rate of change for the entire 50 year period.</source>
          <target state="translated">El séxtuplo se pasa a la <ph id="ph1">`ComputePopulationChange`</ph> método, que calcula la tasa anual de cambio entre los censos, así como la tasa anual de cambio para el período completo de 50 años.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">Para devolver varios valores de un método sin el uso de <ph id="ph1">`out`</ph> parámetros (en C#) o <ph id="ph2">`ByRef`</ph> parámetros (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Por ejemplo, el ejemplo anterior devuelve sus estadísticas calculadas, junto con el nombre de la ciudad, en un <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">Para pasar varios valores a un método a través de un solo parámetro.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">Por ejemplo, el <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> método tiene un parámetro único que le permite proporcionar un valor para el método que el subproceso se ejecuta en el inicio.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`6">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object as the method argument, you can supply the thread’s startup routine with six items of data.</source>
          <target state="translated">Si proporciona un <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto como el argumento del método, puede proporcionar la rutina de inicio del subproceso con seis elementos de datos.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">Valor del primer componente de la tupla.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">Valor del segundo componente de la tupla.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">Valor del tercer componente de la tupla.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">Valor del cuarto componente de la tupla</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">Valor del quinto componente de la tupla.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">Valor del sexto componente de la tupla.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 6-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated">También puede utilizar el método estático <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> método para crear instancias de un objeto de tupla de 6 sin tener que especificar explícitamente los tipos de sus componentes.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 6-tuple whose first component is of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and whose remaining components are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType&gt;</ph> método para crear instancias de una tupla de 6 cuyo primer componente es de tipo <ph id="ph2">&lt;xref:System.String&gt;</ph> y cuyos componentes restantes son del tipo <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">Esto es equivalente a la siguiente llamada a la <ph id="ph1">&lt;xref:System.Tuple%606.%23ctor%2A&gt;</ph> constructor de clase.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Objeto que se va a comparar con esta instancia.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">Devuelve un valor que indica si el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual es igual que el objeto especificado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la instancia actual es igual que el objeto especificado; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated">El <ph id="ph1">`obj`</ph> se considera que el parámetro es igual a la instancia actual en las siguientes condiciones:</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Es un <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Its six components are of the same types as the current instance.</source>
          <target state="translated">Sus seis componentes son de los mismos tipos que la instancia actual.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Its six components are equal to those of the current instance.</source>
          <target state="translated">Sus seis componentes son iguales que los de la instancia actual.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">La igualdad viene determinada por el comparador de igualdad de objetos predeterminado para cada componente.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The following example defines an array of sextuples that contain population data for Los Angeles and New York from 1960 to 2000.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de séxtuplas que contiene los datos de población de Los Ángeles y Nueva York de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The first component of each sextuple identifies the city.</source>
          <target state="translated">El primer componente de cada séxtuplo identifica la ciudad.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The first, third, and fourth sextuples contain data for New York.</source>
          <target state="translated">La primera, tercera y cuarta séxtuplas contienen los datos de Nueva York.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The first sextuple is a duplicate of the fourth sextuple.</source>
          <target state="translated">El primer séxtuplo es un duplicado de la cuarta séxtuplo.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>The third sextuple identifies the city as "New York City" instead of "New York".</source>
          <target state="translated">El tercer séxtuplo identifica la ciudad como "New York City" en lugar de "Nueva York".</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.Equals(System.Object)">
          <source>As the example shows, only the fourth sextuple is equal to the first sextuple.</source>
          <target state="translated">Como se muestra en el ejemplo, solo la cuarta séxtuplo es igual a la primera séxtuplo.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">Devuelve el código hash del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Código hash de un entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's first component.</source>
          <target state="translated">Obtiene el valor del primer componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's first component.</source>
          <target state="translated">Valor del primer componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando el <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto y recuperando el primer elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos cuyos componentes contienen datos de la población de tres ciudades de Estados Unidos (Nueva York, Chicago y Los Ángeles) desde 1960 hasta 2000.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">A continuación, se muestra una tabla que muestra los datos.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item1">
          <source>To display the city name, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para mostrar el nombre de la ciudad, recupera el valor de la <ph id="ph1">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> propiedad para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's second component.</source>
          <target state="translated">Obtiene el valor del segundo componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's second component.</source>
          <target state="translated">Valor del segundo componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando el <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto y recuperando el primer elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos cuyos componentes contienen datos de la población de tres ciudades de Estados Unidos (Nueva York, Chicago y Los Ángeles) desde 1960 hasta 2000.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">A continuación, se muestra una tabla que muestra los datos.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item2">
          <source>To display the population in 1960, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para mostrar la población en 1960, recupera el valor de la <ph id="ph1">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> propiedad para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's third component.</source>
          <target state="translated">Obtiene el valor del tercer componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's third component.</source>
          <target state="translated">Valor del tercer componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando el <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto y recuperando el primer elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos cuyos componentes contienen datos de la población de tres ciudades de Estados Unidos (Nueva York, Chicago y Los Ángeles) desde 1960 hasta 2000.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">A continuación, se muestra una tabla que muestra los datos.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item3">
          <source>To display the population in 1970, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para mostrar la población de 1970, recupera el valor de la <ph id="ph1">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph> propiedad para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Obtiene el valor del cuarto componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Valor del cuarto componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando el <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto y recuperando el primer elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos cuyos componentes contienen datos de la población de tres ciudades de Estados Unidos (Nueva York, Chicago y Los Ángeles) desde 1960 hasta 2000.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">A continuación, se muestra una tabla que muestra los datos.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item4">
          <source>To display the population in 1980, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para mostrar la población de 1980, recupera el valor de la <ph id="ph1">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph> propiedad para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Obtiene el valor del quinto componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's fifth  component.</source>
          <target state="translated">El valor del elemento actual <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> quinto componente del objeto.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando el <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto y recuperando el primer elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos cuyos componentes contienen datos de la población de tres ciudades de Estados Unidos (Nueva York, Chicago y Los Ángeles) desde 1960 hasta 2000.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">A continuación, se muestra una tabla que muestra los datos.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item5">
          <source>To display the population in 1990, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para mostrar la población en 1990, recupera el valor de la <ph id="ph1">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph> propiedad para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Obtiene el valor del sexto componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Valor del sexto componente del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">Puede determinar dinámicamente el tipo de la <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> componente en uno de dos maneras:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> property.</source>
          <target state="translated">Mediante una llamada a la <ph id="ph1">`GetType`</ph> método en el valor devuelto por la <ph id="ph2">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando el <ph id="ph1">&lt;xref:System.Type&gt;</ph> objeto que representa el <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto y recuperando el primer elemento de la matriz devuelta por su <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos cuyos componentes contienen datos de la población de tres ciudades de Estados Unidos (Nueva York, Chicago y Los Ángeles) desde 1960 hasta 2000.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">A continuación, se muestra una tabla que muestra los datos.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.Item6">
          <source>To display the population in 2000, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> object.</source>
          <target state="translated">Para mostrar la población de 2000, se recupera el valor de la <ph id="ph1">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> propiedad para cada <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Objeto que se va a comparar con la instancia actual.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">Un objeto que proporciona reglas personalizadas para la comparación.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual con un objeto especificado utilizando un comparador especificado y devuelve un entero que indica si el objeto actual precede o sigue al objeto especificado, o bien se encuentra en la misma posición que dicho objeto en el criterio de ordenación.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Entero con signo que indica la posición relativa de esta instancia y <ph id="ph1">&lt;paramref name="other" /&gt;</ph> en el criterio de ordenación, tal como se muestra en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descripción</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero negativo</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia precede a <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Cero</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> En el criterio de ordenación, esta instancia y <ph id="ph3">&lt;paramref name="other" /&gt;</ph> tienen la misma posición.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero positivo</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia es posterior a <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects.</source>
          <target state="translated">Este método permite definir comparaciones personalizadas de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">Por ejemplo, puede usar este método para orden <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos basados en el valor de un componente específico.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">Aunque se puede llamar directamente a este método, normalmente se llama al ordenar a la colección de métodos que incluyan <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parámetros para ordenar los miembros de una colección.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Por ejemplo, se llama a la <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> método y <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> método de un <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> objeto cuyas instancias se crean mediante el uso de la <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> método está pensado para su uso en las operaciones de ordenación.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method.</source>
          <target state="translated">Para determinar si dos objetos son iguales, llame a la <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects that contains population data for three U.S. cities from 1960 to 2000.</source>
          <target state="translated">En el ejemplo siguiente se crea una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos que contiene los datos de la población de tres ciudades de Estados Unidos de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The sextuple's first component is the city name.</source>
          <target state="translated">Primer componente es del séxtuplo es el nombre de la ciudad.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining five components represent the population at 10-year intervals from 1960 to 2000.</source>
          <target state="translated">Los cinco componentes restantes representan la población en intervalos de 10 años de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of sextuples to be sorted by any one of its components.</source>
          <target state="translated">El <ph id="ph1">`PopulationComparer`</ph> clase proporciona un <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementación que permite a la matriz de séxtuplas que ordenarse por cualquiera de sus componentes.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">Se proporcionan dos valores a la <ph id="ph1">`PopulationComparer`</ph> clase en su constructor: la posición del componente que define el criterio de ordenación, y un <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valor que indica si los objetos de tupla deberían estar ordenados en orden ascendente o descendente.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them.</source>
          <target state="translated">El ejemplo, a continuación, muestra los elementos de la matriz sin ordenar, ordena por el tercer componente (la población de 1970) y mostrarlos y, a continuación, ordena por el sexto componente (la población de 2000) y mostrarlos.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> no es un objeto <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Objeto que se va a comparar con esta instancia.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">Un objeto que define el método que se usará para evaluar si los dos objetos son iguales.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">Devuelve un valor que indica si el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual es igual que el objeto especificado según el método de comparación especificado.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la instancia actual es igual que el objeto especificado; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%606&gt;</ph> object whose components are of the same types as the current instance.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> se denomina implementación sólo si <ph id="ph2">`other`</ph> no es <ph id="ph3">`null`</ph>, y si puede ser correctamente convierta (en C#) o convertir (en Visual Basic) a un <ph id="ph4">&lt;xref:System.Tuple%606&gt;</ph> objeto cuyos componentes son de los mismos tipos que la instancia actual.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> método primeras pasadas el <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph> valores de la <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objetos que se comparará el <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objects.</source>
          <target state="translated">Si esta llamada al método devuelve <ph id="ph1">`true`</ph>, el método se llama de nuevo y pasa el <ph id="ph2">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph> valores de los dos <ph id="ph3">&lt;xref:System.Tuple%606&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of <ph id="ph2">`Item`</ph> values, or the two <ph id="ph3">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">Este proceso continúa hasta que devuelva la llamada al método <ph id="ph1">`false`</ph> cuando compara un par de <ph id="ph2">`Item`</ph> valores o los dos <ph id="ph3">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> valores se pasan al método.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines a <ph id="ph1">`RateComparer`</ph> class that performs a custom test for equality.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">`RateComparer`</ph> clase que realiza una prueba personalizada de igualdad.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If the values that are passed to its <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> method are of type <ph id="ph2">&lt;xref:System.Single&gt;</ph> or <ph id="ph3">&lt;xref:System.Double&gt;</ph>, the method tests for equality by using only up to three fractional digits.</source>
          <target state="translated">Si los valores que se pasan a su <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> método son de tipo <ph id="ph2">&lt;xref:System.Single&gt;</ph> o <ph id="ph3">&lt;xref:System.Double&gt;</ph>, el método comprueba la igualdad usando hasta tres dígitos fraccionarios.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Otherwise, it simply calls the <ph id="ph1">`x`</ph> parameter's <ph id="ph2">`Equals`</ph> method.</source>
          <target state="translated">En caso contrario, simplemente llama el <ph id="ph1">`x`</ph> del parámetro <ph id="ph2">`Equals`</ph> método.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The example uses this <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation to determine whether four <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objects that contain data on the rate of population change between 1960 and 2000 are equal.</source>
          <target state="translated">En el ejemplo se utiliza este <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementación para determinar si cuatro <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> objetos que contienen datos sobre la tasa de cambio de población entre 1960 y 2000 son iguales.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">Objeto cuyo método <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> calcula el código hash del objeto <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">Calcula el código hash del objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual usando el método de cálculo especificado.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Código hash de un entero de 32 bits con signo.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">El método simplemente ajusta una llamada a la <ph id="ph1">`comparer`</ph> del objeto <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">El algoritmo utilizado para calcular el código hash debe devolver el mismo código hash para dos <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos que se consideran iguales.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Objeto que se va a comparar con la instancia actual.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Compara el objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> actual con un objeto especificado y devuelve un entero que indica si el objeto actual es anterior, posterior o está en la misma posición que el objeto especificado en el criterio de ordenación.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Entero con signo que indica la posición relativa de esta instancia y <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> en el criterio de ordenación, tal como se muestra en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valor</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descripción</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero negativo</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia precede a <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Cero</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> En el criterio de ordenación, esta instancia y <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> tienen la misma posición.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Entero positivo</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Esta instancia es posterior a <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> class.</source>
          <target state="translated">Este método proporciona la <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementación para la <ph id="ph2">&lt;xref:System.Tuple%606&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">Aunque el método se puede llamar directamente, se llama más frecuentemente mediante las sobrecargas predeterminadas de ordenación a la colección de métodos, como <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, para ordenar los miembros de una colección.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%2A&gt;</ph> método está pensado para su uso en las operaciones de ordenación.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">No debe usarse cuando el propósito principal de una comparación es determinar si dos objetos son iguales.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%606.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para determinar si dos objetos son iguales, llame a la <ph id="ph1">&lt;xref:System.Tuple%606.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method uses the default object comparer to compare each component.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> método utiliza el comparador de objetos predeterminado para comparar cada componente.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objects that contain population data for three cities in the United States from 1960 to 2000.</source>
          <target state="translated">En el ejemplo siguiente se crea una matriz de <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objetos que contienen datos de la población de tres ciudades de los Estados Unidos de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The six components consist of the city name followed by the city's population at 10-year intervals from 1960 to 2000.</source>
          <target state="translated">Los seis componentes consisten en el nombre de la ciudad seguido de población de la ciudad en intervalos de 10 años de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls the <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> method to display each tuple in sorted order.</source>
          <target state="translated">El ejemplo muestra los componentes de cada tupla en la matriz sin ordenar, ordena la matriz y, a continuación, llama a la <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> método para mostrar cada tupla en orden alfabético.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by name, which is the first component.</source>
          <target state="translated">El resultado muestra que la matriz se ha ordenado por nombre, que es el primer componente.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">Tenga en cuenta que el ejemplo no llama directamente el <ph id="ph1">&lt;xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">Este método se llama implícitamente por el <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> método para cada elemento de la matriz.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> no es un objeto <ph id="ph2">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Índice del elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 to 5.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> puede oscilar entre 0 y 5.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Obtiene el valor del elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">Valor del elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> que se encuentra en la posición especificada.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> propiedad es una implementación de interfaz explícita.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para invocarlo, debe cast o convert el <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> el objeto a un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interfaz.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 5.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> es menor que 0 o mayor que 5.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Obtiene el número de elementos de <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>6, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">6, el número de elementos de un objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> propiedad es una implementación de interfaz explícita.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Para invocarlo, debe cast o convert el <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> el objeto a un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> objeto de interfaz.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> instance.</source>
          <target state="translated">Devuelve una cadena que representa el valor de esta instancia de <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Tuple`6.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph> object.</source>
          <target state="translated">Representación en forma de cadena de este objeto <ph id="ph1">&lt;see cref="T:System.Tuple`6" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6`</ph>), where <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, and <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">La cadena devuelta por este método toma la forma (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6`</ph>), donde <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, y <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept> representan los valores de la <ph id="ph2">&lt;xref:System.Tuple%606.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%606.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%606.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%606.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%606.Item5%2A&gt;</ph>, y <ph id="ph7">&lt;xref:System.Tuple%606.Item6%2A&gt;</ph> propiedades, respectivamente.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si alguno de los valores de propiedad es <ph id="ph1">`null`</ph>, se representa como <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> object that contains population data for New York City for each census from 1960 through 2000.</source>
          <target state="translated">En el ejemplo siguiente se define un <ph id="ph1">&lt;xref:System.Tuple%606&gt;</ph> objeto que contiene datos de la población de la ciudad de Nueva York correspondientes a cada censo de 1960 a 2000.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`6.ToString">
          <source>The components of the sextuple are then displayed by a call to the <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> method.</source>
          <target state="translated">A continuación, se muestran los componentes del séxtuplo mediante una llamada a la <ph id="ph1">&lt;xref:System.Tuple%606.ToString%2A&gt;</ph> método.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>