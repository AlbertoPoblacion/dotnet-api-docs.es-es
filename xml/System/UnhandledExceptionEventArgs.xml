<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnhandledExceptionEventArgs.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52bc5b27ab8c70f87bc485bcd049f405e98420956.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bc5b27ab8c70f87bc485bcd049f405e98420956</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.UnhandledExceptionEventArgs">
          <source>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</source>
          <target state="translated">Proporciona datos para el evento que se produce cuando existe una excepción que no está controlada por ningún dominio de la aplicación.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> proporciona acceso al objeto de excepción y una marca que indica si common language runtime está finalizando.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> is one of the parameters passed into <ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> for the <ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> es uno de los parámetros pasados en <ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> para el <ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>For more information about event handler delegates, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre los delegados de controladores de eventos, vea <bpt id="p1">[</bpt>controlar y provocar eventos<ept id="p1">](~/docs/standard/events/index.md)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>The exception that is not handled.</source>
          <target state="translated">Excepción no controlada.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el tiempo de ejecución está finalizando; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> class with the exception object and a common language runtime termination flag.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> con el objeto de la excepción y una marca de finalización de Common Language Runtime.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Gets the unhandled exception object.</source>
          <target state="translated">Obtiene el objeto de la excepción no controlada.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The unhandled exception object.</source>
          <target state="translated">Objeto de la excepción no controlada.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This property returns an object of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> rather than one derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Esta propiedad devuelve un objeto de tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph> en lugar de uno derivado de <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Although the Common Language Specification requires that all exception types derive from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>, it is possible for methods to throw exceptions with objects not derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">Aunque Common Language Specification requiere que se derivan todos los tipos de excepción <ph id="ph1">&lt;xref:System.Exception&gt;</ph>, es posible que los métodos que se produzcan excepciones con objetos no derivados de <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can do the following to work with this exception:</source>
          <target state="translated">Puede hacer lo siguiente para que funcione con esta excepción:</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Apply the  <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> attribute with a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph> value of <ph id="ph3">`true`</ph> to the assembly that contains the event handler.</source>
          <target state="translated">Aplicar el <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> atributo con un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph> valo <ph id="ph3">`true`</ph> al ensamblado que contiene el controlador de eventos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This wraps all exceptions not derived from the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class in a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> object.</source>
          <target state="translated">Esto incluye todas las excepciones no derivadas de la <ph id="ph1">&lt;xref:System.Exception&gt;</ph> clase en un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object, and retrieve the original exception object from the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Se puede, a continuación, convierte (en C#) o de forma segura convertir (en Visual Basic), el objeto devuelto por esta propiedad en un <ph id="ph1">&lt;xref:System.Exception&gt;</ph> objeto y recuperar el objeto de excepción original desde la <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</source>
          <target state="translated">Tenga en cuenta que algunos compiladores, como los compiladores de C# y Visual Basic, se aplican automáticamente este atributo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Cast the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object.</source>
          <target state="translated">Convierte el objeto devuelto por esta propiedad en un <ph id="ph1">&lt;xref:System.Exception&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event.</source>
          <target state="translated">En el ejemplo siguiente se muestra el <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It defines an event handler, <ph id="ph1">`MyHandler`</ph>, that is invoked whenever an unhandled exception is thrown in the default application domain.</source>
          <target state="translated">Define un controlador de eventos <ph id="ph1">`MyHandler`</ph>, que se invoca cuando se produce una excepción no controlada en el dominio de aplicación predeterminado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It then throws two exceptions.</source>
          <target state="translated">A continuación, inicia dos excepciones.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The first is handled by a <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> block.</source>
          <target state="translated">La primera se controla mediante un <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> bloque.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The second is unhandled and invokes the <ph id="ph1">`MyHandle`</ph> routine before the application terminates.</source>
          <target state="translated">El segundo es no controlado y se invoca el <ph id="ph1">`MyHandle`</ph> rutina antes de que finalice la aplicación.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Indicates whether the common language runtime is terminating.</source>
          <target state="translated">Indica si Common Language Runtime está finalizando.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el tiempo de ejecución está finalizando; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Beginning with the .NET Framework version 2.0, this property returns <ph id="ph1">`true`</ph> for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</source>
          <target state="translated">A partir de la versión 2.0 de .NET Framework, esta propiedad devuelve <ph id="ph1">`true`</ph> para la mayoría de las excepciones, de no controladas, a menos que se utiliza un indicador de compatibilidad de aplicaciones para revertir al comportamiento de las versiones 1.0 y 1.1.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</source>
          <target state="translated">El motivo es que más de las excepciones no controladas en subprocesos, incluidos los subprocesos del grupo de subprocesos, se pueden continuar Naturalmente, normalmente como resultado la finalización de la aplicación.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>For more information, including a list of cases in which the runtime does not terminate, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</source>
          <target state="translated">Para obtener más información, incluida una lista de los casos en los que el tiempo de ejecución no finaliza, vea <bpt id="p1">[</bpt>excepciones en subprocesos administrados<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Version Information</source>
          <target state="translated">Información de versión</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The following applies to the .NET Framework versions 1.0 and 1.1: This property returns <ph id="ph1">`true`</ph> when an exception is received in, but not handled by, an application's main thread.</source>
          <target state="translated">Lo siguiente se aplica a las versiones 1.0 y 1.1 de .NET Framework: esta propiedad devuelve <ph id="ph1">`true`</ph> cuando se reciben en una excepción, pero no controlada por el subproceso principal de la aplicación.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>This property also returns <ph id="ph1">`true`</ph> if an unmanaged thread is executing managed code and receives an unhandled exception.</source>
          <target state="translated">Esta propiedad también devuelve <ph id="ph1">`true`</ph> si un subproceso no administrado está ejecutando código administrado y recibe una excepción no controlada.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Finally, this property returns <ph id="ph1">`false`</ph> for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</source>
          <target state="translated">Por último, esta propiedad devuelve <ph id="ph1">`false`</ph> para el grupo de subprocesos y los subprocesos administrados creados por una aplicación, porque las versiones 1.0 y 1.1 detectar las excepciones no controladas en tales subprocesos y pasar por alto.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>