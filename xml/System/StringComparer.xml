<Type Name="StringComparer" FullName="System.StringComparer">
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a6461-101">Representa una operación de comparación de cadenas que utiliza reglas específicas basadas en la referencia cultural y el uso de mayúsculas y minúsculas o reglas específicas de comparación de ordinales.</span><span class="sxs-lookup"><span data-stu-id="a6461-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-102">Un objeto derivado de la <xref:System.StringComparer> clase personifica basada en cadena de comparación, igualdad y las operaciones de código hash que se tienen en cuenta ambas reglas de comparación de casos y referencias culturales específicas.</span><span class="sxs-lookup"><span data-stu-id="a6461-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="a6461-103">Puede usar el <xref:System.StringComparer> clase para crear una comparación específica del tipo para ordenar los elementos en una colección genérica.</span><span class="sxs-lookup"><span data-stu-id="a6461-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="a6461-104">Las clases como <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, y <xref:System.Collections.Generic.SortedList%602> usar la <xref:System.StringComparer> clase para fines de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a6461-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="a6461-105">Una operación de comparación que se representa mediante el <xref:System.StringComparer> se define una clase que se distinguen mayúsculas y minúsculas o mayúsculas de minúsculas y usar cualquier palabra (cuenta de la referencia cultural) o reglas de comparación ordinal (referencia para la referencia cultural).</span><span class="sxs-lookup"><span data-stu-id="a6461-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="a6461-106">Para obtener más información acerca de word y las reglas de comparación ordinal, vea <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a6461-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="a6461-107">Propiedades implementadas</span><span class="sxs-lookup"><span data-stu-id="a6461-107">Implemented Properties</span></span>  
 <span data-ttu-id="a6461-108">Es posible que sepa cómo usar el <xref:System.StringComparer> propiedades de la clase debido a una contradicción aparente.</span><span class="sxs-lookup"><span data-stu-id="a6461-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="a6461-109">El <xref:System.StringComparer> se declara la clase `abstract` (`MustInherit` en Visual Basic), lo que significa que sus miembros se puede invocar únicamente en un objeto de una clase derivada de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-110">La forma opuesta es que cada propiedad de la <xref:System.StringComparer> se declara la clase `static` (`Shared` en Visual Basic), lo que significa que la propiedad se puede invocar sin crear primero una clase derivada.</span><span class="sxs-lookup"><span data-stu-id="a6461-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="a6461-111">Puede llamar a un <xref:System.StringComparer> propiedad directamente porque cada propiedad devuelve realmente una instancia de una clase anónima que se deriva de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-112">Por lo tanto, el tipo de cada valor de propiedad es <xref:System.StringComparer>, que es la clase base de la clase anónima, no el tipo de la anónimo propia clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="a6461-113">Cada <xref:System.StringComparer> clase propiedad devuelve un <xref:System.StringComparer> objeto que admite reglas predefinidas de caso y de comparación.</span><span class="sxs-lookup"><span data-stu-id="a6461-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6461-114">En el ejemplo siguiente se muestra las propiedades y el <xref:System.StringComparer.Create%2A> método de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-115">El ejemplo se muestra cómo diferentes <xref:System.StringComparer> letra tres versiones de ordenación de objetos de la Latín I.</span><span class="sxs-lookup"><span data-stu-id="a6461-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a6461-116">Inicializa una nueva instancia de la clase <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6461-117">Compara dos objetos o cadenas y devuelve una indicación de su criterio de ordenación relativo.</span><span class="sxs-lookup"><span data-stu-id="a6461-117">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a6461-118">Objeto que se va a comparar con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-118">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="a6461-119">Objeto que se va a comparar con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-119">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="a6461-120">Cuando se reemplaza en una clase derivada, compara dos objetos y devuelve una indicación de su criterio de ordenación relativo.</span><span class="sxs-lookup"><span data-stu-id="a6461-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="a6461-121">Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="a6461-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="a6461-122"><list type="table"><listheader><term> Valor</span><span class="sxs-lookup"><span data-stu-id="a6461-122"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="a6461-123"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="a6461-123"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="a6461-124"></description></listheader><item><term> Menor que cero</span><span class="sxs-lookup"><span data-stu-id="a6461-124"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="a6461-125"></term><description><paramref name="x" /> precede a <paramref name="y" /> en el criterio de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a6461-125"></term><description><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="a6461-126">O bien</span><span class="sxs-lookup"><span data-stu-id="a6461-126">-or-</span></span>  
  
 <span data-ttu-id="a6461-127"><paramref name="x" /> es <see langword="null" /> y <paramref name="y" /> no es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-127"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="a6461-128"></description></item><item><term> Cero</span><span class="sxs-lookup"><span data-stu-id="a6461-128"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="a6461-129"></term><description><paramref name="x" /> es igual que <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-129"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="a6461-130">O bien</span><span class="sxs-lookup"><span data-stu-id="a6461-130">-or-</span></span>  
  
 <span data-ttu-id="a6461-131"><paramref name="x" /> y <paramref name="y" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-131"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="a6461-132"></description></item><item><term> Mayor que cero</span><span class="sxs-lookup"><span data-stu-id="a6461-132"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="a6461-133"></term><description><paramref name="x" /> sigue a <paramref name="y" /> en el criterio de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a6461-133"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="a6461-134">O bien</span><span class="sxs-lookup"><span data-stu-id="a6461-134">-or-</span></span>  
  
 <span data-ttu-id="a6461-135"><paramref name="y" /> es <see langword="null" /> y <paramref name="x" /> no es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-135"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-136">El <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> método es ligeramente más eficaz que la <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> método porque ninguna conversión de la `x` y `y` argumentos son necesarios para realizar la comparación.</span><span class="sxs-lookup"><span data-stu-id="a6461-136">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6461-137">Ni <paramref name="x" /> ni <paramref name="y" /> son un objeto <see cref="T:System.String" />, y ni <paramref name="x" /> ni <paramref name="y" /> implementan la interfaz <see cref="T:System.IComparable" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-137">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a6461-138">Cadena que se va a comparar con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-138">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="a6461-139">Cadena que se va a comparar con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-139">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="a6461-140">Cuando se reemplaza en una clase derivada, compara dos cadenas y devuelve una indicación de su criterio de ordenación relativo.</span><span class="sxs-lookup"><span data-stu-id="a6461-140">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="a6461-141">Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />, como se muestra en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="a6461-141">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="a6461-142"><list type="table"><listheader><term> Valor</span><span class="sxs-lookup"><span data-stu-id="a6461-142"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="a6461-143"></term><description> Significado</span><span class="sxs-lookup"><span data-stu-id="a6461-143"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="a6461-144"></description></listheader><item><term> Menor que cero</span><span class="sxs-lookup"><span data-stu-id="a6461-144"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="a6461-145"></term><description><paramref name="x" /> precede a <paramref name="y" /> en el criterio de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a6461-145"></term><description><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="a6461-146">O bien</span><span class="sxs-lookup"><span data-stu-id="a6461-146">-or-</span></span>  
  
 <span data-ttu-id="a6461-147"><paramref name="x" /> es <see langword="null" /> y <paramref name="y" /> no es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-147"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="a6461-148"></description></item><item><term> Cero</span><span class="sxs-lookup"><span data-stu-id="a6461-148"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="a6461-149"></term><description><paramref name="x" /> es igual que <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-149"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="a6461-150">O bien</span><span class="sxs-lookup"><span data-stu-id="a6461-150">-or-</span></span>  
  
 <span data-ttu-id="a6461-151"><paramref name="x" /> y <paramref name="y" /> son <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-151"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="a6461-152"></description></item><item><term> Mayor que cero</span><span class="sxs-lookup"><span data-stu-id="a6461-152"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="a6461-153"></term><description><paramref name="x" /> sigue a <paramref name="y" /> en el criterio de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a6461-153"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="a6461-154">O bien</span><span class="sxs-lookup"><span data-stu-id="a6461-154">-or-</span></span>  
  
 <span data-ttu-id="a6461-155"><paramref name="y" /> es <see langword="null" /> y <paramref name="x" /> no es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-155"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-156">El <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> método es ligeramente más eficaz que la <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> método porque ninguna conversión de la `x` y `y` argumentos son necesarios para realizar la comparación.</span><span class="sxs-lookup"><span data-stu-id="a6461-156">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="a6461-157">Referencia cultural cuyas reglas lingüísticas se utilizan para realizar una comparación de cadenas.</span><span class="sxs-lookup"><span data-stu-id="a6461-157">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="a6461-158"><see langword="true" /> para especificar que las operaciones de comparación no distinguen entre mayúsculas y minúsculas; <see langword="false" /> para especificar que las operaciones de comparación distinguen entre mayúsculas y minúsculas.</span><span class="sxs-lookup"><span data-stu-id="a6461-158"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="a6461-159">Crea un objeto <see cref="T:System.StringComparer" /> que compara cadenas según las reglas de la referencia cultural especificada.</span><span class="sxs-lookup"><span data-stu-id="a6461-159">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="a6461-160">Nuevo objeto <see cref="T:System.StringComparer" /> que realiza comparaciones de cadenas según las reglas de comparación utilizadas por el parámetro <paramref name="culture" /> y la regla de distinción o no entre mayúsculas y minúsculas especificada por el parámetro <paramref name="ignoreCase" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-160">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a6461-161">El ejemplo de código siguiente muestra las propiedades y el <xref:System.StringComparer.Create%2A> método de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-161">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-162">El ejemplo se muestra cómo diferentes <xref:System.StringComparer> letra tres versiones de ordenación de objetos de la Latín I.</span><span class="sxs-lookup"><span data-stu-id="a6461-162">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a6461-163"><paramref name="culture" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-163"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6461-164">Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas con distinción entre mayúsculas y minúsculas usando las reglas de comparación de palabras de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="a6461-164">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="a6461-165">Un nuevo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-165">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-166">El <xref:System.StringComparer> devuelto por la <xref:System.StringComparer.CurrentCulture%2A> propiedad se puede utilizar cuando las cadenas son lingüísticamente pertinentes.</span><span class="sxs-lookup"><span data-stu-id="a6461-166">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="a6461-167">Por ejemplo, si se muestran las cadenas para el usuario, o si las cadenas son el resultado de la interacción del usuario, comparación de cadenas dependientes de la referencia cultural debe utilizarse para ordenar los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="a6461-167">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="a6461-168">La referencia cultural actual es la <xref:System.Globalization.CultureInfo> objeto asociado al subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="a6461-168">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="a6461-169">El <xref:System.StringComparer.CurrentCulture%2A> propiedad realmente devuelve una instancia de una clase anónima derivada de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-169">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="a6461-170">Cada llamada a la <xref:System.StringComparer.CurrentCulture%2A> propiedad `get` devuelve un nuevo descriptor de acceso <xref:System.StringComparer> objeto, como se muestra en el código siguiente.</span><span class="sxs-lookup"><span data-stu-id="a6461-170">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="a6461-171">Para mejorar el rendimiento, puede almacenar la <xref:System.StringComparer> objeto en una variable local en lugar de recuperar el valor de la <xref:System.StringComparer.CurrentCulture%2A> propiedad varias veces.</span><span class="sxs-lookup"><span data-stu-id="a6461-171">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6461-172">El ejemplo de código siguiente muestra las propiedades y el <xref:System.StringComparer.Create%2A> método de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-172">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-173">El ejemplo se muestra cómo diferentes <xref:System.StringComparer> letra tres versiones de ordenación de objetos de la Latín I.</span><span class="sxs-lookup"><span data-stu-id="a6461-173">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6461-174">Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza comparaciones de cadenas sin distinción entre mayúsculas y minúsculas usando las reglas de comparación de palabras de la referencia cultural actual.</span><span class="sxs-lookup"><span data-stu-id="a6461-174">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="a6461-175">Un nuevo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-175">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-176">La referencia cultural actual es la <xref:System.Globalization.CultureInfo> objeto asociado al subproceso actual.</span><span class="sxs-lookup"><span data-stu-id="a6461-176">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="a6461-177">El <xref:System.StringComparer> devuelto por la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propiedad se puede utilizar cuando las cadenas son lingüísticamente pertinentes pero son mayúsculas o minúsculas no es.</span><span class="sxs-lookup"><span data-stu-id="a6461-177">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="a6461-178">Por ejemplo, si se muestran las cadenas para el usuario pero caso es más importante, la referencia cultural, comparación de cadenas entre mayúsculas y minúsculas debe utilizarse para ordenar los datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="a6461-178">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="a6461-179">El <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propiedad realmente devuelve una instancia de una clase anónima derivada de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-179">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="a6461-180">Cada llamada a la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propiedad `get` devuelve un nuevo descriptor de acceso <xref:System.StringComparer> objeto, como se muestra en el código siguiente.</span><span class="sxs-lookup"><span data-stu-id="a6461-180">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="a6461-181">Para mejorar el rendimiento, puede almacenar la <xref:System.StringComparer> objeto en una variable local en lugar de recuperar el valor de la <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> propiedad varias veces.</span><span class="sxs-lookup"><span data-stu-id="a6461-181">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6461-182">Cuando se reemplaza en una clase derivada, indica si dos objetos o cadenas son iguales.</span><span class="sxs-lookup"><span data-stu-id="a6461-182">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a6461-183">Objeto que se va a comparar con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-183">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="a6461-184">Objeto que se va a comparar con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-184">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="a6461-185">Cuando se reemplaza en una clase derivada, indica si dos objetos son iguales.</span><span class="sxs-lookup"><span data-stu-id="a6461-185">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="a6461-186"><see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> hacen referencia al mismo objecto, o si <paramref name="x" /> y <paramref name="y" /> son el mismo tipo de objeto y dichos objetos son iguales, o si <paramref name="x" /> y <paramref name="y" /> son <see langword="null" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-186"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-187">Dado que el tiempo de ejecución no tiene que aplicar la conversión unboxing `x` o `y` si son tipos de valor o intente convertirlo a `x` o `y` a cadenas si son tipos de referencia, el <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> método puede ser ligeramente más eficaz que la <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (método).</span><span class="sxs-lookup"><span data-stu-id="a6461-187">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="a6461-188">Cadena que se va a comparar con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-188">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="a6461-189">Cadena que se va a comparar con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="a6461-189">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="a6461-190">Cuando se reemplaza en una clase derivada, indica si dos cadenas son iguales.</span><span class="sxs-lookup"><span data-stu-id="a6461-190">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="a6461-191"><see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> hacen referencia al mismo objecto, o si <paramref name="x" /> y <paramref name="y" /> son iguales, o si <paramref name="x" /> y <paramref name="y" /> son <see langword="null" />; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-192">Dado que el tiempo de ejecución no tiene que aplicar la conversión unboxing `x` o `y` si son tipos de valor o intente convertirlo a `x` o `y` a cadenas si son tipos de referencia, el <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> método puede ser ligeramente más eficaz que la <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (método).</span><span class="sxs-lookup"><span data-stu-id="a6461-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a6461-193">Cuando se invalida en una clase derivada, obtiene el código hash del objeto <see cref="T:System.StringComparer" /> actual.</span><span class="sxs-lookup"><span data-stu-id="a6461-193">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a6461-194">Objeto.</span><span class="sxs-lookup"><span data-stu-id="a6461-194">An object.</span></span></param>
        <summary><span data-ttu-id="a6461-195">Cuando se reemplaza en una clase derivada, obtiene el código hash del objeto especificado.</span><span class="sxs-lookup"><span data-stu-id="a6461-195">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="a6461-196">Código hash de 32 bits con signo a partir del valor del parámetro <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-196">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-197">El <xref:System.StringComparer.GetHashCode%28System.String%29> método es más eficaz que la <xref:System.StringComparer.GetHashCode%2A> método porque el `obj` no es necesario que el parámetro se aplica la conversión unboxing para llevar a cabo la operación.</span><span class="sxs-lookup"><span data-stu-id="a6461-197">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="a6461-198">El <xref:System.StringComparer.GetHashCode%28System.Object%29> método asigna una cantidad de memoria que es proporcional al tamaño del `obj` para calcular el código hash de `obj`.</span><span class="sxs-lookup"><span data-stu-id="a6461-198">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="a6461-199">En el caso de cadenas largas, intenta recuperar el código hash puede producir un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="a6461-199">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="a6461-200">En su lugar, puede utilizar un algoritmo alternativo que asigne una cantidad de memoria fija al calcular códigos hash.</span><span class="sxs-lookup"><span data-stu-id="a6461-200">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="a6461-201">Para utilizar este algoritmo, agregue el [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento a la [ \<en tiempo de ejecución >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sección del archivo de configuración de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="a6461-201">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6461-202">No hay suficiente memoria disponible para asignar el búfer necesario para calcular el código hash.</span><span class="sxs-lookup"><span data-stu-id="a6461-202">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a6461-203"><paramref name="obj" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-203"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="a6461-204">No hay suficiente memoria disponible para asignar el búfer necesario para calcular el código hash.</span><span class="sxs-lookup"><span data-stu-id="a6461-204">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="a6461-205">Una cadena.</span><span class="sxs-lookup"><span data-stu-id="a6461-205">A string.</span></span></param>
        <summary><span data-ttu-id="a6461-206">Cuando se reemplaza en una clase derivada, obtiene el código hash de la cadena especificada.</span><span class="sxs-lookup"><span data-stu-id="a6461-206">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="a6461-207">Código hash de 32 bits con signo a partir del valor del parámetro <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-207">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-208">El <xref:System.StringComparer.GetHashCode%28System.String%29> método es más eficaz que la <xref:System.StringComparer.GetHashCode%28System.Object%29> método porque el `obj` no es necesario que el parámetro se aplica la conversión unboxing para llevar a cabo la operación.</span><span class="sxs-lookup"><span data-stu-id="a6461-208">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="a6461-209">El <xref:System.StringComparer.GetHashCode%28System.String%29> método asigna una cantidad de memoria que es proporcional al tamaño del `obj` para calcular el código hash de `obj`.</span><span class="sxs-lookup"><span data-stu-id="a6461-209">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="a6461-210">En el caso de cadenas largas, intenta recuperar el código hash puede producir un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="a6461-210">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="a6461-211">En su lugar, puede utilizar un algoritmo alternativo que asigne una cantidad de memoria fija al calcular códigos hash.</span><span class="sxs-lookup"><span data-stu-id="a6461-211">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="a6461-212">Para utilizar este algoritmo, agregue el [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento a la [ \<en tiempo de ejecución >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sección del archivo de configuración de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="a6461-212">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a6461-213">No hay suficiente memoria disponible para asignar el búfer necesario para calcular el código hash.</span><span class="sxs-lookup"><span data-stu-id="a6461-213">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a6461-214"><paramref name="obj" /> es <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-214"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="a6461-215">No hay suficiente memoria disponible para asignar el búfer necesario para calcular el código hash.</span><span class="sxs-lookup"><span data-stu-id="a6461-215">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6461-216">Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas con distinción entre mayúsculas y minúsculas usando las reglas de comparación de palabras de la referencia cultural de todos los idiomas.</span><span class="sxs-lookup"><span data-stu-id="a6461-216">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="a6461-217">Un nuevo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-217">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-218">El <xref:System.StringComparer> devuelto por la <xref:System.StringComparer.InvariantCulture%2A> propiedad compara las cadenas de manera lingüísticamente pertinente, pero no es adecuado para su presentación en cualquier referencia cultural determinada.</span><span class="sxs-lookup"><span data-stu-id="a6461-218">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="a6461-219">Su aplicación principal consiste en cadenas de orden de forma que sean idénticas entre distintas referencias culturales.</span><span class="sxs-lookup"><span data-stu-id="a6461-219">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="a6461-220">Es la referencia cultural de todos los <xref:System.Globalization.CultureInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="a6461-220">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="a6461-221">El <xref:System.StringComparer.InvariantCulture%2A> propiedad realmente devuelve una instancia de una clase anónima derivada de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-221">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6461-222">El ejemplo de código siguiente muestra las propiedades y el <xref:System.StringComparer.Create%2A> método de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-222">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-223">El ejemplo se muestra cómo diferentes <xref:System.StringComparer> letra tres versiones de ordenación de objetos de la Latín I.</span><span class="sxs-lookup"><span data-stu-id="a6461-223">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6461-224">Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas sin distinción entre mayúsculas y minúsculas usando las reglas de comparación de palabras de la referencia cultural de todos los idiomas.</span><span class="sxs-lookup"><span data-stu-id="a6461-224">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="a6461-225">Un nuevo objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-225">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-226">El <xref:System.StringComparer> devuelto por la <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propiedad compara las cadenas de manera lingüísticamente pertinente que no distingue entre mayúsculas, pero no es adecuado para su presentación en cualquier referencia cultural determinada.</span><span class="sxs-lookup"><span data-stu-id="a6461-226">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="a6461-227">Su aplicación principal consiste en cadenas de orden de forma que sean idénticas entre distintas referencias culturales.</span><span class="sxs-lookup"><span data-stu-id="a6461-227">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="a6461-228">Es la referencia cultural de todos los <xref:System.Globalization.CultureInfo> objeto devuelto por la <xref:System.Globalization.CultureInfo.InvariantCulture%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="a6461-228">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="a6461-229">El <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> propiedad realmente devuelve una instancia de una clase anónima derivada de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-229">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6461-230">Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas de ordinales con distinción entre mayúsculas y minúsculas</span><span class="sxs-lookup"><span data-stu-id="a6461-230">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="a6461-231">Un objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-231">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-232">El <xref:System.StringComparer> devuelto por la <xref:System.StringComparer.Ordinal%2A> propiedad realiza una comparación de byte simple que es independiente del idioma.</span><span class="sxs-lookup"><span data-stu-id="a6461-232">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="a6461-233">Esto es más apropiada cuando la comparación de cadenas que genera mediante programación o cuando comparar recursos entre mayúsculas y minúsculas, como las contraseñas.</span><span class="sxs-lookup"><span data-stu-id="a6461-233">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="a6461-234">El <xref:System.StringComparer.Ordinal%2A> propiedad realmente devuelve una instancia de una clase anónima derivada de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-234">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6461-235">El ejemplo de código siguiente muestra las propiedades y el <xref:System.StringComparer.Create%2A> método de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-235">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-236">El ejemplo se muestra cómo diferentes <xref:System.StringComparer> letra tres versiones de ordenación de objetos de la Latín I.</span><span class="sxs-lookup"><span data-stu-id="a6461-236">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a6461-237">Obtiene un objeto <see cref="T:System.StringComparer" /> que realiza una comparación de cadenas de ordinales sin distinción entre mayúsculas y minúsculas</span><span class="sxs-lookup"><span data-stu-id="a6461-237">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="a6461-238">Un objeto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="a6461-238">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a6461-239">El <xref:System.StringComparer> devuelto por la <xref:System.StringComparer.OrdinalIgnoreCase%2A> propiedad trata los caracteres de las cadenas que se comparan como si se han convertido en mayúsculas, aplicando las convenciones de la referencia cultural invariable y, a continuación, realiza una comparación de byte simple que es independiente de idioma.</span><span class="sxs-lookup"><span data-stu-id="a6461-239">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="a6461-240">Esto es más apropiada cuando la comparación de cadenas que genera mediante programación o cuando comparar recursos entre mayúsculas y minúsculas, como las rutas de acceso y nombres de archivo.</span><span class="sxs-lookup"><span data-stu-id="a6461-240">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="a6461-241">El <xref:System.StringComparer.OrdinalIgnoreCase%2A> propiedad realmente devuelve una instancia de una clase anónima derivada de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-241">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a6461-242">El ejemplo de código siguiente muestra las propiedades y el <xref:System.StringComparer.Create%2A> método de la <xref:System.StringComparer> clase.</span><span class="sxs-lookup"><span data-stu-id="a6461-242">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="a6461-243">El ejemplo se muestra cómo diferentes <xref:System.StringComparer> letra tres versiones de ordenación de objetos de la Latín I.</span><span class="sxs-lookup"><span data-stu-id="a6461-243">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>