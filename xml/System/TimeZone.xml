<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f5ddabd633aaf554f98326712c002874aeb143c" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56383120" /></Metadata><TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;netcore-3.0">
      <AttributeName>System.Obsolete("System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa una zona horaria.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una zona horaria es una región geográfica en la que se usa la misma zona horaria.  
  
> [!IMPORTANT]
>  Siempre que sea posible, utilice el <xref:System.TimeZoneInfo> clase en lugar de la <xref:System.TimeZone> clase.  
  
 Puede usar el <xref:System.TimeZone> clase para recuperar información sobre la zona horaria actual y para convertir las horas de tiempo de local a la hora Universal coordinada (UTC) o viceversa. Sin embargo, no puede usar el <xref:System.TimeZone> clase para representar las zonas horarias distintas a la zona local o para controlar las conversiones de fecha y hora de una zona horaria a otra. Para ello, utilice el <xref:System.TimeZoneInfo> clase. Puede usar esta clase para recuperar información sobre cualquier zona horaria definida en el sistema local, para crear zonas horarias personalizadas y para convertir las horas de una zona horaria a otra.  
  
 La <xref:System.TimeZone> clase admite solo una regla de ajuste al horario de verano único para la zona horaria local. Como resultado, el <xref:System.TimeZone> clase con precisión puede notificar la información del horario de verano o convertir entre la hora UTC y la hora local solo para el período en el que está en vigor la última regla de ajuste. En cambio, el <xref:System.TimeZoneInfo> clase admite varias reglas de ajuste, lo que hace posible trabajar con datos históricos de zona horaria.  
  
   
  
## Examples  
 Las siguientes referencias de ejemplo y muestra seleccionado `TimeZone` elementos de clase.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Además de proporcionar implementaciones para su <see langword="abstract" /> miembros (los marcados <see langword="MustOverride" /> en Visual Basic), es importante que las clases derivadas de <see cref="T:System.TimeZone" /> invalidar el comportamiento predeterminado de la <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> método. Esto es porque el comportamiento predeterminado de <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> en .NET Framework versión 2.0 no depende de una llamada a <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />, tal y como se hacía en las versiones 1.0 y 1.1 de .NET Framework.  Para obtener más información, consulte el <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> método.</para></block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.TimeZone" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la zona horaria del equipo actual.</summary>
        <value>Un objeto <see cref="T:System.TimeZone" /> que representa la zona horaria local actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.TimeZone.CurrentTimeZone%2A> propiedad se corresponde con el <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> propiedad.  
  
   
  
## Examples  
 Las siguientes referencias de ejemplo la `CurrentTimeZone` propiedad y se muestran los nombres de hora estándar y el horario de verano de la zona horaria local.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Datos de la zona horaria local se almacena en caché después de <see cref="P:System.TimeZone.CurrentTimeZone" /> en primer lugar se usa para recuperar información de zona horaria. Si local del sistema de la zona horaria se cambia posteriormente, el <see cref="P:System.TimeZone.CurrentTimeZone" /> propiedad no refleja este cambio. Si tiene que controlar los cambios de zona horaria mientras se está ejecutando la aplicación, use la <see cref="T:System.TimeZoneInfo" /> clase y llamar a su <see cref="M:System.TimeZoneInfo.ClearCachedData" /> método.</para></block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la zona de horario de verano.</summary>
        <value>Nombre de la zona de horario de verano.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se utiliza el horario de verano en la zona horaria, una cadena vacía ("") se devuelve.  
  
 El <xref:System.TimeZone.DaylightName%2A> propiedad se corresponde con el <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> propiedad. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> propiedad.  
  
   
  
## Examples  
 Las siguientes referencias de ejemplo y muestra el `DaylightName` propiedad de la zona horaria actual.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Año al que se aplica el horario de verano.</param>
        <summary>Devuelve el período de horario de verano de un año determinado.</summary>
        <returns>Un objeto <see cref="T:System.Globalization.DaylightTime" /> que contiene las fechas de inicio y fin del horario de verano de <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se admite solo un período de horario de verano al año.  
  
 Si no se utiliza el horario de verano en la zona horaria actual, el valor devuelto es un <xref:System.Globalization.DaylightTime> objeto, donde el valor de <xref:System.Globalization.DaylightTime.Start%2A> y <xref:System.Globalization.DaylightTime.End%2A> es <xref:System.DateTime.MinValue?displayProperty=nameWithType>y el valor de <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType> es un <xref:System.TimeSpan> inicializa en 0 pasos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> es menor que 1 o mayor que 9999.</exception>
        <block subset="none" type="usage"><para>Dado que el <see cref="T:System.TimeZone" /> clase admite solo una regla de ajuste al horario de verano, el <see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" /> método aplica la regla de ajuste actual a cualquier año, independientemente de si la regla de ajuste realmente se aplica a ese año. Suponiendo que el propio sistema operativo tiene datos precisos de un año determinado, un resultado más preciso está disponible cuando se trabaja con la matriz de <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> los objetos devueltos por la <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> método. El <see cref="P:System.Globalization.DaylightTime.Start" />, <see cref="P:System.Globalization.DaylightTime.End" />, y <see cref="P:System.Globalization.DaylightTime.Delta" /> propiedades corresponden a la <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />, <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />, y <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> propiedades.</para></block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Valor de fecha y hora.</param>
        <summary>Devuelve el desplazamiento de la hora universal coordinada (UTC) con respecto a la hora local especificada.</summary>
        <returns>El desplazamiento de hora universal coordinada (hora UTC) en <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve el desplazamiento o diferencia entre el `time` parámetro y la hora Universal coordinada (UTC). Es decir:  
  
 `time` = UTC + desplazamiento  
  
 El método interpreta la zona horaria del `time` según su <xref:System.DateTime.Kind%2A> propiedad. Si el valor de la <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, el método devuelve el desplazamiento de la zona horaria local. Si el valor de la <xref:System.DateTime.Kind%2A> propiedad es <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, el método devuelve un desplazamiento igual a <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Si observa el horario de verano, la zona horaria local <xref:System.TimeZone.GetUtcOffset%2A> se aplica la regla de ajuste actual a `time` al determinar el desplazamiento de la zona horaria local. Es decir, el desplazamiento devuelto por <xref:System.TimeZone.GetUtcOffset%2A> refleja si `time` cae en hora estándar de la zona horaria o el horario de verano.  
  
> [!NOTE]
>  El <xref:System.TimeZone.GetUtcOffset%2A> método reconoce solo el horario de verano regla de ajuste actual para la zona horaria local. Como resultado, se garantiza que se devuelve con precisión el desplazamiento de UTC de una hora local solo durante el período en el que está en vigor la última regla de ajuste. Pueden devolver resultados inexactos si `time` es una fecha histórica y el valor de tiempo que estaba sujeto a una regla de ajuste anterior.  
  
 El <xref:System.TimeZone.GetUtcOffset%2A> método corresponde a la <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> método. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> método.  
  
 Dado que el valor de fecha y hora representada por `time` y desplazamiento de este valor a la hora UTC no están vinculados estrechamente, una fecha local o no especificada y el valor de tiempo puede devolver un valor de desplazamiento diferente cuando se ejecuta en equipos distintos o cuando se ejecuta en el mismo equipo en zonas horarias diferentes. Si no desea este comportamiento, use un <xref:System.DateTimeOffset> valor en su lugar. El <xref:System.DateTimeOffset> tipo de datos Acople estrechamente un valor de fecha y hora con su desplazamiento a la hora UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un valor que indica si una fecha y hora especificadas se encuentran dentro del período de horario de verano.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Fecha y hora.</param>
        <summary>Devuelve un valor que indica si la fecha y hora especificadas se encuentran dentro del período de horario de verano.</summary>
        <returns>Es <see langword="true" /> si <paramref name="time" /> se encuentra dentro del horario de verano; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El año al que se aplica el período de horario de verano se deriva el `time` parámetro.  
  
 Dado que el <xref:System.TimeZone> clase es compatible con una regla de ajuste al horario de verano único, el <xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29> método aplica la regla de ajuste actual a cualquier fecha, independientemente de la regla de ajuste haya estado efecto en esa fecha. Suponiendo que el propio sistema operativo tiene datos precisos del horario de verano históricos, un resultado más preciso está disponible mediante el <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">Fecha y hora.</param>
        <param name="daylightTimes">Período de horario de verano.</param>
        <summary>Devuelve un valor que indica si la fecha y hora especificadas se encuentran dentro del período de horario de verano especificado.</summary>
        <returns>Es <see langword="true" /> si <paramref name="time" /> se encuentra en <paramref name="daylightTimes" />; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método proporciona la misma funcionalidad que esta sobrecarga de la <xref:System.TimeZone.IsDaylightSavingTime%2A> método. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="daylightTimes" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre estándar de la zona horaria.</summary>
        <value>Nombre estándar de la zona horaria.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.TimeZone.StandardName%2A> propiedad se corresponde con el <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> propiedad. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> propiedad.  
  
   
  
## Examples  
 Las siguientes referencias de ejemplo y muestra el `StandardName` propiedad de la zona horaria actual.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Se intentó establecer esta propiedad en <see langword="null" />.</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Hora universal coordinada (hora UTC).</param>
        <summary>Devuelve la hora local correspondiente a un valor especificado de fecha y hora.</summary>
        <returns>Un objeto <see cref="T:System.DateTime" /> cuyo valor es la hora local correspondiente a <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la tabla siguiente se muestra la relación entre el `time` parámetro y el <xref:System.DateTime> valor devuelto por este método.  
  
|Parámetro `time`|Comportamiento|Valor devuelto|  
|----------------------|--------------|------------------|  
|Un tiempo de hora Universal coordinada (UTC) (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>).|Convierte la hora a la hora UTC a la hora local.|Un objeto <xref:System.DateTime> cuyo valor es la hora local correspondiente a `time`.|  
|Una hora local (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>).|No hay conversión necesaria.|El mismo <xref:System.DateTime> valor representado por la `time` parámetro.|  
|Una hora no especificada (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>).|Se supone que la hora es UTC y lo convierte a la hora UTC a la hora local.|Un objeto <xref:System.DateTime> cuyo valor es la hora local correspondiente a `time`.|  
  
 Si observa el horario de verano, la zona horaria local <xref:System.TimeZone.ToLocalTime%2A> se aplica la regla de ajuste actual a `time` al realizar la conversión.  
  
> [!NOTE]
>  El <xref:System.TimeZone.ToLocalTime%2A> método reconoce solo el horario de verano regla de ajuste actual para la zona horaria local. Como resultado, se garantiza que se devuelve la hora local correspondiente a una hora UTC en particular sólo durante el período en el que está en vigor la última regla de ajuste con precisión. Pueden devolver resultados inexactos si `time` es una fecha histórica y el valor de tiempo que estaba sujeto a una regla de ajuste anterior.  
  
 El <xref:System.TimeZone.ToLocalTime%2A> método corresponde a la <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> método con su `destinationTimeZone` parámetro establecido en <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Aunque no es necesario, en la mayoría de los casos las clases derivadas que se ejecutan en la versión 2.0 de .NET Framework deben anular la implementación predeterminada de este método. En las versiones de .NET Framework 1.0 y 1.1, el <see langword="ToLocalTime" /> método llamado el <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> método y se ajusta al horario de verano al devolver la hora local. Sin embargo, a partir de .NET Framework 2.0, el comportamiento de la implementación predeterminada depende del <see cref="P:System.DateTime.Kind" /> propiedad de la <paramref name="time" /> parámetro. Si su valor es <see cref="F:System.DateTimeKind.Local" />, este método devuelve <paramref name="time" /> sin cambios. Si su valor es <see cref="F:System.DateTimeKind.Utc" /> o <see cref="F:System.DateTimeKind.Unspecified" />, este método supone <paramref name="time" /> es UTC y la convierte en la hora del sistema local sin llamar a la <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> método.  
  
El código siguiente proporciona un reemplazo simple de la implementación predeterminada de la <see langword="ToLocalTime" /> método. En este código, el <see langword="internalTimeZone" /> variable representa una instancia privada de la <see langword="TimeZone" /> clase: 
[!code-csharp[System.TimeZone.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [!code-vb[System.TimeZone.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para></block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Fecha y hora.</param>
        <summary>Devuelve la hora universal coordinada (UTC) correspondiente a una hora local especificada.</summary>
        <returns>Un objeto <see cref="T:System.DateTime" /> cuyo valor es la hora universal coordinada (UTC) que corresponde a <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si observa el horario de verano, la zona horaria local <xref:System.TimeZone.ToUniversalTime%2A> se aplica la regla de ajuste actual a la `time` parámetro al realizar la conversión.  
  
> [!NOTE]
>  El <xref:System.TimeZone.ToUniversalTime%2A> método reconoce solo el horario de verano regla de ajuste actual para la zona horaria local. Como resultado, se garantiza que se devuelve la hora Universal coordinada (UTC) correspondiente a una hora local en particular sólo durante el período en el que está en vigor la última regla de ajuste con precisión. Pueden devolver resultados inexactos si `time` es una fecha histórica y el valor de tiempo que estaba sujeto a una regla de ajuste anterior.  
  
 Si el `time` parámetro es una hora ambigua, el método supone que es una hora estándar. (Una hora ambigua es uno que se pueden asignar a una hora estándar o a un horario de verano en la zona horaria local). Si `time` es una hora no válida, el método resta la hora local a la hora UTC de la zona horaria local para devolver la hora UTC de desplazamiento. (Una hora no válida es aquella que no existe debido a la aplicación de reglas de ajuste al horario de verano).  
  
 Dado que `time` se interpreta en relación con la zona horaria actual del sistema actual, la fecha y hora devuelto por este método pueden ser diferente si se ejecuta una aplicación en equipos distintos o en el mismo equipo con zonas horarias diferentes. Casos en que un valor de fecha y hora debe representar un punto único y no ambiguo en el tiempo, use un <xref:System.DateTimeOffset> valor para representar la hora local.  
  
 El <xref:System.TimeZone.ToUniversalTime%2A> método corresponde a la <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> sobrecarga del método con un <xref:System.DateTime> parámetro cuyos <xref:System.DateTime.Kind%2A> propiedad no es igual a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Siempre que sea posible, utilice el <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> sobrecarga del método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>