<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b667dcf79e5ae762a2e599fd337d51ceea34b2c7" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37482410" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Tipo de parámetro del método que este delegado encapsula.</typeparam>
    <param name="obj">Parámetro del método que este delegado encapsula.</param>
    <summary>Encapsula un método que tiene un solo parámetro y no devuelve un valor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Action%601> delegado para pasar un método como un parámetro sin declarar explícitamente un delegado personalizado. El método encapsulado debe corresponder a la firma del método que está definida por este delegado. Esto significa que el método encapsulado debe tener un parámetro que se pasa por valor, y no debe devolver un valor. (En C#, el método debe devolver `void`. En Visual Basic, debe definirse mediante el `Sub`...`End Sub` construcción. También puede ser un método que devuelve un valor que se pasa por alto.) Normalmente, este método se usa para realizar una operación.  
  
> [!NOTE]
>  Para hacer referencia a un método que tiene un parámetro y devuelve un valor, use el tipo genérico <xref:System.Func%602> delegar en su lugar.  
  
 Cuando se usa el <xref:System.Action%601> delegado, no es necesario definir explícitamente un delegado que encapsula un método con un solo parámetro. Por ejemplo, el código siguiente declara explícitamente un delegado denominado `DisplayMessage` y le asigna una referencia a cualquiera la <xref:System.Console.WriteLine%2A> método o la `ShowWindowsMessage` método a su instancia de delegado.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 En el ejemplo siguiente se simplifica este código creando instancias de la <xref:System.Action%601> delegado en lugar de definir explícitamente un nuevo delegado y asignarle un método con nombre.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 También puede usar el <xref:System.Action%601> delegar con métodos anónimos en C#, como se muestra en el ejemplo siguiente. (Para obtener una introducción a los métodos anónimos, consulte [métodos anónimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 También puede asignar una expresión lambda a una <xref:System.Action%601> delegar la instancia, como se muestra en el ejemplo siguiente. (Para obtener una introducción a las expresiones lambda, vea [expresiones Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 El <xref:System.Collections.Generic.List%601.ForEach%2A> y <xref:System.Array.ForEach%2A> métodos aceptan una <xref:System.Action%601> delegado como parámetro. El método encapsulado por el delegado permite realizar una acción en cada elemento de la matriz o lista. El ejemplo se usa el <xref:System.Collections.Generic.List%601.ForEach%2A> método para proporcionar una ilustración.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.Action%601> delegado para imprimir el contenido de un <xref:System.Collections.Generic.List%601> objeto. En este ejemplo, el `Print` método se usa para mostrar el contenido de la lista en la consola. Además, el ejemplo de C# también muestra el uso de métodos anónimos para mostrar el contenido en la consola. Tenga en cuenta que el ejemplo no declara explícitamente un <xref:System.Action%601> variable. En su lugar, pasa una referencia a un método que toma un parámetro único y que no devuelve un valor para el <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> método, cuyo único parámetro es un <xref:System.Action%601> delegar. De forma similar, en el ejemplo de C#, un <xref:System.Action%601> delegado no es crear instancias explícitamente porque la firma del método anónimo coincide con la firma de la <xref:System.Action%601> delegado que espera el <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> método.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>