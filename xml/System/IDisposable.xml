<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee9987222f28a3d2503b139f93b9f3068e0c994" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430258" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e8363-101">Proporciona un mecanismo para liberar recursos no administrados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e8363-101">Provides a mechanism for releasing unmanaged resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8363-102">Es el uso principal de esta interfaz liberar recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="e8363-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="e8363-103">El recolector de elementos no utilizados libera automáticamente la memoria asignada a un objeto administrado cuando ya no se utiliza ese objeto.</span><span class="sxs-lookup"><span data-stu-id="e8363-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="e8363-104">Sin embargo, no es posible predecir cuándo se realizará la recolección de elementos.</span><span class="sxs-lookup"><span data-stu-id="e8363-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="e8363-105">Además, el recolector de elementos no utilizados no tiene ningún conocimiento de los recursos no administrados como identificadores de ventanas o abrir archivos y secuencias.</span><span class="sxs-lookup"><span data-stu-id="e8363-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="e8363-106">Use la <xref:System.IDisposable.Dispose%2A> método de esta interfaz para liberar explícitamente los recursos no administrados que junto con el recolector de elementos no utilizados.</span><span class="sxs-lookup"><span data-stu-id="e8363-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="e8363-107">El consumidor de un objeto puede llamar a este método cuando el objeto ya no es necesario.</span><span class="sxs-lookup"><span data-stu-id="e8363-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e8363-108">Es una novedad para agregar el <xref:System.IDisposable> interfaz a una clase existente.</span><span class="sxs-lookup"><span data-stu-id="e8363-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="e8363-109">Porque ya existentes a los consumidores de su tipo no pueden llamar a <xref:System.IDisposable.Dispose%2A>, no puede estar seguro de que se publican los recursos no administrados mantenidos por su tipo.</span><span class="sxs-lookup"><span data-stu-id="e8363-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="e8363-110">Dado que la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación es invocada por el consumidor de un tipo cuando ya no son necesarios los recursos que pertenecen a una instancia, o bien debe encapsular el objeto administrado en un <xref:System.Runtime.InteropServices.SafeHandle> (la alternativa recomendada), o se debe invalidar <xref:System.Object.Finalize%2A?displayProperty=nameWithType>para liberar recursos no administrados en caso de que el consumidor olvide llamar a <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="e8363-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e8363-111">En .NET Framework, el compilador de C++ admite la eliminación determinista de recursos y no se permite la implementación directa de la <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e8363-112">Para obtener una explicación detallada acerca de cómo esta interfaz y la <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método se usan, vea la [recolección](~/docs/standard/garbage-collection/index.md) y [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) temas.</span><span class="sxs-lookup"><span data-stu-id="e8363-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="e8363-113">Usar un objeto que implementa la interfaz IDisposable</span><span class="sxs-lookup"><span data-stu-id="e8363-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="e8363-114">Si la aplicación simplemente utiliza un objeto que implementa el <xref:System.IDisposable> interfaz, debe llamar a del objeto <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación cuando haya terminado de usarlo.</span><span class="sxs-lookup"><span data-stu-id="e8363-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="e8363-115">Dependiendo del lenguaje de programación, puede hacerlo de dos maneras:</span><span class="sxs-lookup"><span data-stu-id="e8363-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="e8363-116">Mediante el lenguaje construir como el `using` instrucción en C# y Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e8363-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="e8363-117">Al ajustar la llamada a la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación en un `try` / `finally` bloque.</span><span class="sxs-lookup"><span data-stu-id="e8363-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8363-118">Documentación de los tipos que implementan <xref:System.IDisposable> tenga en cuenta este hecho e incluir un recordatorio para llamar a su <xref:System.IDisposable.Dispose%2A> implementación.</span><span class="sxs-lookup"><span data-stu-id="e8363-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="e8363-119">La instrucción de C# y Visual Basic utilizan</span><span class="sxs-lookup"><span data-stu-id="e8363-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="e8363-120">Si su lenguaje admite una construcción como la [con](~/docs/csharp/language-reference/keywords/using.md) instrucción en C# y la [mediante](~/docs/visual-basic/language-reference/statements/using-statement.md) instrucción en Visual Basic, puede usar en lugar de llamar explícitamente a <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> usted mismo.</span><span class="sxs-lookup"><span data-stu-id="e8363-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="e8363-121">En el ejemplo siguiente se usa este enfoque en la definición de un `WordCount` clase que conserva la información acerca de un archivo y el número de palabras en ella.</span><span class="sxs-lookup"><span data-stu-id="e8363-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="e8363-122">El `using` instrucción es realmente una comodidad sintáctica.</span><span class="sxs-lookup"><span data-stu-id="e8363-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="e8363-123">En tiempo de compilación, el compilador de lenguaje implementa el lenguaje intermedio (IL) para una `try` / `finally` bloque.</span><span class="sxs-lookup"><span data-stu-id="e8363-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="e8363-124">Para obtener más información sobre la `using` instrucción, consulte la [instrucción Using](~/docs/visual-basic/language-reference/statements/using-statement.md) o [mediante la instrucción](~/docs/csharp/language-reference/keywords/using-statement.md) temas.</span><span class="sxs-lookup"><span data-stu-id="e8363-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="e8363-125">El bloque Try/Finally</span><span class="sxs-lookup"><span data-stu-id="e8363-125">The Try/Finally block</span></span>  
 <span data-ttu-id="e8363-126">Si su lenguaje de programación no admite una construcción como la `using` instrucción en C# o Visual Basic, o si no desea usarlo, puede llamar a la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación desde el `finally` bloquear de un `try` / `finally` instrucción.</span><span class="sxs-lookup"><span data-stu-id="e8363-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="e8363-127">En el ejemplo siguiente se reemplaza el `using` bloquear en el ejemplo anterior con un `try` / `finally` bloque.</span><span class="sxs-lookup"><span data-stu-id="e8363-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="e8363-128">Para obtener más información sobre la `try` / `finally` de patrón, vea [intente... Catch... Finally (instrucción)](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), o [try-finally (instrucción)](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="e8363-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="e8363-129">Implementar IDisposable</span><span class="sxs-lookup"><span data-stu-id="e8363-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="e8363-130">Debe implementar <xref:System.IDisposable> solo si el tipo utiliza recursos no administrados directamente.</span><span class="sxs-lookup"><span data-stu-id="e8363-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="e8363-131">Pueden llamar los consumidores de su tipo de su <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación para liberar recursos cuando ya no es necesaria la instancia.</span><span class="sxs-lookup"><span data-stu-id="e8363-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="e8363-132">Para controlar los casos en que producirá un error al llamar a <xref:System.IDisposable.Dispose%2A>, debería usar una clase derivada de <xref:System.Runtime.InteropServices.SafeHandle> encapsular los recursos no administrados, o se debe invalidar el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método para un tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="e8363-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="e8363-133">En cualquier caso, use el <xref:System.IDisposable.Dispose%2A> método para realizar cualquier limpieza es necesaria después de usar los recursos no administrados, como la liberación o el restablecimiento de los recursos no administrados.</span><span class="sxs-lookup"><span data-stu-id="e8363-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e8363-134">Si va a definir una clase base que utiliza los recursos no administrados y que tiene, o es probable que tenga, subclases que deben estar en su lugar, debe implementar la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> método y proporcionar una segunda sobrecarga de `Dispose`, como se describe en el siguiente sección.</span><span class="sxs-lookup"><span data-stu-id="e8363-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="e8363-135">IDisposable y la jerarquía de herencia</span><span class="sxs-lookup"><span data-stu-id="e8363-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="e8363-136">Debe implementar una clase base con subclases que deben ser descartables <xref:System.IDisposable> como se indica a continuación.</span><span class="sxs-lookup"><span data-stu-id="e8363-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="e8363-137">Debe usar este patrón siempre que implemente <xref:System.IDisposable> en cualquier tipo que no es `sealed` (`NotInheritable` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e8363-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="e8363-138">Debe proporcionar una pública, no virtual <xref:System.IDisposable.Dispose> método y protegidos virtual `Dispose(Boolean disposing)` método.</span><span class="sxs-lookup"><span data-stu-id="e8363-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="e8363-139">El <xref:System.IDisposable.Dispose> debe llamar al método `Dispose(true)` y se debe suprimir la finalización de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="e8363-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="e8363-140">El tipo base no debe incluir ningún finalizador.</span><span class="sxs-lookup"><span data-stu-id="e8363-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="e8363-141">El siguiente fragmento de código refleja el patrón de dispose para las clases base.</span><span class="sxs-lookup"><span data-stu-id="e8363-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="e8363-142">Se supone que el tipo no reemplaza el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="e8363-143">Si invalida el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método, la clase debe implementar el patrón siguiente.</span><span class="sxs-lookup"><span data-stu-id="e8363-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="e8363-144">Las subclases deben implementar el patrón desechable de la siguiente forma:</span><span class="sxs-lookup"><span data-stu-id="e8363-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="e8363-145">Deben invalidar `Dispose(Boolean)` y llamar a la implementación `Dispose(Boolean)` de la clase base.</span><span class="sxs-lookup"><span data-stu-id="e8363-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="e8363-146">Pueden proporcionar un finalizador si es necesario.</span><span class="sxs-lookup"><span data-stu-id="e8363-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="e8363-147">El finalizador debe llamar a `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="e8363-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="e8363-148">Tenga en cuenta que las clases derivadas no propios implementen el <xref:System.IDisposable> interfaz y no incluyen una sin parámetros <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e8363-149">Solo invalidan la clase base `Dispose(Boolean)` método.</span><span class="sxs-lookup"><span data-stu-id="e8363-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="e8363-150">El siguiente fragmento de código refleja el patrón de dispose para las clases derivadas.</span><span class="sxs-lookup"><span data-stu-id="e8363-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="e8363-151">Se supone que el tipo no reemplaza el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="e8363-152">En el ejemplo siguiente se muestra cómo crear una clase de recurso que implementa el <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="e8363-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e8363-153">Realiza tareas definidas por la aplicación asociadas a la liberación o al restablecimiento de recursos no administrados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e8363-153">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8363-154">Utilice este método para cerrar o liberar recursos no administrados como archivos, secuencias e identificadores mantenidos por una instancia de la clase que implementa esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="e8363-154">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="e8363-155">Por convención, este método se utiliza para todas las tareas asociadas con la liberación de los recursos mantenidos por un objeto, o preparar un objeto para su reutilización.</span><span class="sxs-lookup"><span data-stu-id="e8363-155">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e8363-156">Si está utilizando una clase que implementa el <xref:System.IDisposable> interfaz, debe llamar a su <xref:System.IDisposable.Dispose%2A> cuando haya terminado de usar la clase de implementación.</span><span class="sxs-lookup"><span data-stu-id="e8363-156">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="e8363-157">Para obtener más información, vea la sección "Usar un objeto que implementa la interfaz IDisposable" en el <xref:System.IDisposable> tema.</span><span class="sxs-lookup"><span data-stu-id="e8363-157">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e8363-158">Al implementar este método, asegúrese de que todos mantienen recursos se liberan mediante la propagación de la llamada a través de la jerarquía de contención.</span><span class="sxs-lookup"><span data-stu-id="e8363-158">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="e8363-159">Por ejemplo, si un objeto A asigna un objeto B, y el objeto B asigna un objeto C, a continuación, un <xref:System.IDisposable.Dispose%2A> implementación debe llamar a <xref:System.IDisposable.Dispose%2A> en B, que debe llamar a su vez <xref:System.IDisposable.Dispose%2A> en C.</span><span class="sxs-lookup"><span data-stu-id="e8363-159">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e8363-160">El compilador de C++ admite la eliminación determinista de recursos y no se permite la implementación directa de la <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-160">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e8363-161">Un objeto también debe llamar a la <xref:System.IDisposable.Dispose%2A> método de su clase base si la clase base implementa <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="e8363-161">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="e8363-162">Para obtener más información acerca de cómo implementar <xref:System.IDisposable> en una clase base y sus subclases, vea la sección "IDisposable y la jerarquía de herencia" en el <xref:System.IDisposable> tema.</span><span class="sxs-lookup"><span data-stu-id="e8363-162">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e8363-163">Si un objeto <xref:System.IDisposable.Dispose%2A> método se llama más de una vez, el objeto debe pasar por alto todas las llamadas después de la primera de ellas.</span><span class="sxs-lookup"><span data-stu-id="e8363-163">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="e8363-164">El objeto no debe producir una excepción si su <xref:System.IDisposable.Dispose%2A> método se llama varias veces.</span><span class="sxs-lookup"><span data-stu-id="e8363-164">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="e8363-165">Métodos de instancia distinto de <xref:System.IDisposable.Dispose%2A> puede producir un <xref:System.ObjectDisposedException> cuando los recursos ya se eliminan.</span><span class="sxs-lookup"><span data-stu-id="e8363-165">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="e8363-166">Los usuarios pueden esperar un tipo de recurso para utilizar una convención determinada para indicar un estado de asignación frente a un estado de liberación.</span><span class="sxs-lookup"><span data-stu-id="e8363-166">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="e8363-167">Un ejemplo de esto es las clases de secuencia, que tradicionalmente se consideran como abiertas o cerradas.</span><span class="sxs-lookup"><span data-stu-id="e8363-167">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="e8363-168">El implementador de una clase que tiene una convención de este tipo puede optar por implementar un método público con un nombre personalizado, como `Close`, que llama el <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-168">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e8363-169">Dado que la <xref:System.IDisposable.Dispose%2A> debe llamar explícitamente al método, siempre hay un riesgo de que los recursos no administrados no será liberada, puesto que el consumidor de un objeto no se puede llamar a su <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-169">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e8363-170">Hay dos formas de evitar esta situación:</span><span class="sxs-lookup"><span data-stu-id="e8363-170">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="e8363-171">Ajustar el recurso administrado en un objeto derivado de <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e8363-171">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e8363-172">Su <xref:System.IDisposable.Dispose%2A> implementación, a continuación, llama a la <xref:System.IDisposable.Dispose%2A> método de la <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instancias.</span><span class="sxs-lookup"><span data-stu-id="e8363-172">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="e8363-173">Para obtener más información, consulte la sección "La alternativa SafeHandle" en el <xref:System.Object.Finalize%2A?displayProperty=nameWithType> tema.</span><span class="sxs-lookup"><span data-stu-id="e8363-173">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="e8363-174">Implementar un finalizador para liberar recursos cuando <xref:System.IDisposable.Dispose%2A> no se llama.</span><span class="sxs-lookup"><span data-stu-id="e8363-174">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="e8363-175">De forma predeterminada, el recolector de elementos no utilizados llama automáticamente a un finalizador del objeto antes de reclamar su memoria.</span><span class="sxs-lookup"><span data-stu-id="e8363-175">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="e8363-176">Sin embargo, si la <xref:System.IDisposable.Dispose%2A> método se realizó llama, normalmente no es necesario para el recolector de elementos no utilizados llame al finalizador del objeto desechado.</span><span class="sxs-lookup"><span data-stu-id="e8363-176">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="e8363-177">Para evitar una finalización automática, <xref:System.IDisposable.Dispose%2A> pueden llamar las implementaciones de la <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-177">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e8363-178">Cuando se usa un objeto que tiene acceso a recursos no administrados, como un <xref:System.IO.StreamWriter>, una práctica recomendada consiste en crear la instancia con un `using` instrucción.</span><span class="sxs-lookup"><span data-stu-id="e8363-178">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="e8363-179">El `using` instrucción cierra automáticamente la secuencia y llamadas <xref:System.IDisposable.Dispose%2A> en el objeto cuando se haya completado el código que lo está usando.</span><span class="sxs-lookup"><span data-stu-id="e8363-179">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="e8363-180">Para obtener un ejemplo, vea la <xref:System.IO.StreamWriter> clase.</span><span class="sxs-lookup"><span data-stu-id="e8363-180">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8363-181">En el ejemplo siguiente se muestra cómo puede implementar la <xref:System.IDisposable.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="e8363-181">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>