<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="440e566843bd8a6f7aa2849b29bdd2300c580fd1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39853302" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define un método que admite formatos personalizados del valor de un objeto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ICustomFormatter> interfaz incluye un único método, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Cuando se implementa esta interfaz mediante un tipo de valor o referencia, el <xref:System.ICustomFormatter.Format%2A> método devuelve una representación de cadena de formato personalizado del valor de un objeto.  
  
 Normalmente, el <xref:System.ICustomFormatter> interfaz se implementa con la <xref:System.IFormatProvider> interfaz para personalizar el comportamiento de los dos métodos de formato de cadena compuesta .NET Framework que incluyen un <xref:System.IFormatProvider> parámetro. En concreto, el <xref:System.ICustomFormatter> interfaz puede proporcionar formatos personalizados del valor de un objeto pasado a la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> y <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> métodos.  
  
 Proporciona una representación del valor de un objeto personalizada requiere que haga lo siguiente:  
  
1.  Defina una clase que implementa el <xref:System.ICustomFormatter> interfaz y su miembro único, el <xref:System.ICustomFormatter.Format%2A> método.  
  
2.  Defina una clase que implementa el <xref:System.IFormatProvider> interfaz y su miembro único, el <xref:System.IFormatProvider.GetFormat%2A> método. El <xref:System.IFormatProvider.GetFormat%2A> método devuelve una instancia de su <xref:System.ICustomFormatter> implementación. A menudo, una sola clase implementa tanto <xref:System.ICustomFormatter> y <xref:System.IFormatProvider>. En del ese caso, la clase `GetFormat` implementación simplemente devuelve una instancia de sí mismo.  
  
3.  Pase el <xref:System.IFormatProvider> implementación como el `provider` argumento de la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método o un método comparable.  
  
 El método de .NET Framework, a continuación, usará el formato personalizado en lugar de su propio.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa <xref:System.ICustomFormatter> para permitir que el formato binario, octales y hexadecimales de los valores enteros. En este ejemplo, una clase única, `IBinaryFormatter`, implementa tanto <xref:System.ICustomFormatter> y <xref:System.IFormatProvider>. Su <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método determina si el `formatType` parámetro representa un <xref:System.ICustomFormatter> tipo. Si es así, `BinaryFormatter` devuelve una instancia de sí mismo; de lo contrario, devuelve `null`. Su <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementación determina si el parámetro de formato es una de las tres cadenas de formato admitidos ("B" para el binario, "O" para octal y "H" de hexadecimal) y da formato a la `arg` parámetro adecuadamente. De lo contrario, si `arg` no `null`, llama a la `arg` del parámetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación, si existe alguno, o su sin parámetros `ToString` método, si no lo hace. Si el valor de `arg` es `null`, el método devuelve <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` a continuación, se puede usar para proporcionar un formato personalizado pasando un `BinaryFormatter` objeto como el `provider` parámetro de la <xref:System.String.Format%2A> método, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Common language runtime intenta usar su <see cref="T:System.ICustomFormatter" /> implementación para cada elemento de formato de cadena de formato compuesto. Como resultado, debe esperar que su <see cref="T:System.ICustomFormatter" /> implementación se llamará para proporcionar servicios de formato a los objetos o valores que no se diseñaron para tratar. En estos casos, su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método debe llamar al método de formato adecuado para ese objeto o valor.  Hay dos tipos de <see cref="T:System.ICustomFormatter" /> implementaciones: intrínseca y extensión.  Las implementaciones intrínsecas son implementaciones que proporcionan el formato personalizado para un objeto definido por la aplicación. En este caso, la implementación debe incluir lo siguiente:-una definición de cadenas de formato que definen el formato del objeto. Cadenas de formato son opcionales. Normalmente, una cadena de formato "G" o "g" define el formato general (o más frecuente). Sin embargo, es libre para definir las cadenas de formato que elija. También tiene libertad para decidir si distinguen entre mayúsculas y minúsculas o mayúsculas y minúsculas.  -Una prueba para asegurarse de que el tipo del objeto pasado a su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método es el tipo definido por la aplicación. Si no es así, debe llamar a los del objeto <see cref="T:System.IFormattable" /> implementación, si existe alguno, o su <see cref="M:System.Object.ToString" /> método, si no es así. Debe estar preparado para controlar las excepciones que podrían producir estas llamadas al método.  -Código para controlar una cadena de formato nula, si su implementación es compatible con las cadenas de formato. El enfoque más común es reemplazar una cadena de formato null con el especificador de formato general.  -Código para controlar las cadenas de formato que admite su implementación.  -Código para controlar cadenas de formato que no se admite. El enfoque más común es producir una <see cref="T:System.FormatException" />, aunque puede proporcionar el formato predeterminado.  Las implementaciones de extensión son implementaciones que proporcionan el formato personalizado para un tipo que ya tiene compatibilidad con el formato. Por ejemplo, podría definir un <c>CustomerNumberFormatter</c> que da formato a un tipo integral con guiones entre los dígitos concretos. En este caso, la implementación debe incluir lo siguiente:-una definición de cadenas de formato que extienden el formato del objeto. Estas cadenas de formato son necesarias, pero no deben estar en conflicto con las cadenas de formato existentes del tipo. Por ejemplo, si está ampliando formato para el <see cref="T:System.Int32" /> tipo, no debe implementar los especificadores de formato "C", "D", "E", "F" y "G", entre otros.  -Una prueba de que el tipo del objeto pasa a su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método es un tipo cuyo formato admite su extensión. Si no es así, llame del objeto <see cref="T:System.IFormattable" /> implementación, si existe, o el objeto sin parámetros <see cref="M:System.Object.ToString" /> método, si no es así. Debe estar preparado para controlar las excepciones que podrían producir estas llamadas al método.  -Código para controlar las cadenas de formato que es compatible su extensión.  -Código para controlar las cadenas de formato que no es compatible con la extensión. Se deben pasar el tipo <see cref="T:System.IFormattable" /> implementación. Debe estar preparado para controlar las excepciones que podrían producir estas llamadas al método.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Cadena de formato que contiene las especificaciones de formato.</param>
        <param name="arg">Objeto al que se va a aplicar el formato.</param>
        <param name="formatProvider">Objeto que proporciona información de formato sobre la instancia actual.</param>
        <summary>Convierte el valor del objeto especificado en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</summary>
        <returns>Representación en forma de cadena del valor de <paramref name="arg" />, con el formato especificado por <paramref name="format" /> y <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> es un método de devolución de llamada. Se llama a un método que admite formatos personalizados, como <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> o <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. La implementación se llama una vez para cada elemento de formato de un [cadena de formato compuesto](~/docs/standard/base-types/composite-formatting.md). Por ejemplo, en la siguiente instrucción, el <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> método se llama tres veces.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 El `arg` parámetro es el objeto en la lista de objetos cuya posición de base cero que corresponde al índice de un elemento de formato determinado.  
  
 El `format` parámetro contiene una cadena de formato, que es el `formatString` componente de un elemento de formato. Si el elemento de formato no tiene ningún `formatString` componente, el valor de `format` es `null`. Si `format` es `null`, según el tipo de `arg`, es posible que pueda usar la especificación de formato predeterminado de su elección.  
  
 El `formatProvider` parámetro es el <xref:System.IFormatProvider> implementación que proporciona un formato para `arg`. Normalmente, es una instancia de su <xref:System.ICustomFormatter> implementación. Si `formatProvider` es `null`, omita este parámetro.  
  
 La implementación de la <xref:System.ICustomFormatter.Format%2A> método debe incluir la siguiente funcionalidad para .NET Framework pueda proporcionar formato no se admite. Si el método de formato no es compatible con un formato, determine si el objeto que se va a aplicar el formato implementa el <xref:System.IFormattable> interfaz. Si lo hace, invocar el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> método de dicha interfaz. Invocar en caso contrario, el valor predeterminado <xref:System.Object.ToString%2A?displayProperty=nameWithType> método del objeto subyacente. El código siguiente muestra este modelo.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa <xref:System.ICustomFormatter> para permitir que el formato binario, octales y hexadecimales de los valores enteros. Su <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementación determina si el parámetro de formato es una de las tres cadenas de formato admitidos ("B" para el binario, "O" para octal y "H" de hexadecimal) y da formato a la `arg` parámetro adecuadamente. De lo contrario, si `arg` no `null`, llama a la `arg` del parámetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación, si existe alguno, o su sin parámetros `ToString` método, si no lo hace. Si el valor de `arg` es `null`, el método devuelve <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` a continuación, se puede usar para proporcionar un formato personalizado pasando un `BinaryFormatter` objeto como el `provider` parámetro de la <xref:System.String.Format%2A> método, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>