<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICustomFormatter.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56002c7bffa27e626bfd04916c139d411974b86fc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6002c7bffa27e626bfd04916c139d411974b86fc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ICustomFormatter">
          <source>Defines a method that supports custom formatting of the value of an object.</source>
          <target state="translated">Define un método que admite formatos personalizados del valor de un objeto.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface includes a single method, <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interfaz incluye un único método, <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>When this interface is implemented by a reference or value type, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method returns a custom-formatted string representation of an object's value.</source>
          <target state="translated">Cuando se implementa esta interfaz mediante un tipo de valor o referencia, la <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> método devuelve una representación de cadena de formato personalizado del valor de un objeto.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface is implemented with the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> parameter.</source>
          <target state="translated">Normalmente, el <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interfaz se implementa con la <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interfaz para personalizar el comportamiento de los dos métodos de formato de cadena compuesta .NET Framework que incluyen un <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Specifically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface can provide custom formatting of the value of an object passed to the <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">En concreto, el <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interfaz puede proporcionar formatos personalizados del valor de un objeto que se pasa a la <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> y <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Providing a custom representation of an object's value requires that you do the following:</source>
          <target state="translated">Proporciona una representación personalizada del valor de un objeto, se necesita que haga lo siguiente:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method.</source>
          <target state="translated">Defina una clase que implementa el <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interfaz y su miembro único, la <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.</source>
          <target state="translated">Defina una clase que implementa el <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interfaz y su miembro único, la <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns an instance of your <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> método devuelve una instancia de su <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Often, a single class implements both <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">A menudo, una sola clase implementa tanto <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> y <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In that case, the class's <ph id="ph1">`GetFormat`</ph> implementation just returns an instance of itself.</source>
          <target state="translated">En del ese caso, la clase <ph id="ph1">`GetFormat`</ph> implementación simplemente devuelve una instancia de sí mismo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Pass the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation as the <ph id="ph2">`provider`</ph> argument of the <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method or a comparable method.</source>
          <target state="translated">Pasar el <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementación como el <ph id="ph2">`provider`</ph> argumento de la <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> método o un método comparable.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The .NET Framework method will then use your custom formatting instead of its own.</source>
          <target state="translated">El método de .NET Framework utilizará el formato personalizado en lugar del suyo propio.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">En el ejemplo siguiente se implementa <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> para permitir el formato binario, octales y hexadecimales de valores enteros.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this example, a single class, <ph id="ph1">`IBinaryFormatter`</ph>, implements both <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">En este ejemplo, una clase única, <ph id="ph1">`IBinaryFormatter`</ph>, implementa tanto <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> y <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method determines whether the <ph id="ph2">`formatType`</ph> parameter represents an <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> type.</source>
          <target state="translated">Su <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> método determina si el <ph id="ph2">`formatType`</ph> parámetro representa un <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it does, <ph id="ph1">`BinaryFormatter`</ph> returns an instance of itself; otherwise, it returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Si es así, <ph id="ph1">`BinaryFormatter`</ph> devuelve una instancia de sí misma; en caso contrario, devuelve <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">Su <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementación determina si el parámetro de formato es una de las tres cadenas de formato compatibles ("B" para el binario, "O" para octal y "H" para hexadecimal) y da formato a la <ph id="ph2">`arg`</ph> parámetro adecuadamente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">De lo contrario, si <ph id="ph1">`arg`</ph> no es <ph id="ph2">`null`</ph>, llama a la <ph id="ph3">`arg`</ph> del parámetro <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementación, si existe alguno, o su sin parámetros <ph id="ph5">`ToString`</ph> método, si no lo hace.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">`arg`</ph> es <ph id="ph2">`null`</ph>, el método devuelve <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> a continuación, puede usarse para proporcionar el formato personalizado pasando un <ph id="ph2">`BinaryFormatter`</ph> objeto como el <ph id="ph3">`provider`</ph> parámetro de la <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> método, tal como se muestra en el ejemplo siguiente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The common language runtime attempts to use your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation for every format item in a composite format string.</source>
          <target state="translated">Common language runtime intenta utilizar su <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementación para cada elemento de formato de cadena de formato compuesto.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>As a result, you should expect that your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</source>
          <target state="translated">Como resultado, debe esperar que la <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementación se llamará para proporcionar servicios de formato a los objetos o valores que es no diseñaron para procesarlas.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In these cases, your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method must call the appropriate formatting method for that object or value.</source>
          <target state="translated">En estos casos, su <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> método debe llamar al método de formato adecuado para ese objeto o valor.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>There are two kinds of <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementations: intrinsic and extension.</source>
          <target state="translated">Hay dos tipos de <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> las implementaciones: intrínseca y extensión.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</source>
          <target state="translated">Las implementaciones intrínsecas son implementaciones que proporcionan el formato personalizado para un objeto definido por la aplicación.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">En este caso, la implementación debe incluir lo siguiente:</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that define the formatting of the object.</source>
          <target state="translated">Una definición de cadenas de formato que define el formato del objeto.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Format strings are optional.</source>
          <target state="translated">Cadenas de formato son opcionales.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, a "G" or "g" format string defines the general (or most commonly used) format.</source>
          <target state="translated">Normalmente, una cadena de formato "G" o "g" define el formato general (o el uso más frecuente).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>However, you are free to define any format strings that you choose.</source>
          <target state="translated">Sin embargo, tiene libertad para definir las cadenas de formato que elija.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You are also free to decide whether they are case-sensitive or case-insensitive.</source>
          <target state="translated">También tiene libertad para decidir si distinguen entre mayúsculas y minúsculas o mayúsculas de minúsculas.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test to ensure that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is your application-defined type.</source>
          <target state="translated">Una prueba para asegurarse de que el tipo del objeto pasa a su <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> método es el tipo definido por la aplicación.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, you should call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or its <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">Si no es así, se debe llamar el objeto <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementación, si existe alguno, o su <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> método, si no es así.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">Debe estar preparado para controlar las excepciones que se podrían producir estas llamadas al método.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle a null format string, if your implementation supports format strings.</source>
          <target state="translated">Código para controlar una cadena de formato nula, si su implementación admite las cadenas de formato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to replace a null format string with the general format specifier.</source>
          <target state="translated">El enfoque más común es reemplazar una cadena de formato nula con el especificador de formato general.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your implementation supports.</source>
          <target state="translated">Código para controlar las cadenas de formato que admite la implementación.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle format strings that you do not support.</source>
          <target state="translated">Código para controlar las cadenas de formato que no se admiten.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to throw a <ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>, although you can provide default formatting.</source>
          <target state="translated">El enfoque más común consiste en producir una <ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>, aunque puede proporcionar el formato predeterminado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</source>
          <target state="translated">Las implementaciones de extensión son implementaciones que proporcionan el formato personalizado para un tipo que ya tiene compatibilidad con el formato.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, you could define a <bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept> that formats an integral type with hyphens between specific digits.</source>
          <target state="translated">Por ejemplo, puede definir un <bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept> que aplica formato a un tipo integral con guiones entre los dígitos concretos.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">En este caso, la implementación debe incluir lo siguiente:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that extend the formatting of the object.</source>
          <target state="translated">Una definición de cadenas de formato que extienden el formato del objeto.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These format strings are required, but they must not conflict with the type's existing format strings.</source>
          <target state="translated">Estas cadenas de formato son necesarias, pero no deben estar en conflicto con cadenas de formato existente del tipo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, if you are extending formatting for the <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</source>
          <target state="translated">Por ejemplo, si está ampliando formato para el <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> tipo, no debería implementar los especificadores de formato "C", "D", "E", "F" y "G", entre otros.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is a type whose formatting your extension supports.</source>
          <target state="translated">Una prueba de que el tipo del objeto pasa a su <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> método es un tipo cuyo formato admite su extensión.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or the object's parameterless <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">Si no es así, llaman al objeto de la <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementación, si existe alguno, o el objeto de la sin parámetros <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> método, si no es así.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">Debe estar preparado para controlar las excepciones que se podrían producir estas llamadas al método.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension supports.</source>
          <target state="translated">Código para controlar las cadenas de formato que admite la extensión.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension does not support.</source>
          <target state="translated">Código para controlar las cadenas de formato que no es compatible con la extensión.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These should be passed on to the type's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation.</source>
          <target state="translated">Estos se deberían pasar al tipo <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">Debe estar preparado para controlar las excepciones que se podrían producir estas llamadas al método.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>A format string containing formatting specifications.</source>
          <target state="translated">Cadena de formato que contiene las especificaciones de formato.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object to format.</source>
          <target state="translated">Objeto al que se va a aplicar el formato.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object that supplies format information about the current instance.</source>
          <target state="translated">Objeto que proporciona información de formato sobre la instancia actual.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</source>
          <target state="translated">Convierte el valor del objeto especificado en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The string representation of the value of <ph id="ph1">&lt;paramref name="arg" /&gt;</ph>, formatted as specified by <ph id="ph2">&lt;paramref name="format" /&gt;</ph> and <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph>.</source>
          <target state="translated">Representación en forma de cadena del valor de <ph id="ph1">&lt;paramref name="arg" /&gt;</ph>, con el formato especificado por <ph id="ph2">&lt;paramref name="format" /&gt;</ph> y <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> is a callback method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> es un método de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>It is called by a method that supports custom formatting, such as <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se llama a un método que admite formatos personalizados, como <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> o <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The implementation is called once for each format item in a <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">La implementación se llama una vez para cada elemento de formato de un <bpt id="p1">[</bpt>cadena de formato compuesto<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>For example, in the following statement, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> method is called three times.</source>
          <target state="translated">Por ejemplo, en la siguiente instrucción, la <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> método se llama tres veces.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`arg`</ph> parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</source>
          <target state="translated">El <ph id="ph1">`arg`</ph> parámetro es el objeto en la lista de objetos cuya posición basada en cero se corresponde con el índice de un elemento de formato determinado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter contains a format string, which is the <ph id="ph2">`formatString`</ph> component of a format item.</source>
          <target state="translated">El <ph id="ph1">`format`</ph> parámetro contiene una cadena de formato, que es el <ph id="ph2">`formatString`</ph> componente de un elemento de formato.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If the format item has no <ph id="ph1">`formatString`</ph> component, the value of <ph id="ph2">`format`</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Si el elemento de formato no tiene ningún <ph id="ph1">`formatString`</ph> componente, el valor de <ph id="ph2">`format`</ph> es <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph>, depending on the type of <ph id="ph3">`arg`</ph>, you may be able to use the default format specification of your choice.</source>
          <target state="translated">Si <ph id="ph1">`format`</ph> es <ph id="ph2">`null`</ph>, según el tipo de <ph id="ph3">`arg`</ph>, es posible que pueda utilizar la especificación de formato predeterminado de su elección.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`formatProvider`</ph> parameter is the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting for <ph id="ph3">`arg`</ph>.</source>
          <target state="translated">El <ph id="ph1">`formatProvider`</ph> parámetro es el <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementación que proporciona un formato para <ph id="ph3">`arg`</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Typically, it is an instance of your <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated">Por lo general, es una instancia de su <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`formatProvider`</ph> is <ph id="ph2">`null`</ph>, ignore that parameter.</source>
          <target state="translated">Si <ph id="ph1">`formatProvider`</ph> es <ph id="ph2">`null`</ph>, omita este parámetro.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Your implementation of the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method must include the following functionality so the .NET Framework can provide formatting you do not support.</source>
          <target state="translated">La implementación de la <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> método debe incluir la siguiente funcionalidad para que proporcionen formato no son compatibles con .NET Framework.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If your format method does not support a format, determine whether the object being formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
          <target state="translated">Si el método de formato no es compatible con un formato, determine si el objeto que se va a aplicar el formato implementa la <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If it does, invoke the <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> method of that interface.</source>
          <target state="translated">Si lo hace, invoca el <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> método de dicha interfaz.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, invoke the default <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method of the underlying object.</source>
          <target state="translated">En caso contrario, invoque el valor predeterminado <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> método del objeto subyacente.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following code illustrates this pattern.</source>
          <target state="translated">El código siguiente muestra este patrón.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">En el ejemplo siguiente se implementa <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> para permitir el formato binario, octales y hexadecimales de valores enteros.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">Su <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementación determina si el parámetro de formato es una de las tres cadenas de formato compatibles ("B" para el binario, "O" para octal y "H" para hexadecimal) y da formato a la <ph id="ph2">`arg`</ph> parámetro adecuadamente.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">De lo contrario, si <ph id="ph1">`arg`</ph> no es <ph id="ph2">`null`</ph>, llama a la <ph id="ph3">`arg`</ph> del parámetro <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementación, si existe alguno, o su sin parámetros <ph id="ph5">`ToString`</ph> método, si no lo hace.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">`arg`</ph> es <ph id="ph2">`null`</ph>, el método devuelve <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> a continuación, puede usarse para proporcionar el formato personalizado pasando un <ph id="ph2">`BinaryFormatter`</ph> objeto como el <ph id="ph3">`provider`</ph> parámetro de la <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> método, tal como se muestra en el ejemplo siguiente.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>