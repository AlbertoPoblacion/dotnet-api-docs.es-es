<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6002c7bffa27e626bfd04916c139d411974b86fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728679" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define un método que admite formatos personalizados del valor de un objeto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ICustomFormatter> interfaz incluye un único método, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Cuando se implementa esta interfaz mediante un tipo de valor o referencia, la <xref:System.ICustomFormatter.Format%2A> método devuelve una representación de cadena de formato personalizado del valor de un objeto.  
  
 Normalmente, el <xref:System.ICustomFormatter> interfaz se implementa con la <xref:System.IFormatProvider> interfaz para personalizar el comportamiento de los dos métodos de formato de cadena compuesta .NET Framework que incluyen un <xref:System.IFormatProvider> parámetro. En concreto, el <xref:System.ICustomFormatter> interfaz puede proporcionar formatos personalizados del valor de un objeto que se pasa a la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> y <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> métodos.  
  
 Proporciona una representación personalizada del valor de un objeto, se necesita que haga lo siguiente:  
  
1.  Defina una clase que implementa el <xref:System.ICustomFormatter> interfaz y su miembro único, la <xref:System.ICustomFormatter.Format%2A> método.  
  
2.  Defina una clase que implementa el <xref:System.IFormatProvider> interfaz y su miembro único, la <xref:System.IFormatProvider.GetFormat%2A> método. El <xref:System.IFormatProvider.GetFormat%2A> método devuelve una instancia de su <xref:System.ICustomFormatter> implementación. A menudo, una sola clase implementa tanto <xref:System.ICustomFormatter> y <xref:System.IFormatProvider>. En del ese caso, la clase `GetFormat` implementación simplemente devuelve una instancia de sí mismo.  
  
3.  Pasar el <xref:System.IFormatProvider> implementación como el `provider` argumento de la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método o un método comparable.  
  
 El método de .NET Framework utilizará el formato personalizado en lugar del suyo propio.  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa <xref:System.ICustomFormatter> para permitir el formato binario, octales y hexadecimales de valores enteros. En este ejemplo, una clase única, `IBinaryFormatter`, implementa tanto <xref:System.ICustomFormatter> y <xref:System.IFormatProvider>. Su <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método determina si el `formatType` parámetro representa un <xref:System.ICustomFormatter> tipo. Si es así, `BinaryFormatter` devuelve una instancia de sí misma; en caso contrario, devuelve `null`. Su <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementación determina si el parámetro de formato es una de las tres cadenas de formato compatibles ("B" para el binario, "O" para octal y "H" para hexadecimal) y da formato a la `arg` parámetro adecuadamente. De lo contrario, si `arg` no es `null`, llama a la `arg` del parámetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación, si existe alguno, o su sin parámetros `ToString` método, si no lo hace. Si el valor de `arg` es `null`, el método devuelve <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` a continuación, puede usarse para proporcionar el formato personalizado pasando un `BinaryFormatter` objeto como el `provider` parámetro de la <xref:System.String.Format%2A> método, tal como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Common language runtime intenta utilizar su <see cref="T:System.ICustomFormatter" /> implementación para cada elemento de formato de cadena de formato compuesto. Como resultado, debe esperar que la <see cref="T:System.ICustomFormatter" /> implementación se llamará para proporcionar servicios de formato a los objetos o valores que es no diseñaron para procesarlas. En estos casos, su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método debe llamar al método de formato adecuado para ese objeto o valor.  
  
 Hay dos tipos de <see cref="T:System.ICustomFormatter" /> las implementaciones: intrínseca y extensión.  
  
 Las implementaciones intrínsecas son implementaciones que proporcionan el formato personalizado para un objeto definido por la aplicación. En este caso, la implementación debe incluir lo siguiente:  
  
-   Una definición de cadenas de formato que define el formato del objeto. Cadenas de formato son opcionales. Normalmente, una cadena de formato "G" o "g" define el formato general (o el uso más frecuente). Sin embargo, tiene libertad para definir las cadenas de formato que elija. También tiene libertad para decidir si distinguen entre mayúsculas y minúsculas o mayúsculas de minúsculas.  
  
-   Una prueba para asegurarse de que el tipo del objeto pasa a su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método es el tipo definido por la aplicación. Si no es así, se debe llamar el objeto <see cref="T:System.IFormattable" /> implementación, si existe alguno, o su <see cref="M:System.Object.ToString" /> método, si no es así. Debe estar preparado para controlar las excepciones que se podrían producir estas llamadas al método.  
  
-   Código para controlar una cadena de formato nula, si su implementación admite las cadenas de formato. El enfoque más común es reemplazar una cadena de formato nula con el especificador de formato general.  
  
-   Código para controlar las cadenas de formato que admite la implementación.  
  
-   Código para controlar las cadenas de formato que no se admiten. El enfoque más común consiste en producir una <see cref="T:System.FormatException" />, aunque puede proporcionar el formato predeterminado.  
  
 Las implementaciones de extensión son implementaciones que proporcionan el formato personalizado para un tipo que ya tiene compatibilidad con el formato. Por ejemplo, puede definir un <c>CustomerNumberFormatter</c> que aplica formato a un tipo integral con guiones entre los dígitos concretos. En este caso, la implementación debe incluir lo siguiente:  
  
-   Una definición de cadenas de formato que extienden el formato del objeto. Estas cadenas de formato son necesarias, pero no deben estar en conflicto con cadenas de formato existente del tipo. Por ejemplo, si está ampliando formato para el <see cref="T:System.Int32" /> tipo, no debería implementar los especificadores de formato "C", "D", "E", "F" y "G", entre otros.  
  
-   Una prueba de que el tipo del objeto pasa a su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método es un tipo cuyo formato admite su extensión. Si no es así, llaman al objeto de la <see cref="T:System.IFormattable" /> implementación, si existe alguno, o el objeto de la sin parámetros <see cref="M:System.Object.ToString" /> método, si no es así. Debe estar preparado para controlar las excepciones que se podrían producir estas llamadas al método.  
  
-   Código para controlar las cadenas de formato que admite la extensión.  
  
-   Código para controlar las cadenas de formato que no es compatible con la extensión. Estos se deberían pasar al tipo <see cref="T:System.IFormattable" /> implementación. Debe estar preparado para controlar las excepciones que se podrían producir estas llamadas al método.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Cadena de formato que contiene las especificaciones de formato.</param>
        <param name="arg">Objeto al que se va a aplicar el formato.</param>
        <param name="formatProvider">Objeto que proporciona información de formato sobre la instancia actual.</param>
        <summary>Convierte el valor del objeto especificado en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</summary>
        <returns>Representación en forma de cadena del valor de <paramref name="arg" />, con el formato especificado por <paramref name="format" /> y <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> es un método de devolución de llamada. Se llama a un método que admite formatos personalizados, como <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> o <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. La implementación se llama una vez para cada elemento de formato de un [cadena de formato compuesto](~/docs/standard/base-types/composite-formatting.md). Por ejemplo, en la siguiente instrucción, la <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> método se llama tres veces.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 El `arg` parámetro es el objeto en la lista de objetos cuya posición basada en cero se corresponde con el índice de un elemento de formato determinado.  
  
 El `format` parámetro contiene una cadena de formato, que es el `formatString` componente de un elemento de formato. Si el elemento de formato no tiene ningún `formatString` componente, el valor de `format` es `null`. Si `format` es `null`, según el tipo de `arg`, es posible que pueda utilizar la especificación de formato predeterminado de su elección.  
  
 El `formatProvider` parámetro es el <xref:System.IFormatProvider> implementación que proporciona un formato para `arg`. Por lo general, es una instancia de su <xref:System.ICustomFormatter> implementación. Si `formatProvider` es `null`, omita este parámetro.  
  
 La implementación de la <xref:System.ICustomFormatter.Format%2A> método debe incluir la siguiente funcionalidad para que proporcionen formato no son compatibles con .NET Framework. Si el método de formato no es compatible con un formato, determine si el objeto que se va a aplicar el formato implementa la <xref:System.IFormattable> interfaz. Si lo hace, invoca el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> método de dicha interfaz. En caso contrario, invoque el valor predeterminado <xref:System.Object.ToString%2A?displayProperty=nameWithType> método del objeto subyacente. El código siguiente muestra este patrón.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 En el ejemplo siguiente se implementa <xref:System.ICustomFormatter> para permitir el formato binario, octales y hexadecimales de valores enteros. Su <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementación determina si el parámetro de formato es una de las tres cadenas de formato compatibles ("B" para el binario, "O" para octal y "H" para hexadecimal) y da formato a la `arg` parámetro adecuadamente. De lo contrario, si `arg` no es `null`, llama a la `arg` del parámetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación, si existe alguno, o su sin parámetros `ToString` método, si no lo hace. Si el valor de `arg` es `null`, el método devuelve <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` a continuación, puede usarse para proporcionar el formato personalizado pasando un `BinaryFormatter` objeto como el `provider` parámetro de la <xref:System.String.Format%2A> método, tal como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>