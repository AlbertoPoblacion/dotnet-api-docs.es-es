<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="440e566843bd8a6f7aa2849b29bdd2300c580fd1" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39853302" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a2e9c-101">Define un método que admite formatos personalizados del valor de un objeto.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2e9c-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2e9c-102">El <xref:System.ICustomFormatter> interfaz incluye un único método, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a2e9c-103">Cuando se implementa esta interfaz mediante un tipo de valor o referencia, el <xref:System.ICustomFormatter.Format%2A> método devuelve una representación de cadena de formato personalizado del valor de un objeto.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="a2e9c-104">Normalmente, el <xref:System.ICustomFormatter> interfaz se implementa con la <xref:System.IFormatProvider> interfaz para personalizar el comportamiento de los dos métodos de formato de cadena compuesta .NET Framework que incluyen un <xref:System.IFormatProvider> parámetro.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="a2e9c-105">En concreto, el <xref:System.ICustomFormatter> interfaz puede proporcionar formatos personalizados del valor de un objeto pasado a la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> y <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> métodos.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="a2e9c-106">Proporciona una representación del valor de un objeto personalizada requiere que haga lo siguiente:</span><span class="sxs-lookup"><span data-stu-id="a2e9c-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="a2e9c-107">Defina una clase que implementa el <xref:System.ICustomFormatter> interfaz y su miembro único, el <xref:System.ICustomFormatter.Format%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="a2e9c-108">Defina una clase que implementa el <xref:System.IFormatProvider> interfaz y su miembro único, el <xref:System.IFormatProvider.GetFormat%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="a2e9c-109">El <xref:System.IFormatProvider.GetFormat%2A> método devuelve una instancia de su <xref:System.ICustomFormatter> implementación.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="a2e9c-110">A menudo, una sola clase implementa tanto <xref:System.ICustomFormatter> y <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="a2e9c-111">En del ese caso, la clase `GetFormat` implementación simplemente devuelve una instancia de sí mismo.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="a2e9c-112">Pase el <xref:System.IFormatProvider> implementación como el `provider` argumento de la <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> método o un método comparable.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="a2e9c-113">El método de .NET Framework, a continuación, usará el formato personalizado en lugar de su propio.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2e9c-114">En el ejemplo siguiente se implementa <xref:System.ICustomFormatter> para permitir que el formato binario, octales y hexadecimales de los valores enteros.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="a2e9c-115">En este ejemplo, una clase única, `IBinaryFormatter`, implementa tanto <xref:System.ICustomFormatter> y <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="a2e9c-116">Su <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método determina si el `formatType` parámetro representa un <xref:System.ICustomFormatter> tipo.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="a2e9c-117">Si es así, `BinaryFormatter` devuelve una instancia de sí mismo; de lo contrario, devuelve `null`.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="a2e9c-118">Su <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementación determina si el parámetro de formato es una de las tres cadenas de formato admitidos ("B" para el binario, "O" para octal y "H" de hexadecimal) y da formato a la `arg` parámetro adecuadamente.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="a2e9c-119">De lo contrario, si `arg` no `null`, llama a la `arg` del parámetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación, si existe alguno, o su sin parámetros `ToString` método, si no lo hace.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="a2e9c-120">Si el valor de `arg` es `null`, el método devuelve <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="a2e9c-121">`BinaryFormatter` a continuación, se puede usar para proporcionar un formato personalizado pasando un `BinaryFormatter` objeto como el `provider` parámetro de la <xref:System.String.Format%2A> método, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="a2e9c-122">
        <para>Common language runtime intenta usar su <see cref="T:System.ICustomFormatter" /> implementación para cada elemento de formato de cadena de formato compuesto. Como resultado, debe esperar que su <see cref="T:System.ICustomFormatter" /> implementación se llamará para proporcionar servicios de formato a los objetos o valores que no se diseñaron para tratar. En estos casos, su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método debe llamar al método de formato adecuado para ese objeto o valor.  Hay dos tipos de <see cref="T:System.ICustomFormatter" /> implementaciones: intrínseca y extensión.  Las implementaciones intrínsecas son implementaciones que proporcionan el formato personalizado para un objeto definido por la aplicación. En este caso, la implementación debe incluir lo siguiente:-una definición de cadenas de formato que definen el formato del objeto. Cadenas de formato son opcionales. Normalmente, una cadena de formato "G" o "g" define el formato general (o más frecuente). Sin embargo, es libre para definir las cadenas de formato que elija. También tiene libertad para decidir si distinguen entre mayúsculas y minúsculas o mayúsculas y minúsculas.  -Una prueba para asegurarse de que el tipo del objeto pasado a su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método es el tipo definido por la aplicación. Si no es así, debe llamar a los del objeto <see cref="T:System.IFormattable" /> implementación, si existe alguno, o su <see cref="M:System.Object.ToString" /> método, si no es así. Debe estar preparado para controlar las excepciones que podrían producir estas llamadas al método.  -Código para controlar una cadena de formato nula, si su implementación es compatible con las cadenas de formato. El enfoque más común es reemplazar una cadena de formato null con el especificador de formato general.  -Código para controlar las cadenas de formato que admite su implementación.  -Código para controlar cadenas de formato que no se admite. El enfoque más común es producir una <see cref="T:System.FormatException" />, aunque puede proporcionar el formato predeterminado.  Las implementaciones de extensión son implementaciones que proporcionan el formato personalizado para un tipo que ya tiene compatibilidad con el formato. Por ejemplo, podría definir un <c>CustomerNumberFormatter</c> que da formato a un tipo integral con guiones entre los dígitos concretos. En este caso, la implementación debe incluir lo siguiente:-una definición de cadenas de formato que extienden el formato del objeto. Estas cadenas de formato son necesarias, pero no deben estar en conflicto con las cadenas de formato existentes del tipo. Por ejemplo, si está ampliando formato para el <see cref="T:System.Int32" /> tipo, no debe implementar los especificadores de formato "C", "D", "E", "F" y "G", entre otros.  -Una prueba de que el tipo del objeto pasa a su <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> método es un tipo cuyo formato admite su extensión. Si no es así, llame del objeto <see cref="T:System.IFormattable" /> implementación, si existe, o el objeto sin parámetros <see cref="M:System.Object.ToString" /> método, si no es así. Debe estar preparado para controlar las excepciones que podrían producir estas llamadas al método.  -Código para controlar las cadenas de formato que es compatible su extensión.  -Código para controlar las cadenas de formato que no es compatible con la extensión. Se deben pasar el tipo <see cref="T:System.IFormattable" /> implementación. Debe estar preparado para controlar las excepciones que podrían producir estas llamadas al método.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="a2e9c-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="a2e9c-123">Cadena de formato que contiene las especificaciones de formato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2e9c-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="a2e9c-124">Objeto al que se va a aplicar el formato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2e9c-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="a2e9c-125">Objeto que proporciona información de formato sobre la instancia actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2e9c-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2e9c-126">Convierte el valor del objeto especificado en la representación de cadena equivalente usando el formato y la información de formato específica de la referencia cultural especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2e9c-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2e9c-127">Representación en forma de cadena del valor de <paramref name="arg" />, con el formato especificado por <paramref name="format" /> y <paramref name="formatProvider" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2e9c-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2e9c-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> es un método de devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="a2e9c-129">Se llama a un método que admite formatos personalizados, como <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> o <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a2e9c-130">La implementación se llama una vez para cada elemento de formato de un [cadena de formato compuesto](~/docs/standard/base-types/composite-formatting.md).</span><span class="sxs-lookup"><span data-stu-id="a2e9c-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="a2e9c-131">Por ejemplo, en la siguiente instrucción, el <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> método se llama tres veces.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="a2e9c-132">El `arg` parámetro es el objeto en la lista de objetos cuya posición de base cero que corresponde al índice de un elemento de formato determinado.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="a2e9c-133">El `format` parámetro contiene una cadena de formato, que es el `formatString` componente de un elemento de formato.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="a2e9c-134">Si el elemento de formato no tiene ningún `formatString` componente, el valor de `format` es `null`.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="a2e9c-135">Si `format` es `null`, según el tipo de `arg`, es posible que pueda usar la especificación de formato predeterminado de su elección.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="a2e9c-136">El `formatProvider` parámetro es el <xref:System.IFormatProvider> implementación que proporciona un formato para `arg`.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="a2e9c-137">Normalmente, es una instancia de su <xref:System.ICustomFormatter> implementación.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="a2e9c-138">Si `formatProvider` es `null`, omita este parámetro.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="a2e9c-139">La implementación de la <xref:System.ICustomFormatter.Format%2A> método debe incluir la siguiente funcionalidad para .NET Framework pueda proporcionar formato no se admite.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="a2e9c-140">Si el método de formato no es compatible con un formato, determine si el objeto que se va a aplicar el formato implementa el <xref:System.IFormattable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="a2e9c-141">Si lo hace, invocar el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> método de dicha interfaz.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="a2e9c-142">Invocar en caso contrario, el valor predeterminado <xref:System.Object.ToString%2A?displayProperty=nameWithType> método del objeto subyacente.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="a2e9c-143">El código siguiente muestra este modelo.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="a2e9c-144">En el ejemplo siguiente se implementa <xref:System.ICustomFormatter> para permitir que el formato binario, octales y hexadecimales de los valores enteros.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="a2e9c-145">Su <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementación determina si el parámetro de formato es una de las tres cadenas de formato admitidos ("B" para el binario, "O" para octal y "H" de hexadecimal) y da formato a la `arg` parámetro adecuadamente.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="a2e9c-146">De lo contrario, si `arg` no `null`, llama a la `arg` del parámetro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementación, si existe alguno, o su sin parámetros `ToString` método, si no lo hace.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="a2e9c-147">Si el valor de `arg` es `null`, el método devuelve <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="a2e9c-148">`BinaryFormatter` a continuación, se puede usar para proporcionar un formato personalizado pasando un `BinaryFormatter` objeto como el `provider` parámetro de la <xref:System.String.Format%2A> método, como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="a2e9c-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>