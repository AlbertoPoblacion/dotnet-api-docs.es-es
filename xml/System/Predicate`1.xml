<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ae5fac6e3c82cfaf02bcdc8876ab63369f0821b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58702474" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Tipo del objeto que se va a comparar.</typeparam>
    <param name="obj">Objeto que se va a comparar según los criterios definidos en el método representado por este delegado.</param>
    <summary>Representa el método que define un conjunto de criterios y determina si el objeto especificado cumple esos criterios.</summary>
    <returns>Es <see langword="true" /> si <paramref name="obj" /> cumple los criterios definidos en el método representado por este delegado; de lo contrario, es <see langword="false" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este delegado es utilizado por varios métodos de la <xref:System.Array> y <xref:System.Collections.Generic.List%601> clases para buscar elementos de la colección.  
  
 Normalmente, el <xref:System.Predicate%601> delegado representado por una expresión lambda. Dado que las variables de ámbito local están disponibles para la expresión lambda, es fácil de probar una condición que no se conoce de forma precisa en tiempo de compilación. Esto se simula en el ejemplo siguiente, que define un `HockeyTeam` clase que contiene información sobre un equipo de liga nacional de Hockey y el año en el que se creó. El ejemplo define una matriz de valores enteros que representan años y asigna de forma aleatoria un elemento de la matriz a `foundedBeforeYear`, que es una variable que tiene ámbito local en el ejemplo `Main` método. Dado que las variables de ámbito local están disponibles para una expresión lambda, la expresión lambda se pasa a la <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> método es capaz de devolver un `HockeyTeam` objeto para cada equipo fundada en o antes de ese año.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza un <xref:System.Predicate%601> delegado con el <xref:System.Array.Find%2A?displayProperty=nameWithType> método para buscar en una matriz de <xref:System.Drawing.Point> estructuras. El ejemplo se define explícitamente un <xref:System.Predicate%601> delegado denominado `predicate` y le asigna un método denominado `FindPoints` que devuelve `true` si el producto de la <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> y <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> campos es superior a 100.000. Tenga en cuenta que es habitual usar una expresión lambda en lugar de definir explícitamente un delegado del tipo <xref:System.Predicate%601>, tal y como se muestra en el segundo ejemplo.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 El ejemplo siguiente es idéntico al ejemplo anterior, salvo que usa una expresión lambda para representar el <xref:System.Predicate%601> delegar.  Cada elemento de la `points` matriz se pasa a la expresión lambda hasta que la expresión busca un elemento que cumpla los criterios de búsqueda. En este caso, la expresión lambda devuelve `true` si el producto de los campos X e Y es mayor que 100 000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>