<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f2b5c1388338f890bf094d7848dc0b5cda8d4c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431227" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">Tipo del valor devuelto del método que este delegado encapsula.</typeparam>
    <summary>Encapsula un método que no tiene parámetros y devuelve un valor del tipo especificado por el parámetro <typeparamref name="TResult" />.</summary>
    <returns>Valor devuelto del método que este delegado encapsula.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar a este delegado para representar un método que puede pasarse como parámetro sin declarar explícitamente un delegado personalizado. El método encapsulado debe corresponder a la firma del método que está definida por el delegado. Esto significa que el método encapsulado no debe tener ningún parámetro y debe devolver un valor.  
  
> [!NOTE]
>  Hacer referencia a un método que no tiene parámetros y devuelve `void` (o en Visual Basic, que se declara como un `Sub` en lugar de como un `Function`), use el <xref:System.Action> delegar en su lugar.  
  
 Cuando se usa el <xref:System.Func%601> delegado, no es necesario definir explícitamente un delegado que encapsula un método sin parámetros. Por ejemplo, el código siguiente declara explícitamente un delegado denominado `WriteMethod` y asigna una referencia a la `OutputTarget.SendToFile` método a su instancia de delegado de instancia.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 En el ejemplo siguiente se simplifica este código creando instancias de la <xref:System.Func%601> delegado en lugar de definir un nuevo delegado y asignarle un método con nombre explícitamente.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 Puede usar el <xref:System.Func%601> delegar con métodos anónimos en C#, como se muestra en el ejemplo siguiente. (Para obtener una introducción a los métodos anónimos, vea [métodos anónimos](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 También puede asignar una expresión lambda a una <xref:System.Func%602> delegado, como se muestra en el ejemplo siguiente. (Para obtener una introducción a las expresiones lambda, vea [expresiones Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) y [expresiones Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 El tipo subyacente de una expresión lambda es uno de la clase genérica `Func` delegados. Esto hace posible pasar una expresión lambda como parámetro sin asignarla explícitamente a un delegado. En particular, porque muchos métodos de tipos en el <xref:System.Linq> tiene espacio de nombres `Func` parámetros, puede pasar estos métodos de una expresión lambda sin crear explícitamente instancias de un `Func` delegar.  
  
 Si tiene un cálculo costoso que desea ejecutar solo si realmente se necesita el resultado, puede asignar la función costosa a un <xref:System.Func%601> delegar. A continuación, se puede retrasar la ejecución de la función hasta que una propiedad que tiene acceso el valor se utiliza en una expresión. El ejemplo en la sección siguiente muestra cómo hacerlo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar a un delegado que no toma ningún parámetro. Este código crea una clase genérica denominada `LazyValue` que tiene un campo de tipo <xref:System.Func%601>. Este campo de delegado puede almacenar una referencia a cualquier función que devuelve un valor del tipo que corresponde al parámetro de tipo de la `LazyValue` objeto. El `LazyValue` tipo también tiene un `Value` propiedad que se ejecuta la función (si no ya se ha ejecutado) y devuelve el valor resultante.  
  
 El ejemplo crea dos métodos y se crean instancias de dos `LazyValue` objetos con expresiones lambda que llaman a estos métodos. Las expresiones lambda no toman parámetros porque sólo necesitan llamar a un método. Como muestra el resultado, los dos métodos se ejecutan solo cuando el valor de cada `LazyValue` objeto se recupera.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>