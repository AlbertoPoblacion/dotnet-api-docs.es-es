<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="00c93a2b7fbd20c6ecdd29e16d53ca90e30b62db" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51906757" /></Metadata><TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <TypeSignature Language="F#" Value="type IObserver&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Objeto que proporciona información de notificación.</typeparam>
    <summary>Proporciona un mecanismo para recibir notificaciones basadas en inserción.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IObserver%601> y <xref:System.IObservable%601> interfaces proporcionan un mecanismo para recibir notificaciones basadas en inserción, también conocido como el patrón de diseño de observador generalizado. El <xref:System.IObservable%601> interfaz representa la clase que envía notificaciones (proveedor); el <xref:System.IObserver%601> interfaz representa la clase que recibe (el observador). `T` representa la clase que proporciona la información de notificación.  
  
 Un <xref:System.IObserver%601> implementación organiza recibir notificaciones de un proveedor (una <xref:System.IObservable%601> implementación) pasando una instancia de sí mismo para el proveedor <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> método. Este método devuelve un <xref:System.IDisposable> objeto que puede utilizarse para cancelar la suscripción al observador antes de que el proveedor finaliza el envío de notificaciones.  
  
 El <xref:System.IObserver%601> interfaz define los siguientes tres métodos que el observador debe implementar:  
  
-   El <xref:System.IObserver%601.OnNext%2A> método, que normalmente se llama por el proveedor para proporcionar al observador con nueva información de estado o de datos.  
  
-   El <xref:System.IObserver%601.OnError%2A> método, que normalmente se llama por el proveedor para indicar que los datos son inaccesibles, están dañados o no está disponible, o que el proveedor ha experimentado alguna otra condición de error.  
  
-   El <xref:System.IObserver%601.OnCompleted%2A> método, que normalmente se llama por el proveedor para indicar que ha finalizado el envío de notificaciones a los observadores.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el patrón de diseño de observador. Define un `Location` clase que contiene información de latitud y longitud.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 El `LocationReporter` clase proporciona el <xref:System.IObserver%601> implementación. Muestra información acerca de la ubicación actual en la consola. Su constructor incluye un `name` parámetro, que permite el `LocationReporter` instancia para identificarse en la salida de cadena. También incluye un `Subscribe` método, que contiene una llamada para el proveedor <xref:System.IObservable%601.Subscribe%2A> método. Esto permite que el método asignar el valor devuelto <xref:System.IDisposable> referencia a una variable privada. El `LocationReporter` clase también incluye un `Unsubscribe` método que llama el <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> método del objeto devuelto por la <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> método. El código siguiente define el `LocationReporter` clase.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 El `LocationTracker` clase proporciona el <xref:System.IObservable%601> implementación. Su `TrackLocation` método se pasa una que acepta valores NULL `Location` objeto que contiene los datos de latitud y longitud. Si el `Location` valor no es `null`, el `TrackLocation` llamadas al método el <xref:System.IObserver%601.OnNext%2A> método de cada observador.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Si el `Location` valor es `null`, `TrackLocation` crea una instancia de método un `LocationNotFoundException` objeto, que se muestra en el ejemplo siguiente. A continuación, llama a cada observador <xref:System.IObserver%601.OnError%2A> método y le pasa el `LocationNotFoundException` objeto. Tenga en cuenta que `LocationNotFoundException` deriva <xref:System.Exception> pero no los agrega todos los miembros nuevos.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Los observadores se registran para recibir notificaciones desde un `TrackLocation` objeto mediante una llamada a su <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> método, que asigna una referencia al objeto observador a un tipo genérico privado <xref:System.Collections.Generic.List%601> objeto. El método devuelve un `Unsubscriber` objeto, que es un <xref:System.IDisposable> implementación que permite a los observadores dejar de recibir notificaciones. El `LocationTracker` clase también incluye un `EndTransmission` método. Cuando no hay más datos de ubicación están disponibles, el método llama a cada observador <xref:System.IObserver%601.OnCompleted%2A> método y, a continuación, borra la lista interna de observadores.  
  
 El código siguiente, a continuación, crea una instancia del proveedor y el observador.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberSignature Language="F#" Value="abstract member OnCompleted : unit -&gt; unit" Usage="iObserver.OnCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informa al observador de que el proveedor ha terminado de enviar notificaciones basadas en inserción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el observador <xref:System.IObserver%601.OnCompleted%2A> se llama a la implementación, el <xref:System.IObserver%601.OnCompleted%2A> , opcionalmente, puede llamar al método el <xref:System.IDisposable.Dispose%2A> método de la <xref:System.IDisposable> objeto que se devolvió al observador cuando llama a la <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 El ejemplo siguiente proporciona una implementación de la <xref:System.IObserver%601.OnCompleted%2A> método en una aplicación de seguimiento de latitud y longitud. El método simplemente informa de que no hay más datos está disponibles y llama al proveedor <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementación. Consulte la sección ejemplo de la <xref:System.IObserver%601> tema para obtener un ejemplo completo.  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberSignature Language="F#" Value="abstract member OnError : Exception -&gt; unit" Usage="iObserver.OnError error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">Objeto que proporciona información adicional sobre el error.</param>
        <summary>Notifica al observador que el proveedor experimentó una condición de error.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque `error` es un objeto que se deriva de <xref:System.Exception?displayProperty=nameWithType>, no representa necesariamente una excepción producida por el proveedor. También puede representar una condición de error esperado o rutinarias, como los datos que faltan o no está disponible. El <xref:System.IObserver%601.OnError%2A> método debe considerarse como informativo y el proveedor no debe esperar el observador para proporcionar control de errores.  
  
   
  
## Examples  
 El ejemplo siguiente proporciona una implementación de la <xref:System.IObserver%601.OnError%2A> método en una aplicación de seguimiento de latitud y longitud. El método simplemente informa de que los datos están actualmente disponibles; no hace uso de la <xref:System.Exception> objeto pasa a él como un parámetro. Consulte la sección ejemplo de la <xref:System.IObserver%601> tema para obtener un ejemplo completo.  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c834760f-ddd4-417f-abb7-a059679d5b8c">Procedimientos recomendados para modelos de diseño de observador</related>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberSignature Language="F#" Value="abstract member OnNext : 'T -&gt; unit" Usage="iObserver.OnNext value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Información de la notificación actual.</param>
        <summary>Proporciona el observador con nuevos datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de un observador que ha llamado a un proveedor <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> método, el proveedor llama al observador <xref:System.IObserver%601.OnNext%2A> método para proporcionar notificaciones.  
  
   
  
## Examples  
 El ejemplo siguiente proporciona una implementación de la <xref:System.IObserver%601.OnNext%2A> método en una aplicación de seguimiento de latitud y longitud. Consulte la sección ejemplo de la <xref:System.IObserver%601> tema para obtener un ejemplo completo.  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>