<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d682cfe7b52c931a13d9293d341bedadc228bc0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431061" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type IndexOutOfRangeException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Excepción que se inicia cuando se intenta acceder a un elemento de una matriz o una colección con un índice que está fuera de los límites.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.IndexOutOfRangeException> excepción se produce cuando se utiliza un índice no válido para tener acceso a un miembro de una matriz o una colección, o para leer o escribir en una ubicación determinada en un búfer. Esta excepción se hereda de la <xref:System.Exception> clase agrega pero no hay miembros únicos.  
  
 Normalmente, un <xref:System.IndexOutOfRangeException> excepción se produce como resultado de error de desarrollador. En lugar de controlar la excepción, debe diagnosticar la causa del error y corrija el código. Las causas más comunes del error son:  
  
-   Olvidar que el límite superior de una colección o una matriz de base cero es menor que el número de miembros o elementos, como en el ejemplo siguiente se muestra.  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     Para corregir el error, puede utilizar código similar al siguiente.  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     Como alternativa, en lugar de recorrer en iteración todos los elementos de la matriz por su índice, puede usar el `foreach` instrucción (en C#) o `For Each` instrucción (en Visual Basic).  
  
-   Intento de asignar un elemento de matriz en otra matriz que no se han dimensionada adecuadamente y que tenga menos elementos de la matriz original. En el ejemplo siguiente se intenta asignar al último elemento de la `value1` matriz al mismo elemento en el `value2` matriz. Sin embargo, la `value2` matriz se ha dimensionada incorrectamente para tener seis en lugar de siete elementos. Como resultado, se produce la asignación de un <xref:System.IndexOutOfRangeException> excepción.  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   Uso de un valor devuelto por un método de búsqueda para recorrer en iteración una parte de una matriz o colección a partir de una posición de índice determinada. Si te olvidas de comprobar si la operación de búsqueda encuentra una coincidencia, el runtime produce una <xref:System.IndexOutOfRangeException> excepción, como se muestra en este ejemplo.  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     En este caso, el <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> método devuelve -1, que es un valor de índice no válido, cuando no puede encontrar una coincidencia. Para corregir este error, compruebe el valor devuelto del método de búsqueda antes de recorrer en iteración la matriz, como se muestra en este ejemplo.  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   Al intentar usar o enumerar un conjunto de resultados, la colección o la matriz devuelta por una consulta sin comprobar si el objeto devuelto no tiene ningún dato válido.  
  
-   Usar un valor calculado para definir el índice inicial, el índice final o el número de elementos que se recorrerán. Si el resultado del cálculo es inesperado, podría dar como resultado un <xref:System.IndexOutOfRangeException> excepción. Compruebe la lógica del programa para calcular el valor de índice y validar el valor antes de recorrer en iteración la matriz o colección. Las siguientes condiciones deben cumplirse los; en caso contrario, un <xref:System.IndexOutOfRangeException> se produce la excepción:  
  
    -   Índice inicial debe ser mayor o igual que <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> para la dimensión de la matriz que se desea realizar una iteración, o mayor o igual que 0 para una colección.  
  
    -   No puede superar el índice final <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> para la dimensión de la matriz que se desea realizar una iteración, o no puede ser mayor que o igual que el `Count` propiedad de una colección.  
  
    -   La siguiente ecuación debe cumplirse para la dimensión de la matriz que se desea realizar una iteración:  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  
        ```  
  
         Para una colección, debe cumplir la siguiente ecuación:  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  Índice inicial de una matriz o colección nunca puede ser un número negativo.  
  
-   Suponiendo que la matriz debe ser de base cero. Las matrices que no son de base cero pueden crearse mediante el <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> método y pueden ser devueltos por la interoperabilidad COM, aunque no son conformes a CLS. En el ejemplo siguiente se muestra la <xref:System.IndexOutOfRangeException> que se produce al intentar recorrer en iteración una matriz no basada en cero creada por el <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> método.  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     Para corregir el error, como en el ejemplo siguiente se hace, se puede llamar a la <xref:System.Array.GetLowerBound%2A> método en lugar de realizar suposiciones sobre el índice inicial de una matriz.  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     Tenga en cuenta que, cuando se llama a la <xref:System.Array.GetLowerBound%2A> método para obtener el índice inicial de una matriz, también deberá llamar el <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> método para obtener su índice final.  
  
-   Confundir a un índice y el valor en ese índice en una matriz numérica o la colección. Este problema se produce normalmente cuando se usa el `foreach` instrucción (en C#) o `For Each` instrucción (en Visual Basic). En el siguiente ejemplo se ilustra el problema.  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     La construcción de la iteración devuelve cada valor en una matriz o colección, no su índice. Para eliminar la excepción, use este código.  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   Proporcionar un nombre de columna no válido para el <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> propiedad.  
  
-   Infracción de seguridad para subprocesos. Operaciones como la lectura de la misma <xref:System.IO.StreamReader> objeto, escribir en el mismo <xref:System.IO.StreamWriter> objeto desde varios subprocesos, o enumerar los objetos de un <xref:System.Collections.Hashtable> desde subprocesos diferentes puede producir un <xref:System.IndexOutOfRangeException> si no tiene acceso al objeto en un modo seguro para subprocesos. Esta excepción es normalmente intermitente porque se basa en una condición de carrera.  
  
 Uso de valores de índice codificado de forma rígida para manipular una matriz es probable que produzca una excepción si el valor de índice es incorrecta o no válida, o si el tamaño de la matriz que se va a manipulación es inesperado. Para evitar que una operación de producir una <xref:System.IndexOutOfRangeException> excepción, puede hacer lo siguiente:  
  
-   Recorrer en iteración los elementos de la matriz mediante la [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) instrucción (en C#) o [For Each... Siguiente](https://msdn.microsoft.com/library/5ebk1751.aspx) construir (en Visual Basic) en lugar de recorrer en iteración los elementos por índice.  
  
-   Recorrer en iteración los elementos por índice que comience con el índice devuelto por el <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> (método) y terminando con el índice devuelto por el <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> método.  
  
-   Si va a asignar elementos de una matriz a otra, asegúrese de que la matriz de destino tiene al menos tantos elementos como la matriz de origen mediante la comparación de sus <xref:System.Array.Length%2A?displayProperty=nameWithType> propiedades.  
  
 Para obtener una lista de valores de propiedad iniciales para una instancia de <xref:System.IndexOutOfRangeException>, consulte el <xref:System.IndexOutOfRangeException> constructores.  
  
 Las siguientes instrucciones de lenguaje intermedio (IL) producen <xref:System.IndexOutOfRangeException>:  
  
-   ldelem. \<tipo >  
  
-   ldelema  
  
-   stelem. \<tipo >  
  
 <xref:System.IndexOutOfRangeException> utiliza HRESULT COR_E_INDEXOUTOFRANGE, que tiene el valor 0 x 80131508.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IndexOutOfRangeException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IndexOutOfRangeException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Exception.Message%2A> propiedad de la nueva instancia en un mensaje proporcionado por el sistema que describe el error, como "un índice de matriz está fuera del intervalo". Este mensaje tiene en cuenta la referencia cultural del sistema actual.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.IndexOutOfRangeException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia nula (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|La cadena del mensaje de error localizado.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje que describe el error.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IndexOutOfRangeException" /> con el mensaje de error especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la <xref:System.Exception.Message%2A?displayProperty=nameWithType> propiedad de la nueva excepción utilizando el `message` parámetro. Se pretende que el contenido de `message` sea inteligible. El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.IndexOutOfRangeException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia nula (`Nothing` en Visual Basic).|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new IndexOutOfRangeException : string * Exception -&gt; IndexOutOfRangeException" Usage="new System.IndexOutOfRangeException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que explica la razón de la excepción.</param>
        <param name="innerException">La excepción que es la causa de la excepción actual. Si el parámetro <c>innerException</c> no es una referencia nula (<see langword="Nothing" /> en Visual Basic), la excepción actual se inicia en un bloque <see langword="catch" /> que controla la excepción interna.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IndexOutOfRangeException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una excepción que se produce como consecuencia directa de una excepción anterior debe incluir una referencia a esta última en la propiedad <xref:System.Exception.InnerException%2A>. La propiedad `InnerException` devuelve el mismo valor pasado al constructor, o una referencia nula (`Nothing` en Visual Basic) si la propiedad `InnerException` no proporciona el valor de la excepción interna al constructor.  
  
 En la tabla siguiente se muestran los valores de propiedad iniciales para una instancia de <xref:System.IndexOutOfRangeException>.  
  
|Propiedad.|Valor|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Referencia a la excepción interna.|  
|<xref:System.Exception.Message%2A>|Cadena con el mensaje de error.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>