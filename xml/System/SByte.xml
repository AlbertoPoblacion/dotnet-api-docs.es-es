<Type Name="SByte" FullName="System.SByte">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="387d54e8287c0df33047a13fcd23e558e39e0dc9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429303" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct SByte : IComparable, IComparable&lt;sbyte&gt;, IConvertible, IEquatable&lt;sbyte&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit int8 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;int8&gt;, class System.IConvertible, class System.IEquatable`1&lt;int8&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.SByte" />
  <TypeSignature Language="VB.NET" Value="Public Structure SByte&#xA;Implements IComparable, IComparable(Of SByte), IConvertible, IEquatable(Of SByte), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class SByte : IComparable, IComparable&lt;System::SByte&gt;, IConvertible, IEquatable&lt;System::SByte&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type sbyte = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.SByte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.SByte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an 8-bit signed integer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.SByte> tipo de valor representa los enteros con valores comprendidos entre 128 negativo al número 127 positivo.  
  
> [!IMPORTANT]
>  El <xref:System.SByte> tipo no es conforme a CLS. El tipo alternativo conforme a CLS es <xref:System.Int16>. <xref:System.Byte> Puede utilizar en su lugar para reemplazar un positivo <xref:System.SByte> valor comprendido entre cero y <xref:System.Byte.MaxValue>. Para obtener más información sobre la conformidad con CLS, vea [independencia del lenguaje y componentes independientes del lenguaje](~/docs/standard/language-independence-and-language-independent-components.md).  
  
 <xref:System.SByte> Proporciona métodos para comparar instancias de este tipo, convertir el valor de una instancia en su representación de cadena y convertir la representación de cadena de un número en una instancia de este tipo.  
  
 Para obtener información acerca de cómo los códigos de especificación de formato controlan la representación de cadena de tipos de valor, vea [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 ]]></format>
    </remarks>
    <altCompliant cref="T:System.Int16" />
    <threadsafe>Todos los miembros de este tipo son seguros para subprocesos. Los miembros que aparecen modificar el estado de instancia realmente devuelven una nueva instancia inicializada con el nuevo valor. Como con cualquier otro tipo, leer y escribir en una variable compartida que contiene una instancia de este tipo deben protegerse mediante un bloqueo para garantizar la seguridad para subprocesos.</threadsafe>
    <altmember cref="T:System.Byte" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares this instance to a specified object or <see cref="T:System.SByte" /> and returns an indication of their relative values.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="sbyte.CompareTo obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare, or <see langword="null" />.</param>
        <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="obj" />.  
  
 <list type="table"><listheader><term> Return Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is less than <paramref name="obj" />.  </description></item><item><term> Zero  </term><description> This instance is equal to <paramref name="obj" />.  </description></item><item><term> Greater than zero  </term><description> This instance is greater than <paramref name="obj" />.  -or-  <paramref name="obj" /> is <see langword="null" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cualquier instancia de <xref:System.SByte>, independientemente de su valor, se considera mayor que `null`.  
  
 El `obj` parámetro debe ser `null` o una instancia de <xref:System.SByte>; en caso contrario, se produce una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> is not an <see cref="T:System.SByte" />.</exception>
        <altmember cref="T:System.Byte" />
        <altmember cref="M:System.SByte.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.CompareTo(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::SByte value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : sbyte -&gt; int&#xA;override this.CompareTo : sbyte -&gt; int" Usage="sbyte.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">An 8-bit signed integer to compare.</param>
        <summary>Compares this instance to a specified 8-bit signed integer and returns an indication of their relative values.</summary>
        <returns>A signed integer that indicates the relative order of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Return Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is less than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is equal to <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is greater than <paramref name="value" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método implementa el <xref:System.IComparable%601?displayProperty=nameWithType> interfaz y realiza ligeramente mejor que la <xref:System.SByte.CompareTo%2A?displayProperty=nameWithType> método porque no tiene que convertir el `value` parámetro a un objeto.  
  
 Dependiendo del lenguaje de programación, es posible al código un <xref:System.SByte.CompareTo%2A> método donde el tipo de parámetro tiene menos bits (es más estrecho) que el tipo de instancia. Esto es posible porque algunos lenguajes de programación realizan una conversión de ampliación implícita que representa el parámetro como un tipo con tantos bits como la instancia.  
  
 Por ejemplo, suponga que el tipo de instancia es <xref:System.Int32> y el tipo de parámetro es <xref:System.Byte>. El compilador de Microsoft C# genera instrucciones para representar el valor del parámetro como un <xref:System.Int32> objeto, a continuación, genera un <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> método que compara los valores de la <xref:System.Int32> instancia y el <xref:System.Int32> parámetro representación.  
  
 Consulte la documentación de su lenguaje de programación para determinar si el compilador realiza las conversiones de ampliación implícitas en tipos numéricos.  
  
   
  
## Examples  
 El ejemplo siguiente muestra las versiones genéricas y de la <xref:System.SByte.CompareTo%2A> método para varios tipos de valor y de referencia.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.SByte.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a value indicating whether this instance is equal to a specified object or <see cref="T:System.SByte" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sbyte.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare with this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.SByte" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.SByte.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (sbyte obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(int8 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.Equals(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::SByte obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : sbyte -&gt; bool" Usage="sbyte.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="obj">An <see cref="T:System.SByte" /> value to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.SByte" /> value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método implementa el <xref:System.IEquatable%601?displayProperty=nameWithType> interfaz y se ejecuta ligeramente mejor que <xref:System.SByte.Equals%2A> porque no tiene que convertir el `obj` parámetro a un objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sbyte.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="sbyte.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.SByte" />.</summary>
        <returns>The enumerated constant, <see cref="F:System.TypeCode.SByte" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const sbyte MaxValue = 127;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 MaxValue = int8(127)" />
      <MemberSignature Language="DocId" Value="F:System.SByte.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As SByte  = 127" />
      <MemberSignature Language="C++ CLI" Value="public: System::SByte MaxValue = 127;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : sbyte" Usage="System.sbyte.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>127</MemberValue>
      <Docs>
        <summary>Represents the largest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante es 127; es decir, hexadecimal 0x7F.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.SByte.MinValue> y <xref:System.SByte.MaxValue> campos para comprobar que un <xref:System.Int64> valor está dentro del intervalo de la <xref:System.SByte> escriba antes de realizar una conversión de tipos. Esta comprobación impide que un <xref:System.OverflowException> en tiempo de ejecución.  
  
 [!code-csharp[System.SByte.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.MaxValue/cs/MaxValue1.cs#1)]
 [!code-vb[System.SByte.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.MaxValue/vb/MaxValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.SByte.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const sbyte MinValue = -128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 MinValue = int8(-128)" />
      <MemberSignature Language="DocId" Value="F:System.SByte.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As SByte  = -128" />
      <MemberSignature Language="C++ CLI" Value="public: System::SByte MinValue = -128;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : sbyte" Usage="System.sbyte.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>-128</MemberValue>
      <Docs>
        <summary>Represents the smallest possible value of <see cref="T:System.SByte" />. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta constante es -128; es decir, hexadecimal 0 x 80.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.SByte.MinValue> y <xref:System.SByte.MaxValue> campos para comprobar que un <xref:System.Int64> valor está dentro del intervalo de la <xref:System.SByte> escriba antes de realizar una conversión de tipos. Esta comprobación impide que un <xref:System.OverflowException> en tiempo de ejecución.  
  
 [!code-csharp[System.SByte.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.MaxValue/cs/MaxValue1.cs#1)]
 [!code-vb[System.SByte.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.MaxValue/vb/MaxValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.SByte.MaxValue" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a number to its 8-bit signed integer equivalent.</summary>
        <altmember cref="Overload:System.SByte.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; sbyte" Usage="System.sbyte.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
        <summary>Converts the string representation of a number to its 8-bit signed integer equivalent.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number contained in the <paramref name="s" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `s` parámetro contiene un número del formulario:  
  
 [*ws*] [*inicio de sesión*]*dígitos*[*ws*]  
  
 Los elementos de los corchetes ([ y ]) son opcionales. En esta tabla se describe cada elemento.  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|*ws*|Espacio en blanco opcional.|  
|*sign*|Un signo opcional.|  
|*digits*|Una secuencia de dígitos que comprende del 0 al 9.|  
  
 El `s` parámetro se interpreta usando el <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> estilo. Además de dígitos decimales del valor de byte, se permiten solo espacios iniciales y finales con un signo positivo o negativo inicial. Para definir explícitamente los elementos de estilo que pueden estar presentes en `s`, use la <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> o <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> método.  
  
 El `s` parámetro se analiza utilizando la información de formato en un <xref:System.Globalization.NumberFormatInfo> que se inicializa para la referencia cultural del sistema actual. Para obtener más información, consulta <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>. Para analizar una cadena mediante el uso de la información de formato de alguna otra referencia cultural, use el <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo convertir un valor de cadena en un valor de byte con signo mediante la <xref:System.SByte.Parse%2A> método. El valor resultante de un byte con signo, a continuación, se muestra en la consola.  
  
 [!code-csharp[System.SByte.Parse2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.sbyte.parse2/cs/parseex1.cs#1)]
 [!code-vb[System.SByte.Parse2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.sbyte.parse2/vb/parseex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int16.Parse(System.String)" />
        <exception cref="T:System.ArgumentException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not consist of an optional sign followed by a sequence of digits (zero through nine).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; sbyte" Usage="System.sbyte.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a number to convert. The string is interpreted using the style specified by <c>style</c>.</param>
        <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        <summary>Converts the string representation of a number in a specified style to its 8-bit signed integer equivalent.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `style` parámetro define los elementos de estilo (como espacios en blanco o el símbolo de signo positivo o negativo) que se permiten en la `s` parámetro para la operación de análisis se realice correctamente. Debe ser una combinación de marcadores de bits de la <xref:System.Globalization.NumberStyles> enumeración.  
  
 Dependiendo del valor de `style`, el `s` parámetro puede incluir los siguientes elementos:  
  
 [*ws*] [*$*] [*inicio de sesión*]*dígitos*[.* dígitos fraccionarios*] [E [*inicio de sesión*]*dígitos exponenciales*] [*ws*]  
  
 Si `style` incluye <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>, el `s` parámetro puede contener los siguientes elementos:  
  
 [*ws*]*dígitos hexadecimales*[*ws*]  
  
 Los elementos de los corchetes ([ y ]) son opcionales. En esta tabla se describe cada elemento.  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|*ws*|Espacio en blanco opcional. Espacio en blanco puede aparecer al principio de `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> marca y pueden aparecer al final de `s` si el estilo incluye el <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> marca.|  
|*$*|Un símbolo de moneda específico de la referencia cultural. Su posición en la cadena viene definida por el <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> propiedad de la referencia cultural actual. Símbolo de divisa de la referencia cultural actual puede aparecer en `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> marca.|  
|*sign*|Un signo opcional. El signo puede aparecer al principio de `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> marca y pueden aparecer al final de `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> marca. Se pueden utilizar paréntesis en `s` para indicar un valor negativo si `style` incluye la <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> marca.|  
|*digits*|Una secuencia de dígitos comprendido entre 0 y 9.|  
|*.*|Un símbolo de separador decimal de referencias culturales específicas. Símbolo de separador decimal de la referencia cultural actual puede aparecer en `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> marca.|  
|*dígitos fraccionarios*|Una o más apariciones de los dígitos 0-9 si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca o una o más apariciones del dígito 0 si no es así. Pueden aparecer dígitos fraccionarios en `s` solo si `style` incluye la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> marca.|  
|E|La "e" o el carácter "E", lo que indica que el valor se representa en notación exponencial (científica). El `s` parámetro puede representar un número en notación exponencial si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca.|  
|*dígitos exponenciales*|Una o más apariciones de los dígitos 0-9. El `s` parámetro puede representar un número en notación exponencial si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca.|  
|*dígitos hexadecimales*|Una secuencia de dígitos hexadecimales de 0 a f o 0 hasta la f el.|  
  
 Una cadena únicamente por dígitos decimales (que corresponde a la <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> estilo) siempre se analiza correctamente. La mayoría de las restantes <xref:System.Globalization.NumberStyles> miembros controlan los elementos que pueden estar presentes, pero no tienen que estar presentes en la cadena de entrada. La tabla siguiente se indica cómo individuales <xref:System.Globalization.NumberStyles> miembros afectan a los elementos que pueden estar presentes en `s`.  
  
|Valores NumberStyles no compuestos|Elementos permitidos en *s* además de dígitos|  
|----------------------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>|Dígitos decimales.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>|El separador decimal (*.*) y *dígitos fraccionarios* elementos. Sin embargo, si `style` no incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca, *dígitos fraccionarios* deben constar de uno o más dígitos 0; en caso contrario, un <xref:System.OverflowException> se produce.|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>|La "e" o el carácter "E", que indica notación exponencial, junto con *dígitos exponenciales*.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>|El *ws* elemento situado al principio de `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>|El *ws* elemento situado al final de `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>|Un signo positivo antes de *dígitos*.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>|Un signo positivo después *dígitos*.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>|El *inicio de sesión* elemento en forma de paréntesis delimitando el valor numérico.|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>|El elemento separador de grupos. Aunque el separador de grupos puede aparecer en `s`, debe ir precedida de uno o más dígitos 0.|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>|La moneda (*$*) elemento.|  
  
 Si el <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> se utiliza la marca, `s` debe ser un valor hexadecimal. Dígitos hexadecimales válidos son 0-9, a-f y A-F. Un prefijo como "0 x" no se admite y hace que la operación de análisis se producirá un error. Los únicos otros marcadores que se pueden combinar incluidos en `style` son <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> y <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>. (El <xref:System.Globalization.NumberStyles> enumeración incluye un estilo de número compuesto, <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, que incluye ambos marcadores de espacio en blanco.)  
  
> [!NOTE]
>  Si el `s` parámetro es la representación de cadena de un número hexadecimal, no puede ir precedido de ninguna decoración (como `0x` o `&h`) que lo diferencie como un número hexadecimal. Esto hace que la operación de análisis produzca una excepción.  
  
 Si `s` representa un número hexadecimal, el <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> método interpreta el bit de orden superior del byte como un bit de signo.  
  
 El `s` parámetro se analiza utilizando la información de formato en un <xref:System.Globalization.NumberFormatInfo> objeto que se inicializa para la referencia cultural del sistema actual. Para utilizar la información de formato de alguna otra referencia cultural, llame a la <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> de sobrecarga.  
  
   
  
## Examples  
 En el ejemplo siguiente se analiza representaciones de cadena de <xref:System.SByte> los valores que tienen la <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> método. La referencia cultural actual del ejemplo es en-US.  
  
 [!code-csharp[System.SByte.Parse2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.sbyte.parse2/cs/parseex2.cs#2)]
 [!code-vb[System.SByte.Parse2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.sbyte.parse2/vb/parseex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int16.Parse(System.String)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.  -or-  <paramref name="s" /> includes non-zero, fractional digits.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  -or-  <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
        <altmember cref="M:System.SByte.ToString" />
        <altmember cref="Overload:System.SByte.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; sbyte" Usage="System.sbyte.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that represents a number to convert. The string is interpreted using the <see cref="F:System.Globalization.NumberStyles.Integer" /> style.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>. If <c>provider</c> is <see langword="null" />, the thread current culture is used.</param>
        <summary>Converts the string representation of a number in a specified culture-specific format to its 8-bit signed integer equivalent.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number specified in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `s` parámetro contiene un número del formulario:  
  
 [*ws*] [*inicio de sesión*]*dígitos*[*ws*]  
  
 Los elementos de los corchetes ([ y ]) son opcionales. En esta tabla se describe cada elemento.  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|*ws*|Espacio en blanco opcional.|  
|*sign*|Un signo opcional.|  
|*digits*|Una secuencia de dígitos que comprende del 0 al 9.|  
  
 El `s` parámetro se interpreta usando el <xref:System.Globalization.NumberStyles.Integer> estilo. Además de dígitos decimales del valor de byte, se permiten solo espacios iniciales y finales con un signo inicial. Para definir explícitamente los elementos de estilo con la información de formato específica de la referencia cultural que pueden estar presentes en `s`, use el <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> método.  
  
 El `provider` parámetro es un <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información específica de la referencia cultural acerca del formato de `s`. Hay tres formas de utilizar el `provider` parámetro para proporcionar información de formato personalizado para la operación de análisis:  
  
-   Puede pasar los datos reales <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato. (Su implementación de <xref:System.IFormatProvider.GetFormat%2A> simplemente devuelve a sí mismo.)  
  
-   Puede pasar un <xref:System.Globalization.CultureInfo> objeto que especifica la referencia cultural cuyo formato se usará. Su <xref:System.Globalization.CultureInfo.NumberFormat%2A> propiedad proporciona información de formato.  
  
-   Puede pasar un personalizado <xref:System.IFormatProvider> implementación. Su <xref:System.IFormatProvider.GetFormat%2A> método debe crear instancias y devolver el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual del objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto que define la tilde (~) como el signo negativo. A continuación, analiza un número de cadenas numéricas usando este comparador <xref:System.Globalization.NumberFormatInfo> objeto, así como un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural invariable.  
  
 [!code-csharp[System.SByte.Parse2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.sbyte.parse2/cs/parseex3.cs#3)]
 [!code-vb[System.SByte.Parse2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.sbyte.parse2/vb/parseex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int16.Parse(System.String)" />
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in the correct format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
        <altmember cref="M:System.SByte.ToString" />
        <altmember cref="Overload:System.SByte.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As SByte" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; sbyte" Usage="System.sbyte.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static sbyte Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; sbyte" Usage="System.sbyte.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains the number to convert. The string is interpreted by using the style specified by <c>style</c>.</param>
        <param name="style">A bitwise combination of the enumeration values that indicates the style elements that can be present in <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>. If <c>provider</c> is <see langword="null" />, the thread current culture is used.</param>
        <summary>Converts the string representation of a number that is in a specified style and culture-specific format to its 8-bit signed equivalent.</summary>
        <returns>An 8-bit signed byte value that is equivalent to the number specified in the <paramref name="s" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `style` parámetro define los elementos de estilo (como espacios en blanco o el símbolo de signo positivo o negativo) que se permiten en la `s` parámetro para la operación de análisis se realice correctamente. Debe ser una combinación de marcadores de bits de la <xref:System.Globalization.NumberStyles> enumeración.  
  
 Dependiendo del valor de `style`, el `s` parámetro puede incluir los siguientes elementos:  
  
 [*ws*] [*$*] [*inicio de sesión*]*dígitos*[.* dígitos fraccionarios*] [E [*inicio de sesión*]*dígitos exponenciales*] [*ws*]  
  
 Si `style` incluye <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, el `s` parámetro puede incluir los siguientes elementos:  
  
 [*ws*]*dígitos hexadecimales*[*ws*]  
  
 Los elementos de los corchetes ([ y ]) son opcionales. En esta tabla se describe cada elemento.  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|*ws*|Espacio en blanco opcional. Espacio en blanco puede aparecer al principio de `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> marca y pueden aparecer al final de `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> marca.|  
|*$*|Un símbolo de moneda específico de la referencia cultural. Su posición en la cadena viene definida por el <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> propiedad de la referencia cultural actual. Símbolo de divisa de la referencia cultural actual puede aparecer en `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> marca.|  
|*sign*|Un signo opcional. El signo puede aparecer al principio de `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> marca y pueden aparecer al final de `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> marca. Se pueden utilizar paréntesis en `s` para indicar un valor negativo si `style` incluye la <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> marca.|  
|*digits*|Una secuencia de dígitos comprendido entre 0 y 9.|  
|*.*|Un símbolo de separador decimal de referencias culturales específicas. Símbolo de separador decimal de la referencia cultural actual puede aparecer en `s` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> marca.|  
|*dígitos fraccionarios*|Una o más apariciones de los dígitos 0-9 si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca o una o más apariciones del dígito 0 si no es así. Pueden aparecer dígitos fraccionarios en `s` solo si `style` incluye la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> marca.|  
|E|La "e" o el carácter "E", lo que indica que el valor se representa en notación exponencial (científica). El `s` parámetro puede representar un número en notación exponencial si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca.|  
|*dígitos exponenciales*|Una secuencia de dígitos comprendido entre 0 y 9. El `s` parámetro puede representar un número en notación exponencial si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca.|  
|*dígitos hexadecimales*|Una secuencia de dígitos hexadecimales de 0 a f o 0 hasta la f el.|  
  
 Una cadena únicamente por dígitos decimales (que corresponde a la <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> estilo) siempre se analiza correctamente. La mayoría de las restantes <xref:System.Globalization.NumberStyles> miembros controlan los elementos que pueden estar presentes, pero no tienen que estar presentes en esta cadena de entrada. La tabla siguiente se indica cómo individuales <xref:System.Globalization.NumberStyles> miembros afectan a los elementos que pueden estar presentes en `s`.  
  
|No compuestos `NumberStyles` valores|Elementos permitidos en `s` además de dígitos|  
|------------------------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>|Dígitos decimales.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>|El separador decimal (*.*) y *dígitos fraccionarios* elementos. Sin embargo, si el estilo no incluye el <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca, *dígitos fraccionarios* deben constar de uno o más dígitos 0; en caso contrario, un <xref:System.OverflowException> se produce.|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>|La "e" o el carácter "E", que indica notación exponencial, junto con *dígitos exponenciales*.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>|El *ws* elemento situado al principio de `s`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>|El *ws* elemento situado al final de `s`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>|Un signo positivo antes de *dígitos*.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>|Un signo positivo después *dígitos*.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>|Paréntesis antes y después *dígitos* para indicar un valor negativo.|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>|El separador de grupos (*,*) elemento. Aunque el separador de grupos puede aparecer en `s`, debe ir precedida de uno o más dígitos 0.|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>|La moneda (*$*) elemento.|  
  
 Si el <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> se utiliza la marca, `s` debe ser un valor hexadecimal. Dígitos hexadecimales válidos son 0-9, a-f y A-F. Son los únicos otros marcadores que se pueden combinar con él <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> y <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>. (El <xref:System.Globalization.NumberStyles> enumeración incluye un estilo de número compuesto, <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, que incluye ambos marcadores de espacio en blanco.)  
  
> [!NOTE]
>  Si el `s` parámetro es la representación de cadena de un número hexadecimal, no puede ir precedido de ninguna decoración (como `0x` o `&h`) que lo diferencie como un número hexadecimal. Esto hace que la operación de análisis produzca una excepción.  
  
 Si `s` representa un número hexadecimal, el <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> método interpreta el bit de orden superior del byte como un bit de signo.  
  
 El `provider` parámetro es un <xref:System.IFormatProvider> implementación cuyo <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información específica de la referencia cultural acerca del formato de `s`. Hay tres formas de utilizar el `provider` parámetro para proporcionar información de formato personalizado para la operación de análisis:  
  
-   Puede pasar los datos reales <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato. (Su implementación de <xref:System.IFormatProvider.GetFormat%2A> simplemente devuelve a sí mismo.)  
  
-   Puede pasar un <xref:System.Globalization.CultureInfo> objeto que especifica la referencia cultural cuyo formato se usará. Su <xref:System.Globalization.CultureInfo.NumberFormat%2A> propiedad proporciona información de formato.  
  
-   Puede pasar un personalizado <xref:System.IFormatProvider> implementación. Su <xref:System.IFormatProvider.GetFormat%2A> método debe crear instancias y devolver el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual del objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> firma de método para convertir varias representaciones de cadena de números a valores enteros.  
  
 [!code-csharp[System.SByte.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.Parse/CS/parse_1.cs#2)]
 [!code-vb[System.SByte.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.Parse/VB/parse_1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  -or-  <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is not in a format that is compliant with <paramref name="style" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.  -or-  <paramref name="s" /> includes non-zero, fractional digits.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is unused.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</summary>
        <returns>
          <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToBoolean%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is unused.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.Byte" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToByte%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.Char" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToChar%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>None. This conversion is not supported.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is unused.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.Decimal" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToDecimal%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.Double" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToDouble%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to an <see cref="T:System.Int16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToInt16%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to an <see cref="T:System.Int32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToInt32%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to an <see cref="T:System.Int64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToInt64%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.Single" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToSingle%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> to which to convert this <see cref="T:System.SByte" /> value.</param>
        <param name="provider">A <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to an object of type <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la `static` (`Shared` en Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.UInt16" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToUInt16%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.UInt32" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToUInt32%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">This parameter is ignored.</param>
        <summary>For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</summary>
        <returns>The value of the current instance, converted to a <see cref="T:System.UInt64" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.SByte> se convierte en una interfaz <xref:System.IConvertible>. La alternativa recomendada es llamar a la <xref:System.Convert.ToUInt64%28System.SByte%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="sbyte.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
        <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.SByte.ToString> método formatos un <xref:System.SByte> valor en el valor predeterminado ("G" o general), formato de la referencia cultural actual. Si desea especificar un formato diferente o la referencia cultural, use las otras sobrecargas de la <xref:System.SByte.ToString%2A> método, tal como se indica a continuación:  
  
|Usar formato|Para la referencia cultural|Use la sobrecarga|  
|-------------------|-----------------|----------------------|  
|Formato predeterminado ("G")|Una referencia cultural específica|<xref:System.SByte.ToString%28System.IFormatProvider%29>|  
|Un formato concreto|Referencia cultural predeterminada de (actual).|<xref:System.SByte.ToString%28System.String%29>|  
|Un formato concreto|Una referencia cultural específica|<xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 El valor devuelto se formatea con el especificador de formato numérico general ("G") la representación de cadena de la <xref:System.SByte> valor incluye un signo menos si su valor es negativo y una secuencia de dígitos que comprende del 0 al 9 sin ceros a la izquierda. El signo negativo está definido por el <xref:System.Globalization.NumberFormatInfo> objeto para la referencia cultural actual.  
  
 Para definir el formato de representación de cadena del valor de byte con signo, llame a la <xref:System.SByte.ToString%28System.String%29> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un <xref:System.SByte> valor mediante el valor predeterminado <xref:System.SByte.ToString> método. También muestra las representaciones de cadena de la <xref:System.SByte> valor resultante de usar un número de especificadores de formato estándar. Los ejemplos se muestran utilizando las convenciones de formato de la referencia cultural en-US.  
  
 [!code-csharp[System.SByte.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.ToString/CS/tostring2.cs#2)]
 [!code-vb[System.SByte.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.ToString/VB/tostring2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="sbyte.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>The string representation of the value of this instance, as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.SByte.ToString%28System.IFormatProvider%29> método formatos un <xref:System.SByte> valor en el valor predeterminado ("G" o general), formato de una referencia cultural especificada. Si desea especificar un formato diferente o la referencia cultural actual, use las otras sobrecargas de la <xref:System.SByte.ToString%2A> método, tal como se indica a continuación:  
  
|Usar formato|Para la referencia cultural|Use la sobrecarga|  
|-------------------|-----------------|----------------------|  
|Formato predeterminado ("G")|Referencia cultural predeterminada de (actual).|<xref:System.SByte.ToString>|  
|Un formato concreto|Referencia cultural predeterminada de (actual).|<xref:System.SByte.ToString%28System.String%29>|  
|Un formato concreto|Una referencia cultural específica|<xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 El `provider` parámetro es un <xref:System.IFormatProvider> implementación. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información específica de la referencia cultural acerca del formato de la cadena devuelta por este método. Si `provider` es `null`, <xref:System.SByte> valor se representa con la <xref:System.Globalization.NumberFormatInfo> objeto de la referencia cultural actual. La única propiedad de la <xref:System.Globalization.NumberFormatInfo> objeto que controla la representación de cadena de la <xref:System.SByte> valor mediante el especificador de formato general es <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType>, que define el carácter que representa el signo negativo.  
  
 El `provider` parámetro puede ser uno de los siguientes:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural que proporciona información de formato.  
  
-   La <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato.  
  
-   Un objeto personalizado que implementa <xref:System.IFormatProvider>. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un personalizado <xref:System.Globalization.NumberFormatInfo> objeto y asigna el "~" carácter a su <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propiedad. El ejemplo utiliza este objeto personalizado así como el <xref:System.Globalization.NumberFormatInfo> objeto de la referencia cultural invariable para dar formato a una serie de <xref:System.SByte> valores.  
  
 [!code-csharp[System.SByte.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.ToString/CS/tostring3.cs#3)]
 [!code-vb[System.SByte.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.ToString/VB/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="sbyte.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom numeric format string.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>
        <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.SByte.ToString%28System.String%29> método formatos un <xref:System.SByte> valor en un formato especificado usando las convenciones de la referencia cultural actual. Si desea utilizar el valor predeterminado ("G" o general) dar formato o especificar una referencia cultural diferente, use las otras sobrecargas de la <xref:System.SByte.ToString%2A> método, tal como se indica a continuación:  
  
|Usar formato|Para la referencia cultural|Use la sobrecarga|  
|-------------------|-----------------|----------------------|  
|Formato predeterminado ("G")|Referencia cultural predeterminada de (actual).|<xref:System.SByte.ToString>|  
|Formato predeterminado ("G")|Una referencia cultural específica|<xref:System.SByte.ToString%28System.IFormatProvider%29>|  
|Un formato concreto|Una referencia cultural específica|<xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 El `format` parámetro puede ser cualquier especificador de formato numérico estándar válido, o cualquier combinación de especificadores de formato numérico personalizado. Si `format` es igual a <xref:System.String.Empty?displayProperty=nameWithType> o `null`, el valor devuelto de la actual <xref:System.SByte> objeto está formateado con el especificador de formato general ("G"). Si `format` es cualquier otro valor, el método produce una <xref:System.FormatException>.  
  
 .NET Framework proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información sobre la compatibilidad con el formato de .NET Framework, vea [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El formato de la cadena devuelta está determinado por la <xref:System.Globalization.NumberFormatInfo> objeto para la referencia cultural actual. En función de la `format` parámetro, este objeto controla símbolos como el signo negativo, el separador de grupos y el símbolo de separador decimal en la cadena de salida. Para proporcionar información de formato para las referencias culturales distintas de la referencia cultural actual, llame a la <xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29> de sobrecarga.  
  
   
  
## Examples  
 En el ejemplo siguiente se inicializa una matriz de <xref:System.SByte> valores y las muestra mediante el uso de las cadenas de formato estándar y algunas cadenas de formato personalizado.  
  
 [!code-csharp[System.SByte.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.ToString/CS/tostring4.cs#4)]
 [!code-vb[System.SByte.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.ToString/VB/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="sbyte.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom numeric format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29> método formatos un <xref:System.SByte> valor en un formato específico de la referencia cultural especificada. Si desea utilizar la configuración predeterminada de formato o la referencia cultural, use las otras sobrecargas de la <xref:System.SByte.ToString%2A> método, tal como se indica a continuación:  
  
|Usar formato|Para la referencia cultural|Use la sobrecarga|  
|-------------------|-----------------|----------------------|  
|Formato predeterminado ("G")|Referencia cultural predeterminada de (actual).|<xref:System.SByte.ToString>|  
|Formato predeterminado ("G")|Una referencia cultural específica|<xref:System.SByte.ToString%28System.IFormatProvider%29>|  
|Un formato concreto|Referencia cultural predeterminada de (actual).|<xref:System.SByte.ToString%28System.String%29>|  
  
 El `format` parámetro puede ser cualquier especificador de formato numérico estándar válido, o cualquier combinación de especificadores de formato numérico personalizado. Si `format` es igual a <xref:System.String.Empty?displayProperty=nameWithType> o `null`, el valor devuelto de la actual <xref:System.SByte> objeto está formateado con el especificador de formato general ("G"). Si `format` es cualquier otro valor, el método produce una <xref:System.FormatException>.  
  
 .NET Framework proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información sobre la compatibilidad con el formato de .NET Framework, vea [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `provider` parámetro es un <xref:System.IFormatProvider> implementación. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información específica de la referencia cultural acerca del formato de la cadena devuelta por este método. Cuando el <xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29> se invoca el método, llama la `provider` del parámetro <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> método y le pasa un <xref:System.Type> objeto que representa el <xref:System.Globalization.NumberFormatInfo> tipo. El <xref:System.IFormatProvider.GetFormat%2A> método, a continuación, devuelve el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información para dar formato a la `value` parámetro, como el símbolo de signo negativo, el símbolo de separador de grupos o el símbolo de separador decimal. Hay tres formas de utilizar el `provider` parámetro para proporcionar información de formato para el <xref:System.SByte.ToString%28System.String%2CSystem.IFormatProvider%29> método:  
  
-   Puede pasar un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural que proporciona información de formato. Su <xref:System.Globalization.CultureInfo.GetFormat%2A> método devuelve el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato numérico para esa referencia cultural.  
  
-   Puede pasar los datos reales <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato numérico. (Su implementación de <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> simplemente devuelve a sí mismo.)  
  
-   Puede pasar un objeto personalizado que implementa <xref:System.IFormatProvider>. Su <xref:System.IFormatProvider.GetFormat%2A> método crea y devuelve el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el formato de la cadena devuelta se basa en la <xref:System.Globalization.NumberFormatInfo> objeto de la referencia cultural actual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un positivo y negativo <xref:System.SByte> valor utilizando los especificadores de formato numérico estándar y un número específico del <xref:System.Globalization.CultureInfo> objetos.  
  
 [!code-csharp[System.SByte.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.ToString/CS/tostring5.cs#5)]
 [!code-vb[System.SByte.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.ToString/VB/tostring5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="sbyte.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a number to its 8-bit signed integer equivalent. A return code indicates whether the conversion succeeded or failed.</summary>
        <altmember cref="Overload:System.SByte.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out sbyte result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] int8&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] System::SByte % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.sbyte.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.SByte&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out sbyte result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] int8&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.TryParse(System.String,System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] System::SByte % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.sbyte.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.SByte&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a number to convert.</param>
        <param name="result">When this method returns, contains the 8-bit signed integer value that is equivalent to the number contained in <c>s</c> if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in the correct format, or represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</param>
        <summary>Tries to convert the string representation of a number to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.SByte.TryParse%28System.String%2CSystem.SByte%40%29?displayProperty=nameWithType> método es similar a la <xref:System.SByte.Parse%28System.String%29?displayProperty=nameWithType> método, salvo que TI no produce una excepción si se produce un error en la conversión. Este método elimina la necesidad de utilizar el control de excepciones para probar una <xref:System.FormatException> si `value` no es válido y no se puede analizar correctamente.  
  
 El `s` parámetro debe ser la representación de cadena de un número decimal en el formato siguiente:  
  
 [*ws*] [*inicio de sesión*]*dígitos*[*ws*]  
  
 Los elementos de los corchetes ([ y ]) son opcionales. En esta tabla se describe cada elemento.  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|*ws*|Espacio en blanco opcional.|  
|*sign*|Un signo opcional. Caracteres de signo válidos se determinan mediante la <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> y <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> propiedades de la referencia cultural actual.|  
|*digits*|Una secuencia de dígitos decimales comprendidos entre 0 y 9.|  
  
> [!NOTE]
>  La cadena especificada por el `value` parámetro no puede contener cualquier separador de grupo o separador decimal y no puede tener una parte decimal.  
  
 El `s` parámetro se interpreta usando el <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> estilo. Además de los dígitos decimales, se permiten solo espacios iniciales y finales con un signo inicial. Para definir explícitamente los elementos de estilo con la información de formato específica de la referencia cultural que pueden estar presentes en `value`, llame a la <xref:System.SByte.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.SByte%40%29> método.  
  
 El `s` parámetro se analiza utilizando la información de formato en un <xref:System.Globalization.NumberFormatInfo> objeto para la referencia cultural actual. Para obtener más información, consulta <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.  
  
 Esta sobrecarga interpreta todos los dígitos en el `value` parámetro como dígitos decimales. Para analizar la representación de cadena de un número hexadecimal, llame a la <xref:System.SByte.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.SByte%40%29> sobrecarga en su lugar.  
  
   
  
## Examples  
 En el ejemplo siguiente se intenta convertir las cadenas de una matriz en <xref:System.SByte> valores mediante una llamada a la <xref:System.SByte.TryParse%28System.String%2CSystem.SByte%40%29> método.  
  
 [!code-csharp[System.SByte.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.SByte.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out sbyte result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int8&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::SByte % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.sbyte.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.SByte&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out sbyte result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int8&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] System::SByte % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.sbyte.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.SByte&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string representing a number to convert.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="result">When this method returns, contains the 8-bit signed integer value equivalent to the number contained in <c>s</c>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <c>style</c>, or represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</param>
        <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.SByte.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.SByte%40%29> método es similar a la <xref:System.SByte.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> método, salvo que TI no produce una excepción si se produce un error en la conversión. Este método elimina la necesidad de utilizar el control de excepciones para probar una <xref:System.FormatException> si `value` no es válido y no se puede analizar correctamente.  
  
 El `style` parámetro define los elementos de estilo (como espacios en blanco o un signo positivo o negativo) que se permiten en la `value` parámetro para la operación de análisis se realice correctamente. Debe ser una combinación de marcadores de bits de la <xref:System.Globalization.NumberStyles> enumeración. Dependiendo del valor de `style`, el `value` parámetro puede incluir los siguientes elementos:  
  
 [*ws*] [*$*] [*inicio de sesión*] [*dígitos*,]*dígitos*[.* dígitos fraccionarios*] [E [*inicio de sesión*]*dígitos exponenciales*] [*ws*]  
  
 Si el `style` parámetro incluye <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, el `value` parámetro puede incluir los siguientes elementos:  
  
 [*ws*]*dígitos hexadecimales*[*ws*]  
  
 Los elementos de los corchetes ([ y ]) son opcionales. En esta tabla se describe cada elemento.  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|*ws*|Espacio en blanco opcional. Espacio en blanco puede aparecer al principio de `value` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> marca, o al final de `value` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> marca.|  
|*$*|Un símbolo de moneda específico de la referencia cultural. Su posición en la cadena viene definida por el <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> propiedad de la <xref:System.Globalization.NumberFormatInfo> objeto devuelto por la <xref:System.IFormatProvider.GetFormat%2A> método de la `provider` parámetro. El símbolo de moneda puede aparecer en `value` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> marca.|  
|*sign*|Un signo opcional. El signo puede aparecer al principio de `value` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> marca y pueden aparecer al final de `value` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> marca. Se pueden utilizar paréntesis en `value` para indicar un valor negativo si `style` incluye la <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> marca.|  
|*digits*|Una secuencia de dígitos comprendido entre 0 y 9.|  
|*,*|Separador de grupos de referencias culturales específicas. El separador de grupos de la referencia cultural especificada por `provider` pueden aparecer en `value` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> marca.|  
|*.*|Un símbolo de separador decimal de referencias culturales específicas. El símbolo de separador decimal de la referencia cultural especificada por `provider` pueden aparecer en `value` si `style` incluye la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> marca.|  
|*dígitos fraccionarios*|Una o más apariciones del dígito 0. Pueden aparecer dígitos fraccionarios en `value` solo si `style` incluye la <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> marca.|  
|E|La "e" o el carácter "E", lo que indica que el valor se representa en notación exponencial (científica). El `value` parámetro puede representar un número en notación exponencial si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca.|  
|*dígitos exponenciales*|Una secuencia de dígitos comprendido entre 0 y 9. El `value` parámetro puede representar un número en notación exponencial si `style` incluye la <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> marca.|  
|*dígitos hexadecimales*|Una secuencia de dígitos hexadecimales de 0 a f o 0 hasta la f el.|  
  
 Una cadena únicamente por dígitos decimales (que corresponde a la <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> marca) siempre se analiza correctamente. La mayoría de las restantes <xref:System.Globalization.NumberStyles> miembros controlan los elementos que pueden estar presentes, pero no tienen que estar presentes en esta cadena de entrada. La tabla siguiente se indica cómo individuales <xref:System.Globalization.NumberStyles> miembros afectan a los elementos que pueden estar presentes en `value`.  
  
|No compuestos `NumberStyles` valores|Elementos permitidos en valor además de dígitos|  
|------------------------------------------|-------------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|Dígitos decimales.|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|El separador decimal (*.*) y *dígitos fraccionarios* elementos. Sin embargo, *dígitos fraccionarios* debe constar de uno o más dígitos 0 o el método devuelve `false`.|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|La "e" o el carácter "E", que indica notación exponencial, junto con *dígitos exponenciales*. Si `value` representa un número en notación exponencial, no puede tener un componente fraccionario distinto de cero.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|El *ws* elemento situado al principio de `value`.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|El *ws* elemento situado al final de `value`.|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|El *inicio de sesión* elemento antes de *dígitos*.|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|El *inicio de sesión* elemento tras *dígitos*.|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|El *inicio de sesión* elemento en forma de paréntesis delimitando el valor numérico.|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|El separador de grupos (*,*) elemento.|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|La moneda (*$*) elemento.|  
|<xref:System.Globalization.NumberStyles.Currency>|Todos los elementos. Sin embargo, `value` no puede representar un número hexadecimal o un número en notación exponencial.|  
|<xref:System.Globalization.NumberStyles.Float>|El *ws* elemento al principio o al final de `value`, *inicio de sesión* al principio de `value`y el separador decimal (*.*) símbolo. El `value` parámetro también puede utilizar la notación exponencial.|  
|<xref:System.Globalization.NumberStyles.Number>|El *ws*, *inicio de sesión*, separador de grupos (*,*) y el separador decimal (*.*) elementos.|  
|<xref:System.Globalization.NumberStyles.Any>|Todos los elementos. Sin embargo, `value` no puede representar un número hexadecimal.|  
  
 Si el <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> se utiliza la marca, `value` debe ser un valor hexadecimal. Dígitos hexadecimales válidos son 0-9, a-f y A-F. Los únicos otros marcadores que pueden estar presentes en `style` son <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> y <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>. (El <xref:System.Globalization.NumberStyles> enumeración tiene un estilo compuesto, <xref:System.Globalization.NumberStyles.HexNumber>, que incluye ambos marcadores de espacio en blanco.)  
  
> [!NOTE]
>  Si `value` es la representación de cadena de un número hexadecimal, no se puede ir precedido de ninguna decoración (como `0x` o `&h`) que lo diferencie como un número hexadecimal. Esto provoca un error de conversión.  
  
 El `provider` parámetro es un <xref:System.IFormatProvider> implementación. Su <xref:System.IFormatProvider.GetFormat%2A> método devuelve un <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información específica de la referencia cultural acerca del formato de `value`. El `provider` parámetro puede ser cualquiera de las siguientes acciones:  
  
-   Un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural que proporciona información de formato. Su <xref:System.Globalization.CultureInfo.GetFormat%2A> método devuelve el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato numérico para esa referencia cultural.  
  
-   Un <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato numérico. (Su implementación de <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> simplemente devuelve a sí mismo.)  
  
-   Un objeto personalizado que implementa <xref:System.IFormatProvider>. Su <xref:System.IFormatProvider.GetFormat%2A> método crea y devuelve el <xref:System.Globalization.NumberFormatInfo> objeto que proporciona información de formato.  
  
 Si `provider` es `null`, el <xref:System.Globalization.NumberFormatInfo> se usa la referencia cultural actual del objeto.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.SByte.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.SByte%40%29> método con un número de otra cadena y <xref:System.Globalization.NumberStyles> valores.  
  
 [!code-csharp[System.SByte.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.SByte.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.SByte.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.SByte.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Int16.TryParse(System.String,System.Int16@)" />
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.  -or-  <paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
        <altmember cref="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>