<Type Name="IComparable" FullName="System.IComparable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8f557e994926a1defd28f5baf14b4c7ba5a4b70" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430827" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable" />
  <TypeSignature Language="DocId" Value="T:System.IComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define un método de comparación generalizado y específico del tipo que un tipo de valor o una clase implementa para ordenar sus instancias.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta interfaz se implementa mediante tipos cuyos valores se pueden ordenar. Requiere que implementar los tipos definan un único método, <xref:System.IComparable.CompareTo%28System.Object%29>, que indica si la posición de la instancia actual en el criterio de ordenación es anterior, posterior o igual que un segundo objeto del mismo tipo. La instancia <xref:System.IComparable> implementación se llama automáticamente a métodos como <xref:System.Array.Sort%2A?displayProperty=nameWithType> y <xref:System.Collections.ArrayList.Sort%2A?displayProperty=nameWithType>.  
  
 La implementación de la <xref:System.IComparable.CompareTo%28System.Object%29> método debe devolver un <xref:System.Int32> que tiene uno de estos tres valores, como se muestra en la tabla siguiente.  
  
|Valor|Significado|  
|-----------|-------------|  
|Menor que cero|La instancia actual precede el objeto especificado por el <xref:System.IComparable.CompareTo%2A> método en el criterio de ordenación.|  
|Zero|La instancia actual se produce en la misma posición en el criterio de ordenación que el objeto especificado por el <xref:System.IComparable.CompareTo%2A> método.|  
|Mayor que cero|La instancia actual sigue al objeto especificado por el <xref:System.IComparable.CompareTo%2A> método en el criterio de ordenación.|  
  
 Todos los tipos numéricos (como <xref:System.Int32> y <xref:System.Double>) implementar <xref:System.IComparable>, igual que <xref:System.String>, <xref:System.Char>, y <xref:System.DateTime>. Tipos personalizados también deben proporcionar su propia implementación de <xref:System.IComparable> para permitir que las instancias de objeto ordenar.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra la implementación de <xref:System.IComparable> y el requisito <xref:System.IComparable.CompareTo%2A> método.  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int" Usage="iComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objeto que se va a comparar con esta instancia.</param>
        <summary>Compara la instancia actual con otro objeto del mismo tipo y devuelve un entero que indica si la posición de la instancia actual es anterior, posterior o igual que la del otro objeto en el criterio de ordenación.</summary>
        <returns>Un valor que indica el orden relativo de los objetos que se están comparando. El valor devuelto tiene los siguientes significados: <list type="table"><listheader><term> Valor </term><description> Significado </description></listheader><item><term> Menor que cero </term><description> Esta instancia precede a <paramref name="obj" /> en el criterio de ordenación.  </description></item><item><term> Cero </term><description> Esta instancia se produce en la misma posición del criterio de ordenación que <paramref name="obj" />.  </description></item><item><term> Mayor que cero </term><description> Esta instancia sigue a <paramref name="obj" /> en el criterio de ordenación. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IComparable.CompareTo%2A> método lo implementa tipos cuyos valores se pueden ordenar. Se llama automáticamente por métodos de colección no genérica de objetos, como <xref:System.Array.Sort%2A?displayProperty=nameWithType>, para ordenar cada miembro de la matriz. Si una clase o estructura personalizada no implementa <xref:System.IComparable>, no se puede ordenar sus miembros y la operación de ordenación puede producir un <xref:System.InvalidOperationException>.  
  
 Este método es solo una definición y debe implementarse mediante un tipo específico de clase o valor tenga efecto. El significado de las comparaciones especificado en la sección ("precede a", "aparece en la misma posición que" y "sigue") depende de la implementación concreta de valor devuelto.  
  
 Por definición, cualquier objeto compara mayor que (o posterior) `null`, y dos referencias nulas son iguales entre sí.  
  
 El parámetro `obj`, debe ser del mismo tipo que la clase o tipo de valor que implementa esta interfaz; en caso contrario, un <xref:System.ArgumentException> se produce.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de <xref:System.IComparable.CompareTo%2A> para comparar un `Temperature` objeto que implementa <xref:System.IComparable> con otro objeto. El `Temperature` objeto implementa <xref:System.IComparable.CompareTo%2A> ajustando simplemente una llamada a la <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> método.  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> no es del mismo tipo que esta instancia.</exception>
        <block subset="none" type="overrides">
          <para>Para los objetos A, B y C, deben cumplirse los siguientes: <c>a.CompareTo (a)</c> debe devolver cero.  Si <c>a.CompareTo (b)</c> , a continuación, devuelve cero <c>B.CompareTo</c> debe devolver cero.  Si <c>a.CompareTo (b)</c> devuelve cero y <c>b.CompareTo (c)</c> , a continuación, devuelve cero <c>a.CompareTo (c)</c> debe devolver cero.  Si <c>a.CompareTo (b)</c> devuelve un valor distinto de cero, a continuación, <c>B.CompareTo</c> debe devolver un valor de signo contrario.  Si <c>a.CompareTo (b)</c> devuelve un valor <paramref name="x" /> no es igual a cero, y <c>b.CompareTo (c)</c> devuelve un valor <paramref name="y" /> del mismo signo que <paramref name="x" />, a continuación, <c>A. CompareTo(C)</c> debe devolver un valor del mismo signo que <paramref name="x" /> y <paramref name="y" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Use la <see cref="M:System.IComparable.CompareTo(System.Object)" /> método para determinar el orden de instancias de una clase.</para>
        </block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
  </Members>
</Type>