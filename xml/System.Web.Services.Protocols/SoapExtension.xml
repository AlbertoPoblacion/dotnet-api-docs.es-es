<Type Name="SoapExtension" FullName="System.Web.Services.Protocols.SoapExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="78693401e78bfd83c0c064c1b8ffff53187f54ea" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51862388" /></Metadata><TypeSignature Language="C#" Value="public abstract class SoapExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SoapExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapExtension abstract" />
  <TypeSignature Language="F#" Value="type SoapExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Clase base de las extensiones SOAP para los servicios Web XML creados mediante ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET permite una infraestructura relacionado con SOAP que se crea mediante un mecanismo de extensibilidad. La arquitectura de extensión SOAP de ASP.NET se gira en torno a una extensión que puede inspeccionar o modificar un mensaje en fases específicas del procesamiento de mensajes en el cliente o el servidor.  
  
 Las extensiones SOAP de ASP.NET se derivan de la <xref:System.Web.Services.Protocols.SoapExtension> clase. El <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> y <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> métodos proporcionan mecanismos alternativos para inicializar la extensión SOAP para mejorar el rendimiento. <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> es el corazón de la mayoría de las extensiones SOAP, tal como se llama al método en cada fase definida en <xref:System.Web.Services.Protocols.SoapMessageStage>, lo que permite la extensión SOAP para realizar el comportamiento deseado de esa extensión SOAP específica. Para las extensiones SOAP que deben modifican la solicitud o respuesta SOAP, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> proporciona una oportunidad para recibir los datos propuestos para enviarse a través de la conexión.  
  
   
  
## Examples  
 La siguiente `TraceExtension` extensión SOAP envía la solicitud y respuesta SOAP en un archivo especificado cuando se aplica a un método de servicios Web XML. Si la extensión SOAP siguiente está instalada para ejecutarse con un servicio Web XML, la cuenta de usuario ASPNET debe tener permiso para escribir en el directorio en el que se escribe el archivo de registro.  
  
 [!code-cpp[Classic SoapExtension Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoapExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Services.Protocols.SoapExtension" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChainStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream ChainStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream ChainStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ ChainStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ChainStream : System.IO.Stream -&gt; System.IO.Stream&#xA;override this.ChainStream : System.IO.Stream -&gt; System.IO.Stream" Usage="soapExtension.ChainStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Búfer de memoria que contiene la solicitud o respuesta SOAP.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que una extensión SOAP tenga acceso al búfer de memoria que contiene la solicitud o respuesta SOAP.</summary>
        <returns><see cref="T:System.IO.Stream" /> que representa un nuevo búfer de memoria que esta extensión SOAP puede modificar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> garantiza que las extensiones SOAP con la prioridad más alta pueden modificar los datos reales más cercanos al mensaje SOAP enviado o devuelto a través del cable.  
  
 Las extensiones SOAP deben guardar las referencias de la <xref:System.IO.Stream> pasó <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> y <xref:System.IO.Stream> devuelto desde <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>. Si la extensión SOAP se configura para ejecutarse con un método de servicio Web XML, el <xref:System.IO.Stream> pasó <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> contiene la solicitud SOAP serializada en el <xref:System.Web.Services.Protocols.SoapMessageStage.BeforeDeserialize> <xref:System.Web.Services.Protocols.SoapMessageStage>. De forma similar, el <xref:System.IO.Stream> referencia devuelto desde <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> se escribe cuando se produce de la serialización y, por tanto, contiene la respuesta SOAP serializada en el <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage>.  
  
   
  
## Examples  
 En el ejemplo siguiente se guarda tanto la <xref:System.IO.Stream> pasó <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> y <xref:System.IO.Stream> devuelto desde <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> en las variables de miembro `oldStream` y `newStream`, respectivamente.  
  
 [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, permite que una extensión SOAP inicialice los datos específicos de un método de servicios Web XML con un solo costo de rendimiento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : Type -&gt; obj" Usage="soapExtension.GetInitializer serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Tipo de la clase que implementa el servicio Web XML al que se aplica la extensión SOAP.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que una extensión SOAP inicialice los datos específicos de una clase que implementa un servicio Web XML con un solo costo de rendimiento.</summary>
        <returns><see cref="T:System.Object" /> que la extensión SOAP inicializa para el almacenamiento en caché.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La sobrecarga de <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> que obtiene lo llama ASP.NET depende de cómo se ha especificado la extensión SOAP. Hay dos métodos para especificar una extensión SOAP:  
  
-   Aplicar un atributo personalizado, derivado de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, al método de servicio Web XML individual.  
  
-   Agregue una referencia en los archivos de configuración web.config o app.config.  
  
 Si agrega una referencia a uno de los archivos de configuración, la extensión SOAP se ejecuta para todos los servicios Web XML dentro del ámbito de ese archivo de configuración. Cuando se especifica una extensión SOAP haciendo referencia a un archivo de configuración, ASP.NET invoca el <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> sobrecarga que pasa en un <xref:System.Type>. Cuando se especifica una extensión aplicando un atributo personalizado, ASP.NET invoca el <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> que pasa de un <xref:System.Web.Services.Protocols.LogicalMethodInfo> y un <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.  
  
 Para obtener más información sobre cómo agregar extensiones SOAP a un archivo de configuración, consulte [ &#91; \<topic://cpconconfigurationoptionsforaspnetwebservices >&#93;](https://msdn.microsoft.com/library/1f0d71bc-8faa-4730-b500-2a6c7b5d4f6b).  
  
   
  
## Examples  
 El código siguiente muestra cómo guardar datos específicos de extensión SOAP en una por cada servicio Web XML. Si la extensión SOAP se configura mediante un archivo de configuración en lugar de un atributo, la extensión SOAP puede almacenar datos para cada clase a la que se aplica la extensión SOAP. En este ejemplo se guarda el nombre de un archivo en el que se va a registrar los mensajes SOAP enviados hacia y desde el método de servicio Web XML basado en el nombre de la clase que implementa el servicio Web XML en la memoria caché. Este ejemplo de código forma parte de un ejemplo de código completo de una extensión SOAP TraceExtension que puede encontrarse en el <xref:System.Web.Services.Protocols.SoapExtension> información general de clases.  
  
 [!code-cpp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CPP/traceextension.cpp#1)]
 [!code-csharp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CS/traceextension.cs#1)]
 [!code-vb[SoapExtension.GetInitializer-Type#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/VB/traceextension.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo, class System.Web.Services.Protocols.SoapExtensionAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo, attribute As SoapExtensionAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo, System::Web::Services::Protocols::SoapExtensionAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo * System.Web.Services.Protocols.SoapExtensionAttribute -&gt; obj" Usage="soapExtension.GetInitializer (methodInfo, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
        <Parameter Name="attribute" Type="System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Parameters>
      <Docs>
        <param name="methodInfo"><see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> que representa el prototipo de función específico del método de servicios Web XML al que se aplica la extensión SOAP.</param>
        <param name="attribute"><see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" /> que se aplica al método de servicios Web XML.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que una extensión SOAP inicialice los datos específicos de un método de servicios Web XML utilizando un atributo que se aplica al método de servicios Web XML con un solo costo de rendimiento.</summary>
        <returns><see cref="T:System.Object" /> que la extensión SOAP inicializa para el almacenamiento en caché.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la extensión SOAP se configura mediante un archivo de configuración, vea el <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> sobrecarga que acepta un <xref:System.Type>.  
  
 Una extensión SOAP tiene tres oportunidades para inicializar los datos y todos tienen distintos fines:  
  
-   Constructor de clase: se llama al constructor de clase cada vez que se crea una instancia de una extensión SOAP y se utiliza normalmente para inicializar las variables miembro.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, sin embargo, se llama solo una vez, la primera vez que se realiza una solicitud SOAP a una Web de XML de método de servicios. Si un atributo personalizado se aplica al método de servicios Web XML, el <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> se invoca el método. Esto permite que la extensión SOAP para interrogar los <xref:System.Web.Services.Protocols.LogicalMethodInfo> de un método de servicios Web XML para obtener información de prototipo o para tener acceso a datos específica de la extensión que se pasan por una clase que deriva de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. El valor devuelto se almacena en caché por ASP.NET y pasa a los siguientes <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> métodos. Por lo tanto, la inicialización que se realiza <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> se reduce esencialmente a una disminución del rendimiento de un solo uso.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> se llama cada vez que una solicitud SOAP se realiza a un método de servicios Web XML, pero tiene una ventaja sobre el constructor de clase, en el que el <xref:System.Object> inicializado en <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> se pasa a él.  
  
   
  
## Examples  
 El código siguiente muestra cómo puede obtener los datos específicos de una extensión SOAP pasados mediante una clase que derive de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>y, a continuación, almacenar en caché esos datos en <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>. Este ejemplo de código forma parte de un ejemplo de código completo de un `TraceExtension` extensión SOAP que puede encontrarse en el <xref:System.Web.Services.Protocols.SoapExtension> información general de clases. Este ejemplo de código se basa en un `TraceExtensionAttribute` se pasan a la `attribute` parámetro. En el ejemplo de código completo, `TraceExtensionAttribute` deriva <xref:System.Web.Services.Protocols.SoapExtensionAttribute> y agrega un `Filename` propiedad, que es lo que <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> almacena en la memoria caché.  
  
 [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
        <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="soapExtension.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer"><see cref="T:System.Object" /> devuelto por el método <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" /> almacenado en caché por ASP.NET.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que una extensión SOAP se inicialice utilizando los datos almacenados en caché en el método <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una extensión SOAP tiene tres oportunidades para inicializar los datos y todos tienen distintos fines:  
  
-   Constructor de clase: se llama al constructor de clase cada vez que se crea una instancia de una extensión SOAP y se utiliza normalmente para inicializar las variables miembro.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, sin embargo, se llama solo una vez, la primera vez que se realiza una solicitud SOAP a una Web de XML de método de servicios. Si un atributo personalizado se aplica al método de servicios Web XML, el <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> se invoca el método. Esto permite que la extensión SOAP para interrogar los <xref:System.Web.Services.Protocols.LogicalMethodInfo> de un método de servicios Web XML para obtener información de prototipo o para tener acceso a datos específica de la extensión que se pasan por una clase que deriva de <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. El valor devuelto se almacena en caché por ASP.NET y pasa a los siguientes <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> métodos. Por lo tanto, la inicialización que se realiza <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> se reduce esencialmente a una disminución del rendimiento de un solo uso.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> se llama cada vez que una solicitud SOAP se realiza a un método de servicios Web XML, pero tiene una ventaja sobre el constructor de clase, en el que el <xref:System.Object> inicializado en <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> se pasa a él.  
  
-  
  
> [!NOTE]
>  También puede agregar una extensión SOAP sin derivar de <xref:System.Web.Services.Protocols.SoapExtensionAttribute> utilizando el [ \<soapExtensionTypes > elemento](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) en un archivo de configuración. Para obtener más información, consulte [ \<soapExtensionTypes > elemento](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) y [mensaje modificación SOAP usando extensiones SOAP](https://msdn.microsoft.com/library/97d81ace-95e7-4acc-ae39-9692a0021e95).  
  
-  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo puede usar los datos almacenados en caché durante el <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> método.  
  
 [!code-cpp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.Initialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessMessage(class System.Web.Services.Protocols.SoapMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ProcessMessage (message As SoapMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ProcessMessage(System::Web::Services::Protocols::SoapMessage ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMessage : System.Web.Services.Protocols.SoapMessage -&gt; unit" Usage="soapExtension.ProcessMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapMessage" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Web.Services.Protocols.SoapMessage" /> para procesar.</param>
        <summary>Cuando se reemplaza en una clase derivada, permite que la extensión SOAP reciba <see cref="T:System.Web.Services.Protocols.SoapMessage" /> que se va a procesar en cada <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> se llama en absoluto <xref:System.Web.Services.Protocols.SoapMessageStage> fases para las extensiones SOAP que se aplican a ambos servicios Web XML creados con ASP.NET y sus clientes. En cada <xref:System.Web.Services.Protocols.SoapMessageStage>, una instancia de una clase que deriva de <xref:System.Web.Services.Protocols.SoapMessage> se pasa a <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>. Si la extensión SOAP se ejecuta en el cliente del servicio Web XML, a continuación, un <xref:System.Web.Services.Protocols.SoapClientMessage> objeto se pasa a <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>; en caso contrario, un <xref:System.Web.Services.Protocols.SoapServerMessage> objeto se pasa.  
  
   
  
## Examples  
 El ejemplo siguiente es el <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> parte de una extensión SOAP que registra solicitudes y respuestas SOAP. Iniciando sesión el <xref:System.Web.Services.Protocols.SoapMessage> en el <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage>, los accesos de extensión SOAP el <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> para enviarse a través del cable. Si la extensión SOAP se aplica a un método de servicios Web XML creado con ASP.NET, el <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contiene la respuesta SOAP del método de servicio Web XML. Si la extensión SOAP se aplica a un cliente de servicios Web XML, el <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contiene la solicitud SOAP a un método de servicios Web XML.  
  
 Ejemplo 1 de SoapExtension.ProcessMessage clásico  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>